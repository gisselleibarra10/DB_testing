// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCostEstimationOutputResponseBody: Swift.Equatable {
    let resourceCollection: DevOpsGuruClientTypes.CostEstimationResourceCollectionFilter?
    let status: DevOpsGuruClientTypes.CostEstimationStatus?
    let costs: [DevOpsGuruClientTypes.ServiceResourceCost]?
    let timeRange: DevOpsGuruClientTypes.CostEstimationTimeRange?
    let totalCost: Swift.Double
    let nextToken: Swift.String?
}

extension GetCostEstimationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case costs = "Costs"
        case nextToken = "NextToken"
        case resourceCollection = "ResourceCollection"
        case status = "Status"
        case timeRange = "TimeRange"
        case totalCost = "TotalCost"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.CostEstimationResourceCollectionFilter.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.CostEstimationStatus.self, forKey: .status)
        status = statusDecoded
        let costsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.ServiceResourceCost?].self, forKey: .costs)
        var costsDecoded0:[DevOpsGuruClientTypes.ServiceResourceCost]? = nil
        if let costsContainer = costsContainer {
            costsDecoded0 = [DevOpsGuruClientTypes.ServiceResourceCost]()
            for structure0 in costsContainer {
                if let structure0 = structure0 {
                    costsDecoded0?.append(structure0)
                }
            }
        }
        costs = costsDecoded0
        let timeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.CostEstimationTimeRange.self, forKey: .timeRange)
        timeRange = timeRangeDecoded
        let totalCostDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .totalCost) ?? 0.0
        totalCost = totalCostDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
