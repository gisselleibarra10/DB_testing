// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFHIRDatastoreInputBody: Swift.Equatable {
    let datastoreName: Swift.String?
    let datastoreTypeVersion: HealthLakeClientTypes.FHIRVersion?
    let sseConfiguration: HealthLakeClientTypes.SseConfiguration?
    let preloadDataConfig: HealthLakeClientTypes.PreloadDataConfig?
    let clientToken: Swift.String?
    let tags: [HealthLakeClientTypes.Tag]?
}

extension CreateFHIRDatastoreInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datastoreName = "DatastoreName"
        case datastoreTypeVersion = "DatastoreTypeVersion"
        case preloadDataConfig = "PreloadDataConfig"
        case sseConfiguration = "SseConfiguration"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datastoreNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datastoreName)
        datastoreName = datastoreNameDecoded
        let datastoreTypeVersionDecoded = try containerValues.decodeIfPresent(HealthLakeClientTypes.FHIRVersion.self, forKey: .datastoreTypeVersion)
        datastoreTypeVersion = datastoreTypeVersionDecoded
        let sseConfigurationDecoded = try containerValues.decodeIfPresent(HealthLakeClientTypes.SseConfiguration.self, forKey: .sseConfiguration)
        sseConfiguration = sseConfigurationDecoded
        let preloadDataConfigDecoded = try containerValues.decodeIfPresent(HealthLakeClientTypes.PreloadDataConfig.self, forKey: .preloadDataConfig)
        preloadDataConfig = preloadDataConfigDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([HealthLakeClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[HealthLakeClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [HealthLakeClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
