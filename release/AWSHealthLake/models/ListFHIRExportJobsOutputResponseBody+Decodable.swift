// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListFHIRExportJobsOutputResponseBody: Swift.Equatable {
    let exportJobPropertiesList: [HealthLakeClientTypes.ExportJobProperties]?
    let nextToken: Swift.String?
}

extension ListFHIRExportJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportJobPropertiesList = "ExportJobPropertiesList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportJobPropertiesListContainer = try containerValues.decodeIfPresent([HealthLakeClientTypes.ExportJobProperties?].self, forKey: .exportJobPropertiesList)
        var exportJobPropertiesListDecoded0:[HealthLakeClientTypes.ExportJobProperties]? = nil
        if let exportJobPropertiesListContainer = exportJobPropertiesListContainer {
            exportJobPropertiesListDecoded0 = [HealthLakeClientTypes.ExportJobProperties]()
            for structure0 in exportJobPropertiesListContainer {
                if let structure0 = structure0 {
                    exportJobPropertiesListDecoded0?.append(structure0)
                }
            }
        }
        exportJobPropertiesList = exportJobPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
