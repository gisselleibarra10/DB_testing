// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension BatchClientTypes {
    /// An object representing the details of an Batch job queue.
    public struct JobQueueDetail: Swift.Equatable {
        /// The compute environments that are attached to the job queue and the order that job placement is preferred. Compute environments are selected for job placement in ascending order.
        /// This member is required.
        public var computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]?
        /// The Amazon Resource Name (ARN) of the job queue.
        /// This member is required.
        public var jobQueueArn: Swift.String?
        /// The name of the job queue.
        /// This member is required.
        public var jobQueueName: Swift.String?
        /// The priority of the job queue. Job queues with a higher priority (or a higher integer value for the priority parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order, for example, a job queue with a priority value of 10 is given scheduling preference over a job queue with a priority value of 1. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT); EC2 and Fargate compute environments can't be mixed.
        /// This member is required.
        public var priority: Swift.Int?
        /// The Amazon Resource Name (ARN) of the scheduling policy. The format is aws:Partition:batch:Region:Account:scheduling-policy/Name . For example, aws:aws:batch:us-west-2:012345678910:scheduling-policy/MySchedulingPolicy.
        public var schedulingPolicyArn: Swift.String?
        /// Describes the ability of the queue to accept new jobs. If the job queue state is ENABLED, it's able to accept jobs. If the job queue state is DISABLED, new jobs can't be added to the queue, but jobs already in the queue can finish.
        /// This member is required.
        public var state: BatchClientTypes.JQState?
        /// The status of the job queue (for example, CREATING or VALID).
        public var status: BatchClientTypes.JQStatus?
        /// A short, human-readable string to provide additional details about the current status of the job queue.
        public var statusReason: Swift.String?
        /// The tags applied to the job queue. For more information, see [Tagging your Batch resources](https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html) in Batch User Guide.
        public var tags: [Swift.String:Swift.String]?

        public init (
            computeEnvironmentOrder: [BatchClientTypes.ComputeEnvironmentOrder]? = nil,
            jobQueueArn: Swift.String? = nil,
            jobQueueName: Swift.String? = nil,
            priority: Swift.Int? = nil,
            schedulingPolicyArn: Swift.String? = nil,
            state: BatchClientTypes.JQState? = nil,
            status: BatchClientTypes.JQStatus? = nil,
            statusReason: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.computeEnvironmentOrder = computeEnvironmentOrder
            self.jobQueueArn = jobQueueArn
            self.jobQueueName = jobQueueName
            self.priority = priority
            self.schedulingPolicyArn = schedulingPolicyArn
            self.state = state
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
        }
    }

}
