// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchClientTypes.ContainerOverrides: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command
        case environment
        case instanceType
        case memory
        case resourceRequirements
        case vcpus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for stringlist0 in command {
                try commandContainer.encode(stringlist0)
            }
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environment)
            for environmentvariables0 in environment {
                try environmentContainer.encode(environmentvariables0)
            }
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let memory = self.memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let resourceRequirements = resourceRequirements {
            var resourceRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceRequirements)
            for resourcerequirements0 in resourceRequirements {
                try resourceRequirementsContainer.encode(resourcerequirements0)
            }
        }
        if let vcpus = self.vcpus {
            try encodeContainer.encode(vcpus, forKey: .vcpus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vcpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .vcpus)
        vcpus = vcpusDecoded
        let memoryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memory)
        memory = memoryDecoded
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let environmentContainer = try containerValues.decodeIfPresent([BatchClientTypes.KeyValuePair?].self, forKey: .environment)
        var environmentDecoded0:[BatchClientTypes.KeyValuePair]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [BatchClientTypes.KeyValuePair]()
            for structure0 in environmentContainer {
                if let structure0 = structure0 {
                    environmentDecoded0?.append(structure0)
                }
            }
        }
        environment = environmentDecoded0
        let resourceRequirementsContainer = try containerValues.decodeIfPresent([BatchClientTypes.ResourceRequirement?].self, forKey: .resourceRequirements)
        var resourceRequirementsDecoded0:[BatchClientTypes.ResourceRequirement]? = nil
        if let resourceRequirementsContainer = resourceRequirementsContainer {
            resourceRequirementsDecoded0 = [BatchClientTypes.ResourceRequirement]()
            for structure0 in resourceRequirementsContainer {
                if let structure0 = structure0 {
                    resourceRequirementsDecoded0?.append(structure0)
                }
            }
        }
        resourceRequirements = resourceRequirementsDecoded0
    }
}
