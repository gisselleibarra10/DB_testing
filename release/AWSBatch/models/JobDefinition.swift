// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension BatchClientTypes {
    /// An object representing an Batch job definition.
    public struct JobDefinition: Swift.Equatable {
        /// An object with various properties specific to container-based jobs.
        public var containerProperties: BatchClientTypes.ContainerProperties?
        /// The Amazon Resource Name (ARN) for the job definition.
        /// This member is required.
        public var jobDefinitionArn: Swift.String?
        /// The name of the job definition.
        /// This member is required.
        public var jobDefinitionName: Swift.String?
        /// An object with various properties specific to multi-node parallel jobs. If the job runs on Fargate resources, then you must not specify nodeProperties; use containerProperties instead.
        public var nodeProperties: BatchClientTypes.NodeProperties?
        /// Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see [Job definition parameters](https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html) in the Batch User Guide.
        public var parameters: [Swift.String:Swift.String]?
        /// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. Jobs run on Fargate resources specify FARGATE.
        public var platformCapabilities: [BatchClientTypes.PlatformCapability]?
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks during task creation. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state.
        public var propagateTags: Swift.Bool?
        /// The retry strategy to use for failed jobs that are submitted with this job definition.
        public var retryStrategy: BatchClientTypes.RetryStrategy?
        /// The revision of the job definition.
        /// This member is required.
        public var revision: Swift.Int?
        /// The scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
        public var schedulingPriority: Swift.Int?
        /// The status of the job definition.
        public var status: Swift.String?
        /// The tags applied to the job definition.
        public var tags: [Swift.String:Swift.String]?
        /// The timeout configuration for jobs that are submitted with this job definition. You can specify a timeout duration after which Batch terminates your jobs if they haven't finished.
        public var timeout: BatchClientTypes.JobTimeout?
        /// The type of job definition, either container or multinode. If the job is run on Fargate resources, then multinode isn't supported. For more information about multi-node parallel jobs, see [Creating a multi-node parallel job definition](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html) in the Batch User Guide.
        /// This member is required.
        public var type: Swift.String?

        public init (
            containerProperties: BatchClientTypes.ContainerProperties? = nil,
            jobDefinitionArn: Swift.String? = nil,
            jobDefinitionName: Swift.String? = nil,
            nodeProperties: BatchClientTypes.NodeProperties? = nil,
            parameters: [Swift.String:Swift.String]? = nil,
            platformCapabilities: [BatchClientTypes.PlatformCapability]? = nil,
            propagateTags: Swift.Bool? = nil,
            retryStrategy: BatchClientTypes.RetryStrategy? = nil,
            revision: Swift.Int? = nil,
            schedulingPriority: Swift.Int? = nil,
            status: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            timeout: BatchClientTypes.JobTimeout? = nil,
            type: Swift.String? = nil
        )
        {
            self.containerProperties = containerProperties
            self.jobDefinitionArn = jobDefinitionArn
            self.jobDefinitionName = jobDefinitionName
            self.nodeProperties = nodeProperties
            self.parameters = parameters
            self.platformCapabilities = platformCapabilities
            self.propagateTags = propagateTags
            self.retryStrategy = retryStrategy
            self.revision = revision
            self.schedulingPriority = schedulingPriority
            self.status = status
            self.tags = tags
            self.timeout = timeout
            self.type = type
        }
    }

}
