// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchClientTypes.ComputeResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationStrategy
        case bidPercentage
        case desiredvCpus
        case ec2Configuration
        case ec2KeyPair
        case imageId
        case instanceRole
        case instanceTypes
        case launchTemplate
        case maxvCpus
        case minvCpus
        case placementGroup
        case securityGroupIds
        case spotIamFleetRole
        case subnets
        case tags
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allocationStrategy = self.allocationStrategy {
            try encodeContainer.encode(allocationStrategy.rawValue, forKey: .allocationStrategy)
        }
        if let bidPercentage = self.bidPercentage {
            try encodeContainer.encode(bidPercentage, forKey: .bidPercentage)
        }
        if let desiredvCpus = self.desiredvCpus {
            try encodeContainer.encode(desiredvCpus, forKey: .desiredvCpus)
        }
        if let ec2Configuration = ec2Configuration {
            var ec2ConfigurationContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2Configuration)
            for ec2configurationlist0 in ec2Configuration {
                try ec2ConfigurationContainer.encode(ec2configurationlist0)
            }
        }
        if let ec2KeyPair = self.ec2KeyPair {
            try encodeContainer.encode(ec2KeyPair, forKey: .ec2KeyPair)
        }
        if let imageId = self.imageId {
            try encodeContainer.encode(imageId, forKey: .imageId)
        }
        if let instanceRole = self.instanceRole {
            try encodeContainer.encode(instanceRole, forKey: .instanceRole)
        }
        if let instanceTypes = instanceTypes {
            var instanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceTypes)
            for stringlist0 in instanceTypes {
                try instanceTypesContainer.encode(stringlist0)
            }
        }
        if let launchTemplate = self.launchTemplate {
            try encodeContainer.encode(launchTemplate, forKey: .launchTemplate)
        }
        if let maxvCpus = self.maxvCpus {
            try encodeContainer.encode(maxvCpus, forKey: .maxvCpus)
        }
        if let minvCpus = self.minvCpus {
            try encodeContainer.encode(minvCpus, forKey: .minvCpus)
        }
        if let placementGroup = self.placementGroup {
            try encodeContainer.encode(placementGroup, forKey: .placementGroup)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for stringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(stringlist0)
            }
        }
        if let spotIamFleetRole = self.spotIamFleetRole {
            try encodeContainer.encode(spotIamFleetRole, forKey: .spotIamFleetRole)
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for stringlist0 in subnets {
                try subnetsContainer.encode(stringlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CRType.self, forKey: .type)
        type = typeDecoded
        let allocationStrategyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CRAllocationStrategy.self, forKey: .allocationStrategy)
        allocationStrategy = allocationStrategyDecoded
        let minvCpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minvCpus)
        minvCpus = minvCpusDecoded
        let maxvCpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxvCpus)
        maxvCpus = maxvCpusDecoded
        let desiredvCpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredvCpus)
        desiredvCpus = desiredvCpusDecoded
        let instanceTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceTypes)
        var instanceTypesDecoded0:[Swift.String]? = nil
        if let instanceTypesContainer = instanceTypesContainer {
            instanceTypesDecoded0 = [Swift.String]()
            for string0 in instanceTypesContainer {
                if let string0 = string0 {
                    instanceTypesDecoded0?.append(string0)
                }
            }
        }
        instanceTypes = instanceTypesDecoded0
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let ec2KeyPairDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2KeyPair)
        ec2KeyPair = ec2KeyPairDecoded
        let instanceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceRole)
        instanceRole = instanceRoleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
        let placementGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementGroup)
        placementGroup = placementGroupDecoded
        let bidPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bidPercentage)
        bidPercentage = bidPercentageDecoded
        let spotIamFleetRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spotIamFleetRole)
        spotIamFleetRole = spotIamFleetRoleDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let ec2ConfigurationContainer = try containerValues.decodeIfPresent([BatchClientTypes.Ec2Configuration?].self, forKey: .ec2Configuration)
        var ec2ConfigurationDecoded0:[BatchClientTypes.Ec2Configuration]? = nil
        if let ec2ConfigurationContainer = ec2ConfigurationContainer {
            ec2ConfigurationDecoded0 = [BatchClientTypes.Ec2Configuration]()
            for structure0 in ec2ConfigurationContainer {
                if let structure0 = structure0 {
                    ec2ConfigurationDecoded0?.append(structure0)
                }
            }
        }
        ec2Configuration = ec2ConfigurationDecoded0
    }
}
