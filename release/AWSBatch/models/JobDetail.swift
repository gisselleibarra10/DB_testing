// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension BatchClientTypes {
    /// An object representing an Batch job.
    public struct JobDetail: Swift.Equatable {
        /// The array properties of the job, if it is an array job.
        public var arrayProperties: BatchClientTypes.ArrayPropertiesDetail?
        /// A list of job attempts associated with this job.
        public var attempts: [BatchClientTypes.AttemptDetail]?
        /// An object representing the details of the container that's associated with the job.
        public var container: BatchClientTypes.ContainerDetail?
        /// The Unix timestamp (in milliseconds) for when the job was created. For non-array jobs and parent array jobs, this is when the job entered the SUBMITTED state (at the time [SubmitJob] was called). For array child jobs, this is when the child job was spawned by its parent and entered the PENDING state.
        public var createdAt: Swift.Int?
        /// A list of job IDs that this job depends on.
        public var dependsOn: [BatchClientTypes.JobDependency]?
        /// The Amazon Resource Name (ARN) of the job.
        public var jobArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the job definition that's used by this job.
        /// This member is required.
        public var jobDefinition: Swift.String?
        /// The ID for the job.
        /// This member is required.
        public var jobId: Swift.String?
        /// The name of the job.
        /// This member is required.
        public var jobName: Swift.String?
        /// The Amazon Resource Name (ARN) of the job queue that the job is associated with.
        /// This member is required.
        public var jobQueue: Swift.String?
        /// An object representing the details of a node that's associated with a multi-node parallel job.
        public var nodeDetails: BatchClientTypes.NodeDetails?
        /// An object representing the node properties of a multi-node parallel job. This isn't applicable to jobs that are running on Fargate resources.
        public var nodeProperties: BatchClientTypes.NodeProperties?
        /// Additional parameters passed to the job that replace parameter substitution placeholders or override any corresponding parameter defaults from the job definition.
        public var parameters: [Swift.String:Swift.String]?
        /// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. Jobs run on Fargate resources specify FARGATE.
        public var platformCapabilities: [BatchClientTypes.PlatformCapability]?
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks during task creation. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state.
        public var propagateTags: Swift.Bool?
        /// The retry strategy to use for this job if an attempt fails.
        public var retryStrategy: BatchClientTypes.RetryStrategy?
        /// The scheduling policy of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
        public var schedulingPriority: Swift.Int?
        /// The share identifier for the job.
        public var shareIdentifier: Swift.String?
        /// The Unix timestamp (in milliseconds) for when the job was started (when the job transitioned from the STARTING state to the RUNNING state). This parameter isn't provided for child jobs of array jobs or multi-node parallel jobs.
        /// This member is required.
        public var startedAt: Swift.Int?
        /// The current status for the job. If your jobs don't progress to STARTING, see [Jobs stuck in RUNNABLE status](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#job_stuck_in_runnable) in the troubleshooting section of the Batch User Guide.
        /// This member is required.
        public var status: BatchClientTypes.JobStatus?
        /// A short, human-readable string to provide additional details about the current status of the job.
        public var statusReason: Swift.String?
        /// The Unix timestamp (in milliseconds) for when the job was stopped (when the job transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED).
        public var stoppedAt: Swift.Int?
        /// The tags applied to the job.
        public var tags: [Swift.String:Swift.String]?
        /// The timeout configuration for the job.
        public var timeout: BatchClientTypes.JobTimeout?

        public init (
            arrayProperties: BatchClientTypes.ArrayPropertiesDetail? = nil,
            attempts: [BatchClientTypes.AttemptDetail]? = nil,
            container: BatchClientTypes.ContainerDetail? = nil,
            createdAt: Swift.Int? = nil,
            dependsOn: [BatchClientTypes.JobDependency]? = nil,
            jobArn: Swift.String? = nil,
            jobDefinition: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobQueue: Swift.String? = nil,
            nodeDetails: BatchClientTypes.NodeDetails? = nil,
            nodeProperties: BatchClientTypes.NodeProperties? = nil,
            parameters: [Swift.String:Swift.String]? = nil,
            platformCapabilities: [BatchClientTypes.PlatformCapability]? = nil,
            propagateTags: Swift.Bool? = nil,
            retryStrategy: BatchClientTypes.RetryStrategy? = nil,
            schedulingPriority: Swift.Int? = nil,
            shareIdentifier: Swift.String? = nil,
            startedAt: Swift.Int? = nil,
            status: BatchClientTypes.JobStatus? = nil,
            statusReason: Swift.String? = nil,
            stoppedAt: Swift.Int? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            timeout: BatchClientTypes.JobTimeout? = nil
        )
        {
            self.arrayProperties = arrayProperties
            self.attempts = attempts
            self.container = container
            self.createdAt = createdAt
            self.dependsOn = dependsOn
            self.jobArn = jobArn
            self.jobDefinition = jobDefinition
            self.jobId = jobId
            self.jobName = jobName
            self.jobQueue = jobQueue
            self.nodeDetails = nodeDetails
            self.nodeProperties = nodeProperties
            self.parameters = parameters
            self.platformCapabilities = platformCapabilities
            self.propagateTags = propagateTags
            self.retryStrategy = retryStrategy
            self.schedulingPriority = schedulingPriority
            self.shareIdentifier = shareIdentifier
            self.startedAt = startedAt
            self.status = status
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
            self.tags = tags
            self.timeout = timeout
        }
    }

}
