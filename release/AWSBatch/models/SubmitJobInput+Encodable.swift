// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SubmitJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayProperties
        case containerOverrides
        case dependsOn
        case jobDefinition
        case jobName
        case jobQueue
        case nodeOverrides
        case parameters
        case propagateTags
        case retryStrategy
        case schedulingPriorityOverride
        case shareIdentifier
        case tags
        case timeout
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arrayProperties = self.arrayProperties {
            try encodeContainer.encode(arrayProperties, forKey: .arrayProperties)
        }
        if let containerOverrides = self.containerOverrides {
            try encodeContainer.encode(containerOverrides, forKey: .containerOverrides)
        }
        if let dependsOn = dependsOn {
            var dependsOnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dependsOn)
            for jobdependencylist0 in dependsOn {
                try dependsOnContainer.encode(jobdependencylist0)
            }
        }
        if let jobDefinition = self.jobDefinition {
            try encodeContainer.encode(jobDefinition, forKey: .jobDefinition)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobQueue = self.jobQueue {
            try encodeContainer.encode(jobQueue, forKey: .jobQueue)
        }
        if let nodeOverrides = self.nodeOverrides {
            try encodeContainer.encode(nodeOverrides, forKey: .nodeOverrides)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let propagateTags = self.propagateTags {
            try encodeContainer.encode(propagateTags, forKey: .propagateTags)
        }
        if let retryStrategy = self.retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if let schedulingPriorityOverride = self.schedulingPriorityOverride {
            try encodeContainer.encode(schedulingPriorityOverride, forKey: .schedulingPriorityOverride)
        }
        if let shareIdentifier = self.shareIdentifier {
            try encodeContainer.encode(shareIdentifier, forKey: .shareIdentifier)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let timeout = self.timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
    }
}
