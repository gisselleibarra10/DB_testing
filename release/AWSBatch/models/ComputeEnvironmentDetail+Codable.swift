// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchClientTypes.ComputeEnvironmentDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentArn
        case computeEnvironmentName
        case computeResources
        case ecsClusterArn
        case serviceRole
        case state
        case status
        case statusReason
        case tags
        case type
        case unmanagedvCpus
        case updatePolicy
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironmentArn = self.computeEnvironmentArn {
            try encodeContainer.encode(computeEnvironmentArn, forKey: .computeEnvironmentArn)
        }
        if let computeEnvironmentName = self.computeEnvironmentName {
            try encodeContainer.encode(computeEnvironmentName, forKey: .computeEnvironmentName)
        }
        if let computeResources = self.computeResources {
            try encodeContainer.encode(computeResources, forKey: .computeResources)
        }
        if let ecsClusterArn = self.ecsClusterArn {
            try encodeContainer.encode(ecsClusterArn, forKey: .ecsClusterArn)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let unmanagedvCpus = self.unmanagedvCpus {
            try encodeContainer.encode(unmanagedvCpus, forKey: .unmanagedvCpus)
        }
        if let updatePolicy = self.updatePolicy {
            try encodeContainer.encode(updatePolicy, forKey: .updatePolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentName)
        computeEnvironmentName = computeEnvironmentNameDecoded
        let computeEnvironmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentArn)
        computeEnvironmentArn = computeEnvironmentArnDecoded
        let unmanagedvCpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .unmanagedvCpus)
        unmanagedvCpus = unmanagedvCpusDecoded
        let ecsClusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ecsClusterArn)
        ecsClusterArn = ecsClusterArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEType.self, forKey: .type)
        type = typeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEState.self, forKey: .state)
        state = stateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let computeResourcesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ComputeResource.self, forKey: .computeResources)
        computeResources = computeResourcesDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let updatePolicyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.UpdatePolicy.self, forKey: .updatePolicy)
        updatePolicy = updatePolicyDecoded
    }
}
