// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SubmitJobInputBody: Swift.Equatable {
    let jobName: Swift.String?
    let jobQueue: Swift.String?
    let shareIdentifier: Swift.String?
    let schedulingPriorityOverride: Swift.Int?
    let arrayProperties: BatchClientTypes.ArrayProperties?
    let dependsOn: [BatchClientTypes.JobDependency]?
    let jobDefinition: Swift.String?
    let parameters: [Swift.String:Swift.String]?
    let containerOverrides: BatchClientTypes.ContainerOverrides?
    let nodeOverrides: BatchClientTypes.NodeOverrides?
    let retryStrategy: BatchClientTypes.RetryStrategy?
    let propagateTags: Swift.Bool?
    let timeout: BatchClientTypes.JobTimeout?
    let tags: [Swift.String:Swift.String]?
}

extension SubmitJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayProperties
        case containerOverrides
        case dependsOn
        case jobDefinition
        case jobName
        case jobQueue
        case nodeOverrides
        case parameters
        case propagateTags
        case retryStrategy
        case schedulingPriorityOverride
        case shareIdentifier
        case tags
        case timeout
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobQueueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueue)
        jobQueue = jobQueueDecoded
        let shareIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shareIdentifier)
        shareIdentifier = shareIdentifierDecoded
        let schedulingPriorityOverrideDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .schedulingPriorityOverride)
        schedulingPriorityOverride = schedulingPriorityOverrideDecoded
        let arrayPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ArrayProperties.self, forKey: .arrayProperties)
        arrayProperties = arrayPropertiesDecoded
        let dependsOnContainer = try containerValues.decodeIfPresent([BatchClientTypes.JobDependency?].self, forKey: .dependsOn)
        var dependsOnDecoded0:[BatchClientTypes.JobDependency]? = nil
        if let dependsOnContainer = dependsOnContainer {
            dependsOnDecoded0 = [BatchClientTypes.JobDependency]()
            for structure0 in dependsOnContainer {
                if let structure0 = structure0 {
                    dependsOnDecoded0?.append(structure0)
                }
            }
        }
        dependsOn = dependsOnDecoded0
        let jobDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinition)
        jobDefinition = jobDefinitionDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in parametersContainer {
                if let string0 = string0 {
                    parametersDecoded0?[key0] = string0
                }
            }
        }
        parameters = parametersDecoded0
        let containerOverridesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ContainerOverrides.self, forKey: .containerOverrides)
        containerOverrides = containerOverridesDecoded
        let nodeOverridesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NodeOverrides.self, forKey: .nodeOverrides)
        nodeOverrides = nodeOverridesDecoded
        let retryStrategyDecoded = try containerValues.decodeIfPresent(BatchClientTypes.RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let propagateTagsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
