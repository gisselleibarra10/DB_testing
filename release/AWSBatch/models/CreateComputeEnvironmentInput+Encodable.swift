// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateComputeEnvironmentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentName
        case computeResources
        case serviceRole
        case state
        case tags
        case type
        case unmanagedvCpus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironmentName = self.computeEnvironmentName {
            try encodeContainer.encode(computeEnvironmentName, forKey: .computeEnvironmentName)
        }
        if let computeResources = self.computeResources {
            try encodeContainer.encode(computeResources, forKey: .computeResources)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let unmanagedvCpus = self.unmanagedvCpus {
            try encodeContainer.encode(unmanagedvCpus, forKey: .unmanagedvCpus)
        }
    }
}
