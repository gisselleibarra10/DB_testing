// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchClientTypes.ContainerProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command
        case environment
        case executionRoleArn
        case fargatePlatformConfiguration
        case image
        case instanceType
        case jobRoleArn
        case linuxParameters
        case logConfiguration
        case memory
        case mountPoints
        case networkConfiguration
        case privileged
        case readonlyRootFilesystem
        case resourceRequirements
        case secrets
        case ulimits
        case user
        case vcpus
        case volumes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for stringlist0 in command {
                try commandContainer.encode(stringlist0)
            }
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environment)
            for environmentvariables0 in environment {
                try environmentContainer.encode(environmentvariables0)
            }
        }
        if let executionRoleArn = self.executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if let fargatePlatformConfiguration = self.fargatePlatformConfiguration {
            try encodeContainer.encode(fargatePlatformConfiguration, forKey: .fargatePlatformConfiguration)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let jobRoleArn = self.jobRoleArn {
            try encodeContainer.encode(jobRoleArn, forKey: .jobRoleArn)
        }
        if let linuxParameters = self.linuxParameters {
            try encodeContainer.encode(linuxParameters, forKey: .linuxParameters)
        }
        if let logConfiguration = self.logConfiguration {
            try encodeContainer.encode(logConfiguration, forKey: .logConfiguration)
        }
        if let memory = self.memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let mountPoints = mountPoints {
            var mountPointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mountPoints)
            for mountpoints0 in mountPoints {
                try mountPointsContainer.encode(mountpoints0)
            }
        }
        if let networkConfiguration = self.networkConfiguration {
            try encodeContainer.encode(networkConfiguration, forKey: .networkConfiguration)
        }
        if let privileged = self.privileged {
            try encodeContainer.encode(privileged, forKey: .privileged)
        }
        if let readonlyRootFilesystem = self.readonlyRootFilesystem {
            try encodeContainer.encode(readonlyRootFilesystem, forKey: .readonlyRootFilesystem)
        }
        if let resourceRequirements = resourceRequirements {
            var resourceRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceRequirements)
            for resourcerequirements0 in resourceRequirements {
                try resourceRequirementsContainer.encode(resourcerequirements0)
            }
        }
        if let secrets = secrets {
            var secretsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secrets)
            for secretlist0 in secrets {
                try secretsContainer.encode(secretlist0)
            }
        }
        if let ulimits = ulimits {
            var ulimitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ulimits)
            for ulimits0 in ulimits {
                try ulimitsContainer.encode(ulimits0)
            }
        }
        if let user = self.user {
            try encodeContainer.encode(user, forKey: .user)
        }
        if let vcpus = self.vcpus {
            try encodeContainer.encode(vcpus, forKey: .vcpus)
        }
        if let volumes = volumes {
            var volumesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumes)
            for volumes0 in volumes {
                try volumesContainer.encode(volumes0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let vcpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .vcpus)
        vcpus = vcpusDecoded
        let memoryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memory)
        memory = memoryDecoded
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let jobRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobRoleArn)
        jobRoleArn = jobRoleArnDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let volumesContainer = try containerValues.decodeIfPresent([BatchClientTypes.Volume?].self, forKey: .volumes)
        var volumesDecoded0:[BatchClientTypes.Volume]? = nil
        if let volumesContainer = volumesContainer {
            volumesDecoded0 = [BatchClientTypes.Volume]()
            for structure0 in volumesContainer {
                if let structure0 = structure0 {
                    volumesDecoded0?.append(structure0)
                }
            }
        }
        volumes = volumesDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([BatchClientTypes.KeyValuePair?].self, forKey: .environment)
        var environmentDecoded0:[BatchClientTypes.KeyValuePair]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [BatchClientTypes.KeyValuePair]()
            for structure0 in environmentContainer {
                if let structure0 = structure0 {
                    environmentDecoded0?.append(structure0)
                }
            }
        }
        environment = environmentDecoded0
        let mountPointsContainer = try containerValues.decodeIfPresent([BatchClientTypes.MountPoint?].self, forKey: .mountPoints)
        var mountPointsDecoded0:[BatchClientTypes.MountPoint]? = nil
        if let mountPointsContainer = mountPointsContainer {
            mountPointsDecoded0 = [BatchClientTypes.MountPoint]()
            for structure0 in mountPointsContainer {
                if let structure0 = structure0 {
                    mountPointsDecoded0?.append(structure0)
                }
            }
        }
        mountPoints = mountPointsDecoded0
        let readonlyRootFilesystemDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .readonlyRootFilesystem)
        readonlyRootFilesystem = readonlyRootFilesystemDecoded
        let privilegedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .privileged)
        privileged = privilegedDecoded
        let ulimitsContainer = try containerValues.decodeIfPresent([BatchClientTypes.Ulimit?].self, forKey: .ulimits)
        var ulimitsDecoded0:[BatchClientTypes.Ulimit]? = nil
        if let ulimitsContainer = ulimitsContainer {
            ulimitsDecoded0 = [BatchClientTypes.Ulimit]()
            for structure0 in ulimitsContainer {
                if let structure0 = structure0 {
                    ulimitsDecoded0?.append(structure0)
                }
            }
        }
        ulimits = ulimitsDecoded0
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let resourceRequirementsContainer = try containerValues.decodeIfPresent([BatchClientTypes.ResourceRequirement?].self, forKey: .resourceRequirements)
        var resourceRequirementsDecoded0:[BatchClientTypes.ResourceRequirement]? = nil
        if let resourceRequirementsContainer = resourceRequirementsContainer {
            resourceRequirementsDecoded0 = [BatchClientTypes.ResourceRequirement]()
            for structure0 in resourceRequirementsContainer {
                if let structure0 = structure0 {
                    resourceRequirementsDecoded0?.append(structure0)
                }
            }
        }
        resourceRequirements = resourceRequirementsDecoded0
        let linuxParametersDecoded = try containerValues.decodeIfPresent(BatchClientTypes.LinuxParameters.self, forKey: .linuxParameters)
        linuxParameters = linuxParametersDecoded
        let logConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.LogConfiguration.self, forKey: .logConfiguration)
        logConfiguration = logConfigurationDecoded
        let secretsContainer = try containerValues.decodeIfPresent([BatchClientTypes.Secret?].self, forKey: .secrets)
        var secretsDecoded0:[BatchClientTypes.Secret]? = nil
        if let secretsContainer = secretsContainer {
            secretsDecoded0 = [BatchClientTypes.Secret]()
            for structure0 in secretsContainer {
                if let structure0 = structure0 {
                    secretsDecoded0?.append(structure0)
                }
            }
        }
        secrets = secretsDecoded0
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let fargatePlatformConfigurationDecoded = try containerValues.decodeIfPresent(BatchClientTypes.FargatePlatformConfiguration.self, forKey: .fargatePlatformConfiguration)
        fargatePlatformConfiguration = fargatePlatformConfigurationDecoded
    }
}
