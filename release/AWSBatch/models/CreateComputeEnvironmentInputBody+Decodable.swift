// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateComputeEnvironmentInputBody: Swift.Equatable {
    let computeEnvironmentName: Swift.String?
    let type: BatchClientTypes.CEType?
    let state: BatchClientTypes.CEState?
    let unmanagedvCpus: Swift.Int?
    let computeResources: BatchClientTypes.ComputeResource?
    let serviceRole: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateComputeEnvironmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentName
        case computeResources
        case serviceRole
        case state
        case tags
        case type
        case unmanagedvCpus
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeEnvironmentName)
        computeEnvironmentName = computeEnvironmentNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEType.self, forKey: .type)
        type = typeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.CEState.self, forKey: .state)
        state = stateDecoded
        let unmanagedvCpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .unmanagedvCpus)
        unmanagedvCpus = unmanagedvCpusDecoded
        let computeResourcesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ComputeResource.self, forKey: .computeResources)
        computeResources = computeResourcesDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
