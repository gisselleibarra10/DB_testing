// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension IotDeviceAdvisorClientTypes {
    /// Provides test case scenario.
    public struct TestCaseScenario: Swift.Equatable {
        /// Provides test case scenario failure result.
        public var failure: Swift.String?
        /// Provides the test case scenario status. Status is one of the following:
        ///
        /// * PASS: Test passed.
        ///
        /// * FAIL: Test failed.
        ///
        /// * PENDING: Test has not started running but is scheduled.
        ///
        /// * RUNNING: Test is running.
        ///
        /// * STOPPING: Test is performing cleanup steps. You will see this status only if you stop a suite run.
        ///
        /// * STOPPED Test is stopped. You will see this status only if you stop a suite run.
        ///
        /// * PASS_WITH_WARNINGS: Test passed with warnings.
        ///
        /// * ERORR: Test faced an error when running due to an internal issue.
        public var status: IotDeviceAdvisorClientTypes.TestCaseScenarioStatus?
        ///
        public var systemMessage: Swift.String?
        /// Provides test case scenario ID.
        public var testCaseScenarioId: Swift.String?
        /// Provides test case scenario type. Type is one of the following:
        ///
        /// * Advanced
        ///
        /// * Basic
        public var testCaseScenarioType: IotDeviceAdvisorClientTypes.TestCaseScenarioType?

        public init (
            failure: Swift.String? = nil,
            status: IotDeviceAdvisorClientTypes.TestCaseScenarioStatus? = nil,
            systemMessage: Swift.String? = nil,
            testCaseScenarioId: Swift.String? = nil,
            testCaseScenarioType: IotDeviceAdvisorClientTypes.TestCaseScenarioType? = nil
        )
        {
            self.failure = failure
            self.status = status
            self.systemMessage = systemMessage
            self.testCaseScenarioId = testCaseScenarioId
            self.testCaseScenarioType = testCaseScenarioType
        }
    }

}
