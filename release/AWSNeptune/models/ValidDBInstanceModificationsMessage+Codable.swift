// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NeptuneClientTypes.ValidDBInstanceModificationsMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storage = "Storage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let storage = storage {
            var storageContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Storage"))
            for (index0, validstorageoptions0) in storage.enumerated() {
                try storageContainer.encode(validstorageoptions0, forKey: ClientRuntime.Key("ValidStorageOptions.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.storage) {
            struct KeyVal0{struct ValidStorageOptions{}}
            let storageWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ValidStorageOptions>.CodingKeys.self, forKey: .storage)
            if let storageWrappedContainer = storageWrappedContainer {
                let storageContainer = try storageWrappedContainer.decodeIfPresent([NeptuneClientTypes.ValidStorageOptions].self, forKey: .member)
                var storageBuffer:[NeptuneClientTypes.ValidStorageOptions]? = nil
                if let storageContainer = storageContainer {
                    storageBuffer = [NeptuneClientTypes.ValidStorageOptions]()
                    for structureContainer0 in storageContainer {
                        storageBuffer?.append(structureContainer0)
                    }
                }
                storage = storageBuffer
            } else {
                storage = []
            }
        } else {
            storage = nil
        }
    }
}
