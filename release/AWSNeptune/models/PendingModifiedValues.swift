// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension NeptuneClientTypes {
    /// This data type is used as a response element in the [ModifyDBInstance] action.
    public struct PendingModifiedValues: Swift.Equatable {
        /// Contains the new AllocatedStorage size for the DB instance that will be applied or is currently being applied.
        public var allocatedStorage: Swift.Int?
        /// Specifies the pending number of days for which automated backups are retained.
        public var backupRetentionPeriod: Swift.Int?
        /// Specifies the identifier of the CA certificate for the DB instance.
        public var cACertificateIdentifier: Swift.String?
        /// Contains the new DBInstanceClass for the DB instance that will be applied or is currently being applied.
        public var dBInstanceClass: Swift.String?
        /// Contains the new DBInstanceIdentifier for the DB instance that will be applied or is currently being applied.
        public var dBInstanceIdentifier: Swift.String?
        /// The new DB subnet group for the DB instance.
        public var dBSubnetGroupName: Swift.String?
        /// Indicates the database engine version.
        public var engineVersion: Swift.String?
        /// Specifies the new Provisioned IOPS value for the DB instance that will be applied or is currently being applied.
        public var iops: Swift.Int?
        /// Not supported by Neptune.
        public var licenseModel: Swift.String?
        /// Not supported by Neptune.
        public var masterUserPassword: Swift.String?
        /// Indicates that the Single-AZ DB instance is to change to a Multi-AZ deployment.
        public var multiAZ: Swift.Bool?
        /// This PendingCloudwatchLogsExports structure specifies pending changes to which CloudWatch logs are enabled and which are disabled.
        public var pendingCloudwatchLogsExports: NeptuneClientTypes.PendingCloudwatchLogsExports?
        /// Specifies the pending port for the DB instance.
        public var port: Swift.Int?
        /// Specifies the storage type to be associated with the DB instance.
        public var storageType: Swift.String?

        public init (
            allocatedStorage: Swift.Int? = nil,
            backupRetentionPeriod: Swift.Int? = nil,
            cACertificateIdentifier: Swift.String? = nil,
            dBInstanceClass: Swift.String? = nil,
            dBInstanceIdentifier: Swift.String? = nil,
            dBSubnetGroupName: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            iops: Swift.Int? = nil,
            licenseModel: Swift.String? = nil,
            masterUserPassword: Swift.String? = nil,
            multiAZ: Swift.Bool? = nil,
            pendingCloudwatchLogsExports: NeptuneClientTypes.PendingCloudwatchLogsExports? = nil,
            port: Swift.Int? = nil,
            storageType: Swift.String? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.backupRetentionPeriod = backupRetentionPeriod
            self.cACertificateIdentifier = cACertificateIdentifier
            self.dBInstanceClass = dBInstanceClass
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dBSubnetGroupName = dBSubnetGroupName
            self.engineVersion = engineVersion
            self.iops = iops
            self.licenseModel = licenseModel
            self.masterUserPassword = masterUserPassword
            self.multiAZ = multiAZ
            self.pendingCloudwatchLogsExports = pendingCloudwatchLogsExports
            self.port = port
            self.storageType = storageType
        }
    }

}
