// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NeptuneClientTypes {
    /// Contains the details of an Amazon Neptune DB cluster. This data type is used as a response element in the [DescribeDBClusters] action.
    public struct DBCluster: Swift.Equatable {
        /// AllocatedStorage always returns 1, because Neptune DB cluster storage size is not fixed, but instead automatically adjusts as needed.
        public var allocatedStorage: Swift.Int?
        /// Provides a list of the Amazon Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other Amazon services on your behalf.
        public var associatedRoles: [NeptuneClientTypes.DBClusterRole]?
        /// Time at which the DB cluster will be automatically restarted.
        public var automaticRestartTime: ClientRuntime.Date?
        /// Provides the list of EC2 Availability Zones that instances in the DB cluster can be created in.
        public var availabilityZones: [Swift.String]?
        /// Specifies the number of days for which automatic DB snapshots are retained.
        public var backupRetentionPeriod: Swift.Int?
        /// Not supported by Neptune.
        public var characterSetName: Swift.String?
        /// Identifies the clone group to which the DB cluster is associated.
        public var cloneGroupId: Swift.String?
        /// Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).
        public var clusterCreateTime: ClientRuntime.Date?
        /// If set to true, tags are copied to any snapshot of the DB cluster that is created.
        public var copyTagsToSnapshot: Swift.Bool?
        /// If set to true, the DB cluster can be cloned across accounts.
        public var crossAccountClone: Swift.Bool?
        /// The Amazon Resource Name (ARN) for the DB cluster.
        public var dBClusterArn: Swift.String?
        /// Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.
        public var dBClusterIdentifier: Swift.String?
        /// Provides the list of instances that make up the DB cluster.
        public var dBClusterMembers: [NeptuneClientTypes.DBClusterMember]?
        /// Not supported by Neptune.
        public var dBClusterOptionGroupMemberships: [NeptuneClientTypes.DBClusterOptionGroupStatus]?
        /// Specifies the name of the DB cluster parameter group for the DB cluster.
        public var dBClusterParameterGroup: Swift.String?
        /// Specifies information on the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group.
        public var dBSubnetGroup: Swift.String?
        /// Contains the name of the initial database of this DB cluster that was provided at create time, if one was specified when the DB cluster was created. This same name is returned for the life of the DB cluster.
        public var databaseName: Swift.String?
        /// The Amazon Region-unique, immutable identifier for the DB cluster. This identifier is found in Amazon CloudTrail log entries whenever the Amazon KMS key for the DB cluster is accessed.
        public var dbClusterResourceId: Swift.String?
        /// Indicates whether or not the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled.
        public var deletionProtection: Swift.Bool?
        /// Specifies the earliest time to which a database can be restored with point-in-time restore.
        public var earliestRestorableTime: ClientRuntime.Date?
        /// A list of log types that this DB cluster is configured to export to CloudWatch Logs.
        public var enabledCloudwatchLogsExports: [Swift.String]?
        /// Specifies the connection endpoint for the primary instance of the DB cluster.
        public var endpoint: Swift.String?
        /// Provides the name of the database engine to be used for this DB cluster.
        public var engine: Swift.String?
        /// Indicates the database engine version.
        public var engineVersion: Swift.String?
        /// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
        public var hostedZoneId: Swift.String?
        /// True if mapping of Amazon Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.
        public var iAMDatabaseAuthenticationEnabled: Swift.Bool
        /// If StorageEncrypted is true, the Amazon KMS key identifier for the encrypted DB cluster.
        public var kmsKeyId: Swift.String?
        /// Specifies the latest time to which a database can be restored with point-in-time restore.
        public var latestRestorableTime: ClientRuntime.Date?
        /// Not supported by Neptune.
        public var masterUsername: Swift.String?
        /// Specifies whether the DB cluster has instances in multiple Availability Zones.
        public var multiAZ: Swift.Bool
        /// Specifies the progress of the operation as a percentage.
        public var percentProgress: Swift.String?
        /// Specifies the port that the database engine is listening on.
        public var port: Swift.Int?
        /// Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod.
        public var preferredBackupWindow: Swift.String?
        /// Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        public var preferredMaintenanceWindow: Swift.String?
        /// Contains one or more identifiers of the Read Replicas associated with this DB cluster.
        public var readReplicaIdentifiers: [Swift.String]?
        /// The reader endpoint for the DB cluster. The reader endpoint for a DB cluster load-balances connections across the Read Replicas that are available in a DB cluster. As clients request new connections to the reader endpoint, Neptune distributes the connection requests among the Read Replicas in the DB cluster. This functionality can help balance your read workload across multiple Read Replicas in your DB cluster. If a failover occurs, and the Read Replica that you are connected to is promoted to be the primary instance, your connection is dropped. To continue sending your read workload to other Read Replicas in the cluster, you can then reconnect to the reader endpoint.
        public var readerEndpoint: Swift.String?
        /// Not supported by Neptune.
        public var replicationSourceIdentifier: Swift.String?
        /// Specifies the current state of this DB cluster.
        public var status: Swift.String?
        /// Specifies whether the DB cluster is encrypted.
        public var storageEncrypted: Swift.Bool
        /// Provides a list of VPC security groups that the DB cluster belongs to.
        public var vpcSecurityGroups: [NeptuneClientTypes.VpcSecurityGroupMembership]?

        public init (
            allocatedStorage: Swift.Int? = nil,
            associatedRoles: [NeptuneClientTypes.DBClusterRole]? = nil,
            automaticRestartTime: ClientRuntime.Date? = nil,
            availabilityZones: [Swift.String]? = nil,
            backupRetentionPeriod: Swift.Int? = nil,
            characterSetName: Swift.String? = nil,
            cloneGroupId: Swift.String? = nil,
            clusterCreateTime: ClientRuntime.Date? = nil,
            copyTagsToSnapshot: Swift.Bool? = nil,
            crossAccountClone: Swift.Bool? = nil,
            dBClusterArn: Swift.String? = nil,
            dBClusterIdentifier: Swift.String? = nil,
            dBClusterMembers: [NeptuneClientTypes.DBClusterMember]? = nil,
            dBClusterOptionGroupMemberships: [NeptuneClientTypes.DBClusterOptionGroupStatus]? = nil,
            dBClusterParameterGroup: Swift.String? = nil,
            dBSubnetGroup: Swift.String? = nil,
            databaseName: Swift.String? = nil,
            dbClusterResourceId: Swift.String? = nil,
            deletionProtection: Swift.Bool? = nil,
            earliestRestorableTime: ClientRuntime.Date? = nil,
            enabledCloudwatchLogsExports: [Swift.String]? = nil,
            endpoint: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            hostedZoneId: Swift.String? = nil,
            iAMDatabaseAuthenticationEnabled: Swift.Bool = false,
            kmsKeyId: Swift.String? = nil,
            latestRestorableTime: ClientRuntime.Date? = nil,
            masterUsername: Swift.String? = nil,
            multiAZ: Swift.Bool = false,
            percentProgress: Swift.String? = nil,
            port: Swift.Int? = nil,
            preferredBackupWindow: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            readReplicaIdentifiers: [Swift.String]? = nil,
            readerEndpoint: Swift.String? = nil,
            replicationSourceIdentifier: Swift.String? = nil,
            status: Swift.String? = nil,
            storageEncrypted: Swift.Bool = false,
            vpcSecurityGroups: [NeptuneClientTypes.VpcSecurityGroupMembership]? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.associatedRoles = associatedRoles
            self.automaticRestartTime = automaticRestartTime
            self.availabilityZones = availabilityZones
            self.backupRetentionPeriod = backupRetentionPeriod
            self.characterSetName = characterSetName
            self.cloneGroupId = cloneGroupId
            self.clusterCreateTime = clusterCreateTime
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.crossAccountClone = crossAccountClone
            self.dBClusterArn = dBClusterArn
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterMembers = dBClusterMembers
            self.dBClusterOptionGroupMemberships = dBClusterOptionGroupMemberships
            self.dBClusterParameterGroup = dBClusterParameterGroup
            self.dBSubnetGroup = dBSubnetGroup
            self.databaseName = databaseName
            self.dbClusterResourceId = dbClusterResourceId
            self.deletionProtection = deletionProtection
            self.earliestRestorableTime = earliestRestorableTime
            self.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports
            self.endpoint = endpoint
            self.engine = engine
            self.engineVersion = engineVersion
            self.hostedZoneId = hostedZoneId
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.kmsKeyId = kmsKeyId
            self.latestRestorableTime = latestRestorableTime
            self.masterUsername = masterUsername
            self.multiAZ = multiAZ
            self.percentProgress = percentProgress
            self.port = port
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.readReplicaIdentifiers = readReplicaIdentifiers
            self.readerEndpoint = readerEndpoint
            self.replicationSourceIdentifier = replicationSourceIdentifier
            self.status = status
            self.storageEncrypted = storageEncrypted
            self.vpcSecurityGroups = vpcSecurityGroups
        }
    }

}
