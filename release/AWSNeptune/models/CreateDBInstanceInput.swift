// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateDBInstanceInput: Swift.Equatable {
    /// Not supported by Neptune.
    public var allocatedStorage: Swift.Int?
    /// Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window. Default: true
    public var autoMinorVersionUpgrade: Swift.Bool?
    /// The EC2 Availability Zone that the DB instance is created in Default: A random, system-chosen Availability Zone in the endpoint's Amazon Region. Example: us-east-1d Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to true. The specified Availability Zone must be in the same Amazon Region as the current endpoint.
    public var availabilityZone: Swift.String?
    /// The number of days for which automated backups are retained. Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see [CreateDBCluster]. Default: 1 Constraints:
    ///
    /// * Must be a value from 0 to 35
    ///
    /// * Cannot be set to 0 if the DB instance is a source to Read Replicas
    public var backupRetentionPeriod: Swift.Int?
    /// (Not supported by Neptune)
    public var characterSetName: Swift.String?
    /// True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
    public var copyTagsToSnapshot: Swift.Bool?
    /// The identifier of the DB cluster that the instance will belong to. For information on creating a DB cluster, see [CreateDBCluster]. Type: String
    public var dBClusterIdentifier: Swift.String?
    /// The compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all Amazon Regions.
    /// This member is required.
    public var dBInstanceClass: Swift.String?
    /// The DB instance identifier. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: mydbinstance
    /// This member is required.
    public var dBInstanceIdentifier: Swift.String?
    /// Not supported.
    public var dBName: Swift.String?
    /// The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used. Constraints:
    ///
    /// * Must be 1 to 255 letters, numbers, or hyphens.
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    public var dBParameterGroupName: Swift.String?
    /// A list of DB security groups to associate with this DB instance. Default: The default DB security group for the database engine.
    public var dBSecurityGroups: [Swift.String]?
    /// A DB subnet group to associate with this DB instance. If there is no DB subnet group, then it is a non-VPC DB instance.
    public var dBSubnetGroupName: Swift.String?
    /// A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. See [Deleting a DB Instance](https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html). DB instances in a DB cluster can be deleted even when deletion protection is enabled in their parent DB cluster.
    public var deletionProtection: Swift.Bool?
    /// Specify the Active Directory Domain to create the instance in.
    public var domain: Swift.String?
    /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
    public var domainIAMRoleName: Swift.String?
    /// The list of log types that need to be enabled for exporting to CloudWatch Logs.
    public var enableCloudwatchLogsExports: [Swift.String]?
    /// Not supported by Neptune (ignored).
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// (Not supported by Neptune)
    public var enablePerformanceInsights: Swift.Bool?
    /// The name of the database engine to be used for this instance. Valid Values: neptune
    /// This member is required.
    public var engine: Swift.String?
    /// The version number of the database engine to use. Currently, setting this parameter has no effect.
    public var engineVersion: Swift.String?
    /// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
    public var iops: Swift.Int?
    /// The Amazon KMS key identifier for an encrypted DB instance. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same Amazon account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see [CreateDBCluster]. If the StorageEncrypted parameter is true, and you do not specify a value for the KmsKeyId parameter, then Amazon Neptune will use your default encryption key. Amazon KMS creates the default encryption key for your Amazon account. Your Amazon account has a different default encryption key for each Amazon Region.
    public var kmsKeyId: Swift.String?
    /// License model information for this DB instance. Valid values: license-included | bring-your-own-license | general-public-license
    public var licenseModel: Swift.String?
    /// Not supported by Neptune.
    public var masterUserPassword: Swift.String?
    /// Not supported by Neptune.
    public var masterUsername: Swift.String?
    /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60
    public var monitoringInterval: Swift.Int?
    /// The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value.
    public var monitoringRoleArn: Swift.String?
    /// Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
    public var multiAZ: Swift.Bool?
    /// (Not supported by Neptune)
    public var optionGroupName: Swift.String?
    /// (Not supported by Neptune)
    public var performanceInsightsKMSKeyId: Swift.String?
    /// The port number on which the database accepts connections. Not applicable. The port is managed by the DB cluster. For more information, see [CreateDBCluster]. Default: 8182 Type: Integer
    public var port: Swift.Int?
    /// The daily time range during which automated backups are created. Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see [CreateDBCluster].
    public var preferredBackupWindow: Swift.String?
    /// The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week. Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
    public var preferredMaintenanceWindow: Swift.String?
    /// A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. Default: 1 Valid Values: 0 - 15
    public var promotionTier: Swift.Int?
    /// This flag should no longer be used.
    @available(*, deprecated)
    public var publiclyAccessible: Swift.Bool?
    /// Specifies whether the DB instance is encrypted. Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see [CreateDBCluster]. Default: false
    public var storageEncrypted: Swift.Bool?
    /// Specifies the storage type to be associated with the DB instance. Not applicable. Storage is managed by the DB Cluster.
    public var storageType: Swift.String?
    /// The tags to assign to the new instance.
    public var tags: [NeptuneClientTypes.Tag]?
    /// The ARN from the key store with which to associate the instance for TDE encryption.
    public var tdeCredentialArn: Swift.String?
    /// The password for the given ARN from the key store in order to access the device.
    public var tdeCredentialPassword: Swift.String?
    /// The time zone of the DB instance.
    public var timezone: Swift.String?
    /// A list of EC2 VPC security groups to associate with this DB instance. Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see [CreateDBCluster]. Default: The default EC2 VPC security group for the DB subnet group's VPC.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init (
        allocatedStorage: Swift.Int? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        availabilityZone: Swift.String? = nil,
        backupRetentionPeriod: Swift.Int? = nil,
        characterSetName: Swift.String? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        dBClusterIdentifier: Swift.String? = nil,
        dBInstanceClass: Swift.String? = nil,
        dBInstanceIdentifier: Swift.String? = nil,
        dBName: Swift.String? = nil,
        dBParameterGroupName: Swift.String? = nil,
        dBSecurityGroups: [Swift.String]? = nil,
        dBSubnetGroupName: Swift.String? = nil,
        deletionProtection: Swift.Bool? = nil,
        domain: Swift.String? = nil,
        domainIAMRoleName: Swift.String? = nil,
        enableCloudwatchLogsExports: [Swift.String]? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        enablePerformanceInsights: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        iops: Swift.Int? = nil,
        kmsKeyId: Swift.String? = nil,
        licenseModel: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUsername: Swift.String? = nil,
        monitoringInterval: Swift.Int? = nil,
        monitoringRoleArn: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        optionGroupName: Swift.String? = nil,
        performanceInsightsKMSKeyId: Swift.String? = nil,
        port: Swift.Int? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        promotionTier: Swift.Int? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        storageEncrypted: Swift.Bool? = nil,
        storageType: Swift.String? = nil,
        tags: [NeptuneClientTypes.Tag]? = nil,
        tdeCredentialArn: Swift.String? = nil,
        tdeCredentialPassword: Swift.String? = nil,
        timezone: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.availabilityZone = availabilityZone
        self.backupRetentionPeriod = backupRetentionPeriod
        self.characterSetName = characterSetName
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.dBClusterIdentifier = dBClusterIdentifier
        self.dBInstanceClass = dBInstanceClass
        self.dBInstanceIdentifier = dBInstanceIdentifier
        self.dBName = dBName
        self.dBParameterGroupName = dBParameterGroupName
        self.dBSecurityGroups = dBSecurityGroups
        self.dBSubnetGroupName = dBSubnetGroupName
        self.deletionProtection = deletionProtection
        self.domain = domain
        self.domainIAMRoleName = domainIAMRoleName
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.enablePerformanceInsights = enablePerformanceInsights
        self.engine = engine
        self.engineVersion = engineVersion
        self.iops = iops
        self.kmsKeyId = kmsKeyId
        self.licenseModel = licenseModel
        self.masterUserPassword = masterUserPassword
        self.masterUsername = masterUsername
        self.monitoringInterval = monitoringInterval
        self.monitoringRoleArn = monitoringRoleArn
        self.multiAZ = multiAZ
        self.optionGroupName = optionGroupName
        self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
        self.port = port
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.promotionTier = promotionTier
        self.publiclyAccessible = publiclyAccessible
        self.storageEncrypted = storageEncrypted
        self.storageType = storageType
        self.tags = tags
        self.tdeCredentialArn = tdeCredentialArn
        self.tdeCredentialPassword = tdeCredentialPassword
        self.timezone = timezone
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}
