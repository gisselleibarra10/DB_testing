// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CopyDBClusterSnapshotInputBody: Swift.Equatable {
    let sourceDBClusterSnapshotIdentifier: Swift.String?
    let targetDBClusterSnapshotIdentifier: Swift.String?
    let kmsKeyId: Swift.String?
    let preSignedUrl: Swift.String?
    let copyTags: Swift.Bool?
    let tags: [NeptuneClientTypes.Tag]?
}

extension CopyDBClusterSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyTags = "CopyTags"
        case kmsKeyId = "KmsKeyId"
        case preSignedUrl = "PreSignedUrl"
        case sourceDBClusterSnapshotIdentifier = "SourceDBClusterSnapshotIdentifier"
        case tags = "Tags"
        case targetDBClusterSnapshotIdentifier = "TargetDBClusterSnapshotIdentifier"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDBClusterSnapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceDBClusterSnapshotIdentifier)
        sourceDBClusterSnapshotIdentifier = sourceDBClusterSnapshotIdentifierDecoded
        let targetDBClusterSnapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetDBClusterSnapshotIdentifier)
        targetDBClusterSnapshotIdentifier = targetDBClusterSnapshotIdentifierDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let preSignedUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preSignedUrl)
        preSignedUrl = preSignedUrlDecoded
        let copyTagsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTags)
        copyTags = copyTagsDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([NeptuneClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[NeptuneClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [NeptuneClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
