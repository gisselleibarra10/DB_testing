// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NeptuneClientTypes.GlobalCluster: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deletionProtection = "DeletionProtection"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case globalClusterArn = "GlobalClusterArn"
        case globalClusterIdentifier = "GlobalClusterIdentifier"
        case globalClusterMembers = "GlobalClusterMembers"
        case globalClusterResourceId = "GlobalClusterResourceId"
        case status = "Status"
        case storageEncrypted = "StorageEncrypted"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deletionProtection = deletionProtection {
            try container.encode(deletionProtection, forKey: ClientRuntime.Key("DeletionProtection"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let globalClusterArn = globalClusterArn {
            try container.encode(globalClusterArn, forKey: ClientRuntime.Key("GlobalClusterArn"))
        }
        if let globalClusterIdentifier = globalClusterIdentifier {
            try container.encode(globalClusterIdentifier, forKey: ClientRuntime.Key("GlobalClusterIdentifier"))
        }
        if let globalClusterMembers = globalClusterMembers {
            var globalClusterMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("GlobalClusterMembers"))
            for (index0, globalclustermember0) in globalClusterMembers.enumerated() {
                try globalClusterMembersContainer.encode(globalclustermember0, forKey: ClientRuntime.Key("GlobalClusterMember.\(index0.advanced(by: 1))"))
            }
        }
        if let globalClusterResourceId = globalClusterResourceId {
            try container.encode(globalClusterResourceId, forKey: ClientRuntime.Key("GlobalClusterResourceId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let storageEncrypted = storageEncrypted {
            try container.encode(storageEncrypted, forKey: ClientRuntime.Key("StorageEncrypted"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalClusterIdentifier)
        globalClusterIdentifier = globalClusterIdentifierDecoded
        let globalClusterResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalClusterResourceId)
        globalClusterResourceId = globalClusterResourceIdDecoded
        let globalClusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalClusterArn)
        globalClusterArn = globalClusterArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let storageEncryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .storageEncrypted)
        storageEncrypted = storageEncryptedDecoded
        let deletionProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deletionProtection)
        deletionProtection = deletionProtectionDecoded
        if containerValues.contains(.globalClusterMembers) {
            struct KeyVal0{struct GlobalClusterMember{}}
            let globalClusterMembersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GlobalClusterMember>.CodingKeys.self, forKey: .globalClusterMembers)
            if let globalClusterMembersWrappedContainer = globalClusterMembersWrappedContainer {
                let globalClusterMembersContainer = try globalClusterMembersWrappedContainer.decodeIfPresent([NeptuneClientTypes.GlobalClusterMember].self, forKey: .member)
                var globalClusterMembersBuffer:[NeptuneClientTypes.GlobalClusterMember]? = nil
                if let globalClusterMembersContainer = globalClusterMembersContainer {
                    globalClusterMembersBuffer = [NeptuneClientTypes.GlobalClusterMember]()
                    for structureContainer0 in globalClusterMembersContainer {
                        globalClusterMembersBuffer?.append(structureContainer0)
                    }
                }
                globalClusterMembers = globalClusterMembersBuffer
            } else {
                globalClusterMembers = []
            }
        } else {
            globalClusterMembers = nil
        }
    }
}
