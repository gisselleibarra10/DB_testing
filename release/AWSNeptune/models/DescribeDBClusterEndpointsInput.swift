// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeDBClusterEndpointsInput: Swift.Equatable {
    /// The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
    public var dBClusterEndpointIdentifier: Swift.String?
    /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
    public var dBClusterIdentifier: Swift.String?
    /// A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format Name=endpoint_type,Values=endpoint_type1,endpoint_type2,.... Name can be one of: db-cluster-endpoint-type, db-cluster-endpoint-custom-type, db-cluster-endpoint-id, db-cluster-endpoint-status. Values for the  db-cluster-endpoint-type filter can be one or more of: reader, writer, custom. Values for the db-cluster-endpoint-custom-type filter can be one or more of: reader, any. Values for the db-cluster-endpoint-status filter can be one or more of: available, creating, deleting, inactive, modifying.
    public var filters: [NeptuneClientTypes.Filter]?
    /// An optional pagination token provided by a previous DescribeDBClusterEndpoints request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init (
        dBClusterEndpointIdentifier: Swift.String? = nil,
        dBClusterIdentifier: Swift.String? = nil,
        filters: [NeptuneClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dBClusterEndpointIdentifier = dBClusterEndpointIdentifier
        self.dBClusterIdentifier = dBClusterIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
    }
}
