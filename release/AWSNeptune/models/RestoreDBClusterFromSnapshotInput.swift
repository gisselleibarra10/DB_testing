// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct RestoreDBClusterFromSnapshotInput: Swift.Equatable {
    /// Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
    public var availabilityZones: [Swift.String]?
    /// If set to true, tags are copied to any snapshot of the restored DB cluster that is created.
    public var copyTagsToSnapshot: Swift.Bool?
    /// The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// Example: my-snapshot-id
    /// This member is required.
    public var dBClusterIdentifier: Swift.String?
    /// The name of the DB cluster parameter group to associate with the new DB cluster. Constraints:
    ///
    /// * If supplied, must match the name of an existing DBClusterParameterGroup.
    public var dBClusterParameterGroupName: Swift.String?
    /// The name of the DB subnet group to use for the new DB cluster. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup
    public var dBSubnetGroupName: Swift.String?
    /// Not supported.
    public var databaseName: Swift.String?
    /// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
    public var deletionProtection: Swift.Bool?
    /// The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
    public var enableCloudwatchLogsExports: [Swift.String]?
    /// True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false. Default: false
    public var enableIAMDatabaseAuthentication: Swift.Bool?
    /// The database engine to use for the new DB cluster. Default: The same as source Constraint: Must be compatible with the engine of the source
    /// This member is required.
    public var engine: Swift.String?
    /// The version of the database engine to use for the new DB cluster.
    public var engineVersion: Swift.String?
    /// The Amazon KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key. If you do not specify a value for the KmsKeyId parameter, then the following will occur:
    ///
    /// * If the DB snapshot or DB cluster snapshot in SnapshotIdentifier is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.
    ///
    /// * If the DB snapshot or DB cluster snapshot in SnapshotIdentifier is not encrypted, then the restored DB cluster is not encrypted.
    public var kmsKeyId: Swift.String?
    /// (Not supported by Neptune)
    public var optionGroupName: Swift.String?
    /// The port number on which the new DB cluster accepts connections. Constraints: Value must be 1150-65535 Default: The same port as the original DB cluster.
    public var port: Swift.Int?
    /// The identifier for the DB snapshot or DB cluster snapshot to restore from. You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot. Constraints:
    ///
    /// * Must match the identifier of an existing Snapshot.
    /// This member is required.
    public var snapshotIdentifier: Swift.String?
    /// The tags to be assigned to the restored DB cluster.
    public var tags: [NeptuneClientTypes.Tag]?
    /// A list of VPC security groups that the new DB cluster will belong to.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init (
        availabilityZones: [Swift.String]? = nil,
        copyTagsToSnapshot: Swift.Bool? = nil,
        dBClusterIdentifier: Swift.String? = nil,
        dBClusterParameterGroupName: Swift.String? = nil,
        dBSubnetGroupName: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        deletionProtection: Swift.Bool? = nil,
        enableCloudwatchLogsExports: [Swift.String]? = nil,
        enableIAMDatabaseAuthentication: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        optionGroupName: Swift.String? = nil,
        port: Swift.Int? = nil,
        snapshotIdentifier: Swift.String? = nil,
        tags: [NeptuneClientTypes.Tag]? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.copyTagsToSnapshot = copyTagsToSnapshot
        self.dBClusterIdentifier = dBClusterIdentifier
        self.dBClusterParameterGroupName = dBClusterParameterGroupName
        self.dBSubnetGroupName = dBSubnetGroupName
        self.databaseName = databaseName
        self.deletionProtection = deletionProtection
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
        self.engine = engine
        self.engineVersion = engineVersion
        self.kmsKeyId = kmsKeyId
        self.optionGroupName = optionGroupName
        self.port = port
        self.snapshotIdentifier = snapshotIdentifier
        self.tags = tags
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}
