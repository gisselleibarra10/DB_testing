// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct RecognizeUtteranceInput: Swift.Equatable {
    /// The alias identifier in use for the bot that should receive the request.
    /// This member is required.
    public var botAliasId: Swift.String?
    /// The identifier of the bot that should receive the request.
    /// This member is required.
    public var botId: Swift.String?
    /// User input in PCM or Opus audio format or text format as described in the requestContentType parameter.
    public var inputStream: ClientRuntime.ByteStream?
    /// The locale where the session is in use.
    /// This member is required.
    public var localeId: Swift.String?
    /// Request-specific information passed between the client application and Amazon Lex V2 The namespace x-amz-lex: is reserved for special attributes. Don't create any request attributes for prefix x-amz-lex:. The requestAttributes field must be compressed using gzip and then base64 encoded before sending to Amazon Lex V2.
    public var requestAttributes: Swift.String?
    /// Indicates the format for audio input or that the content is text. The header must start with one of the following prefixes:
    ///
    /// * PCM format, audio data must be in little-endian byte order.
    ///
    /// * audio/l16; rate=16000; channels=1
    ///
    /// * audio/x-l16; sample-rate=16000; channel-count=1
    ///
    /// * audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false
    ///
    ///
    ///
    ///
    /// * Opus format
    ///
    /// * audio/x-cbr-opus-with-preamble;preamble-size=0;bit-rate=256000;frame-size-milliseconds=4
    ///
    ///
    ///
    ///
    /// * Text format
    ///
    /// * text/plain; charset=utf-8
    /// This member is required.
    public var requestContentType: Swift.String?
    /// The message that Amazon Lex V2 returns in the response can be either text or speech based on the responseContentType value.
    ///
    /// * If the value is text/plain;charset=utf-8, Amazon Lex V2 returns text in the response.
    ///
    /// * If the value begins with audio/, Amazon Lex V2 returns speech in the response. Amazon Lex V2 uses Amazon Polly to generate the speech using the configuration that you specified in the requestContentType parameter. For example, if you specify audio/mpeg as the value, Amazon Lex V2 returns speech in the MPEG format.
    ///
    /// * If the value is audio/pcm, the speech returned is audio/pcm at 16 KHz in 16-bit, little-endian format.
    ///
    /// * The following are the accepted values:
    ///
    /// * audio/mpeg
    ///
    /// * audio/ogg
    ///
    /// * audio/pcm (16 KHz)
    ///
    /// * audio/* (defaults to mpeg)
    ///
    /// * text/plain; charset=utf-8
    public var responseContentType: Swift.String?
    /// The identifier of the session in use.
    /// This member is required.
    public var sessionId: Swift.String?
    /// Sets the state of the session with the user. You can use this to set the current intent, attributes, context, and dialog action. Use the dialog action to determine the next step that Amazon Lex V2 should use in the conversation with the user. The sessionState field must be compressed using gzip and then base64 encoded before sending to Amazon Lex V2.
    public var sessionState: Swift.String?

    public init (
        botAliasId: Swift.String? = nil,
        botId: Swift.String? = nil,
        inputStream: ClientRuntime.ByteStream? = nil,
        localeId: Swift.String? = nil,
        requestAttributes: Swift.String? = nil,
        requestContentType: Swift.String? = nil,
        responseContentType: Swift.String? = nil,
        sessionId: Swift.String? = nil,
        sessionState: Swift.String? = nil
    )
    {
        self.botAliasId = botAliasId
        self.botId = botId
        self.inputStream = inputStream
        self.localeId = localeId
        self.requestAttributes = requestAttributes
        self.requestContentType = requestContentType
        self.responseContentType = responseContentType
        self.sessionId = sessionId
        self.sessionState = sessionState
    }
}
