// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexRuntimeV2ClientTypes.Slot: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case shape
        case subSlots
        case value
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let shape = self.shape {
            try encodeContainer.encode(shape.rawValue, forKey: .shape)
        }
        if let subSlots = subSlots {
            var subSlotsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .subSlots)
            for (dictKey0, slots0) in subSlots {
                try subSlotsContainer.encode(slots0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for values0 in values {
                try valuesContainer.encode(values0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(LexRuntimeV2ClientTypes.Value.self, forKey: .value)
        value = valueDecoded
        let shapeDecoded = try containerValues.decodeIfPresent(LexRuntimeV2ClientTypes.Shape.self, forKey: .shape)
        shape = shapeDecoded
        let valuesContainer = try containerValues.decodeIfPresent([LexRuntimeV2ClientTypes.Slot?].self, forKey: .values)
        var valuesDecoded0:[LexRuntimeV2ClientTypes.Slot]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [LexRuntimeV2ClientTypes.Slot]()
            for structure0 in valuesContainer {
                if let structure0 = structure0 {
                    valuesDecoded0?.append(structure0)
                }
            }
        }
        values = valuesDecoded0
        let subSlotsContainer = try containerValues.decodeIfPresent([Swift.String: LexRuntimeV2ClientTypes.Slot?].self, forKey: .subSlots)
        var subSlotsDecoded0: [Swift.String:LexRuntimeV2ClientTypes.Slot]? = nil
        if let subSlotsContainer = subSlotsContainer {
            subSlotsDecoded0 = [Swift.String:LexRuntimeV2ClientTypes.Slot]()
            for (key0, slot0) in subSlotsContainer {
                if let slot0 = slot0 {
                    subSlotsDecoded0?[key0] = slot0
                }
            }
        }
        subSlots = subSlotsDecoded0
    }
}
