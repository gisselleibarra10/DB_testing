// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexRuntimeV2ClientTypes.StartConversationResponseEventStream: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessdeniedexception = "AccessDeniedException"
        case audioresponseevent = "AudioResponseEvent"
        case badgatewayexception = "BadGatewayException"
        case conflictexception = "ConflictException"
        case dependencyfailedexception = "DependencyFailedException"
        case heartbeatevent = "HeartbeatEvent"
        case intentresultevent = "IntentResultEvent"
        case internalserverexception = "InternalServerException"
        case playbackinterruptionevent = "PlaybackInterruptionEvent"
        case resourcenotfoundexception = "ResourceNotFoundException"
        case textresponseevent = "TextResponseEvent"
        case throttlingexception = "ThrottlingException"
        case transcriptevent = "TranscriptEvent"
        case validationexception = "ValidationException"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .accessdeniedexception(accessdeniedexception):
                try container.encode(accessdeniedexception, forKey: .accessdeniedexception)
            case let .audioresponseevent(audioresponseevent):
                try container.encode(audioresponseevent, forKey: .audioresponseevent)
            case let .badgatewayexception(badgatewayexception):
                try container.encode(badgatewayexception, forKey: .badgatewayexception)
            case let .conflictexception(conflictexception):
                try container.encode(conflictexception, forKey: .conflictexception)
            case let .dependencyfailedexception(dependencyfailedexception):
                try container.encode(dependencyfailedexception, forKey: .dependencyfailedexception)
            case let .heartbeatevent(heartbeatevent):
                try container.encode(heartbeatevent, forKey: .heartbeatevent)
            case let .intentresultevent(intentresultevent):
                try container.encode(intentresultevent, forKey: .intentresultevent)
            case let .internalserverexception(internalserverexception):
                try container.encode(internalserverexception, forKey: .internalserverexception)
            case let .playbackinterruptionevent(playbackinterruptionevent):
                try container.encode(playbackinterruptionevent, forKey: .playbackinterruptionevent)
            case let .resourcenotfoundexception(resourcenotfoundexception):
                try container.encode(resourcenotfoundexception, forKey: .resourcenotfoundexception)
            case let .textresponseevent(textresponseevent):
                try container.encode(textresponseevent, forKey: .textresponseevent)
            case let .throttlingexception(throttlingexception):
                try container.encode(throttlingexception, forKey: .throttlingexception)
            case let .transcriptevent(transcriptevent):
                try container.encode(transcriptevent, forKey: .transcriptevent)
            case let .validationexception(validationexception):
                try container.encode(validationexception, forKey: .validationexception)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let playbackinterruptioneventDecoded = try values.decodeIfPresent(LexRuntimeV2ClientTypes.PlaybackInterruptionEvent.self, forKey: .playbackinterruptionevent)
        if let playbackinterruptionevent = playbackinterruptioneventDecoded {
            self = .playbackinterruptionevent(playbackinterruptionevent)
            return
        }
        let transcripteventDecoded = try values.decodeIfPresent(LexRuntimeV2ClientTypes.TranscriptEvent.self, forKey: .transcriptevent)
        if let transcriptevent = transcripteventDecoded {
            self = .transcriptevent(transcriptevent)
            return
        }
        let intentresulteventDecoded = try values.decodeIfPresent(LexRuntimeV2ClientTypes.IntentResultEvent.self, forKey: .intentresultevent)
        if let intentresultevent = intentresulteventDecoded {
            self = .intentresultevent(intentresultevent)
            return
        }
        let textresponseeventDecoded = try values.decodeIfPresent(LexRuntimeV2ClientTypes.TextResponseEvent.self, forKey: .textresponseevent)
        if let textresponseevent = textresponseeventDecoded {
            self = .textresponseevent(textresponseevent)
            return
        }
        let audioresponseeventDecoded = try values.decodeIfPresent(LexRuntimeV2ClientTypes.AudioResponseEvent.self, forKey: .audioresponseevent)
        if let audioresponseevent = audioresponseeventDecoded {
            self = .audioresponseevent(audioresponseevent)
            return
        }
        let heartbeateventDecoded = try values.decodeIfPresent(LexRuntimeV2ClientTypes.HeartbeatEvent.self, forKey: .heartbeatevent)
        if let heartbeatevent = heartbeateventDecoded {
            self = .heartbeatevent(heartbeatevent)
            return
        }
        let accessdeniedexceptionDecoded = try values.decodeIfPresent(AccessDeniedException.self, forKey: .accessdeniedexception)
        if let accessdeniedexception = accessdeniedexceptionDecoded {
            self = .accessdeniedexception(accessdeniedexception)
            return
        }
        let resourcenotfoundexceptionDecoded = try values.decodeIfPresent(ResourceNotFoundException.self, forKey: .resourcenotfoundexception)
        if let resourcenotfoundexception = resourcenotfoundexceptionDecoded {
            self = .resourcenotfoundexception(resourcenotfoundexception)
            return
        }
        let validationexceptionDecoded = try values.decodeIfPresent(ValidationException.self, forKey: .validationexception)
        if let validationexception = validationexceptionDecoded {
            self = .validationexception(validationexception)
            return
        }
        let throttlingexceptionDecoded = try values.decodeIfPresent(ThrottlingException.self, forKey: .throttlingexception)
        if let throttlingexception = throttlingexceptionDecoded {
            self = .throttlingexception(throttlingexception)
            return
        }
        let internalserverexceptionDecoded = try values.decodeIfPresent(InternalServerException.self, forKey: .internalserverexception)
        if let internalserverexception = internalserverexceptionDecoded {
            self = .internalserverexception(internalserverexception)
            return
        }
        let conflictexceptionDecoded = try values.decodeIfPresent(ConflictException.self, forKey: .conflictexception)
        if let conflictexception = conflictexceptionDecoded {
            self = .conflictexception(conflictexception)
            return
        }
        let dependencyfailedexceptionDecoded = try values.decodeIfPresent(DependencyFailedException.self, forKey: .dependencyfailedexception)
        if let dependencyfailedexception = dependencyfailedexceptionDecoded {
            self = .dependencyfailedexception(dependencyfailedexception)
            return
        }
        let badgatewayexceptionDecoded = try values.decodeIfPresent(BadGatewayException.self, forKey: .badgatewayexception)
        if let badgatewayexception = badgatewayexceptionDecoded {
            self = .badgatewayexception(badgatewayexception)
            return
        }
        self = .sdkUnknown("")
    }
}
