// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexRuntimeV2ClientTypes {
    /// Represents a chunk of audio sent from the client application to Amazon Lex V2. The audio is all or part of an utterance from the user. Amazon Lex V2 accumulates audio chunks until it recognizes a natural pause in speech before processing the input.
    public struct AudioInputEvent: Swift.Equatable {
        /// An encoded stream of audio.
        public var audioChunk: ClientRuntime.Data?
        /// A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.
        public var clientTimestampMillis: Swift.Int
        /// The encoding used for the audio chunk. You must use 8 KHz PCM 16-bit mono-channel little-endian format. The value of the field should be: audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false
        /// This member is required.
        public var contentType: Swift.String?
        /// A unique identifier that your application assigns to the event. You can use this to identify events in logs.
        public var eventId: Swift.String?

        public init (
            audioChunk: ClientRuntime.Data? = nil,
            clientTimestampMillis: Swift.Int = 0,
            contentType: Swift.String? = nil,
            eventId: Swift.String? = nil
        )
        {
            self.audioChunk = audioChunk
            self.clientTimestampMillis = clientTimestampMillis
            self.contentType = contentType
            self.eventId = eventId
        }
    }

}
