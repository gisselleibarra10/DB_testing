// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexRuntimeV2ClientTypes.StartConversationRequestEventStream: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioinputevent = "AudioInputEvent"
        case configurationevent = "ConfigurationEvent"
        case dtmfinputevent = "DTMFInputEvent"
        case disconnectionevent = "DisconnectionEvent"
        case playbackcompletionevent = "PlaybackCompletionEvent"
        case textinputevent = "TextInputEvent"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .audioinputevent(audioinputevent):
                try container.encode(audioinputevent, forKey: .audioinputevent)
            case let .configurationevent(configurationevent):
                try container.encode(configurationevent, forKey: .configurationevent)
            case let .dtmfinputevent(dtmfinputevent):
                try container.encode(dtmfinputevent, forKey: .dtmfinputevent)
            case let .disconnectionevent(disconnectionevent):
                try container.encode(disconnectionevent, forKey: .disconnectionevent)
            case let .playbackcompletionevent(playbackcompletionevent):
                try container.encode(playbackcompletionevent, forKey: .playbackcompletionevent)
            case let .textinputevent(textinputevent):
                try container.encode(textinputevent, forKey: .textinputevent)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let configurationeventDecoded = try values.decodeIfPresent(LexRuntimeV2ClientTypes.ConfigurationEvent.self, forKey: .configurationevent)
        if let configurationevent = configurationeventDecoded {
            self = .configurationevent(configurationevent)
            return
        }
        let audioinputeventDecoded = try values.decodeIfPresent(LexRuntimeV2ClientTypes.AudioInputEvent.self, forKey: .audioinputevent)
        if let audioinputevent = audioinputeventDecoded {
            self = .audioinputevent(audioinputevent)
            return
        }
        let dtmfinputeventDecoded = try values.decodeIfPresent(LexRuntimeV2ClientTypes.DTMFInputEvent.self, forKey: .dtmfinputevent)
        if let dtmfinputevent = dtmfinputeventDecoded {
            self = .dtmfinputevent(dtmfinputevent)
            return
        }
        let textinputeventDecoded = try values.decodeIfPresent(LexRuntimeV2ClientTypes.TextInputEvent.self, forKey: .textinputevent)
        if let textinputevent = textinputeventDecoded {
            self = .textinputevent(textinputevent)
            return
        }
        let playbackcompletioneventDecoded = try values.decodeIfPresent(LexRuntimeV2ClientTypes.PlaybackCompletionEvent.self, forKey: .playbackcompletionevent)
        if let playbackcompletionevent = playbackcompletioneventDecoded {
            self = .playbackcompletionevent(playbackcompletionevent)
            return
        }
        let disconnectioneventDecoded = try values.decodeIfPresent(LexRuntimeV2ClientTypes.DisconnectionEvent.self, forKey: .disconnectionevent)
        if let disconnectionevent = disconnectioneventDecoded {
            self = .disconnectionevent(disconnectionevent)
            return
        }
        self = .sdkUnknown("")
    }
}
