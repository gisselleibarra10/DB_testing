// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutSessionOutputResponse: Swift.Equatable {
    /// If the requested content type was audio, the audio version of the message to convey to the user.
    public var audioStream: ClientRuntime.ByteStream?
    /// The type of response. Same as the type specified in the responseContentType field in the request.
    public var contentType: Swift.String?
    /// A list of messages that were last sent to the user. The messages are ordered based on how you return the messages from you Lambda function or the order that the messages are defined in the bot.
    public var messages: Swift.String?
    /// Request-specific information passed between the client application and Amazon Lex V2. These are the same as the requestAttribute parameter in the call to the PutSession operation.
    public var requestAttributes: Swift.String?
    /// The identifier of the session that received the data.
    public var sessionId: Swift.String?
    /// Represents the current state of the dialog between the user and the bot. Use this to determine the progress of the conversation and what the next action may be.
    public var sessionState: Swift.String?

    public init (
        audioStream: ClientRuntime.ByteStream? = nil,
        contentType: Swift.String? = nil,
        messages: Swift.String? = nil,
        requestAttributes: Swift.String? = nil,
        sessionId: Swift.String? = nil,
        sessionState: Swift.String? = nil
    )
    {
        self.audioStream = audioStream
        self.contentType = contentType
        self.messages = messages
        self.requestAttributes = requestAttributes
        self.sessionId = sessionId
        self.sessionState = sessionState
    }
}
