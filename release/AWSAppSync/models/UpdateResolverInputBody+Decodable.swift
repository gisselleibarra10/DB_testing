// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateResolverInputBody: Swift.Equatable {
    let dataSourceName: Swift.String?
    let requestMappingTemplate: Swift.String?
    let responseMappingTemplate: Swift.String?
    let kind: AppSyncClientTypes.ResolverKind?
    let pipelineConfig: AppSyncClientTypes.PipelineConfig?
    let syncConfig: AppSyncClientTypes.SyncConfig?
    let cachingConfig: AppSyncClientTypes.CachingConfig?
    let maxBatchSize: Swift.Int
}

extension UpdateResolverInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cachingConfig
        case dataSourceName
        case kind
        case maxBatchSize
        case pipelineConfig
        case requestMappingTemplate
        case responseMappingTemplate
        case syncConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceName)
        dataSourceName = dataSourceNameDecoded
        let requestMappingTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestMappingTemplate)
        requestMappingTemplate = requestMappingTemplateDecoded
        let responseMappingTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .responseMappingTemplate)
        responseMappingTemplate = responseMappingTemplateDecoded
        let kindDecoded = try containerValues.decodeIfPresent(AppSyncClientTypes.ResolverKind.self, forKey: .kind)
        kind = kindDecoded
        let pipelineConfigDecoded = try containerValues.decodeIfPresent(AppSyncClientTypes.PipelineConfig.self, forKey: .pipelineConfig)
        pipelineConfig = pipelineConfigDecoded
        let syncConfigDecoded = try containerValues.decodeIfPresent(AppSyncClientTypes.SyncConfig.self, forKey: .syncConfig)
        syncConfig = syncConfigDecoded
        let cachingConfigDecoded = try containerValues.decodeIfPresent(AppSyncClientTypes.CachingConfig.self, forKey: .cachingConfig)
        cachingConfig = cachingConfigDecoded
        let maxBatchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxBatchSize) ?? 0
        maxBatchSize = maxBatchSizeDecoded
    }
}
