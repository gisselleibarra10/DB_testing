// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Input to update answer.
public struct UpdateAnswerInput: Swift.Equatable {
    /// A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.
    public var choiceUpdates: [Swift.String:WellArchitectedClientTypes.ChoiceUpdate]?
    /// Defines whether this question is applicable to a lens review.
    public var isApplicable: Swift.Bool
    /// The alias of the lens. For Amazon Web Services official lenses, this is either the lens alias, such as serverless, or the lens ARN, such as arn:aws:wellarchitected:us-west-2::lens/serverless. For custom lenses, this is the lens ARN, such as arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens. Each lens is identified by its [LensSummary$LensAlias].
    /// This member is required.
    public var lensAlias: Swift.String?
    /// The notes associated with the workload.
    public var notes: Swift.String?
    /// The ID of the question.
    /// This member is required.
    public var questionId: Swift.String?
    /// The reason why a question is not applicable to your workload.
    public var reason: WellArchitectedClientTypes.AnswerReason?
    /// List of selected choice IDs in a question answer. The values entered replace the previously selected choices.
    public var selectedChoices: [Swift.String]?
    /// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
    /// This member is required.
    public var workloadId: Swift.String?

    public init (
        choiceUpdates: [Swift.String:WellArchitectedClientTypes.ChoiceUpdate]? = nil,
        isApplicable: Swift.Bool = false,
        lensAlias: Swift.String? = nil,
        notes: Swift.String? = nil,
        questionId: Swift.String? = nil,
        reason: WellArchitectedClientTypes.AnswerReason? = nil,
        selectedChoices: [Swift.String]? = nil,
        workloadId: Swift.String? = nil
    )
    {
        self.choiceUpdates = choiceUpdates
        self.isApplicable = isApplicable
        self.lensAlias = lensAlias
        self.notes = notes
        self.questionId = questionId
        self.reason = reason
        self.selectedChoices = selectedChoices
        self.workloadId = workloadId
    }
}
