// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetLensVersionDifferenceOutputResponseBody: Swift.Equatable {
    let lensAlias: Swift.String?
    let lensArn: Swift.String?
    let baseLensVersion: Swift.String?
    let targetLensVersion: Swift.String?
    let latestLensVersion: Swift.String?
    let versionDifferences: WellArchitectedClientTypes.VersionDifferences?
}

extension GetLensVersionDifferenceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseLensVersion = "BaseLensVersion"
        case latestLensVersion = "LatestLensVersion"
        case lensAlias = "LensAlias"
        case lensArn = "LensArn"
        case targetLensVersion = "TargetLensVersion"
        case versionDifferences = "VersionDifferences"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lensAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lensAlias)
        lensAlias = lensAliasDecoded
        let lensArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lensArn)
        lensArn = lensArnDecoded
        let baseLensVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseLensVersion)
        baseLensVersion = baseLensVersionDecoded
        let targetLensVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetLensVersion)
        targetLensVersion = targetLensVersionDecoded
        let latestLensVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestLensVersion)
        latestLensVersion = latestLensVersionDecoded
        let versionDifferencesDecoded = try containerValues.decodeIfPresent(WellArchitectedClientTypes.VersionDifferences.self, forKey: .versionDifferences)
        versionDifferences = versionDifferencesDecoded
    }
}
