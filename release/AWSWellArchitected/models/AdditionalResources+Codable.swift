// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WellArchitectedClientTypes.AdditionalResources: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            var contentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .content)
            for urls0 in content {
                try contentContainer.encode(urls0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(WellArchitectedClientTypes.AdditionalResourceType.self, forKey: .type)
        type = typeDecoded
        let contentContainer = try containerValues.decodeIfPresent([WellArchitectedClientTypes.ChoiceContent?].self, forKey: .content)
        var contentDecoded0:[WellArchitectedClientTypes.ChoiceContent]? = nil
        if let contentContainer = contentContainer {
            contentDecoded0 = [WellArchitectedClientTypes.ChoiceContent]()
            for structure0 in contentContainer {
                if let structure0 = structure0 {
                    contentDecoded0?.append(structure0)
                }
            }
        }
        content = contentDecoded0
    }
}
