// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLensReviewImprovementsOutputResponseBody: Swift.Equatable {
    let workloadId: Swift.String?
    let milestoneNumber: Swift.Int
    let lensAlias: Swift.String?
    let lensArn: Swift.String?
    let improvementSummaries: [WellArchitectedClientTypes.ImprovementSummary]?
    let nextToken: Swift.String?
}

extension ListLensReviewImprovementsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case improvementSummaries = "ImprovementSummaries"
        case lensAlias = "LensAlias"
        case lensArn = "LensArn"
        case milestoneNumber = "MilestoneNumber"
        case nextToken = "NextToken"
        case workloadId = "WorkloadId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workloadIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workloadId)
        workloadId = workloadIdDecoded
        let milestoneNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .milestoneNumber) ?? 0
        milestoneNumber = milestoneNumberDecoded
        let lensAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lensAlias)
        lensAlias = lensAliasDecoded
        let lensArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lensArn)
        lensArn = lensArnDecoded
        let improvementSummariesContainer = try containerValues.decodeIfPresent([WellArchitectedClientTypes.ImprovementSummary?].self, forKey: .improvementSummaries)
        var improvementSummariesDecoded0:[WellArchitectedClientTypes.ImprovementSummary]? = nil
        if let improvementSummariesContainer = improvementSummariesContainer {
            improvementSummariesDecoded0 = [WellArchitectedClientTypes.ImprovementSummary]()
            for structure0 in improvementSummariesContainer {
                if let structure0 = structure0 {
                    improvementSummariesDecoded0?.append(structure0)
                }
            }
        }
        improvementSummaries = improvementSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
