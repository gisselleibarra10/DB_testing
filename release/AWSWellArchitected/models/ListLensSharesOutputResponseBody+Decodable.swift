// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLensSharesOutputResponseBody: Swift.Equatable {
    let lensShareSummaries: [WellArchitectedClientTypes.LensShareSummary]?
    let nextToken: Swift.String?
}

extension ListLensSharesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lensShareSummaries = "LensShareSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lensShareSummariesContainer = try containerValues.decodeIfPresent([WellArchitectedClientTypes.LensShareSummary?].self, forKey: .lensShareSummaries)
        var lensShareSummariesDecoded0:[WellArchitectedClientTypes.LensShareSummary]? = nil
        if let lensShareSummariesContainer = lensShareSummariesContainer {
            lensShareSummariesDecoded0 = [WellArchitectedClientTypes.LensShareSummary]()
            for structure0 in lensShareSummariesContainer {
                if let structure0 = structure0 {
                    lensShareSummariesDecoded0?.append(structure0)
                }
            }
        }
        lensShareSummaries = lensShareSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
