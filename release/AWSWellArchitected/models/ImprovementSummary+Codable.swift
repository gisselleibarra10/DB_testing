// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WellArchitectedClientTypes.ImprovementSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case improvementPlanUrl = "ImprovementPlanUrl"
        case improvementPlans = "ImprovementPlans"
        case pillarId = "PillarId"
        case questionId = "QuestionId"
        case questionTitle = "QuestionTitle"
        case risk = "Risk"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let improvementPlanUrl = self.improvementPlanUrl {
            try encodeContainer.encode(improvementPlanUrl, forKey: .improvementPlanUrl)
        }
        if let improvementPlans = improvementPlans {
            var improvementPlansContainer = encodeContainer.nestedUnkeyedContainer(forKey: .improvementPlans)
            for choiceimprovementplans0 in improvementPlans {
                try improvementPlansContainer.encode(choiceimprovementplans0)
            }
        }
        if let pillarId = self.pillarId {
            try encodeContainer.encode(pillarId, forKey: .pillarId)
        }
        if let questionId = self.questionId {
            try encodeContainer.encode(questionId, forKey: .questionId)
        }
        if let questionTitle = self.questionTitle {
            try encodeContainer.encode(questionTitle, forKey: .questionTitle)
        }
        if let risk = self.risk {
            try encodeContainer.encode(risk.rawValue, forKey: .risk)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let questionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .questionId)
        questionId = questionIdDecoded
        let pillarIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pillarId)
        pillarId = pillarIdDecoded
        let questionTitleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .questionTitle)
        questionTitle = questionTitleDecoded
        let riskDecoded = try containerValues.decodeIfPresent(WellArchitectedClientTypes.Risk.self, forKey: .risk)
        risk = riskDecoded
        let improvementPlanUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .improvementPlanUrl)
        improvementPlanUrl = improvementPlanUrlDecoded
        let improvementPlansContainer = try containerValues.decodeIfPresent([WellArchitectedClientTypes.ChoiceImprovementPlan?].self, forKey: .improvementPlans)
        var improvementPlansDecoded0:[WellArchitectedClientTypes.ChoiceImprovementPlan]? = nil
        if let improvementPlansContainer = improvementPlansContainer {
            improvementPlansDecoded0 = [WellArchitectedClientTypes.ChoiceImprovementPlan]()
            for structure0 in improvementPlansContainer {
                if let structure0 = structure0 {
                    improvementPlansDecoded0?.append(structure0)
                }
            }
        }
        improvementPlans = improvementPlansDecoded0
    }
}
