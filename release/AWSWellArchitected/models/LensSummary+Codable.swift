// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WellArchitectedClientTypes.LensSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case description = "Description"
        case lensAlias = "LensAlias"
        case lensArn = "LensArn"
        case lensName = "LensName"
        case lensStatus = "LensStatus"
        case lensType = "LensType"
        case lensVersion = "LensVersion"
        case owner = "Owner"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lensAlias = self.lensAlias {
            try encodeContainer.encode(lensAlias, forKey: .lensAlias)
        }
        if let lensArn = self.lensArn {
            try encodeContainer.encode(lensArn, forKey: .lensArn)
        }
        if let lensName = self.lensName {
            try encodeContainer.encode(lensName, forKey: .lensName)
        }
        if let lensStatus = self.lensStatus {
            try encodeContainer.encode(lensStatus.rawValue, forKey: .lensStatus)
        }
        if let lensType = self.lensType {
            try encodeContainer.encode(lensType.rawValue, forKey: .lensType)
        }
        if let lensVersion = self.lensVersion {
            try encodeContainer.encode(lensVersion, forKey: .lensVersion)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lensArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lensArn)
        lensArn = lensArnDecoded
        let lensAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lensAlias)
        lensAlias = lensAliasDecoded
        let lensNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lensName)
        lensName = lensNameDecoded
        let lensTypeDecoded = try containerValues.decodeIfPresent(WellArchitectedClientTypes.LensType.self, forKey: .lensType)
        lensType = lensTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let lensVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lensVersion)
        lensVersion = lensVersionDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let lensStatusDecoded = try containerValues.decodeIfPresent(WellArchitectedClientTypes.LensStatus.self, forKey: .lensStatus)
        lensStatus = lensStatusDecoded
    }
}
