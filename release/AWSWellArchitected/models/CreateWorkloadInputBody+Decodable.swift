// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateWorkloadInputBody: Swift.Equatable {
    let workloadName: Swift.String?
    let description: Swift.String?
    let environment: WellArchitectedClientTypes.WorkloadEnvironment?
    let accountIds: [Swift.String]?
    let awsRegions: [Swift.String]?
    let nonAwsRegions: [Swift.String]?
    let pillarPriorities: [Swift.String]?
    let architecturalDesign: Swift.String?
    let reviewOwner: Swift.String?
    let industryType: Swift.String?
    let industry: Swift.String?
    let lenses: [Swift.String]?
    let notes: Swift.String?
    let clientRequestToken: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateWorkloadInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds = "AccountIds"
        case architecturalDesign = "ArchitecturalDesign"
        case awsRegions = "AwsRegions"
        case clientRequestToken = "ClientRequestToken"
        case description = "Description"
        case environment = "Environment"
        case industry = "Industry"
        case industryType = "IndustryType"
        case lenses = "Lenses"
        case nonAwsRegions = "NonAwsRegions"
        case notes = "Notes"
        case pillarPriorities = "PillarPriorities"
        case reviewOwner = "ReviewOwner"
        case tags = "Tags"
        case workloadName = "WorkloadName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workloadNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workloadName)
        workloadName = workloadNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let environmentDecoded = try containerValues.decodeIfPresent(WellArchitectedClientTypes.WorkloadEnvironment.self, forKey: .environment)
        environment = environmentDecoded
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let awsRegionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .awsRegions)
        var awsRegionsDecoded0:[Swift.String]? = nil
        if let awsRegionsContainer = awsRegionsContainer {
            awsRegionsDecoded0 = [Swift.String]()
            for string0 in awsRegionsContainer {
                if let string0 = string0 {
                    awsRegionsDecoded0?.append(string0)
                }
            }
        }
        awsRegions = awsRegionsDecoded0
        let nonAwsRegionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .nonAwsRegions)
        var nonAwsRegionsDecoded0:[Swift.String]? = nil
        if let nonAwsRegionsContainer = nonAwsRegionsContainer {
            nonAwsRegionsDecoded0 = [Swift.String]()
            for string0 in nonAwsRegionsContainer {
                if let string0 = string0 {
                    nonAwsRegionsDecoded0?.append(string0)
                }
            }
        }
        nonAwsRegions = nonAwsRegionsDecoded0
        let pillarPrioritiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .pillarPriorities)
        var pillarPrioritiesDecoded0:[Swift.String]? = nil
        if let pillarPrioritiesContainer = pillarPrioritiesContainer {
            pillarPrioritiesDecoded0 = [Swift.String]()
            for string0 in pillarPrioritiesContainer {
                if let string0 = string0 {
                    pillarPrioritiesDecoded0?.append(string0)
                }
            }
        }
        pillarPriorities = pillarPrioritiesDecoded0
        let architecturalDesignDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .architecturalDesign)
        architecturalDesign = architecturalDesignDecoded
        let reviewOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reviewOwner)
        reviewOwner = reviewOwnerDecoded
        let industryTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .industryType)
        industryType = industryTypeDecoded
        let industryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .industry)
        industry = industryDecoded
        let lensesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .lenses)
        var lensesDecoded0:[Swift.String]? = nil
        if let lensesContainer = lensesContainer {
            lensesDecoded0 = [Swift.String]()
            for string0 in lensesContainer {
                if let string0 = string0 {
                    lensesDecoded0?.append(string0)
                }
            }
        }
        lenses = lensesDecoded0
        let notesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notes)
        notes = notesDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
