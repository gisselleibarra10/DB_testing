// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateAnswerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case choiceUpdates = "ChoiceUpdates"
        case isApplicable = "IsApplicable"
        case notes = "Notes"
        case reason = "Reason"
        case selectedChoices = "SelectedChoices"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let choiceUpdates = choiceUpdates {
            var choiceUpdatesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .choiceUpdates)
            for (dictKey0, choiceupdates0) in choiceUpdates {
                try choiceUpdatesContainer.encode(choiceupdates0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if isApplicable != false {
            try encodeContainer.encode(isApplicable, forKey: .isApplicable)
        }
        if let notes = self.notes {
            try encodeContainer.encode(notes, forKey: .notes)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason.rawValue, forKey: .reason)
        }
        if let selectedChoices = selectedChoices {
            var selectedChoicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .selectedChoices)
            for selectedchoices0 in selectedChoices {
                try selectedChoicesContainer.encode(selectedchoices0)
            }
        }
    }
}
