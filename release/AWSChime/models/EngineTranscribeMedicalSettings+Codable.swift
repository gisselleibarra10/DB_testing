// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ChimeClientTypes.EngineTranscribeMedicalSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentIdentificationType = "ContentIdentificationType"
        case languageCode = "LanguageCode"
        case region = "Region"
        case specialty = "Specialty"
        case type = "Type"
        case vocabularyName = "VocabularyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentIdentificationType = self.contentIdentificationType {
            try encodeContainer.encode(contentIdentificationType.rawValue, forKey: .contentIdentificationType)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let region = self.region {
            try encodeContainer.encode(region.rawValue, forKey: .region)
        }
        if let specialty = self.specialty {
            try encodeContainer.encode(specialty.rawValue, forKey: .specialty)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let vocabularyName = self.vocabularyName {
            try encodeContainer.encode(vocabularyName, forKey: .vocabularyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(ChimeClientTypes.TranscribeMedicalLanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let specialtyDecoded = try containerValues.decodeIfPresent(ChimeClientTypes.TranscribeMedicalSpecialty.self, forKey: .specialty)
        specialty = specialtyDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ChimeClientTypes.TranscribeMedicalType.self, forKey: .type)
        type = typeDecoded
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let regionDecoded = try containerValues.decodeIfPresent(ChimeClientTypes.TranscribeMedicalRegion.self, forKey: .region)
        region = regionDecoded
        let contentIdentificationTypeDecoded = try containerValues.decodeIfPresent(ChimeClientTypes.TranscribeMedicalContentIdentificationType.self, forKey: .contentIdentificationType)
        contentIdentificationType = contentIdentificationTypeDecoded
    }
}
