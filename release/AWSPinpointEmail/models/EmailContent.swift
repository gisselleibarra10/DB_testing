// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension PinpointEmailClientTypes {
    /// An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.
    public struct EmailContent: Swift.Equatable {
        /// The raw email message. The message has to meet the following criteria:
        ///
        /// * The message has to contain a header and a body, separated by one blank line.
        ///
        /// * All of the required header fields must be present in the message.
        ///
        /// * Each part of a multipart MIME message must be formatted properly.
        ///
        /// * If you include attachments, they must be in a file format that Amazon Pinpoint supports.
        ///
        /// * The entire message must be Base64 encoded.
        ///
        /// * If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, you should encode that content to ensure that recipients' email clients render the message properly.
        ///
        /// * The length of any single line of text in the message can't exceed 1,000 characters. This restriction is defined in [RFC 5321](https://tools.ietf.org/html/rfc5321).
        public var raw: PinpointEmailClientTypes.RawMessage?
        /// The simple email message. The message consists of a subject and a message body.
        public var simple: PinpointEmailClientTypes.Message?
        /// The template to use for the email message.
        public var template: PinpointEmailClientTypes.Template?

        public init (
            raw: PinpointEmailClientTypes.RawMessage? = nil,
            simple: PinpointEmailClientTypes.Message? = nil,
            template: PinpointEmailClientTypes.Template? = nil
        )
        {
            self.raw = raw
            self.simple = simple
            self.template = template
        }
    }

}
