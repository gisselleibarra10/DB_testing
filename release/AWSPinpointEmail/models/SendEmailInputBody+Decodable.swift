// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SendEmailInputBody: Swift.Equatable {
    let fromEmailAddress: Swift.String?
    let destination: PinpointEmailClientTypes.Destination?
    let replyToAddresses: [Swift.String]?
    let feedbackForwardingEmailAddress: Swift.String?
    let content: PinpointEmailClientTypes.EmailContent?
    let emailTags: [PinpointEmailClientTypes.MessageTag]?
    let configurationSetName: Swift.String?
}

extension SendEmailInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case content = "Content"
        case destination = "Destination"
        case emailTags = "EmailTags"
        case feedbackForwardingEmailAddress = "FeedbackForwardingEmailAddress"
        case fromEmailAddress = "FromEmailAddress"
        case replyToAddresses = "ReplyToAddresses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
        let replyToAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .replyToAddresses)
        var replyToAddressesDecoded0:[Swift.String]? = nil
        if let replyToAddressesContainer = replyToAddressesContainer {
            replyToAddressesDecoded0 = [Swift.String]()
            for string0 in replyToAddressesContainer {
                if let string0 = string0 {
                    replyToAddressesDecoded0?.append(string0)
                }
            }
        }
        replyToAddresses = replyToAddressesDecoded0
        let feedbackForwardingEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackForwardingEmailAddress)
        feedbackForwardingEmailAddress = feedbackForwardingEmailAddressDecoded
        let contentDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.EmailContent.self, forKey: .content)
        content = contentDecoded
        let emailTagsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.MessageTag?].self, forKey: .emailTags)
        var emailTagsDecoded0:[PinpointEmailClientTypes.MessageTag]? = nil
        if let emailTagsContainer = emailTagsContainer {
            emailTagsDecoded0 = [PinpointEmailClientTypes.MessageTag]()
            for structure0 in emailTagsContainer {
                if let structure0 = structure0 {
                    emailTagsDecoded0?.append(structure0)
                }
            }
        }
        emailTags = emailTagsDecoded0
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}
