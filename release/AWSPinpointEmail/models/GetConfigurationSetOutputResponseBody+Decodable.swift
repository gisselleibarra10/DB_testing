// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetConfigurationSetOutputResponseBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let trackingOptions: PinpointEmailClientTypes.TrackingOptions?
    let deliveryOptions: PinpointEmailClientTypes.DeliveryOptions?
    let reputationOptions: PinpointEmailClientTypes.ReputationOptions?
    let sendingOptions: PinpointEmailClientTypes.SendingOptions?
    let tags: [PinpointEmailClientTypes.Tag]?
}

extension GetConfigurationSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case deliveryOptions = "DeliveryOptions"
        case reputationOptions = "ReputationOptions"
        case sendingOptions = "SendingOptions"
        case tags = "Tags"
        case trackingOptions = "TrackingOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let trackingOptionsDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.TrackingOptions.self, forKey: .trackingOptions)
        trackingOptions = trackingOptionsDecoded
        let deliveryOptionsDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.DeliveryOptions.self, forKey: .deliveryOptions)
        deliveryOptions = deliveryOptionsDecoded
        let reputationOptionsDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.ReputationOptions.self, forKey: .reputationOptions)
        reputationOptions = reputationOptionsDecoded
        let sendingOptionsDecoded = try containerValues.decodeIfPresent(PinpointEmailClientTypes.SendingOptions.self, forKey: .sendingOptions)
        sendingOptions = sendingOptionsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PinpointEmailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PinpointEmailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PinpointEmailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
