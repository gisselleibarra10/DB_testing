// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TranscribeClientTypes.CategoryProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case categoryName = "CategoryName"
        case createTime = "CreateTime"
        case lastUpdateTime = "LastUpdateTime"
        case rules = "Rules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let categoryName = self.categoryName {
            try encodeContainer.encode(categoryName, forKey: .categoryName)
        }
        if let createTime = self.createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rulelist0 in rules {
                try rulesContainer.encode(rulelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let categoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .categoryName)
        categoryName = categoryNameDecoded
        let rulesContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[TranscribeClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [TranscribeClientTypes.Rule]()
            for union0 in rulesContainer {
                if let union0 = union0 {
                    rulesDecoded0?.append(union0)
                }
            }
        }
        rules = rulesDecoded0
        let createTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}
