// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension TranscribeClientTypes {
    public enum LanguageCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case afZa
        case arAe
        case arSa
        case daDk
        case deCh
        case deDe
        case enAb
        case enAu
        case enGb
        case enIe
        case enIn
        case enNz
        case enUs
        case enWl
        case enZa
        case esEs
        case esUs
        case faIr
        case frCa
        case frFr
        case heIl
        case hiIn
        case idId
        case itIt
        case jaJp
        case koKr
        case msMy
        case nlNl
        case ptBr
        case ptPt
        case ruRu
        case taIn
        case teIn
        case thTh
        case trTr
        case zhCn
        case zhTw
        case sdkUnknown(Swift.String)

        public static var allCases: [LanguageCode] {
            return [
                .afZa,
                .arAe,
                .arSa,
                .daDk,
                .deCh,
                .deDe,
                .enAb,
                .enAu,
                .enGb,
                .enIe,
                .enIn,
                .enNz,
                .enUs,
                .enWl,
                .enZa,
                .esEs,
                .esUs,
                .faIr,
                .frCa,
                .frFr,
                .heIl,
                .hiIn,
                .idId,
                .itIt,
                .jaJp,
                .koKr,
                .msMy,
                .nlNl,
                .ptBr,
                .ptPt,
                .ruRu,
                .taIn,
                .teIn,
                .thTh,
                .trTr,
                .zhCn,
                .zhTw,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .afZa: return "af-ZA"
            case .arAe: return "ar-AE"
            case .arSa: return "ar-SA"
            case .daDk: return "da-DK"
            case .deCh: return "de-CH"
            case .deDe: return "de-DE"
            case .enAb: return "en-AB"
            case .enAu: return "en-AU"
            case .enGb: return "en-GB"
            case .enIe: return "en-IE"
            case .enIn: return "en-IN"
            case .enNz: return "en-NZ"
            case .enUs: return "en-US"
            case .enWl: return "en-WL"
            case .enZa: return "en-ZA"
            case .esEs: return "es-ES"
            case .esUs: return "es-US"
            case .faIr: return "fa-IR"
            case .frCa: return "fr-CA"
            case .frFr: return "fr-FR"
            case .heIl: return "he-IL"
            case .hiIn: return "hi-IN"
            case .idId: return "id-ID"
            case .itIt: return "it-IT"
            case .jaJp: return "ja-JP"
            case .koKr: return "ko-KR"
            case .msMy: return "ms-MY"
            case .nlNl: return "nl-NL"
            case .ptBr: return "pt-BR"
            case .ptPt: return "pt-PT"
            case .ruRu: return "ru-RU"
            case .taIn: return "ta-IN"
            case .teIn: return "te-IN"
            case .thTh: return "th-TH"
            case .trTr: return "tr-TR"
            case .zhCn: return "zh-CN"
            case .zhTw: return "zh-TW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LanguageCode(rawValue: rawValue) ?? LanguageCode.sdkUnknown(rawValue)
        }
    }
}
