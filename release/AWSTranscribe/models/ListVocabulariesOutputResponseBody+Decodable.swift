// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListVocabulariesOutputResponseBody: Swift.Equatable {
    let status: TranscribeClientTypes.VocabularyState?
    let nextToken: Swift.String?
    let vocabularies: [TranscribeClientTypes.VocabularyInfo]?
}

extension ListVocabulariesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case status = "Status"
        case vocabularies = "Vocabularies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.VocabularyState.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let vocabulariesContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.VocabularyInfo?].self, forKey: .vocabularies)
        var vocabulariesDecoded0:[TranscribeClientTypes.VocabularyInfo]? = nil
        if let vocabulariesContainer = vocabulariesContainer {
            vocabulariesDecoded0 = [TranscribeClientTypes.VocabularyInfo]()
            for structure0 in vocabulariesContainer {
                if let structure0 = structure0 {
                    vocabulariesDecoded0?.append(structure0)
                }
            }
        }
        vocabularies = vocabulariesDecoded0
    }
}
