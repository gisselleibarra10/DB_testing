// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TranscribeClientTypes.SubtitlesOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case formats = "Formats"
        case outputStartIndex = "OutputStartIndex"
        case subtitleFileUris = "SubtitleFileUris"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let formats = formats {
            var formatsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .formats)
            for subtitleformats0 in formats {
                try formatsContainer.encode(subtitleformats0.rawValue)
            }
        }
        if let outputStartIndex = self.outputStartIndex {
            try encodeContainer.encode(outputStartIndex, forKey: .outputStartIndex)
        }
        if let subtitleFileUris = subtitleFileUris {
            var subtitleFileUrisContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subtitleFileUris)
            for subtitlefileuris0 in subtitleFileUris {
                try subtitleFileUrisContainer.encode(subtitlefileuris0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let formatsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.SubtitleFormat?].self, forKey: .formats)
        var formatsDecoded0:[TranscribeClientTypes.SubtitleFormat]? = nil
        if let formatsContainer = formatsContainer {
            formatsDecoded0 = [TranscribeClientTypes.SubtitleFormat]()
            for string0 in formatsContainer {
                if let string0 = string0 {
                    formatsDecoded0?.append(string0)
                }
            }
        }
        formats = formatsDecoded0
        let subtitleFileUrisContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subtitleFileUris)
        var subtitleFileUrisDecoded0:[Swift.String]? = nil
        if let subtitleFileUrisContainer = subtitleFileUrisContainer {
            subtitleFileUrisDecoded0 = [Swift.String]()
            for string0 in subtitleFileUrisContainer {
                if let string0 = string0 {
                    subtitleFileUrisDecoded0?.append(string0)
                }
            }
        }
        subtitleFileUris = subtitleFileUrisDecoded0
        let outputStartIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .outputStartIndex)
        outputStartIndex = outputStartIndexDecoded
    }
}
