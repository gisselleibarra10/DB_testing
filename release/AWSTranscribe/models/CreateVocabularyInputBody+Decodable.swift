// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateVocabularyInputBody: Swift.Equatable {
    let languageCode: TranscribeClientTypes.LanguageCode?
    let phrases: [Swift.String]?
    let vocabularyFileUri: Swift.String?
    let tags: [TranscribeClientTypes.Tag]?
}

extension CreateVocabularyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case phrases = "Phrases"
        case tags = "Tags"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let phrasesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .phrases)
        var phrasesDecoded0:[Swift.String]? = nil
        if let phrasesContainer = phrasesContainer {
            phrasesDecoded0 = [Swift.String]()
            for string0 in phrasesContainer {
                if let string0 = string0 {
                    phrasesDecoded0?.append(string0)
                }
            }
        }
        phrases = phrasesDecoded0
        let vocabularyFileUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyFileUri)
        vocabularyFileUri = vocabularyFileUriDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TranscribeClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TranscribeClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
