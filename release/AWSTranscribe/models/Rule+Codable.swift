// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TranscribeClientTypes.Rule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case interruptionfilter = "InterruptionFilter"
        case nontalktimefilter = "NonTalkTimeFilter"
        case sentimentfilter = "SentimentFilter"
        case transcriptfilter = "TranscriptFilter"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .interruptionfilter(interruptionfilter):
                try container.encode(interruptionfilter, forKey: .interruptionfilter)
            case let .nontalktimefilter(nontalktimefilter):
                try container.encode(nontalktimefilter, forKey: .nontalktimefilter)
            case let .sentimentfilter(sentimentfilter):
                try container.encode(sentimentfilter, forKey: .sentimentfilter)
            case let .transcriptfilter(transcriptfilter):
                try container.encode(transcriptfilter, forKey: .transcriptfilter)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let nontalktimefilterDecoded = try values.decodeIfPresent(TranscribeClientTypes.NonTalkTimeFilter.self, forKey: .nontalktimefilter)
        if let nontalktimefilter = nontalktimefilterDecoded {
            self = .nontalktimefilter(nontalktimefilter)
            return
        }
        let interruptionfilterDecoded = try values.decodeIfPresent(TranscribeClientTypes.InterruptionFilter.self, forKey: .interruptionfilter)
        if let interruptionfilter = interruptionfilterDecoded {
            self = .interruptionfilter(interruptionfilter)
            return
        }
        let transcriptfilterDecoded = try values.decodeIfPresent(TranscribeClientTypes.TranscriptFilter.self, forKey: .transcriptfilter)
        if let transcriptfilter = transcriptfilterDecoded {
            self = .transcriptfilter(transcriptfilter)
            return
        }
        let sentimentfilterDecoded = try values.decodeIfPresent(TranscribeClientTypes.SentimentFilter.self, forKey: .sentimentfilter)
        if let sentimentfilter = sentimentfilterDecoded {
            self = .sentimentfilter(sentimentfilter)
            return
        }
        self = .sdkUnknown("")
    }
}
