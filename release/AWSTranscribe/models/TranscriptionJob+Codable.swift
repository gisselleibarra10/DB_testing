// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TranscribeClientTypes.TranscriptionJob: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionTime = "CompletionTime"
        case contentRedaction = "ContentRedaction"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case identifiedLanguageScore = "IdentifiedLanguageScore"
        case identifyLanguage = "IdentifyLanguage"
        case identifyMultipleLanguages = "IdentifyMultipleLanguages"
        case jobExecutionSettings = "JobExecutionSettings"
        case languageCode = "LanguageCode"
        case languageCodes = "LanguageCodes"
        case languageIdSettings = "LanguageIdSettings"
        case languageOptions = "LanguageOptions"
        case media = "Media"
        case mediaFormat = "MediaFormat"
        case mediaSampleRateHertz = "MediaSampleRateHertz"
        case modelSettings = "ModelSettings"
        case settings = "Settings"
        case startTime = "StartTime"
        case subtitles = "Subtitles"
        case tags = "Tags"
        case transcript = "Transcript"
        case transcriptionJobName = "TranscriptionJobName"
        case transcriptionJobStatus = "TranscriptionJobStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = self.completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let contentRedaction = self.contentRedaction {
            try encodeContainer.encode(contentRedaction, forKey: .contentRedaction)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let identifiedLanguageScore = self.identifiedLanguageScore {
            try encodeContainer.encode(identifiedLanguageScore, forKey: .identifiedLanguageScore)
        }
        if let identifyLanguage = self.identifyLanguage {
            try encodeContainer.encode(identifyLanguage, forKey: .identifyLanguage)
        }
        if let identifyMultipleLanguages = self.identifyMultipleLanguages {
            try encodeContainer.encode(identifyMultipleLanguages, forKey: .identifyMultipleLanguages)
        }
        if let jobExecutionSettings = self.jobExecutionSettings {
            try encodeContainer.encode(jobExecutionSettings, forKey: .jobExecutionSettings)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let languageCodes = languageCodes {
            var languageCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .languageCodes)
            for languagecodelist0 in languageCodes {
                try languageCodesContainer.encode(languagecodelist0)
            }
        }
        if let languageIdSettings = languageIdSettings {
            var languageIdSettingsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .languageIdSettings)
            for (dictKey0, languageidsettingsmap0) in languageIdSettings {
                try languageIdSettingsContainer.encode(languageidsettingsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let languageOptions = languageOptions {
            var languageOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .languageOptions)
            for languageoptions0 in languageOptions {
                try languageOptionsContainer.encode(languageoptions0.rawValue)
            }
        }
        if let media = self.media {
            try encodeContainer.encode(media, forKey: .media)
        }
        if let mediaFormat = self.mediaFormat {
            try encodeContainer.encode(mediaFormat.rawValue, forKey: .mediaFormat)
        }
        if let mediaSampleRateHertz = self.mediaSampleRateHertz {
            try encodeContainer.encode(mediaSampleRateHertz, forKey: .mediaSampleRateHertz)
        }
        if let modelSettings = self.modelSettings {
            try encodeContainer.encode(modelSettings, forKey: .modelSettings)
        }
        if let settings = self.settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let subtitles = self.subtitles {
            try encodeContainer.encode(subtitles, forKey: .subtitles)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let transcript = self.transcript {
            try encodeContainer.encode(transcript, forKey: .transcript)
        }
        if let transcriptionJobName = self.transcriptionJobName {
            try encodeContainer.encode(transcriptionJobName, forKey: .transcriptionJobName)
        }
        if let transcriptionJobStatus = self.transcriptionJobStatus {
            try encodeContainer.encode(transcriptionJobStatus.rawValue, forKey: .transcriptionJobStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptionJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transcriptionJobName)
        transcriptionJobName = transcriptionJobNameDecoded
        let transcriptionJobStatusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.TranscriptionJobStatus.self, forKey: .transcriptionJobStatus)
        transcriptionJobStatus = transcriptionJobStatusDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let mediaSampleRateHertzDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mediaSampleRateHertz)
        mediaSampleRateHertz = mediaSampleRateHertzDecoded
        let mediaFormatDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.MediaFormat.self, forKey: .mediaFormat)
        mediaFormat = mediaFormatDecoded
        let mediaDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Media.self, forKey: .media)
        media = mediaDecoded
        let transcriptDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Transcript.self, forKey: .transcript)
        transcript = transcriptDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Settings.self, forKey: .settings)
        settings = settingsDecoded
        let modelSettingsDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ModelSettings.self, forKey: .modelSettings)
        modelSettings = modelSettingsDecoded
        let jobExecutionSettingsDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.JobExecutionSettings.self, forKey: .jobExecutionSettings)
        jobExecutionSettings = jobExecutionSettingsDecoded
        let contentRedactionDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ContentRedaction.self, forKey: .contentRedaction)
        contentRedaction = contentRedactionDecoded
        let identifyLanguageDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .identifyLanguage)
        identifyLanguage = identifyLanguageDecoded
        let identifyMultipleLanguagesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .identifyMultipleLanguages)
        identifyMultipleLanguages = identifyMultipleLanguagesDecoded
        let languageOptionsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.LanguageCode?].self, forKey: .languageOptions)
        var languageOptionsDecoded0:[TranscribeClientTypes.LanguageCode]? = nil
        if let languageOptionsContainer = languageOptionsContainer {
            languageOptionsDecoded0 = [TranscribeClientTypes.LanguageCode]()
            for string0 in languageOptionsContainer {
                if let string0 = string0 {
                    languageOptionsDecoded0?.append(string0)
                }
            }
        }
        languageOptions = languageOptionsDecoded0
        let identifiedLanguageScoreDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .identifiedLanguageScore)
        identifiedLanguageScore = identifiedLanguageScoreDecoded
        let languageCodesContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.LanguageCodeItem?].self, forKey: .languageCodes)
        var languageCodesDecoded0:[TranscribeClientTypes.LanguageCodeItem]? = nil
        if let languageCodesContainer = languageCodesContainer {
            languageCodesDecoded0 = [TranscribeClientTypes.LanguageCodeItem]()
            for structure0 in languageCodesContainer {
                if let structure0 = structure0 {
                    languageCodesDecoded0?.append(structure0)
                }
            }
        }
        languageCodes = languageCodesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TranscribeClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TranscribeClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let subtitlesDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.SubtitlesOutput.self, forKey: .subtitles)
        subtitles = subtitlesDecoded
        let languageIdSettingsContainer = try containerValues.decodeIfPresent([Swift.String: TranscribeClientTypes.LanguageIdSettings?].self, forKey: .languageIdSettings)
        var languageIdSettingsDecoded0: [Swift.String:TranscribeClientTypes.LanguageIdSettings]? = nil
        if let languageIdSettingsContainer = languageIdSettingsContainer {
            languageIdSettingsDecoded0 = [Swift.String:TranscribeClientTypes.LanguageIdSettings]()
            for (key0, languageidsettings0) in languageIdSettingsContainer {
                if let languageidsettings0 = languageidsettings0 {
                    languageIdSettingsDecoded0?[key0] = languageidsettings0
                }
            }
        }
        languageIdSettings = languageIdSettingsDecoded0
    }
}
