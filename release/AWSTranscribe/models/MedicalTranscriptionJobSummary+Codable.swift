// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TranscribeClientTypes.MedicalTranscriptionJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionTime = "CompletionTime"
        case contentIdentificationType = "ContentIdentificationType"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case languageCode = "LanguageCode"
        case medicalTranscriptionJobName = "MedicalTranscriptionJobName"
        case outputLocationType = "OutputLocationType"
        case specialty = "Specialty"
        case startTime = "StartTime"
        case transcriptionJobStatus = "TranscriptionJobStatus"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = self.completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let contentIdentificationType = self.contentIdentificationType {
            try encodeContainer.encode(contentIdentificationType.rawValue, forKey: .contentIdentificationType)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let medicalTranscriptionJobName = self.medicalTranscriptionJobName {
            try encodeContainer.encode(medicalTranscriptionJobName, forKey: .medicalTranscriptionJobName)
        }
        if let outputLocationType = self.outputLocationType {
            try encodeContainer.encode(outputLocationType.rawValue, forKey: .outputLocationType)
        }
        if let specialty = self.specialty {
            try encodeContainer.encode(specialty.rawValue, forKey: .specialty)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let transcriptionJobStatus = self.transcriptionJobStatus {
            try encodeContainer.encode(transcriptionJobStatus.rawValue, forKey: .transcriptionJobStatus)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let medicalTranscriptionJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .medicalTranscriptionJobName)
        medicalTranscriptionJobName = medicalTranscriptionJobNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let transcriptionJobStatusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.TranscriptionJobStatus.self, forKey: .transcriptionJobStatus)
        transcriptionJobStatus = transcriptionJobStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let outputLocationTypeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.OutputLocationType.self, forKey: .outputLocationType)
        outputLocationType = outputLocationTypeDecoded
        let specialtyDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Specialty.self, forKey: .specialty)
        specialty = specialtyDecoded
        let contentIdentificationTypeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.MedicalContentIdentificationType.self, forKey: .contentIdentificationType)
        contentIdentificationType = contentIdentificationTypeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ModelType.self, forKey: .type)
        type = typeDecoded
    }
}
