// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TranscribeClientTypes.RelativeTimeRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endPercentage = "EndPercentage"
        case first = "First"
        case last = "Last"
        case startPercentage = "StartPercentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endPercentage = self.endPercentage {
            try encodeContainer.encode(endPercentage, forKey: .endPercentage)
        }
        if let first = self.first {
            try encodeContainer.encode(first, forKey: .first)
        }
        if let last = self.last {
            try encodeContainer.encode(last, forKey: .last)
        }
        if let startPercentage = self.startPercentage {
            try encodeContainer.encode(startPercentage, forKey: .startPercentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startPercentage)
        startPercentage = startPercentageDecoded
        let endPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endPercentage)
        endPercentage = endPercentageDecoded
        let firstDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .first)
        first = firstDecoded
        let lastDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .last)
        last = lastDecoded
    }
}
