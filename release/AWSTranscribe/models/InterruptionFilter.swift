// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension TranscribeClientTypes {
    /// Flag the presence or absence of interruptions in your Call Analytics transcription output. Rules using InterruptionFilter are designed to match:
    ///
    /// * Instances where an agent interrupts a customer
    ///
    /// * Instances where a customer interrupts an agent
    ///
    /// * Either participant interrupting the other
    ///
    /// * A lack of interruptions
    ///
    ///
    /// See [Rule criteria](https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics-create-categories.html#call-analytics-create-categories-rules) for usage examples.
    public struct InterruptionFilter: Swift.Equatable {
        /// Allows you to specify a time range (in milliseconds) in your audio, during which you want to search for an interruption. See for more detail.
        public var absoluteTimeRange: TranscribeClientTypes.AbsoluteTimeRange?
        /// Set to TRUE to flag speech that does not contain interruptions. Set to FALSE to flag speech that contains interruptions.
        public var negate: Swift.Bool?
        /// Specify the interrupter you want to flag. Omitting this parameter is equivalent to specifying both participants.
        public var participantRole: TranscribeClientTypes.ParticipantRole?
        /// Allows you to specify a time range (in percentage) in your media file, during which you want to search for an interruption. See for more detail.
        public var relativeTimeRange: TranscribeClientTypes.RelativeTimeRange?
        /// Specify the duration of the interruptions in milliseconds. For example, you can flag speech that contains more than 10000 milliseconds of interruptions.
        public var threshold: Swift.Int?

        public init (
            absoluteTimeRange: TranscribeClientTypes.AbsoluteTimeRange? = nil,
            negate: Swift.Bool? = nil,
            participantRole: TranscribeClientTypes.ParticipantRole? = nil,
            relativeTimeRange: TranscribeClientTypes.RelativeTimeRange? = nil,
            threshold: Swift.Int? = nil
        )
        {
            self.absoluteTimeRange = absoluteTimeRange
            self.negate = negate
            self.participantRole = participantRole
            self.relativeTimeRange = relativeTimeRange
            self.threshold = threshold
        }
    }

}
