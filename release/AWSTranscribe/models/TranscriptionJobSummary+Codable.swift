// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TranscribeClientTypes.TranscriptionJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionTime = "CompletionTime"
        case contentRedaction = "ContentRedaction"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case identifiedLanguageScore = "IdentifiedLanguageScore"
        case identifyLanguage = "IdentifyLanguage"
        case identifyMultipleLanguages = "IdentifyMultipleLanguages"
        case languageCode = "LanguageCode"
        case languageCodes = "LanguageCodes"
        case modelSettings = "ModelSettings"
        case outputLocationType = "OutputLocationType"
        case startTime = "StartTime"
        case transcriptionJobName = "TranscriptionJobName"
        case transcriptionJobStatus = "TranscriptionJobStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = self.completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let contentRedaction = self.contentRedaction {
            try encodeContainer.encode(contentRedaction, forKey: .contentRedaction)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let identifiedLanguageScore = self.identifiedLanguageScore {
            try encodeContainer.encode(identifiedLanguageScore, forKey: .identifiedLanguageScore)
        }
        if let identifyLanguage = self.identifyLanguage {
            try encodeContainer.encode(identifyLanguage, forKey: .identifyLanguage)
        }
        if let identifyMultipleLanguages = self.identifyMultipleLanguages {
            try encodeContainer.encode(identifyMultipleLanguages, forKey: .identifyMultipleLanguages)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let languageCodes = languageCodes {
            var languageCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .languageCodes)
            for languagecodelist0 in languageCodes {
                try languageCodesContainer.encode(languagecodelist0)
            }
        }
        if let modelSettings = self.modelSettings {
            try encodeContainer.encode(modelSettings, forKey: .modelSettings)
        }
        if let outputLocationType = self.outputLocationType {
            try encodeContainer.encode(outputLocationType.rawValue, forKey: .outputLocationType)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let transcriptionJobName = self.transcriptionJobName {
            try encodeContainer.encode(transcriptionJobName, forKey: .transcriptionJobName)
        }
        if let transcriptionJobStatus = self.transcriptionJobStatus {
            try encodeContainer.encode(transcriptionJobStatus.rawValue, forKey: .transcriptionJobStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptionJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transcriptionJobName)
        transcriptionJobName = transcriptionJobNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let transcriptionJobStatusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.TranscriptionJobStatus.self, forKey: .transcriptionJobStatus)
        transcriptionJobStatus = transcriptionJobStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let outputLocationTypeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.OutputLocationType.self, forKey: .outputLocationType)
        outputLocationType = outputLocationTypeDecoded
        let contentRedactionDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ContentRedaction.self, forKey: .contentRedaction)
        contentRedaction = contentRedactionDecoded
        let modelSettingsDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ModelSettings.self, forKey: .modelSettings)
        modelSettings = modelSettingsDecoded
        let identifyLanguageDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .identifyLanguage)
        identifyLanguage = identifyLanguageDecoded
        let identifyMultipleLanguagesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .identifyMultipleLanguages)
        identifyMultipleLanguages = identifyMultipleLanguagesDecoded
        let identifiedLanguageScoreDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .identifiedLanguageScore)
        identifiedLanguageScore = identifiedLanguageScoreDecoded
        let languageCodesContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.LanguageCodeItem?].self, forKey: .languageCodes)
        var languageCodesDecoded0:[TranscribeClientTypes.LanguageCodeItem]? = nil
        if let languageCodesContainer = languageCodesContainer {
            languageCodesDecoded0 = [TranscribeClientTypes.LanguageCodeItem]()
            for structure0 in languageCodesContainer {
                if let structure0 = structure0 {
                    languageCodesDecoded0?.append(structure0)
                }
            }
        }
        languageCodes = languageCodesDecoded0
    }
}
