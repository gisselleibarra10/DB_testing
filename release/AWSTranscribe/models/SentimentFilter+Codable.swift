// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TranscribeClientTypes.SentimentFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case absoluteTimeRange = "AbsoluteTimeRange"
        case negate = "Negate"
        case participantRole = "ParticipantRole"
        case relativeTimeRange = "RelativeTimeRange"
        case sentiments = "Sentiments"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let absoluteTimeRange = self.absoluteTimeRange {
            try encodeContainer.encode(absoluteTimeRange, forKey: .absoluteTimeRange)
        }
        if let negate = self.negate {
            try encodeContainer.encode(negate, forKey: .negate)
        }
        if let participantRole = self.participantRole {
            try encodeContainer.encode(participantRole.rawValue, forKey: .participantRole)
        }
        if let relativeTimeRange = self.relativeTimeRange {
            try encodeContainer.encode(relativeTimeRange, forKey: .relativeTimeRange)
        }
        if let sentiments = sentiments {
            var sentimentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sentiments)
            for sentimentvaluelist0 in sentiments {
                try sentimentsContainer.encode(sentimentvaluelist0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sentimentsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.SentimentValue?].self, forKey: .sentiments)
        var sentimentsDecoded0:[TranscribeClientTypes.SentimentValue]? = nil
        if let sentimentsContainer = sentimentsContainer {
            sentimentsDecoded0 = [TranscribeClientTypes.SentimentValue]()
            for string0 in sentimentsContainer {
                if let string0 = string0 {
                    sentimentsDecoded0?.append(string0)
                }
            }
        }
        sentiments = sentimentsDecoded0
        let absoluteTimeRangeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.AbsoluteTimeRange.self, forKey: .absoluteTimeRange)
        absoluteTimeRange = absoluteTimeRangeDecoded
        let relativeTimeRangeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.RelativeTimeRange.self, forKey: .relativeTimeRange)
        relativeTimeRange = relativeTimeRangeDecoded
        let participantRoleDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ParticipantRole.self, forKey: .participantRole)
        participantRole = participantRoleDecoded
        let negateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .negate)
        negate = negateDecoded
    }
}
