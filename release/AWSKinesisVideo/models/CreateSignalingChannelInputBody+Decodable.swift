// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSignalingChannelInputBody: Swift.Equatable {
    let channelName: Swift.String?
    let channelType: KinesisVideoClientTypes.ChannelType?
    let singleMasterConfiguration: KinesisVideoClientTypes.SingleMasterConfiguration?
    let tags: [KinesisVideoClientTypes.Tag]?
}

extension CreateSignalingChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelName = "ChannelName"
        case channelType = "ChannelType"
        case singleMasterConfiguration = "SingleMasterConfiguration"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelName)
        channelName = channelNameDecoded
        let channelTypeDecoded = try containerValues.decodeIfPresent(KinesisVideoClientTypes.ChannelType.self, forKey: .channelType)
        channelType = channelTypeDecoded
        let singleMasterConfigurationDecoded = try containerValues.decodeIfPresent(KinesisVideoClientTypes.SingleMasterConfiguration.self, forKey: .singleMasterConfiguration)
        singleMasterConfiguration = singleMasterConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([KinesisVideoClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KinesisVideoClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KinesisVideoClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
