// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KinesisVideoClientTypes.ImageGenerationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationConfig = "DestinationConfig"
        case format = "Format"
        case formatConfig = "FormatConfig"
        case heightPixels = "HeightPixels"
        case imageSelectorType = "ImageSelectorType"
        case samplingInterval = "SamplingInterval"
        case status = "Status"
        case widthPixels = "WidthPixels"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationConfig = self.destinationConfig {
            try encodeContainer.encode(destinationConfig, forKey: .destinationConfig)
        }
        if let format = self.format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let formatConfig = formatConfig {
            var formatConfigContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .formatConfig)
            for (dictKey0, formatconfig0) in formatConfig {
                try formatConfigContainer.encode(formatconfig0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let heightPixels = self.heightPixels {
            try encodeContainer.encode(heightPixels, forKey: .heightPixels)
        }
        if let imageSelectorType = self.imageSelectorType {
            try encodeContainer.encode(imageSelectorType.rawValue, forKey: .imageSelectorType)
        }
        if let samplingInterval = self.samplingInterval {
            try encodeContainer.encode(samplingInterval, forKey: .samplingInterval)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let widthPixels = self.widthPixels {
            try encodeContainer.encode(widthPixels, forKey: .widthPixels)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(KinesisVideoClientTypes.ConfigurationStatus.self, forKey: .status)
        status = statusDecoded
        let imageSelectorTypeDecoded = try containerValues.decodeIfPresent(KinesisVideoClientTypes.ImageSelectorType.self, forKey: .imageSelectorType)
        imageSelectorType = imageSelectorTypeDecoded
        let destinationConfigDecoded = try containerValues.decodeIfPresent(KinesisVideoClientTypes.ImageGenerationDestinationConfig.self, forKey: .destinationConfig)
        destinationConfig = destinationConfigDecoded
        let samplingIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .samplingInterval)
        samplingInterval = samplingIntervalDecoded
        let formatDecoded = try containerValues.decodeIfPresent(KinesisVideoClientTypes.Format.self, forKey: .format)
        format = formatDecoded
        let formatConfigContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .formatConfig)
        var formatConfigDecoded0: [Swift.String:Swift.String]? = nil
        if let formatConfigContainer = formatConfigContainer {
            formatConfigDecoded0 = [Swift.String:Swift.String]()
            for (key0, formatconfigvalue0) in formatConfigContainer {
                if let formatconfigvalue0 = formatconfigvalue0 {
                    formatConfigDecoded0?[key0] = formatconfigvalue0
                }
            }
        }
        formatConfig = formatConfigDecoded0
        let widthPixelsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .widthPixels)
        widthPixels = widthPixelsDecoded
        let heightPixelsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .heightPixels)
        heightPixels = heightPixelsDecoded
    }
}
