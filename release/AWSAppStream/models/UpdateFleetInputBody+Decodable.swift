// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateFleetInputBody: Swift.Equatable {
    let imageName: Swift.String?
    let imageArn: Swift.String?
    let name: Swift.String?
    let instanceType: Swift.String?
    let computeCapacity: AppStreamClientTypes.ComputeCapacity?
    let vpcConfig: AppStreamClientTypes.VpcConfig?
    let maxUserDurationInSeconds: Swift.Int?
    let disconnectTimeoutInSeconds: Swift.Int?
    let deleteVpcConfig: Swift.Bool
    let description: Swift.String?
    let displayName: Swift.String?
    let enableDefaultInternetAccess: Swift.Bool?
    let domainJoinInfo: AppStreamClientTypes.DomainJoinInfo?
    let idleDisconnectTimeoutInSeconds: Swift.Int?
    let attributesToDelete: [AppStreamClientTypes.FleetAttribute]?
    let iamRoleArn: Swift.String?
    let streamView: AppStreamClientTypes.StreamView?
    let platform: AppStreamClientTypes.PlatformType?
    let maxConcurrentSessions: Swift.Int?
    let usbDeviceFilterStrings: [Swift.String]?
    let sessionScriptS3Location: AppStreamClientTypes.S3Location?
}

extension UpdateFleetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesToDelete = "AttributesToDelete"
        case computeCapacity = "ComputeCapacity"
        case deleteVpcConfig = "DeleteVpcConfig"
        case description = "Description"
        case disconnectTimeoutInSeconds = "DisconnectTimeoutInSeconds"
        case displayName = "DisplayName"
        case domainJoinInfo = "DomainJoinInfo"
        case enableDefaultInternetAccess = "EnableDefaultInternetAccess"
        case iamRoleArn = "IamRoleArn"
        case idleDisconnectTimeoutInSeconds = "IdleDisconnectTimeoutInSeconds"
        case imageArn = "ImageArn"
        case imageName = "ImageName"
        case instanceType = "InstanceType"
        case maxConcurrentSessions = "MaxConcurrentSessions"
        case maxUserDurationInSeconds = "MaxUserDurationInSeconds"
        case name = "Name"
        case platform = "Platform"
        case sessionScriptS3Location = "SessionScriptS3Location"
        case streamView = "StreamView"
        case usbDeviceFilterStrings = "UsbDeviceFilterStrings"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageName)
        imageName = imageNameDecoded
        let imageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageArn)
        imageArn = imageArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let computeCapacityDecoded = try containerValues.decodeIfPresent(AppStreamClientTypes.ComputeCapacity.self, forKey: .computeCapacity)
        computeCapacity = computeCapacityDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(AppStreamClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let maxUserDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxUserDurationInSeconds)
        maxUserDurationInSeconds = maxUserDurationInSecondsDecoded
        let disconnectTimeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .disconnectTimeoutInSeconds)
        disconnectTimeoutInSeconds = disconnectTimeoutInSecondsDecoded
        let deleteVpcConfigDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteVpcConfig) ?? false
        deleteVpcConfig = deleteVpcConfigDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let enableDefaultInternetAccessDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableDefaultInternetAccess)
        enableDefaultInternetAccess = enableDefaultInternetAccessDecoded
        let domainJoinInfoDecoded = try containerValues.decodeIfPresent(AppStreamClientTypes.DomainJoinInfo.self, forKey: .domainJoinInfo)
        domainJoinInfo = domainJoinInfoDecoded
        let idleDisconnectTimeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idleDisconnectTimeoutInSeconds)
        idleDisconnectTimeoutInSeconds = idleDisconnectTimeoutInSecondsDecoded
        let attributesToDeleteContainer = try containerValues.decodeIfPresent([AppStreamClientTypes.FleetAttribute?].self, forKey: .attributesToDelete)
        var attributesToDeleteDecoded0:[AppStreamClientTypes.FleetAttribute]? = nil
        if let attributesToDeleteContainer = attributesToDeleteContainer {
            attributesToDeleteDecoded0 = [AppStreamClientTypes.FleetAttribute]()
            for string0 in attributesToDeleteContainer {
                if let string0 = string0 {
                    attributesToDeleteDecoded0?.append(string0)
                }
            }
        }
        attributesToDelete = attributesToDeleteDecoded0
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let streamViewDecoded = try containerValues.decodeIfPresent(AppStreamClientTypes.StreamView.self, forKey: .streamView)
        streamView = streamViewDecoded
        let platformDecoded = try containerValues.decodeIfPresent(AppStreamClientTypes.PlatformType.self, forKey: .platform)
        platform = platformDecoded
        let maxConcurrentSessionsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentSessions)
        maxConcurrentSessions = maxConcurrentSessionsDecoded
        let usbDeviceFilterStringsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .usbDeviceFilterStrings)
        var usbDeviceFilterStringsDecoded0:[Swift.String]? = nil
        if let usbDeviceFilterStringsContainer = usbDeviceFilterStringsContainer {
            usbDeviceFilterStringsDecoded0 = [Swift.String]()
            for string0 in usbDeviceFilterStringsContainer {
                if let string0 = string0 {
                    usbDeviceFilterStringsDecoded0?.append(string0)
                }
            }
        }
        usbDeviceFilterStrings = usbDeviceFilterStringsDecoded0
        let sessionScriptS3LocationDecoded = try containerValues.decodeIfPresent(AppStreamClientTypes.S3Location.self, forKey: .sessionScriptS3Location)
        sessionScriptS3Location = sessionScriptS3LocationDecoded
    }
}
