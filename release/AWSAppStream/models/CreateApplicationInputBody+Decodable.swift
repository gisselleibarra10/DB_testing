// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateApplicationInputBody: Swift.Equatable {
    let name: Swift.String?
    let displayName: Swift.String?
    let description: Swift.String?
    let iconS3Location: AppStreamClientTypes.S3Location?
    let launchPath: Swift.String?
    let workingDirectory: Swift.String?
    let launchParameters: Swift.String?
    let platforms: [AppStreamClientTypes.PlatformType]?
    let instanceFamilies: [Swift.String]?
    let appBlockArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appBlockArn = "AppBlockArn"
        case description = "Description"
        case displayName = "DisplayName"
        case iconS3Location = "IconS3Location"
        case instanceFamilies = "InstanceFamilies"
        case launchParameters = "LaunchParameters"
        case launchPath = "LaunchPath"
        case name = "Name"
        case platforms = "Platforms"
        case tags = "Tags"
        case workingDirectory = "WorkingDirectory"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let iconS3LocationDecoded = try containerValues.decodeIfPresent(AppStreamClientTypes.S3Location.self, forKey: .iconS3Location)
        iconS3Location = iconS3LocationDecoded
        let launchPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchPath)
        launchPath = launchPathDecoded
        let workingDirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workingDirectory)
        workingDirectory = workingDirectoryDecoded
        let launchParametersDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchParameters)
        launchParameters = launchParametersDecoded
        let platformsContainer = try containerValues.decodeIfPresent([AppStreamClientTypes.PlatformType?].self, forKey: .platforms)
        var platformsDecoded0:[AppStreamClientTypes.PlatformType]? = nil
        if let platformsContainer = platformsContainer {
            platformsDecoded0 = [AppStreamClientTypes.PlatformType]()
            for string0 in platformsContainer {
                if let string0 = string0 {
                    platformsDecoded0?.append(string0)
                }
            }
        }
        platforms = platformsDecoded0
        let instanceFamiliesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceFamilies)
        var instanceFamiliesDecoded0:[Swift.String]? = nil
        if let instanceFamiliesContainer = instanceFamiliesContainer {
            instanceFamiliesDecoded0 = [Swift.String]()
            for string0 in instanceFamiliesContainer {
                if let string0 = string0 {
                    instanceFamiliesDecoded0?.append(string0)
                }
            }
        }
        instanceFamilies = instanceFamiliesDecoded0
        let appBlockArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appBlockArn)
        appBlockArn = appBlockArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
