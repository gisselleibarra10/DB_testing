// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateEntitlementInputBody: Swift.Equatable {
    let name: Swift.String?
    let stackName: Swift.String?
    let description: Swift.String?
    let appVisibility: AppStreamClientTypes.AppVisibility?
    let attributes: [AppStreamClientTypes.EntitlementAttribute]?
}

extension UpdateEntitlementInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appVisibility = "AppVisibility"
        case attributes = "Attributes"
        case description = "Description"
        case name = "Name"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let appVisibilityDecoded = try containerValues.decodeIfPresent(AppStreamClientTypes.AppVisibility.self, forKey: .appVisibility)
        appVisibility = appVisibilityDecoded
        let attributesContainer = try containerValues.decodeIfPresent([AppStreamClientTypes.EntitlementAttribute?].self, forKey: .attributes)
        var attributesDecoded0:[AppStreamClientTypes.EntitlementAttribute]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [AppStreamClientTypes.EntitlementAttribute]()
            for structure0 in attributesContainer {
                if let structure0 = structure0 {
                    attributesDecoded0?.append(structure0)
                }
            }
        }
        attributes = attributesDecoded0
    }
}
