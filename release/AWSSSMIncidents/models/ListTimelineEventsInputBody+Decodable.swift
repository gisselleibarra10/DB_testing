// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTimelineEventsInputBody: Swift.Equatable {
    let incidentRecordArn: Swift.String?
    let filters: [SsmIncidentsClientTypes.Filter]?
    let sortBy: SsmIncidentsClientTypes.TimelineEventSort?
    let sortOrder: SsmIncidentsClientTypes.SortOrder?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListTimelineEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters
        case incidentRecordArn
        case maxResults
        case nextToken
        case sortBy
        case sortOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let incidentRecordArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .incidentRecordArn)
        incidentRecordArn = incidentRecordArnDecoded
        let filtersContainer = try containerValues.decodeIfPresent([SsmIncidentsClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[SsmIncidentsClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [SsmIncidentsClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let sortByDecoded = try containerValues.decodeIfPresent(SsmIncidentsClientTypes.TimelineEventSort.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SsmIncidentsClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
