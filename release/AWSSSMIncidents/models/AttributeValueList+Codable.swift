// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmIncidentsClientTypes.AttributeValueList: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integervalues = "integerValues"
        case sdkUnknown
        case stringvalues = "stringValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .integervalues(integervalues):
                var integervaluesContainer = container.nestedUnkeyedContainer(forKey: .integervalues)
                for integerlist0 in integervalues {
                    try integervaluesContainer.encode(integerlist0)
                }
            case let .stringvalues(stringvalues):
                var stringvaluesContainer = container.nestedUnkeyedContainer(forKey: .stringvalues)
                for stringlist0 in stringvalues {
                    try stringvaluesContainer.encode(stringlist0)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let stringvaluesContainer = try values.decodeIfPresent([Swift.String?].self, forKey: .stringvalues)
        var stringvaluesDecoded0:[Swift.String]? = nil
        if let stringvaluesContainer = stringvaluesContainer {
            stringvaluesDecoded0 = [Swift.String]()
            for string0 in stringvaluesContainer {
                if let string0 = string0 {
                    stringvaluesDecoded0?.append(string0)
                }
            }
        }
        if let stringvalues = stringvaluesDecoded0 {
            self = .stringvalues(stringvalues)
            return
        }
        let integervaluesContainer = try values.decodeIfPresent([Swift.Int?].self, forKey: .integervalues)
        var integervaluesDecoded0:[Swift.Int]? = nil
        if let integervaluesContainer = integervaluesContainer {
            integervaluesDecoded0 = [Swift.Int]()
            for integer0 in integervaluesContainer {
                if let integer0 = integer0 {
                    integervaluesDecoded0?.append(integer0)
                }
            }
        }
        if let integervalues = integervaluesDecoded0 {
            self = .integervalues(integervalues)
            return
        }
        self = .sdkUnknown("")
    }
}
