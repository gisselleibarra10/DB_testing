// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateResponsePlanInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let arn: Swift.String?
    let displayName: Swift.String?
    let incidentTemplateTitle: Swift.String?
    let incidentTemplateImpact: Swift.Int?
    let incidentTemplateSummary: Swift.String?
    let incidentTemplateDedupeString: Swift.String?
    let incidentTemplateNotificationTargets: [SsmIncidentsClientTypes.NotificationTargetItem]?
    let chatChannel: SsmIncidentsClientTypes.ChatChannel?
    let engagements: Swift.Set<Swift.String>?
    let actions: [SsmIncidentsClientTypes.Action]?
    let incidentTemplateTags: [Swift.String:Swift.String]?
}

extension UpdateResponsePlanInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case arn
        case chatChannel
        case clientToken
        case displayName
        case engagements
        case incidentTemplateDedupeString
        case incidentTemplateImpact
        case incidentTemplateNotificationTargets
        case incidentTemplateSummary
        case incidentTemplateTags
        case incidentTemplateTitle
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let incidentTemplateTitleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .incidentTemplateTitle)
        incidentTemplateTitle = incidentTemplateTitleDecoded
        let incidentTemplateImpactDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .incidentTemplateImpact)
        incidentTemplateImpact = incidentTemplateImpactDecoded
        let incidentTemplateSummaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .incidentTemplateSummary)
        incidentTemplateSummary = incidentTemplateSummaryDecoded
        let incidentTemplateDedupeStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .incidentTemplateDedupeString)
        incidentTemplateDedupeString = incidentTemplateDedupeStringDecoded
        let incidentTemplateNotificationTargetsContainer = try containerValues.decodeIfPresent([SsmIncidentsClientTypes.NotificationTargetItem?].self, forKey: .incidentTemplateNotificationTargets)
        var incidentTemplateNotificationTargetsDecoded0:[SsmIncidentsClientTypes.NotificationTargetItem]? = nil
        if let incidentTemplateNotificationTargetsContainer = incidentTemplateNotificationTargetsContainer {
            incidentTemplateNotificationTargetsDecoded0 = [SsmIncidentsClientTypes.NotificationTargetItem]()
            for union0 in incidentTemplateNotificationTargetsContainer {
                if let union0 = union0 {
                    incidentTemplateNotificationTargetsDecoded0?.append(union0)
                }
            }
        }
        incidentTemplateNotificationTargets = incidentTemplateNotificationTargetsDecoded0
        let chatChannelDecoded = try containerValues.decodeIfPresent(SsmIncidentsClientTypes.ChatChannel.self, forKey: .chatChannel)
        chatChannel = chatChannelDecoded
        let engagementsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .engagements)
        var engagementsDecoded0:Swift.Set<Swift.String>? = nil
        if let engagementsContainer = engagementsContainer {
            engagementsDecoded0 = Swift.Set<Swift.String>()
            for string0 in engagementsContainer {
                if let string0 = string0 {
                    engagementsDecoded0?.insert(string0)
                }
            }
        }
        engagements = engagementsDecoded0
        let actionsContainer = try containerValues.decodeIfPresent([SsmIncidentsClientTypes.Action?].self, forKey: .actions)
        var actionsDecoded0:[SsmIncidentsClientTypes.Action]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [SsmIncidentsClientTypes.Action]()
            for union0 in actionsContainer {
                if let union0 = union0 {
                    actionsDecoded0?.append(union0)
                }
            }
        }
        actions = actionsDecoded0
        let incidentTemplateTagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .incidentTemplateTags)
        var incidentTemplateTagsDecoded0: [Swift.String:Swift.String]? = nil
        if let incidentTemplateTagsContainer = incidentTemplateTagsContainer {
            incidentTemplateTagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in incidentTemplateTagsContainer {
                if let tagvalue0 = tagvalue0 {
                    incidentTemplateTagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        incidentTemplateTags = incidentTemplateTagsDecoded0
    }
}
