// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmIncidentsClientTypes.IncidentRecord: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case automationExecutions
        case chatChannel
        case creationTime
        case dedupeString
        case impact
        case incidentRecordSource
        case lastModifiedBy
        case lastModifiedTime
        case notificationTargets
        case resolvedTime
        case status
        case summary
        case title
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let automationExecutions = automationExecutions {
            var automationExecutionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .automationExecutions)
            for automationexecutionset0 in automationExecutions {
                try automationExecutionsContainer.encode(automationexecutionset0)
            }
        }
        if let chatChannel = self.chatChannel {
            try encodeContainer.encode(chatChannel, forKey: .chatChannel)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let dedupeString = self.dedupeString {
            try encodeContainer.encode(dedupeString, forKey: .dedupeString)
        }
        if let impact = self.impact {
            try encodeContainer.encode(impact, forKey: .impact)
        }
        if let incidentRecordSource = self.incidentRecordSource {
            try encodeContainer.encode(incidentRecordSource, forKey: .incidentRecordSource)
        }
        if let lastModifiedBy = self.lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let notificationTargets = notificationTargets {
            var notificationTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notificationTargets)
            for notificationtargetset0 in notificationTargets {
                try notificationTargetsContainer.encode(notificationtargetset0)
            }
        }
        if let resolvedTime = self.resolvedTime {
            try encodeContainer.encode(resolvedTime.timeIntervalSince1970, forKey: .resolvedTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let summary = self.summary {
            try encodeContainer.encode(summary, forKey: .summary)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let summaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .summary)
        summary = summaryDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SsmIncidentsClientTypes.IncidentRecordStatus.self, forKey: .status)
        status = statusDecoded
        let impactDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .impact)
        impact = impactDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let resolvedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .resolvedTime)
        resolvedTime = resolvedTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let automationExecutionsContainer = try containerValues.decodeIfPresent([SsmIncidentsClientTypes.AutomationExecution?].self, forKey: .automationExecutions)
        var automationExecutionsDecoded0:[SsmIncidentsClientTypes.AutomationExecution]? = nil
        if let automationExecutionsContainer = automationExecutionsContainer {
            automationExecutionsDecoded0 = [SsmIncidentsClientTypes.AutomationExecution]()
            for union0 in automationExecutionsContainer {
                if let union0 = union0 {
                    automationExecutionsDecoded0?.append(union0)
                }
            }
        }
        automationExecutions = automationExecutionsDecoded0
        let incidentRecordSourceDecoded = try containerValues.decodeIfPresent(SsmIncidentsClientTypes.IncidentRecordSource.self, forKey: .incidentRecordSource)
        incidentRecordSource = incidentRecordSourceDecoded
        let dedupeStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dedupeString)
        dedupeString = dedupeStringDecoded
        let chatChannelDecoded = try containerValues.decodeIfPresent(SsmIncidentsClientTypes.ChatChannel.self, forKey: .chatChannel)
        chatChannel = chatChannelDecoded
        let notificationTargetsContainer = try containerValues.decodeIfPresent([SsmIncidentsClientTypes.NotificationTargetItem?].self, forKey: .notificationTargets)
        var notificationTargetsDecoded0:[SsmIncidentsClientTypes.NotificationTargetItem]? = nil
        if let notificationTargetsContainer = notificationTargetsContainer {
            notificationTargetsDecoded0 = [SsmIncidentsClientTypes.NotificationTargetItem]()
            for union0 in notificationTargetsContainer {
                if let union0 = union0 {
                    notificationTargetsDecoded0?.append(union0)
                }
            }
        }
        notificationTargets = notificationTargetsDecoded0
    }
}
