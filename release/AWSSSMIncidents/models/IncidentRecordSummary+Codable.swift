// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmIncidentsClientTypes.IncidentRecordSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case creationTime
        case impact
        case incidentRecordSource
        case resolvedTime
        case status
        case title
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let impact = self.impact {
            try encodeContainer.encode(impact, forKey: .impact)
        }
        if let incidentRecordSource = self.incidentRecordSource {
            try encodeContainer.encode(incidentRecordSource, forKey: .incidentRecordSource)
        }
        if let resolvedTime = self.resolvedTime {
            try encodeContainer.encode(resolvedTime.timeIntervalSince1970, forKey: .resolvedTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SsmIncidentsClientTypes.IncidentRecordStatus.self, forKey: .status)
        status = statusDecoded
        let impactDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .impact)
        impact = impactDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let resolvedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .resolvedTime)
        resolvedTime = resolvedTimeDecoded
        let incidentRecordSourceDecoded = try containerValues.decodeIfPresent(SsmIncidentsClientTypes.IncidentRecordSource.self, forKey: .incidentRecordSource)
        incidentRecordSource = incidentRecordSourceDecoded
    }
}
