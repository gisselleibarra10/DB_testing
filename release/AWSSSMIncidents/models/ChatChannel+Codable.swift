// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmIncidentsClientTypes.ChatChannel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case chatbotsns = "chatbotSns"
        case empty
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .chatbotsns(chatbotsns):
                var chatbotsnsContainer = container.nestedUnkeyedContainer(forKey: .chatbotsns)
                for chatbotsnsconfigurationset0 in chatbotsns {
                    try chatbotsnsContainer.encode(chatbotsnsconfigurationset0)
                }
            case let .empty(empty):
                try container.encode(empty, forKey: .empty)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let emptyDecoded = try values.decodeIfPresent(SsmIncidentsClientTypes.EmptyChatChannel.self, forKey: .empty)
        if let empty = emptyDecoded {
            self = .empty(empty)
            return
        }
        let chatbotsnsContainer = try values.decodeIfPresent([Swift.String?].self, forKey: .chatbotsns)
        var chatbotsnsDecoded0:Swift.Set<Swift.String>? = nil
        if let chatbotsnsContainer = chatbotsnsContainer {
            chatbotsnsDecoded0 = Swift.Set<Swift.String>()
            for string0 in chatbotsnsContainer {
                if let string0 = string0 {
                    chatbotsnsDecoded0?.insert(string0)
                }
            }
        }
        if let chatbotsns = chatbotsnsDecoded0 {
            self = .chatbotsns(chatbotsns)
            return
        }
        self = .sdkUnknown("")
    }
}
