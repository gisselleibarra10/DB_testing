// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmIncidentsClientTypes.SsmAutomation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentName
        case documentVersion
        case dynamicParameters
        case parameters
        case roleArn
        case targetAccount
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentName = self.documentName {
            try encodeContainer.encode(documentName, forKey: .documentName)
        }
        if let documentVersion = self.documentVersion {
            try encodeContainer.encode(documentVersion, forKey: .documentVersion)
        }
        if let dynamicParameters = dynamicParameters {
            var dynamicParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .dynamicParameters)
            for (dictKey0, dynamicssmparameters0) in dynamicParameters {
                try dynamicParametersContainer.encode(dynamicssmparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, ssmparameters0) in parameters {
                try parametersContainer.encode(ssmparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let targetAccount = self.targetAccount {
            try encodeContainer.encode(targetAccount.rawValue, forKey: .targetAccount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let documentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentName)
        documentName = documentNameDecoded
        let documentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentVersion)
        documentVersion = documentVersionDecoded
        let targetAccountDecoded = try containerValues.decodeIfPresent(SsmIncidentsClientTypes.SsmTargetAccount.self, forKey: .targetAccount)
        targetAccount = targetAccountDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:[Swift.String]]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, ssmparametervalues0) in parametersContainer {
                var ssmparametervalues0Decoded0: [Swift.String]? = nil
                if let ssmparametervalues0 = ssmparametervalues0 {
                    ssmparametervalues0Decoded0 = [Swift.String]()
                    for string1 in ssmparametervalues0 {
                        if let string1 = string1 {
                            ssmparametervalues0Decoded0?.append(string1)
                        }
                    }
                }
                parametersDecoded0?[key0] = ssmparametervalues0Decoded0
            }
        }
        parameters = parametersDecoded0
        let dynamicParametersContainer = try containerValues.decodeIfPresent([Swift.String: SsmIncidentsClientTypes.DynamicSsmParameterValue?].self, forKey: .dynamicParameters)
        var dynamicParametersDecoded0: [Swift.String:SsmIncidentsClientTypes.DynamicSsmParameterValue]? = nil
        if let dynamicParametersContainer = dynamicParametersContainer {
            dynamicParametersDecoded0 = [Swift.String:SsmIncidentsClientTypes.DynamicSsmParameterValue]()
            for (key0, dynamicssmparametervalue0) in dynamicParametersContainer {
                if let dynamicssmparametervalue0 = dynamicssmparametervalue0 {
                    dynamicParametersDecoded0?[key0] = dynamicssmparametervalue0
                }
            }
        }
        dynamicParameters = dynamicParametersDecoded0
    }
}
