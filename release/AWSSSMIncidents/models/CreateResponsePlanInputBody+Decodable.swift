// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateResponsePlanInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let name: Swift.String?
    let displayName: Swift.String?
    let incidentTemplate: SsmIncidentsClientTypes.IncidentTemplate?
    let chatChannel: SsmIncidentsClientTypes.ChatChannel?
    let engagements: Swift.Set<Swift.String>?
    let actions: [SsmIncidentsClientTypes.Action]?
    let tags: [Swift.String:Swift.String]?
}

extension CreateResponsePlanInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case chatChannel
        case clientToken
        case displayName
        case engagements
        case incidentTemplate
        case name
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let incidentTemplateDecoded = try containerValues.decodeIfPresent(SsmIncidentsClientTypes.IncidentTemplate.self, forKey: .incidentTemplate)
        incidentTemplate = incidentTemplateDecoded
        let chatChannelDecoded = try containerValues.decodeIfPresent(SsmIncidentsClientTypes.ChatChannel.self, forKey: .chatChannel)
        chatChannel = chatChannelDecoded
        let engagementsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .engagements)
        var engagementsDecoded0:Swift.Set<Swift.String>? = nil
        if let engagementsContainer = engagementsContainer {
            engagementsDecoded0 = Swift.Set<Swift.String>()
            for string0 in engagementsContainer {
                if let string0 = string0 {
                    engagementsDecoded0?.insert(string0)
                }
            }
        }
        engagements = engagementsDecoded0
        let actionsContainer = try containerValues.decodeIfPresent([SsmIncidentsClientTypes.Action?].self, forKey: .actions)
        var actionsDecoded0:[SsmIncidentsClientTypes.Action]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [SsmIncidentsClientTypes.Action]()
            for union0 in actionsContainer {
                if let union0 = union0 {
                    actionsDecoded0?.append(union0)
                }
            }
        }
        actions = actionsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
