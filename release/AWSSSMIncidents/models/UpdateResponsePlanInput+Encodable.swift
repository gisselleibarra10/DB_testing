// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateResponsePlanInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case arn
        case chatChannel
        case clientToken
        case displayName
        case engagements
        case incidentTemplateDedupeString
        case incidentTemplateImpact
        case incidentTemplateNotificationTargets
        case incidentTemplateSummary
        case incidentTemplateTags
        case incidentTemplateTitle
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actionslist0 in actions {
                try actionsContainer.encode(actionslist0)
            }
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let chatChannel = self.chatChannel {
            try encodeContainer.encode(chatChannel, forKey: .chatChannel)
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let displayName = self.displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let engagements = engagements {
            var engagementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .engagements)
            for engagementset0 in engagements {
                try engagementsContainer.encode(engagementset0)
            }
        }
        if let incidentTemplateDedupeString = self.incidentTemplateDedupeString {
            try encodeContainer.encode(incidentTemplateDedupeString, forKey: .incidentTemplateDedupeString)
        }
        if let incidentTemplateImpact = self.incidentTemplateImpact {
            try encodeContainer.encode(incidentTemplateImpact, forKey: .incidentTemplateImpact)
        }
        if let incidentTemplateNotificationTargets = incidentTemplateNotificationTargets {
            var incidentTemplateNotificationTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .incidentTemplateNotificationTargets)
            for notificationtargetset0 in incidentTemplateNotificationTargets {
                try incidentTemplateNotificationTargetsContainer.encode(notificationtargetset0)
            }
        }
        if let incidentTemplateSummary = self.incidentTemplateSummary {
            try encodeContainer.encode(incidentTemplateSummary, forKey: .incidentTemplateSummary)
        }
        if let incidentTemplateTags = incidentTemplateTags {
            var incidentTemplateTagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .incidentTemplateTags)
            for (dictKey0, tagmapupdate0) in incidentTemplateTags {
                try incidentTemplateTagsContainer.encode(tagmapupdate0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let incidentTemplateTitle = self.incidentTemplateTitle {
            try encodeContainer.encode(incidentTemplateTitle, forKey: .incidentTemplateTitle)
        }
    }
}
