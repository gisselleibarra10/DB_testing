// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.InstanceNetworkInterfaceAttachment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachTime = "attachTime"
        case attachmentId = "attachmentId"
        case deleteOnTermination = "deleteOnTermination"
        case deviceIndex = "deviceIndex"
        case networkCardIndex = "networkCardIndex"
        case status = "status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attachTime = attachTime {
            try container.encode(ClientRuntime.TimestampWrapper(attachTime, format: .dateTime), forKey: ClientRuntime.Key("AttachTime"))
        }
        if let attachmentId = attachmentId {
            try container.encode(attachmentId, forKey: ClientRuntime.Key("AttachmentId"))
        }
        if let deleteOnTermination = deleteOnTermination {
            try container.encode(deleteOnTermination, forKey: ClientRuntime.Key("DeleteOnTermination"))
        }
        if let deviceIndex = deviceIndex {
            try container.encode(deviceIndex, forKey: ClientRuntime.Key("DeviceIndex"))
        }
        if let networkCardIndex = networkCardIndex {
            try container.encode(networkCardIndex, forKey: ClientRuntime.Key("NetworkCardIndex"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachTime)
        var attachTimeBuffer:ClientRuntime.Date? = nil
        if let attachTimeDecoded = attachTimeDecoded {
            attachTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(attachTimeDecoded, format: .dateTime)
        }
        attachTime = attachTimeBuffer
        let attachmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachmentId)
        attachmentId = attachmentIdDecoded
        let deleteOnTerminationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteOnTermination)
        deleteOnTermination = deleteOnTerminationDecoded
        let deviceIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .deviceIndex)
        deviceIndex = deviceIndexDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AttachmentStatus.self, forKey: .status)
        status = statusDecoded
        let networkCardIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .networkCardIndex)
        networkCardIndex = networkCardIndexDecoded
    }
}
