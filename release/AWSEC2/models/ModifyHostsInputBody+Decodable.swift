// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyHostsInputBody: Swift.Equatable {
    let autoPlacement: EC2ClientTypes.AutoPlacement?
    let hostIds: [Swift.String]?
    let hostRecovery: EC2ClientTypes.HostRecovery?
    let instanceType: Swift.String?
    let instanceFamily: Swift.String?
}

extension ModifyHostsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoPlacement = "autoPlacement"
        case hostIds = "hostId"
        case hostRecovery = "HostRecovery"
        case instanceFamily = "InstanceFamily"
        case instanceType = "InstanceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoPlacementDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AutoPlacement.self, forKey: .autoPlacement)
        autoPlacement = autoPlacementDecoded
        if containerValues.contains(.hostIds) {
            struct KeyVal0{struct item{}}
            let hostIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .hostIds)
            if let hostIdsWrappedContainer = hostIdsWrappedContainer {
                let hostIdsContainer = try hostIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var hostIdsBuffer:[Swift.String]? = nil
                if let hostIdsContainer = hostIdsContainer {
                    hostIdsBuffer = [Swift.String]()
                    for stringContainer0 in hostIdsContainer {
                        hostIdsBuffer?.append(stringContainer0)
                    }
                }
                hostIds = hostIdsBuffer
            } else {
                hostIds = []
            }
        } else {
            hostIds = nil
        }
        let hostRecoveryDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.HostRecovery.self, forKey: .hostRecovery)
        hostRecovery = hostRecoveryDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceFamily)
        instanceFamily = instanceFamilyDecoded
    }
}
