// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.InstanceMetadataOptionsRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpEndpoint = "HttpEndpoint"
        case httpProtocolIpv6 = "HttpProtocolIpv6"
        case httpPutResponseHopLimit = "HttpPutResponseHopLimit"
        case httpTokens = "HttpTokens"
        case instanceMetadataTags = "InstanceMetadataTags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let httpEndpoint = httpEndpoint {
            try container.encode(httpEndpoint, forKey: ClientRuntime.Key("HttpEndpoint"))
        }
        if let httpProtocolIpv6 = httpProtocolIpv6 {
            try container.encode(httpProtocolIpv6, forKey: ClientRuntime.Key("HttpProtocolIpv6"))
        }
        if let httpPutResponseHopLimit = httpPutResponseHopLimit {
            try container.encode(httpPutResponseHopLimit, forKey: ClientRuntime.Key("HttpPutResponseHopLimit"))
        }
        if let httpTokens = httpTokens {
            try container.encode(httpTokens, forKey: ClientRuntime.Key("HttpTokens"))
        }
        if let instanceMetadataTags = instanceMetadataTags {
            try container.encode(instanceMetadataTags, forKey: ClientRuntime.Key("InstanceMetadataTags"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let httpTokensDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.HttpTokensState.self, forKey: .httpTokens)
        httpTokens = httpTokensDecoded
        let httpPutResponseHopLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .httpPutResponseHopLimit)
        httpPutResponseHopLimit = httpPutResponseHopLimitDecoded
        let httpEndpointDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.InstanceMetadataEndpointState.self, forKey: .httpEndpoint)
        httpEndpoint = httpEndpointDecoded
        let httpProtocolIpv6Decoded = try containerValues.decodeIfPresent(Ec2ClientTypes.InstanceMetadataProtocolState.self, forKey: .httpProtocolIpv6)
        httpProtocolIpv6 = httpProtocolIpv6Decoded
        let instanceMetadataTagsDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.InstanceMetadataTagsState.self, forKey: .instanceMetadataTags)
        instanceMetadataTags = instanceMetadataTagsDecoded
    }
}
