// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAddressTransfersOutputResponseBody: Swift.Equatable {
    let addressTransfers: [EC2ClientTypes.AddressTransfer]?
    let nextToken: Swift.String?
}

extension DescribeAddressTransfersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressTransfers = "addressTransferSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.addressTransfers) {
            struct KeyVal0{struct item{}}
            let addressTransfersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .addressTransfers)
            if let addressTransfersWrappedContainer = addressTransfersWrappedContainer {
                let addressTransfersContainer = try addressTransfersWrappedContainer.decodeIfPresent([EC2ClientTypes.AddressTransfer].self, forKey: .member)
                var addressTransfersBuffer:[EC2ClientTypes.AddressTransfer]? = nil
                if let addressTransfersContainer = addressTransfersContainer {
                    addressTransfersBuffer = [EC2ClientTypes.AddressTransfer]()
                    for structureContainer0 in addressTransfersContainer {
                        addressTransfersBuffer?.append(structureContainer0)
                    }
                }
                addressTransfers = addressTransfersBuffer
            } else {
                addressTransfers = []
            }
        } else {
            addressTransfers = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
