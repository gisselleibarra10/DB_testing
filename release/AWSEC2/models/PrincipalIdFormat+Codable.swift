// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.PrincipalIdFormat: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case statuses = "statusSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let statuses = statuses {
            if !statuses.isEmpty {
                for (index0, idformat0) in statuses.enumerated() {
                    var statusesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StatusSet.\(index0.advanced(by: 1))"))
                    try statusesContainer0.encode(idformat0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        if containerValues.contains(.statuses) {
            struct KeyVal0{struct item{}}
            let statusesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .statuses)
            if let statusesWrappedContainer = statusesWrappedContainer {
                let statusesContainer = try statusesWrappedContainer.decodeIfPresent([Ec2ClientTypes.IdFormat].self, forKey: .member)
                var statusesBuffer:[Ec2ClientTypes.IdFormat]? = nil
                if let statusesContainer = statusesContainer {
                    statusesBuffer = [Ec2ClientTypes.IdFormat]()
                    for structureContainer0 in statusesContainer {
                        statusesBuffer?.append(structureContainer0)
                    }
                }
                statuses = statusesBuffer
            } else {
                statuses = []
            }
        } else {
            statuses = nil
        }
    }
}
