// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.NetworkInterfacePrivateIpAddress: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case association = "association"
        case primary = "primary"
        case privateDnsName = "privateDnsName"
        case privateIpAddress = "privateIpAddress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let association = association {
            try container.encode(association, forKey: ClientRuntime.Key("Association"))
        }
        if let primary = primary {
            try container.encode(primary, forKey: ClientRuntime.Key("Primary"))
        }
        if let privateDnsName = privateDnsName {
            try container.encode(privateDnsName, forKey: ClientRuntime.Key("PrivateDnsName"))
        }
        if let privateIpAddress = privateIpAddress {
            try container.encode(privateIpAddress, forKey: ClientRuntime.Key("PrivateIpAddress"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.NetworkInterfaceAssociation.self, forKey: .association)
        association = associationDecoded
        let primaryDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .primary)
        primary = primaryDecoded
        let privateDnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateDnsName)
        privateDnsName = privateDnsNameDecoded
        let privateIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateIpAddress)
        privateIpAddress = privateIpAddressDecoded
    }
}
