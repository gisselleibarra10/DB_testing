// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNetworkInsightsAnalysesInputBody: Swift.Equatable {
    let networkInsightsAnalysisIds: [Swift.String]?
    let networkInsightsPathId: Swift.String?
    let analysisStartTime: ClientRuntime.Date?
    let analysisEndTime: ClientRuntime.Date?
    let filters: [Ec2ClientTypes.Filter]?
    let maxResults: Swift.Int?
    let dryRun: Swift.Bool?
    let nextToken: Swift.String?
}

extension DescribeNetworkInsightsAnalysesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisEndTime = "AnalysisEndTime"
        case analysisStartTime = "AnalysisStartTime"
        case dryRun = "DryRun"
        case filters = "Filter"
        case maxResults = "MaxResults"
        case networkInsightsAnalysisIds = "NetworkInsightsAnalysisId"
        case networkInsightsPathId = "NetworkInsightsPathId"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.networkInsightsAnalysisIds) {
            struct KeyVal0{struct item{}}
            let networkInsightsAnalysisIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .networkInsightsAnalysisIds)
            if let networkInsightsAnalysisIdsWrappedContainer = networkInsightsAnalysisIdsWrappedContainer {
                let networkInsightsAnalysisIdsContainer = try networkInsightsAnalysisIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var networkInsightsAnalysisIdsBuffer:[Swift.String]? = nil
                if let networkInsightsAnalysisIdsContainer = networkInsightsAnalysisIdsContainer {
                    networkInsightsAnalysisIdsBuffer = [Swift.String]()
                    for stringContainer0 in networkInsightsAnalysisIdsContainer {
                        networkInsightsAnalysisIdsBuffer?.append(stringContainer0)
                    }
                }
                networkInsightsAnalysisIds = networkInsightsAnalysisIdsBuffer
            } else {
                networkInsightsAnalysisIds = []
            }
        } else {
            networkInsightsAnalysisIds = nil
        }
        let networkInsightsPathIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInsightsPathId)
        networkInsightsPathId = networkInsightsPathIdDecoded
        let analysisStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .analysisStartTime)
        var analysisStartTimeBuffer:ClientRuntime.Date? = nil
        if let analysisStartTimeDecoded = analysisStartTimeDecoded {
            analysisStartTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(analysisStartTimeDecoded, format: .dateTime)
        }
        analysisStartTime = analysisStartTimeBuffer
        let analysisEndTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .analysisEndTime)
        var analysisEndTimeBuffer:ClientRuntime.Date? = nil
        if let analysisEndTimeDecoded = analysisEndTimeDecoded {
            analysisEndTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(analysisEndTimeDecoded, format: .dateTime)
        }
        analysisEndTime = analysisEndTimeBuffer
        if containerValues.contains(.filters) {
            struct KeyVal0{struct Filter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Filter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([Ec2ClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[Ec2ClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [Ec2ClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
