// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReservedInstancesModificationsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let reservedInstancesModifications: [Ec2ClientTypes.ReservedInstancesModification]?
}

extension DescribeReservedInstancesModificationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case reservedInstancesModifications = "reservedInstancesModificationsSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.reservedInstancesModifications) {
            struct KeyVal0{struct item{}}
            let reservedInstancesModificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .reservedInstancesModifications)
            if let reservedInstancesModificationsWrappedContainer = reservedInstancesModificationsWrappedContainer {
                let reservedInstancesModificationsContainer = try reservedInstancesModificationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.ReservedInstancesModification].self, forKey: .member)
                var reservedInstancesModificationsBuffer:[Ec2ClientTypes.ReservedInstancesModification]? = nil
                if let reservedInstancesModificationsContainer = reservedInstancesModificationsContainer {
                    reservedInstancesModificationsBuffer = [Ec2ClientTypes.ReservedInstancesModification]()
                    for structureContainer0 in reservedInstancesModificationsContainer {
                        reservedInstancesModificationsBuffer?.append(structureContainer0)
                    }
                }
                reservedInstancesModifications = reservedInstancesModificationsBuffer
            } else {
                reservedInstancesModifications = []
            }
        } else {
            reservedInstancesModifications = nil
        }
    }
}
