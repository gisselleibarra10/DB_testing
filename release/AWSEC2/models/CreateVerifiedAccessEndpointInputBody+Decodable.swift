// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateVerifiedAccessEndpointInputBody: Swift.Equatable {
    let verifiedAccessGroupId: Swift.String?
    let endpointType: EC2ClientTypes.VerifiedAccessEndpointType?
    let attachmentType: EC2ClientTypes.VerifiedAccessEndpointAttachmentType?
    let domainCertificateArn: Swift.String?
    let applicationDomain: Swift.String?
    let endpointDomainPrefix: Swift.String?
    let securityGroupIds: [Swift.String]?
    let loadBalancerOptions: EC2ClientTypes.CreateVerifiedAccessEndpointLoadBalancerOptions?
    let networkInterfaceOptions: EC2ClientTypes.CreateVerifiedAccessEndpointEniOptions?
    let description: Swift.String?
    let policyDocument: Swift.String?
    let tagSpecifications: [EC2ClientTypes.TagSpecification]?
    let clientToken: Swift.String?
    let dryRun: Swift.Bool?
}

extension CreateVerifiedAccessEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationDomain = "ApplicationDomain"
        case attachmentType = "AttachmentType"
        case clientToken = "ClientToken"
        case description = "Description"
        case domainCertificateArn = "DomainCertificateArn"
        case dryRun = "DryRun"
        case endpointDomainPrefix = "EndpointDomainPrefix"
        case endpointType = "EndpointType"
        case loadBalancerOptions = "LoadBalancerOptions"
        case networkInterfaceOptions = "NetworkInterfaceOptions"
        case policyDocument = "PolicyDocument"
        case securityGroupIds = "SecurityGroupId"
        case tagSpecifications = "TagSpecification"
        case verifiedAccessGroupId = "VerifiedAccessGroupId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let verifiedAccessGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verifiedAccessGroupId)
        verifiedAccessGroupId = verifiedAccessGroupIdDecoded
        let endpointTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.VerifiedAccessEndpointType.self, forKey: .endpointType)
        endpointType = endpointTypeDecoded
        let attachmentTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.VerifiedAccessEndpointAttachmentType.self, forKey: .attachmentType)
        attachmentType = attachmentTypeDecoded
        let domainCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainCertificateArn)
        domainCertificateArn = domainCertificateArnDecoded
        let applicationDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationDomain)
        applicationDomain = applicationDomainDecoded
        let endpointDomainPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointDomainPrefix)
        endpointDomainPrefix = endpointDomainPrefixDecoded
        if containerValues.contains(.securityGroupIds) {
            struct KeyVal0{struct item{}}
            let securityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .securityGroupIds)
            if let securityGroupIdsWrappedContainer = securityGroupIdsWrappedContainer {
                let securityGroupIdsContainer = try securityGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var securityGroupIdsBuffer:[Swift.String]? = nil
                if let securityGroupIdsContainer = securityGroupIdsContainer {
                    securityGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in securityGroupIdsContainer {
                        securityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                securityGroupIds = securityGroupIdsBuffer
            } else {
                securityGroupIds = []
            }
        } else {
            securityGroupIds = nil
        }
        let loadBalancerOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.CreateVerifiedAccessEndpointLoadBalancerOptions.self, forKey: .loadBalancerOptions)
        loadBalancerOptions = loadBalancerOptionsDecoded
        let networkInterfaceOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.CreateVerifiedAccessEndpointEniOptions.self, forKey: .networkInterfaceOptions)
        networkInterfaceOptions = networkInterfaceOptionsDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[EC2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [EC2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
