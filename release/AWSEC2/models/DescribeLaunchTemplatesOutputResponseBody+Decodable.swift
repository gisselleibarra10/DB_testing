// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeLaunchTemplatesOutputResponseBody: Swift.Equatable {
    let launchTemplates: [EC2ClientTypes.LaunchTemplate]?
    let nextToken: Swift.String?
}

extension DescribeLaunchTemplatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case launchTemplates = "launchTemplates"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.launchTemplates) {
            struct KeyVal0{struct item{}}
            let launchTemplatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .launchTemplates)
            if let launchTemplatesWrappedContainer = launchTemplatesWrappedContainer {
                let launchTemplatesContainer = try launchTemplatesWrappedContainer.decodeIfPresent([EC2ClientTypes.LaunchTemplate].self, forKey: .member)
                var launchTemplatesBuffer:[EC2ClientTypes.LaunchTemplate]? = nil
                if let launchTemplatesContainer = launchTemplatesContainer {
                    launchTemplatesBuffer = [EC2ClientTypes.LaunchTemplate]()
                    for structureContainer0 in launchTemplatesContainer {
                        launchTemplatesBuffer?.append(structureContainer0)
                    }
                }
                launchTemplates = launchTemplatesBuffer
            } else {
                launchTemplates = []
            }
        } else {
            launchTemplates = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
