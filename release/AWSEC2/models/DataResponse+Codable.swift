// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.DataResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "destination"
        case id = "id"
        case metric = "metric"
        case metricPoints = "metricPointSet"
        case period = "period"
        case source = "source"
        case statistic = "statistic"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let destination = destination {
            try container.encode(destination, forKey: ClientRuntime.Key("Destination"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let metric = metric {
            try container.encode(metric, forKey: ClientRuntime.Key("Metric"))
        }
        if let metricPoints = metricPoints {
            if !metricPoints.isEmpty {
                for (index0, metricpoint0) in metricPoints.enumerated() {
                    var metricPointsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricPointSet.\(index0.advanced(by: 1))"))
                    try metricPointsContainer0.encode(metricpoint0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var metricPointsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricPointSet"))
                try metricPointsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let statistic = statistic {
            try container.encode(statistic, forKey: ClientRuntime.Key("Statistic"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let metricDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.MetricType.self, forKey: .metric)
        metric = metricDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.StatisticType.self, forKey: .statistic)
        statistic = statisticDecoded
        let periodDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.PeriodType.self, forKey: .period)
        period = periodDecoded
        if containerValues.contains(.metricPoints) {
            struct KeyVal0{struct item{}}
            let metricPointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .metricPoints)
            if let metricPointsWrappedContainer = metricPointsWrappedContainer {
                let metricPointsContainer = try metricPointsWrappedContainer.decodeIfPresent([EC2ClientTypes.MetricPoint].self, forKey: .member)
                var metricPointsBuffer:[EC2ClientTypes.MetricPoint]? = nil
                if let metricPointsContainer = metricPointsContainer {
                    metricPointsBuffer = [EC2ClientTypes.MetricPoint]()
                    for structureContainer0 in metricPointsContainer {
                        metricPointsBuffer?.append(structureContainer0)
                    }
                }
                metricPoints = metricPointsBuffer
            } else {
                metricPoints = []
            }
        } else {
            metricPoints = nil
        }
    }
}
