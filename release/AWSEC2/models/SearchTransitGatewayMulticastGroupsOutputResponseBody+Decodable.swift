// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SearchTransitGatewayMulticastGroupsOutputResponseBody: Swift.Equatable {
    let multicastGroups: [Ec2ClientTypes.TransitGatewayMulticastGroup]?
    let nextToken: Swift.String?
}

extension SearchTransitGatewayMulticastGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multicastGroups = "multicastGroups"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.multicastGroups) {
            struct KeyVal0{struct item{}}
            let multicastGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .multicastGroups)
            if let multicastGroupsWrappedContainer = multicastGroupsWrappedContainer {
                let multicastGroupsContainer = try multicastGroupsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TransitGatewayMulticastGroup].self, forKey: .member)
                var multicastGroupsBuffer:[Ec2ClientTypes.TransitGatewayMulticastGroup]? = nil
                if let multicastGroupsContainer = multicastGroupsContainer {
                    multicastGroupsBuffer = [Ec2ClientTypes.TransitGatewayMulticastGroup]()
                    for structureContainer0 in multicastGroupsContainer {
                        multicastGroupsBuffer?.append(structureContainer0)
                    }
                }
                multicastGroups = multicastGroupsBuffer
            } else {
                multicastGroups = []
            }
        } else {
            multicastGroups = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
