// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAggregateIdFormatOutputResponseBody: Swift.Equatable {
    let useLongIdsAggregated: Swift.Bool?
    let statuses: [EC2ClientTypes.IdFormat]?
}

extension DescribeAggregateIdFormatOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case statuses = "statusSet"
        case useLongIdsAggregated = "useLongIdsAggregated"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let useLongIdsAggregatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useLongIdsAggregated)
        useLongIdsAggregated = useLongIdsAggregatedDecoded
        if containerValues.contains(.statuses) {
            struct KeyVal0{struct item{}}
            let statusesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .statuses)
            if let statusesWrappedContainer = statusesWrappedContainer {
                let statusesContainer = try statusesWrappedContainer.decodeIfPresent([EC2ClientTypes.IdFormat].self, forKey: .member)
                var statusesBuffer:[EC2ClientTypes.IdFormat]? = nil
                if let statusesContainer = statusesContainer {
                    statusesBuffer = [EC2ClientTypes.IdFormat]()
                    for structureContainer0 in statusesContainer {
                        statusesBuffer?.append(structureContainer0)
                    }
                }
                statuses = statusesBuffer
            } else {
                statuses = []
            }
        } else {
            statuses = nil
        }
    }
}
