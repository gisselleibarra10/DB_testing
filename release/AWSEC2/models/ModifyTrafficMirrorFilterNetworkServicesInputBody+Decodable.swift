// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyTrafficMirrorFilterNetworkServicesInputBody: Swift.Equatable {
    let trafficMirrorFilterId: Swift.String?
    let addNetworkServices: [Ec2ClientTypes.TrafficMirrorNetworkService]?
    let removeNetworkServices: [Ec2ClientTypes.TrafficMirrorNetworkService]?
    let dryRun: Swift.Bool?
}

extension ModifyTrafficMirrorFilterNetworkServicesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addNetworkServices = "AddNetworkService"
        case dryRun = "DryRun"
        case removeNetworkServices = "RemoveNetworkService"
        case trafficMirrorFilterId = "TrafficMirrorFilterId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficMirrorFilterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficMirrorFilterId)
        trafficMirrorFilterId = trafficMirrorFilterIdDecoded
        if containerValues.contains(.addNetworkServices) {
            struct KeyVal0{struct item{}}
            let addNetworkServicesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .addNetworkServices)
            if let addNetworkServicesWrappedContainer = addNetworkServicesWrappedContainer {
                let addNetworkServicesContainer = try addNetworkServicesWrappedContainer.decodeIfPresent([Ec2ClientTypes.TrafficMirrorNetworkService].self, forKey: .member)
                var addNetworkServicesBuffer:[Ec2ClientTypes.TrafficMirrorNetworkService]? = nil
                if let addNetworkServicesContainer = addNetworkServicesContainer {
                    addNetworkServicesBuffer = [Ec2ClientTypes.TrafficMirrorNetworkService]()
                    for enumContainer0 in addNetworkServicesContainer {
                        addNetworkServicesBuffer?.append(enumContainer0)
                    }
                }
                addNetworkServices = addNetworkServicesBuffer
            } else {
                addNetworkServices = []
            }
        } else {
            addNetworkServices = nil
        }
        if containerValues.contains(.removeNetworkServices) {
            struct KeyVal0{struct item{}}
            let removeNetworkServicesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .removeNetworkServices)
            if let removeNetworkServicesWrappedContainer = removeNetworkServicesWrappedContainer {
                let removeNetworkServicesContainer = try removeNetworkServicesWrappedContainer.decodeIfPresent([Ec2ClientTypes.TrafficMirrorNetworkService].self, forKey: .member)
                var removeNetworkServicesBuffer:[Ec2ClientTypes.TrafficMirrorNetworkService]? = nil
                if let removeNetworkServicesContainer = removeNetworkServicesContainer {
                    removeNetworkServicesBuffer = [Ec2ClientTypes.TrafficMirrorNetworkService]()
                    for enumContainer0 in removeNetworkServicesContainer {
                        removeNetworkServicesBuffer?.append(enumContainer0)
                    }
                }
                removeNetworkServices = removeNetworkServicesBuffer
            } else {
                removeNetworkServices = []
            }
        } else {
            removeNetworkServices = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
