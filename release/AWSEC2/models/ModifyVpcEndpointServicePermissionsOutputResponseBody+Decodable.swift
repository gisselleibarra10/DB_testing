// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyVpcEndpointServicePermissionsOutputResponseBody: Swift.Equatable {
    let addedPrincipals: [EC2ClientTypes.AddedPrincipal]?
    let returnValue: Swift.Bool?
}

extension ModifyVpcEndpointServicePermissionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addedPrincipals = "addedPrincipalSet"
        case returnValue = "return"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.addedPrincipals) {
            struct KeyVal0{struct item{}}
            let addedPrincipalsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .addedPrincipals)
            if let addedPrincipalsWrappedContainer = addedPrincipalsWrappedContainer {
                let addedPrincipalsContainer = try addedPrincipalsWrappedContainer.decodeIfPresent([EC2ClientTypes.AddedPrincipal].self, forKey: .member)
                var addedPrincipalsBuffer:[EC2ClientTypes.AddedPrincipal]? = nil
                if let addedPrincipalsContainer = addedPrincipalsContainer {
                    addedPrincipalsBuffer = [EC2ClientTypes.AddedPrincipal]()
                    for structureContainer0 in addedPrincipalsContainer {
                        addedPrincipalsBuffer?.append(structureContainer0)
                    }
                }
                addedPrincipals = addedPrincipalsBuffer
            } else {
                addedPrincipals = []
            }
        } else {
            addedPrincipals = nil
        }
        let returnValueDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .returnValue)
        returnValue = returnValueDecoded
    }
}
