// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSecurityGroupReferencesInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let groupId: [Swift.String]?
}

extension DescribeSecurityGroupReferencesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case groupId = "GroupId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.groupId) {
            struct KeyVal0{struct item{}}
            let groupIdWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .groupId)
            if let groupIdWrappedContainer = groupIdWrappedContainer {
                let groupIdContainer = try groupIdWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var groupIdBuffer:[Swift.String]? = nil
                if let groupIdContainer = groupIdContainer {
                    groupIdBuffer = [Swift.String]()
                    for stringContainer0 in groupIdContainer {
                        groupIdBuffer?.append(stringContainer0)
                    }
                }
                groupId = groupIdBuffer
            } else {
                groupId = []
            }
        } else {
            groupId = nil
        }
    }
}
