// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.IpamResourceCidr: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceStatus = "complianceStatus"
        case ipUsage = "ipUsage"
        case ipamId = "ipamId"
        case ipamPoolId = "ipamPoolId"
        case ipamScopeId = "ipamScopeId"
        case managementState = "managementState"
        case overlapStatus = "overlapStatus"
        case resourceCidr = "resourceCidr"
        case resourceId = "resourceId"
        case resourceName = "resourceName"
        case resourceOwnerId = "resourceOwnerId"
        case resourceRegion = "resourceRegion"
        case resourceTags = "resourceTagSet"
        case resourceType = "resourceType"
        case vpcId = "vpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let complianceStatus = complianceStatus {
            try container.encode(complianceStatus, forKey: ClientRuntime.Key("ComplianceStatus"))
        }
        if let ipUsage = ipUsage {
            try container.encode(ipUsage, forKey: ClientRuntime.Key("IpUsage"))
        }
        if let ipamId = ipamId {
            try container.encode(ipamId, forKey: ClientRuntime.Key("IpamId"))
        }
        if let ipamPoolId = ipamPoolId {
            try container.encode(ipamPoolId, forKey: ClientRuntime.Key("IpamPoolId"))
        }
        if let ipamScopeId = ipamScopeId {
            try container.encode(ipamScopeId, forKey: ClientRuntime.Key("IpamScopeId"))
        }
        if let managementState = managementState {
            try container.encode(managementState, forKey: ClientRuntime.Key("ManagementState"))
        }
        if let overlapStatus = overlapStatus {
            try container.encode(overlapStatus, forKey: ClientRuntime.Key("OverlapStatus"))
        }
        if let resourceCidr = resourceCidr {
            try container.encode(resourceCidr, forKey: ClientRuntime.Key("ResourceCidr"))
        }
        if let resourceId = resourceId {
            try container.encode(resourceId, forKey: ClientRuntime.Key("ResourceId"))
        }
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        if let resourceOwnerId = resourceOwnerId {
            try container.encode(resourceOwnerId, forKey: ClientRuntime.Key("ResourceOwnerId"))
        }
        if let resourceRegion = resourceRegion {
            try container.encode(resourceRegion, forKey: ClientRuntime.Key("ResourceRegion"))
        }
        if let resourceTags = resourceTags {
            if !resourceTags.isEmpty {
                for (index0, ipamresourcetag0) in resourceTags.enumerated() {
                    var resourceTagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTagSet.\(index0.advanced(by: 1))"))
                    try resourceTagsContainer0.encode(ipamresourcetag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipamId)
        ipamId = ipamIdDecoded
        let ipamScopeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipamScopeId)
        ipamScopeId = ipamScopeIdDecoded
        let ipamPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipamPoolId)
        ipamPoolId = ipamPoolIdDecoded
        let resourceRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceRegion)
        resourceRegion = resourceRegionDecoded
        let resourceOwnerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwnerId)
        resourceOwnerId = resourceOwnerIdDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceCidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceCidr)
        resourceCidr = resourceCidrDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.IpamResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        if containerValues.contains(.resourceTags) {
            struct KeyVal0{struct item{}}
            let resourceTagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .resourceTags)
            if let resourceTagsWrappedContainer = resourceTagsWrappedContainer {
                let resourceTagsContainer = try resourceTagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.IpamResourceTag].self, forKey: .member)
                var resourceTagsBuffer:[Ec2ClientTypes.IpamResourceTag]? = nil
                if let resourceTagsContainer = resourceTagsContainer {
                    resourceTagsBuffer = [Ec2ClientTypes.IpamResourceTag]()
                    for structureContainer0 in resourceTagsContainer {
                        resourceTagsBuffer?.append(structureContainer0)
                    }
                }
                resourceTags = resourceTagsBuffer
            } else {
                resourceTags = []
            }
        } else {
            resourceTags = nil
        }
        let ipUsageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .ipUsage)
        ipUsage = ipUsageDecoded
        let complianceStatusDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.IpamComplianceStatus.self, forKey: .complianceStatus)
        complianceStatus = complianceStatusDecoded
        let managementStateDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.IpamManagementState.self, forKey: .managementState)
        managementState = managementStateDecoded
        let overlapStatusDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.IpamOverlapStatus.self, forKey: .overlapStatus)
        overlapStatus = overlapStatusDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
    }
}
