// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeleteVpcEndpointsInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let vpcEndpointIds: [Swift.String]?
}

extension DeleteVpcEndpointsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case vpcEndpointIds = "VpcEndpointId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.vpcEndpointIds) {
            struct KeyVal0{struct item{}}
            let vpcEndpointIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .vpcEndpointIds)
            if let vpcEndpointIdsWrappedContainer = vpcEndpointIdsWrappedContainer {
                let vpcEndpointIdsContainer = try vpcEndpointIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var vpcEndpointIdsBuffer:[Swift.String]? = nil
                if let vpcEndpointIdsContainer = vpcEndpointIdsContainer {
                    vpcEndpointIdsBuffer = [Swift.String]()
                    for stringContainer0 in vpcEndpointIdsContainer {
                        vpcEndpointIdsBuffer?.append(stringContainer0)
                    }
                }
                vpcEndpointIds = vpcEndpointIdsBuffer
            } else {
                vpcEndpointIds = []
            }
        } else {
            vpcEndpointIds = nil
        }
    }
}
