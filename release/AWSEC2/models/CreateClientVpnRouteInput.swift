// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateClientVpnRouteInput: Swift.Equatable {
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see [How to ensure idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    public var clientToken: Swift.String?
    /// The ID of the Client VPN endpoint to which to add the route.
    /// This member is required.
    public var clientVpnEndpointId: Swift.String?
    /// A brief description of the route.
    public var description: Swift.String?
    /// The IPv4 address range, in CIDR notation, of the route destination. For example:
    ///
    /// * To add a route for Internet access, enter 0.0.0.0/0
    ///
    /// * To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range
    ///
    /// * To add a route for an on-premises network, enter the Amazon Web Services Site-to-Site VPN connection's IPv4 CIDR range
    ///
    /// * To add a route for the local network, enter the client CIDR range
    /// This member is required.
    public var destinationCidrBlock: Swift.String?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// The ID of the subnet through which you want to route traffic. The specified subnet must be an existing target network of the Client VPN endpoint. Alternatively, if you're adding a route for the local network, specify local.
    /// This member is required.
    public var targetVpcSubnetId: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        clientVpnEndpointId: Swift.String? = nil,
        description: Swift.String? = nil,
        destinationCidrBlock: Swift.String? = nil,
        dryRun: Swift.Bool? = nil,
        targetVpcSubnetId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.clientVpnEndpointId = clientVpnEndpointId
        self.description = description
        self.destinationCidrBlock = destinationCidrBlock
        self.dryRun = dryRun
        self.targetVpcSubnetId = targetVpcSubnetId
    }
}
