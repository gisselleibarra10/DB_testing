// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVerifiedAccessInstanceLoggingConfigurationsOutputResponseBody: Swift.Equatable {
    let loggingConfigurations: [EC2ClientTypes.VerifiedAccessInstanceLoggingConfiguration]?
    let nextToken: Swift.String?
}

extension DescribeVerifiedAccessInstanceLoggingConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingConfigurations = "loggingConfigurationSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.loggingConfigurations) {
            struct KeyVal0{struct item{}}
            let loggingConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .loggingConfigurations)
            if let loggingConfigurationsWrappedContainer = loggingConfigurationsWrappedContainer {
                let loggingConfigurationsContainer = try loggingConfigurationsWrappedContainer.decodeIfPresent([EC2ClientTypes.VerifiedAccessInstanceLoggingConfiguration].self, forKey: .member)
                var loggingConfigurationsBuffer:[EC2ClientTypes.VerifiedAccessInstanceLoggingConfiguration]? = nil
                if let loggingConfigurationsContainer = loggingConfigurationsContainer {
                    loggingConfigurationsBuffer = [EC2ClientTypes.VerifiedAccessInstanceLoggingConfiguration]()
                    for structureContainer0 in loggingConfigurationsContainer {
                        loggingConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                loggingConfigurations = loggingConfigurationsBuffer
            } else {
                loggingConfigurations = []
            }
        } else {
            loggingConfigurations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
