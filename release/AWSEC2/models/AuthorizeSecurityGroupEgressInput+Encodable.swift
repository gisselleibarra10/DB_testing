// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AuthorizeSecurityGroupEgressInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidrIp = cidrIp {
            try container.encode(cidrIp, forKey: ClientRuntime.Key("CidrIp"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let fromPort = fromPort {
            try container.encode(fromPort, forKey: ClientRuntime.Key("FromPort"))
        }
        if let groupId = groupId {
            try container.encode(groupId, forKey: ClientRuntime.Key("GroupId"))
        }
        if let ipPermissions = ipPermissions {
            if !ipPermissions.isEmpty {
                for (index0, ippermission0) in ipPermissions.enumerated() {
                    var ipPermissionsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IpPermissions.\(index0.advanced(by: 1))"))
                    try ipPermissionsContainer0.encode(ippermission0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let ipProtocol = ipProtocol {
            try container.encode(ipProtocol, forKey: ClientRuntime.Key("IpProtocol"))
        }
        if let sourceSecurityGroupName = sourceSecurityGroupName {
            try container.encode(sourceSecurityGroupName, forKey: ClientRuntime.Key("SourceSecurityGroupName"))
        }
        if let sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId {
            try container.encode(sourceSecurityGroupOwnerId, forKey: ClientRuntime.Key("SourceSecurityGroupOwnerId"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let toPort = toPort {
            try container.encode(toPort, forKey: ClientRuntime.Key("ToPort"))
        }
        try container.encode("AuthorizeSecurityGroupEgress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
