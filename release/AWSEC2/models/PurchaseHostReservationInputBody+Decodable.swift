// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PurchaseHostReservationInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let currencyCode: Ec2ClientTypes.CurrencyCodeValues?
    let hostIdSet: [Swift.String]?
    let limitPrice: Swift.String?
    let offeringId: Swift.String?
    let tagSpecifications: [Ec2ClientTypes.TagSpecification]?
}

extension PurchaseHostReservationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case currencyCode = "CurrencyCode"
        case hostIdSet = "HostIdSet"
        case limitPrice = "LimitPrice"
        case offeringId = "OfferingId"
        case tagSpecifications = "TagSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.CurrencyCodeValues.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        if containerValues.contains(.hostIdSet) {
            struct KeyVal0{struct item{}}
            let hostIdSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .hostIdSet)
            if let hostIdSetWrappedContainer = hostIdSetWrappedContainer {
                let hostIdSetContainer = try hostIdSetWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var hostIdSetBuffer:[Swift.String]? = nil
                if let hostIdSetContainer = hostIdSetContainer {
                    hostIdSetBuffer = [Swift.String]()
                    for stringContainer0 in hostIdSetContainer {
                        hostIdSetBuffer?.append(stringContainer0)
                    }
                }
                hostIdSet = hostIdSetBuffer
            } else {
                hostIdSet = []
            }
        } else {
            hostIdSet = nil
        }
        let limitPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .limitPrice)
        limitPrice = limitPriceDecoded
        let offeringIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringId)
        offeringId = offeringIdDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[Ec2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [Ec2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
    }
}
