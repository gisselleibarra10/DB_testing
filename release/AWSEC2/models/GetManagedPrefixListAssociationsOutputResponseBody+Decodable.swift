// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetManagedPrefixListAssociationsOutputResponseBody: Swift.Equatable {
    let prefixListAssociations: [EC2ClientTypes.PrefixListAssociation]?
    let nextToken: Swift.String?
}

extension GetManagedPrefixListAssociationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case prefixListAssociations = "prefixListAssociationSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.prefixListAssociations) {
            struct KeyVal0{struct item{}}
            let prefixListAssociationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .prefixListAssociations)
            if let prefixListAssociationsWrappedContainer = prefixListAssociationsWrappedContainer {
                let prefixListAssociationsContainer = try prefixListAssociationsWrappedContainer.decodeIfPresent([EC2ClientTypes.PrefixListAssociation].self, forKey: .member)
                var prefixListAssociationsBuffer:[EC2ClientTypes.PrefixListAssociation]? = nil
                if let prefixListAssociationsContainer = prefixListAssociationsContainer {
                    prefixListAssociationsBuffer = [EC2ClientTypes.PrefixListAssociation]()
                    for structureContainer0 in prefixListAssociationsContainer {
                        prefixListAssociationsBuffer?.append(structureContainer0)
                    }
                }
                prefixListAssociations = prefixListAssociationsBuffer
            } else {
                prefixListAssociations = []
            }
        } else {
            prefixListAssociations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
