// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.FleetData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityStatus = "activityStatus"
        case clientToken = "clientToken"
        case context = "context"
        case createTime = "createTime"
        case errors = "errorSet"
        case excessCapacityTerminationPolicy = "excessCapacityTerminationPolicy"
        case fleetId = "fleetId"
        case fleetState = "fleetState"
        case fulfilledCapacity = "fulfilledCapacity"
        case fulfilledOnDemandCapacity = "fulfilledOnDemandCapacity"
        case instances = "fleetInstanceSet"
        case launchTemplateConfigs = "launchTemplateConfigs"
        case onDemandOptions = "onDemandOptions"
        case replaceUnhealthyInstances = "replaceUnhealthyInstances"
        case spotOptions = "spotOptions"
        case tags = "tagSet"
        case targetCapacitySpecification = "targetCapacitySpecification"
        case terminateInstancesWithExpiration = "terminateInstancesWithExpiration"
        case type = "type"
        case validFrom = "validFrom"
        case validUntil = "validUntil"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let activityStatus = activityStatus {
            try container.encode(activityStatus, forKey: ClientRuntime.Key("ActivityStatus"))
        }
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: ClientRuntime.Key("ClientToken"))
        }
        if let context = context {
            try container.encode(context, forKey: ClientRuntime.Key("Context"))
        }
        if let createTime = createTime {
            try container.encodeTimestamp(createTime, format: .dateTime, forKey: ClientRuntime.Key("CreateTime"))
        }
        if let errors = errors {
            if !errors.isEmpty {
                for (index0, describefleeterror0) in errors.enumerated() {
                    var errorsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ErrorSet.\(index0.advanced(by: 1))"))
                    try errorsContainer0.encode(describefleeterror0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var errorsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ErrorSet"))
                try errorsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let excessCapacityTerminationPolicy = excessCapacityTerminationPolicy {
            try container.encode(excessCapacityTerminationPolicy, forKey: ClientRuntime.Key("ExcessCapacityTerminationPolicy"))
        }
        if let fleetId = fleetId {
            try container.encode(fleetId, forKey: ClientRuntime.Key("FleetId"))
        }
        if let fleetState = fleetState {
            try container.encode(fleetState, forKey: ClientRuntime.Key("FleetState"))
        }
        if let fulfilledCapacity = fulfilledCapacity {
            try container.encode(fulfilledCapacity, forKey: ClientRuntime.Key("FulfilledCapacity"))
        }
        if let fulfilledOnDemandCapacity = fulfilledOnDemandCapacity {
            try container.encode(fulfilledOnDemandCapacity, forKey: ClientRuntime.Key("FulfilledOnDemandCapacity"))
        }
        if let instances = instances {
            if !instances.isEmpty {
                for (index0, describefleetsinstances0) in instances.enumerated() {
                    var instancesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("FleetInstanceSet.\(index0.advanced(by: 1))"))
                    try instancesContainer0.encode(describefleetsinstances0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var instancesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("FleetInstanceSet"))
                try instancesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let launchTemplateConfigs = launchTemplateConfigs {
            if !launchTemplateConfigs.isEmpty {
                for (index0, fleetlaunchtemplateconfig0) in launchTemplateConfigs.enumerated() {
                    var launchTemplateConfigsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LaunchTemplateConfigs.\(index0.advanced(by: 1))"))
                    try launchTemplateConfigsContainer0.encode(fleetlaunchtemplateconfig0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var launchTemplateConfigsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LaunchTemplateConfigs"))
                try launchTemplateConfigsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let onDemandOptions = onDemandOptions {
            try container.encode(onDemandOptions, forKey: ClientRuntime.Key("OnDemandOptions"))
        }
        if let replaceUnhealthyInstances = replaceUnhealthyInstances {
            try container.encode(replaceUnhealthyInstances, forKey: ClientRuntime.Key("ReplaceUnhealthyInstances"))
        }
        if let spotOptions = spotOptions {
            try container.encode(spotOptions, forKey: ClientRuntime.Key("SpotOptions"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetCapacitySpecification = targetCapacitySpecification {
            try container.encode(targetCapacitySpecification, forKey: ClientRuntime.Key("TargetCapacitySpecification"))
        }
        if let terminateInstancesWithExpiration = terminateInstancesWithExpiration {
            try container.encode(terminateInstancesWithExpiration, forKey: ClientRuntime.Key("TerminateInstancesWithExpiration"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let validFrom = validFrom {
            try container.encodeTimestamp(validFrom, format: .dateTime, forKey: ClientRuntime.Key("ValidFrom"))
        }
        if let validUntil = validUntil {
            try container.encodeTimestamp(validUntil, format: .dateTime, forKey: ClientRuntime.Key("ValidUntil"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityStatusDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.FleetActivityStatus.self, forKey: .activityStatus)
        activityStatus = activityStatusDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .createTime)
        createTime = createTimeDecoded
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetStateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.FleetStateCode.self, forKey: .fleetState)
        fleetState = fleetStateDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let excessCapacityTerminationPolicyDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.FleetExcessCapacityTerminationPolicy.self, forKey: .excessCapacityTerminationPolicy)
        excessCapacityTerminationPolicy = excessCapacityTerminationPolicyDecoded
        let fulfilledCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fulfilledCapacity)
        fulfilledCapacity = fulfilledCapacityDecoded
        let fulfilledOnDemandCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fulfilledOnDemandCapacity)
        fulfilledOnDemandCapacity = fulfilledOnDemandCapacityDecoded
        if containerValues.contains(.launchTemplateConfigs) {
            struct KeyVal0{struct item{}}
            let launchTemplateConfigsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .launchTemplateConfigs)
            if let launchTemplateConfigsWrappedContainer = launchTemplateConfigsWrappedContainer {
                let launchTemplateConfigsContainer = try launchTemplateConfigsWrappedContainer.decodeIfPresent([EC2ClientTypes.FleetLaunchTemplateConfig].self, forKey: .member)
                var launchTemplateConfigsBuffer:[EC2ClientTypes.FleetLaunchTemplateConfig]? = nil
                if let launchTemplateConfigsContainer = launchTemplateConfigsContainer {
                    launchTemplateConfigsBuffer = [EC2ClientTypes.FleetLaunchTemplateConfig]()
                    for structureContainer0 in launchTemplateConfigsContainer {
                        launchTemplateConfigsBuffer?.append(structureContainer0)
                    }
                }
                launchTemplateConfigs = launchTemplateConfigsBuffer
            } else {
                launchTemplateConfigs = []
            }
        } else {
            launchTemplateConfigs = nil
        }
        let targetCapacitySpecificationDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.TargetCapacitySpecification.self, forKey: .targetCapacitySpecification)
        targetCapacitySpecification = targetCapacitySpecificationDecoded
        let terminateInstancesWithExpirationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .terminateInstancesWithExpiration)
        terminateInstancesWithExpiration = terminateInstancesWithExpirationDecoded
        let typeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.FleetType.self, forKey: .type)
        type = typeDecoded
        let validFromDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .validFrom)
        validFrom = validFromDecoded
        let validUntilDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .validUntil)
        validUntil = validUntilDecoded
        let replaceUnhealthyInstancesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .replaceUnhealthyInstances)
        replaceUnhealthyInstances = replaceUnhealthyInstancesDecoded
        let spotOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.SpotOptions.self, forKey: .spotOptions)
        spotOptions = spotOptionsDecoded
        let onDemandOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.OnDemandOptions.self, forKey: .onDemandOptions)
        onDemandOptions = onDemandOptionsDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.errors) {
            struct KeyVal0{struct item{}}
            let errorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .errors)
            if let errorsWrappedContainer = errorsWrappedContainer {
                let errorsContainer = try errorsWrappedContainer.decodeIfPresent([EC2ClientTypes.DescribeFleetError].self, forKey: .member)
                var errorsBuffer:[EC2ClientTypes.DescribeFleetError]? = nil
                if let errorsContainer = errorsContainer {
                    errorsBuffer = [EC2ClientTypes.DescribeFleetError]()
                    for structureContainer0 in errorsContainer {
                        errorsBuffer?.append(structureContainer0)
                    }
                }
                errors = errorsBuffer
            } else {
                errors = []
            }
        } else {
            errors = nil
        }
        if containerValues.contains(.instances) {
            struct KeyVal0{struct item{}}
            let instancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .instances)
            if let instancesWrappedContainer = instancesWrappedContainer {
                let instancesContainer = try instancesWrappedContainer.decodeIfPresent([EC2ClientTypes.DescribeFleetsInstances].self, forKey: .member)
                var instancesBuffer:[EC2ClientTypes.DescribeFleetsInstances]? = nil
                if let instancesContainer = instancesContainer {
                    instancesBuffer = [EC2ClientTypes.DescribeFleetsInstances]()
                    for structureContainer0 in instancesContainer {
                        instancesBuffer?.append(structureContainer0)
                    }
                }
                instances = instancesBuffer
            } else {
                instances = []
            }
        } else {
            instances = nil
        }
        let contextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .context)
        context = contextDecoded
    }
}
