// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyInstanceAttributeInputBody: Swift.Equatable {
    let sourceDestCheck: Ec2ClientTypes.AttributeBooleanValue?
    let attribute: Ec2ClientTypes.InstanceAttributeName?
    let blockDeviceMappings: [Ec2ClientTypes.InstanceBlockDeviceMappingSpecification]?
    let disableApiTermination: Ec2ClientTypes.AttributeBooleanValue?
    let dryRun: Swift.Bool?
    let ebsOptimized: Ec2ClientTypes.AttributeBooleanValue?
    let enaSupport: Ec2ClientTypes.AttributeBooleanValue?
    let groups: [Swift.String]?
    let instanceId: Swift.String?
    let instanceInitiatedShutdownBehavior: Ec2ClientTypes.AttributeValue?
    let instanceType: Ec2ClientTypes.AttributeValue?
    let kernel: Ec2ClientTypes.AttributeValue?
    let ramdisk: Ec2ClientTypes.AttributeValue?
    let sriovNetSupport: Ec2ClientTypes.AttributeValue?
    let userData: Ec2ClientTypes.BlobAttributeValue?
    let value: Swift.String?
    let disableApiStop: Ec2ClientTypes.AttributeBooleanValue?
}

extension ModifyInstanceAttributeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attribute = "attribute"
        case blockDeviceMappings = "blockDeviceMapping"
        case disableApiStop = "DisableApiStop"
        case disableApiTermination = "disableApiTermination"
        case dryRun = "dryRun"
        case ebsOptimized = "ebsOptimized"
        case enaSupport = "enaSupport"
        case groups = "GroupId"
        case instanceId = "instanceId"
        case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
        case instanceType = "instanceType"
        case kernel = "kernel"
        case ramdisk = "ramdisk"
        case sourceDestCheck = "SourceDestCheck"
        case sriovNetSupport = "sriovNetSupport"
        case userData = "userData"
        case value = "value"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDestCheckDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AttributeBooleanValue.self, forKey: .sourceDestCheck)
        sourceDestCheck = sourceDestCheckDecoded
        let attributeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.InstanceAttributeName.self, forKey: .attribute)
        attribute = attributeDecoded
        if containerValues.contains(.blockDeviceMappings) {
            struct KeyVal0{struct item{}}
            let blockDeviceMappingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .blockDeviceMappings)
            if let blockDeviceMappingsWrappedContainer = blockDeviceMappingsWrappedContainer {
                let blockDeviceMappingsContainer = try blockDeviceMappingsWrappedContainer.decodeIfPresent([Ec2ClientTypes.InstanceBlockDeviceMappingSpecification].self, forKey: .member)
                var blockDeviceMappingsBuffer:[Ec2ClientTypes.InstanceBlockDeviceMappingSpecification]? = nil
                if let blockDeviceMappingsContainer = blockDeviceMappingsContainer {
                    blockDeviceMappingsBuffer = [Ec2ClientTypes.InstanceBlockDeviceMappingSpecification]()
                    for structureContainer0 in blockDeviceMappingsContainer {
                        blockDeviceMappingsBuffer?.append(structureContainer0)
                    }
                }
                blockDeviceMappings = blockDeviceMappingsBuffer
            } else {
                blockDeviceMappings = []
            }
        } else {
            blockDeviceMappings = nil
        }
        let disableApiTerminationDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AttributeBooleanValue.self, forKey: .disableApiTermination)
        disableApiTermination = disableApiTerminationDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AttributeBooleanValue.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
        let enaSupportDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AttributeBooleanValue.self, forKey: .enaSupport)
        enaSupport = enaSupportDecoded
        if containerValues.contains(.groups) {
            struct KeyVal0{struct groupId{}}
            let groupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.groupId>.CodingKeys.self, forKey: .groups)
            if let groupsWrappedContainer = groupsWrappedContainer {
                let groupsContainer = try groupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var groupsBuffer:[Swift.String]? = nil
                if let groupsContainer = groupsContainer {
                    groupsBuffer = [Swift.String]()
                    for stringContainer0 in groupsContainer {
                        groupsBuffer?.append(stringContainer0)
                    }
                }
                groups = groupsBuffer
            } else {
                groups = []
            }
        } else {
            groups = nil
        }
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceInitiatedShutdownBehaviorDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AttributeValue.self, forKey: .instanceInitiatedShutdownBehavior)
        instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehaviorDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AttributeValue.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let kernelDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AttributeValue.self, forKey: .kernel)
        kernel = kernelDecoded
        let ramdiskDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AttributeValue.self, forKey: .ramdisk)
        ramdisk = ramdiskDecoded
        let sriovNetSupportDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AttributeValue.self, forKey: .sriovNetSupport)
        sriovNetSupport = sriovNetSupportDecoded
        let userDataDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.BlobAttributeValue.self, forKey: .userData)
        userData = userDataDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let disableApiStopDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AttributeBooleanValue.self, forKey: .disableApiStop)
        disableApiStop = disableApiStopDecoded
    }
}
