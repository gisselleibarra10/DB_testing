// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AllocateHostsInputBody: Swift.Equatable {
    let autoPlacement: Ec2ClientTypes.AutoPlacement?
    let availabilityZone: Swift.String?
    let clientToken: Swift.String?
    let instanceType: Swift.String?
    let instanceFamily: Swift.String?
    let quantity: Swift.Int?
    let tagSpecifications: [Ec2ClientTypes.TagSpecification]?
    let hostRecovery: Ec2ClientTypes.HostRecovery?
    let outpostArn: Swift.String?
}

extension AllocateHostsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoPlacement = "autoPlacement"
        case availabilityZone = "availabilityZone"
        case clientToken = "clientToken"
        case hostRecovery = "HostRecovery"
        case instanceFamily = "InstanceFamily"
        case instanceType = "instanceType"
        case outpostArn = "OutpostArn"
        case quantity = "quantity"
        case tagSpecifications = "TagSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoPlacementDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AutoPlacement.self, forKey: .autoPlacement)
        autoPlacement = autoPlacementDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceFamily)
        instanceFamily = instanceFamilyDecoded
        let quantityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .quantity)
        quantity = quantityDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[Ec2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [Ec2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let hostRecoveryDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.HostRecovery.self, forKey: .hostRecovery)
        hostRecovery = hostRecoveryDecoded
        let outpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outpostArn)
        outpostArn = outpostArnDecoded
    }
}
