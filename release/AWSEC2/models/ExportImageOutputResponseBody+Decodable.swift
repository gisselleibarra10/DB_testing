// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ExportImageOutputResponseBody: Swift.Equatable {
    let description: Swift.String?
    let diskImageFormat: EC2ClientTypes.DiskImageFormat?
    let exportImageTaskId: Swift.String?
    let imageId: Swift.String?
    let roleName: Swift.String?
    let progress: Swift.String?
    let s3ExportLocation: EC2ClientTypes.ExportTaskS3Location?
    let status: Swift.String?
    let statusMessage: Swift.String?
    let tags: [EC2ClientTypes.Tag]?
}

extension ExportImageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "description"
        case diskImageFormat = "diskImageFormat"
        case exportImageTaskId = "exportImageTaskId"
        case imageId = "imageId"
        case progress = "progress"
        case roleName = "roleName"
        case s3ExportLocation = "s3ExportLocation"
        case status = "status"
        case statusMessage = "statusMessage"
        case tags = "tagSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let diskImageFormatDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.DiskImageFormat.self, forKey: .diskImageFormat)
        diskImageFormat = diskImageFormatDecoded
        let exportImageTaskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportImageTaskId)
        exportImageTaskId = exportImageTaskIdDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let progressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .progress)
        progress = progressDecoded
        let s3ExportLocationDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ExportTaskS3Location.self, forKey: .s3ExportLocation)
        s3ExportLocation = s3ExportLocationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
