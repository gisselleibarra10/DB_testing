// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateReplaceRootVolumeTaskInputBody: Swift.Equatable {
    let instanceId: Swift.String?
    let snapshotId: Swift.String?
    let clientToken: Swift.String?
    let dryRun: Swift.Bool?
    let tagSpecifications: [EC2ClientTypes.TagSpecification]?
    let imageId: Swift.String?
    let deleteReplacedRootVolume: Swift.Bool?
}

extension CreateReplaceRootVolumeTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case deleteReplacedRootVolume = "DeleteReplacedRootVolume"
        case dryRun = "DryRun"
        case imageId = "ImageId"
        case instanceId = "InstanceId"
        case snapshotId = "SnapshotId"
        case tagSpecifications = "TagSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[EC2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [EC2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let deleteReplacedRootVolumeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteReplacedRootVolume)
        deleteReplacedRootVolume = deleteReplacedRootVolumeDecoded
    }
}
