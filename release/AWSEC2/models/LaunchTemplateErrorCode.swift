// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EC2ClientTypes {
    public enum LaunchTemplateErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case launchTemplateIdDoesNotExist
        case launchTemplateIdMalformed
        case launchTemplateNameDoesNotExist
        case launchTemplateNameMalformed
        case launchTemplateVersionDoesNotExist
        case unexpectedError
        case sdkUnknown(Swift.String)

        public static var allCases: [LaunchTemplateErrorCode] {
            return [
                .launchTemplateIdDoesNotExist,
                .launchTemplateIdMalformed,
                .launchTemplateNameDoesNotExist,
                .launchTemplateNameMalformed,
                .launchTemplateVersionDoesNotExist,
                .unexpectedError,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .launchTemplateIdDoesNotExist: return "launchTemplateIdDoesNotExist"
            case .launchTemplateIdMalformed: return "launchTemplateIdMalformed"
            case .launchTemplateNameDoesNotExist: return "launchTemplateNameDoesNotExist"
            case .launchTemplateNameMalformed: return "launchTemplateNameMalformed"
            case .launchTemplateVersionDoesNotExist: return "launchTemplateVersionDoesNotExist"
            case .unexpectedError: return "unexpectedError"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LaunchTemplateErrorCode(rawValue: rawValue) ?? LaunchTemplateErrorCode.sdkUnknown(rawValue)
        }
    }
}
