// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVpcClassicLinkDnsSupportInputBody: Swift.Equatable {
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let vpcIds: [Swift.String]?
}

extension DescribeVpcClassicLinkDnsSupportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "maxResults"
        case nextToken = "nextToken"
        case vpcIds = "VpcIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.vpcIds) {
            struct KeyVal0{struct VpcId{}}
            let vpcIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcId>.CodingKeys.self, forKey: .vpcIds)
            if let vpcIdsWrappedContainer = vpcIdsWrappedContainer {
                let vpcIdsContainer = try vpcIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var vpcIdsBuffer:[Swift.String]? = nil
                if let vpcIdsContainer = vpcIdsContainer {
                    vpcIdsBuffer = [Swift.String]()
                    for stringContainer0 in vpcIdsContainer {
                        vpcIdsBuffer?.append(stringContainer0)
                    }
                }
                vpcIds = vpcIdsBuffer
            } else {
                vpcIds = []
            }
        } else {
            vpcIds = nil
        }
    }
}
