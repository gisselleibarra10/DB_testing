// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeExportImageTasksOutputResponseBody: Swift.Equatable {
    let exportImageTasks: [EC2ClientTypes.ExportImageTask]?
    let nextToken: Swift.String?
}

extension DescribeExportImageTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportImageTasks = "exportImageTaskSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.exportImageTasks) {
            struct KeyVal0{struct item{}}
            let exportImageTasksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .exportImageTasks)
            if let exportImageTasksWrappedContainer = exportImageTasksWrappedContainer {
                let exportImageTasksContainer = try exportImageTasksWrappedContainer.decodeIfPresent([EC2ClientTypes.ExportImageTask].self, forKey: .member)
                var exportImageTasksBuffer:[EC2ClientTypes.ExportImageTask]? = nil
                if let exportImageTasksContainer = exportImageTasksContainer {
                    exportImageTasksBuffer = [EC2ClientTypes.ExportImageTask]()
                    for structureContainer0 in exportImageTasksContainer {
                        exportImageTasksBuffer?.append(structureContainer0)
                    }
                }
                exportImageTasks = exportImageTasksBuffer
            } else {
                exportImageTasks = []
            }
        } else {
            exportImageTasks = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
