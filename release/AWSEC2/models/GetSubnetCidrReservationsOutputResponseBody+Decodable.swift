// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetSubnetCidrReservationsOutputResponseBody: Swift.Equatable {
    let subnetIpv4CidrReservations: [Ec2ClientTypes.SubnetCidrReservation]?
    let subnetIpv6CidrReservations: [Ec2ClientTypes.SubnetCidrReservation]?
    let nextToken: Swift.String?
}

extension GetSubnetCidrReservationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case subnetIpv4CidrReservations = "subnetIpv4CidrReservationSet"
        case subnetIpv6CidrReservations = "subnetIpv6CidrReservationSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.subnetIpv4CidrReservations) {
            struct KeyVal0{struct item{}}
            let subnetIpv4CidrReservationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .subnetIpv4CidrReservations)
            if let subnetIpv4CidrReservationsWrappedContainer = subnetIpv4CidrReservationsWrappedContainer {
                let subnetIpv4CidrReservationsContainer = try subnetIpv4CidrReservationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.SubnetCidrReservation].self, forKey: .member)
                var subnetIpv4CidrReservationsBuffer:[Ec2ClientTypes.SubnetCidrReservation]? = nil
                if let subnetIpv4CidrReservationsContainer = subnetIpv4CidrReservationsContainer {
                    subnetIpv4CidrReservationsBuffer = [Ec2ClientTypes.SubnetCidrReservation]()
                    for structureContainer0 in subnetIpv4CidrReservationsContainer {
                        subnetIpv4CidrReservationsBuffer?.append(structureContainer0)
                    }
                }
                subnetIpv4CidrReservations = subnetIpv4CidrReservationsBuffer
            } else {
                subnetIpv4CidrReservations = []
            }
        } else {
            subnetIpv4CidrReservations = nil
        }
        if containerValues.contains(.subnetIpv6CidrReservations) {
            struct KeyVal0{struct item{}}
            let subnetIpv6CidrReservationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .subnetIpv6CidrReservations)
            if let subnetIpv6CidrReservationsWrappedContainer = subnetIpv6CidrReservationsWrappedContainer {
                let subnetIpv6CidrReservationsContainer = try subnetIpv6CidrReservationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.SubnetCidrReservation].self, forKey: .member)
                var subnetIpv6CidrReservationsBuffer:[Ec2ClientTypes.SubnetCidrReservation]? = nil
                if let subnetIpv6CidrReservationsContainer = subnetIpv6CidrReservationsContainer {
                    subnetIpv6CidrReservationsBuffer = [Ec2ClientTypes.SubnetCidrReservation]()
                    for structureContainer0 in subnetIpv6CidrReservationsContainer {
                        subnetIpv6CidrReservationsBuffer?.append(structureContainer0)
                    }
                }
                subnetIpv6CidrReservations = subnetIpv6CidrReservationsBuffer
            } else {
                subnetIpv6CidrReservations = []
            }
        } else {
            subnetIpv6CidrReservations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
