// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInstanceAttributeOutputResponseBody: Swift.Equatable {
    let groups: [EC2ClientTypes.GroupIdentifier]?
    let blockDeviceMappings: [EC2ClientTypes.InstanceBlockDeviceMapping]?
    let disableApiTermination: EC2ClientTypes.AttributeBooleanValue?
    let enaSupport: EC2ClientTypes.AttributeBooleanValue?
    let enclaveOptions: EC2ClientTypes.EnclaveOptions?
    let ebsOptimized: EC2ClientTypes.AttributeBooleanValue?
    let instanceId: Swift.String?
    let instanceInitiatedShutdownBehavior: EC2ClientTypes.AttributeValue?
    let instanceType: EC2ClientTypes.AttributeValue?
    let kernelId: EC2ClientTypes.AttributeValue?
    let productCodes: [EC2ClientTypes.ProductCode]?
    let ramdiskId: EC2ClientTypes.AttributeValue?
    let rootDeviceName: EC2ClientTypes.AttributeValue?
    let sourceDestCheck: EC2ClientTypes.AttributeBooleanValue?
    let sriovNetSupport: EC2ClientTypes.AttributeValue?
    let userData: EC2ClientTypes.AttributeValue?
    let disableApiStop: EC2ClientTypes.AttributeBooleanValue?
}

extension DescribeInstanceAttributeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockDeviceMappings = "blockDeviceMapping"
        case disableApiStop = "disableApiStop"
        case disableApiTermination = "disableApiTermination"
        case ebsOptimized = "ebsOptimized"
        case enaSupport = "enaSupport"
        case enclaveOptions = "enclaveOptions"
        case groups = "groupSet"
        case instanceId = "instanceId"
        case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
        case instanceType = "instanceType"
        case kernelId = "kernel"
        case productCodes = "productCodes"
        case ramdiskId = "ramdisk"
        case rootDeviceName = "rootDeviceName"
        case sourceDestCheck = "sourceDestCheck"
        case sriovNetSupport = "sriovNetSupport"
        case userData = "userData"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.groups) {
            struct KeyVal0{struct item{}}
            let groupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .groups)
            if let groupsWrappedContainer = groupsWrappedContainer {
                let groupsContainer = try groupsWrappedContainer.decodeIfPresent([EC2ClientTypes.GroupIdentifier].self, forKey: .member)
                var groupsBuffer:[EC2ClientTypes.GroupIdentifier]? = nil
                if let groupsContainer = groupsContainer {
                    groupsBuffer = [EC2ClientTypes.GroupIdentifier]()
                    for structureContainer0 in groupsContainer {
                        groupsBuffer?.append(structureContainer0)
                    }
                }
                groups = groupsBuffer
            } else {
                groups = []
            }
        } else {
            groups = nil
        }
        if containerValues.contains(.blockDeviceMappings) {
            struct KeyVal0{struct item{}}
            let blockDeviceMappingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .blockDeviceMappings)
            if let blockDeviceMappingsWrappedContainer = blockDeviceMappingsWrappedContainer {
                let blockDeviceMappingsContainer = try blockDeviceMappingsWrappedContainer.decodeIfPresent([EC2ClientTypes.InstanceBlockDeviceMapping].self, forKey: .member)
                var blockDeviceMappingsBuffer:[EC2ClientTypes.InstanceBlockDeviceMapping]? = nil
                if let blockDeviceMappingsContainer = blockDeviceMappingsContainer {
                    blockDeviceMappingsBuffer = [EC2ClientTypes.InstanceBlockDeviceMapping]()
                    for structureContainer0 in blockDeviceMappingsContainer {
                        blockDeviceMappingsBuffer?.append(structureContainer0)
                    }
                }
                blockDeviceMappings = blockDeviceMappingsBuffer
            } else {
                blockDeviceMappings = []
            }
        } else {
            blockDeviceMappings = nil
        }
        let disableApiTerminationDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AttributeBooleanValue.self, forKey: .disableApiTermination)
        disableApiTermination = disableApiTerminationDecoded
        let enaSupportDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AttributeBooleanValue.self, forKey: .enaSupport)
        enaSupport = enaSupportDecoded
        let enclaveOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.EnclaveOptions.self, forKey: .enclaveOptions)
        enclaveOptions = enclaveOptionsDecoded
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AttributeBooleanValue.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceInitiatedShutdownBehaviorDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AttributeValue.self, forKey: .instanceInitiatedShutdownBehavior)
        instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehaviorDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AttributeValue.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let kernelIdDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AttributeValue.self, forKey: .kernelId)
        kernelId = kernelIdDecoded
        if containerValues.contains(.productCodes) {
            struct KeyVal0{struct item{}}
            let productCodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .productCodes)
            if let productCodesWrappedContainer = productCodesWrappedContainer {
                let productCodesContainer = try productCodesWrappedContainer.decodeIfPresent([EC2ClientTypes.ProductCode].self, forKey: .member)
                var productCodesBuffer:[EC2ClientTypes.ProductCode]? = nil
                if let productCodesContainer = productCodesContainer {
                    productCodesBuffer = [EC2ClientTypes.ProductCode]()
                    for structureContainer0 in productCodesContainer {
                        productCodesBuffer?.append(structureContainer0)
                    }
                }
                productCodes = productCodesBuffer
            } else {
                productCodes = []
            }
        } else {
            productCodes = nil
        }
        let ramdiskIdDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AttributeValue.self, forKey: .ramdiskId)
        ramdiskId = ramdiskIdDecoded
        let rootDeviceNameDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AttributeValue.self, forKey: .rootDeviceName)
        rootDeviceName = rootDeviceNameDecoded
        let sourceDestCheckDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AttributeBooleanValue.self, forKey: .sourceDestCheck)
        sourceDestCheck = sourceDestCheckDecoded
        let sriovNetSupportDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AttributeValue.self, forKey: .sriovNetSupport)
        sriovNetSupport = sriovNetSupportDecoded
        let userDataDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AttributeValue.self, forKey: .userData)
        userData = userDataDecoded
        let disableApiStopDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AttributeBooleanValue.self, forKey: .disableApiStop)
        disableApiStop = disableApiStopDecoded
    }
}
