// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTransitGatewayConnectsOutputResponseBody: Swift.Equatable {
    let transitGatewayConnects: [EC2ClientTypes.TransitGatewayConnect]?
    let nextToken: Swift.String?
}

extension DescribeTransitGatewayConnectsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case transitGatewayConnects = "transitGatewayConnectSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.transitGatewayConnects) {
            struct KeyVal0{struct item{}}
            let transitGatewayConnectsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .transitGatewayConnects)
            if let transitGatewayConnectsWrappedContainer = transitGatewayConnectsWrappedContainer {
                let transitGatewayConnectsContainer = try transitGatewayConnectsWrappedContainer.decodeIfPresent([EC2ClientTypes.TransitGatewayConnect].self, forKey: .member)
                var transitGatewayConnectsBuffer:[EC2ClientTypes.TransitGatewayConnect]? = nil
                if let transitGatewayConnectsContainer = transitGatewayConnectsContainer {
                    transitGatewayConnectsBuffer = [EC2ClientTypes.TransitGatewayConnect]()
                    for structureContainer0 in transitGatewayConnectsContainer {
                        transitGatewayConnectsBuffer?.append(structureContainer0)
                    }
                }
                transitGatewayConnects = transitGatewayConnectsBuffer
            } else {
                transitGatewayConnects = []
            }
        } else {
            transitGatewayConnects = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
