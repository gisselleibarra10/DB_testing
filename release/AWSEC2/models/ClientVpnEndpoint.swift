// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// Describes a Client VPN endpoint.
    public struct ClientVpnEndpoint: Swift.Equatable {
        /// Information about the associated target networks. A target network is a subnet in a VPC.
        @available(*, deprecated, message: "This property is deprecated. To view the target networks associated with a Client VPN endpoint, call DescribeClientVpnTargetNetworks and inspect the clientVpnTargetNetworks response element.")
        public var associatedTargetNetworks: [Ec2ClientTypes.AssociatedTargetNetwork]?
        /// Information about the authentication method used by the Client VPN endpoint.
        public var authenticationOptions: [Ec2ClientTypes.ClientVpnAuthentication]?
        /// The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.
        public var clientCidrBlock: Swift.String?
        /// The options for managing connection authorization for new client connections.
        public var clientConnectOptions: Ec2ClientTypes.ClientConnectResponseOptions?
        /// Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established.
        public var clientLoginBannerOptions: Ec2ClientTypes.ClientLoginBannerResponseOptions?
        /// The ID of the Client VPN endpoint.
        public var clientVpnEndpointId: Swift.String?
        /// Information about the client connection logging options for the Client VPN endpoint.
        public var connectionLogOptions: Ec2ClientTypes.ConnectionLogResponseOptions?
        /// The date and time the Client VPN endpoint was created.
        public var creationTime: Swift.String?
        /// The date and time the Client VPN endpoint was deleted, if applicable.
        public var deletionTime: Swift.String?
        /// A brief description of the endpoint.
        public var description: Swift.String?
        /// The DNS name to be used by clients when connecting to the Client VPN endpoint.
        public var dnsName: Swift.String?
        /// Information about the DNS servers to be used for DNS resolution.
        public var dnsServers: [Swift.String]?
        /// The IDs of the security groups for the target network.
        public var securityGroupIds: [Swift.String]?
        /// The URL of the self-service portal.
        public var selfServicePortalUrl: Swift.String?
        /// The ARN of the server certificate.
        public var serverCertificateArn: Swift.String?
        /// The maximum VPN session duration time in hours. Valid values: 8 | 10 | 12 | 24 Default value: 24
        public var sessionTimeoutHours: Swift.Int?
        /// Indicates whether split-tunnel is enabled in the Client VPN endpoint. For information about split-tunnel VPN endpoints, see [Split-Tunnel Client VPN endpoint](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html) in the Client VPN Administrator Guide.
        public var splitTunnel: Swift.Bool?
        /// The current state of the Client VPN endpoint.
        public var status: Ec2ClientTypes.ClientVpnEndpointStatus?
        /// Any tags assigned to the Client VPN endpoint.
        public var tags: [Ec2ClientTypes.Tag]?
        /// The transport protocol used by the Client VPN endpoint.
        public var transportProtocol: Ec2ClientTypes.TransportProtocol?
        /// The ID of the VPC.
        public var vpcId: Swift.String?
        /// The port number for the Client VPN endpoint.
        public var vpnPort: Swift.Int?
        /// The protocol used by the VPN session.
        public var vpnProtocol: Ec2ClientTypes.VpnProtocol?

        public init (
            associatedTargetNetworks: [Ec2ClientTypes.AssociatedTargetNetwork]? = nil,
            authenticationOptions: [Ec2ClientTypes.ClientVpnAuthentication]? = nil,
            clientCidrBlock: Swift.String? = nil,
            clientConnectOptions: Ec2ClientTypes.ClientConnectResponseOptions? = nil,
            clientLoginBannerOptions: Ec2ClientTypes.ClientLoginBannerResponseOptions? = nil,
            clientVpnEndpointId: Swift.String? = nil,
            connectionLogOptions: Ec2ClientTypes.ConnectionLogResponseOptions? = nil,
            creationTime: Swift.String? = nil,
            deletionTime: Swift.String? = nil,
            description: Swift.String? = nil,
            dnsName: Swift.String? = nil,
            dnsServers: [Swift.String]? = nil,
            securityGroupIds: [Swift.String]? = nil,
            selfServicePortalUrl: Swift.String? = nil,
            serverCertificateArn: Swift.String? = nil,
            sessionTimeoutHours: Swift.Int? = nil,
            splitTunnel: Swift.Bool? = nil,
            status: Ec2ClientTypes.ClientVpnEndpointStatus? = nil,
            tags: [Ec2ClientTypes.Tag]? = nil,
            transportProtocol: Ec2ClientTypes.TransportProtocol? = nil,
            vpcId: Swift.String? = nil,
            vpnPort: Swift.Int? = nil,
            vpnProtocol: Ec2ClientTypes.VpnProtocol? = nil
        )
        {
            self.associatedTargetNetworks = associatedTargetNetworks
            self.authenticationOptions = authenticationOptions
            self.clientCidrBlock = clientCidrBlock
            self.clientConnectOptions = clientConnectOptions
            self.clientLoginBannerOptions = clientLoginBannerOptions
            self.clientVpnEndpointId = clientVpnEndpointId
            self.connectionLogOptions = connectionLogOptions
            self.creationTime = creationTime
            self.deletionTime = deletionTime
            self.description = description
            self.dnsName = dnsName
            self.dnsServers = dnsServers
            self.securityGroupIds = securityGroupIds
            self.selfServicePortalUrl = selfServicePortalUrl
            self.serverCertificateArn = serverCertificateArn
            self.sessionTimeoutHours = sessionTimeoutHours
            self.splitTunnel = splitTunnel
            self.status = status
            self.tags = tags
            self.transportProtocol = transportProtocol
            self.vpcId = vpcId
            self.vpnPort = vpnPort
            self.vpnProtocol = vpnProtocol
        }
    }

}
