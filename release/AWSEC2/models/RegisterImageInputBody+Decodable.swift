// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterImageInputBody: Swift.Equatable {
    let imageLocation: Swift.String?
    let architecture: EC2ClientTypes.ArchitectureValues?
    let blockDeviceMappings: [EC2ClientTypes.BlockDeviceMapping]?
    let description: Swift.String?
    let dryRun: Swift.Bool?
    let enaSupport: Swift.Bool?
    let kernelId: Swift.String?
    let name: Swift.String?
    let billingProducts: [Swift.String]?
    let ramdiskId: Swift.String?
    let rootDeviceName: Swift.String?
    let sriovNetSupport: Swift.String?
    let virtualizationType: Swift.String?
    let bootMode: EC2ClientTypes.BootModeValues?
    let tpmSupport: EC2ClientTypes.TpmSupportValues?
    let uefiData: Swift.String?
    let imdsSupport: EC2ClientTypes.ImdsSupportValues?
}

extension RegisterImageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case architecture = "architecture"
        case billingProducts = "BillingProduct"
        case blockDeviceMappings = "BlockDeviceMapping"
        case bootMode = "BootMode"
        case description = "description"
        case dryRun = "dryRun"
        case enaSupport = "enaSupport"
        case imageLocation = "ImageLocation"
        case imdsSupport = "ImdsSupport"
        case kernelId = "kernelId"
        case name = "name"
        case ramdiskId = "ramdiskId"
        case rootDeviceName = "rootDeviceName"
        case sriovNetSupport = "sriovNetSupport"
        case tpmSupport = "TpmSupport"
        case uefiData = "UefiData"
        case virtualizationType = "virtualizationType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageLocation)
        imageLocation = imageLocationDecoded
        let architectureDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ArchitectureValues.self, forKey: .architecture)
        architecture = architectureDecoded
        if containerValues.contains(.blockDeviceMappings) {
            struct KeyVal0{struct BlockDeviceMapping{}}
            let blockDeviceMappingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.BlockDeviceMapping>.CodingKeys.self, forKey: .blockDeviceMappings)
            if let blockDeviceMappingsWrappedContainer = blockDeviceMappingsWrappedContainer {
                let blockDeviceMappingsContainer = try blockDeviceMappingsWrappedContainer.decodeIfPresent([EC2ClientTypes.BlockDeviceMapping].self, forKey: .member)
                var blockDeviceMappingsBuffer:[EC2ClientTypes.BlockDeviceMapping]? = nil
                if let blockDeviceMappingsContainer = blockDeviceMappingsContainer {
                    blockDeviceMappingsBuffer = [EC2ClientTypes.BlockDeviceMapping]()
                    for structureContainer0 in blockDeviceMappingsContainer {
                        blockDeviceMappingsBuffer?.append(structureContainer0)
                    }
                }
                blockDeviceMappings = blockDeviceMappingsBuffer
            } else {
                blockDeviceMappings = []
            }
        } else {
            blockDeviceMappings = nil
        }
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let enaSupportDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enaSupport)
        enaSupport = enaSupportDecoded
        let kernelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kernelId)
        kernelId = kernelIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        if containerValues.contains(.billingProducts) {
            struct KeyVal0{struct item{}}
            let billingProductsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .billingProducts)
            if let billingProductsWrappedContainer = billingProductsWrappedContainer {
                let billingProductsContainer = try billingProductsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var billingProductsBuffer:[Swift.String]? = nil
                if let billingProductsContainer = billingProductsContainer {
                    billingProductsBuffer = [Swift.String]()
                    for stringContainer0 in billingProductsContainer {
                        billingProductsBuffer?.append(stringContainer0)
                    }
                }
                billingProducts = billingProductsBuffer
            } else {
                billingProducts = []
            }
        } else {
            billingProducts = nil
        }
        let ramdiskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ramdiskId)
        ramdiskId = ramdiskIdDecoded
        let rootDeviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootDeviceName)
        rootDeviceName = rootDeviceNameDecoded
        let sriovNetSupportDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sriovNetSupport)
        sriovNetSupport = sriovNetSupportDecoded
        let virtualizationTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualizationType)
        virtualizationType = virtualizationTypeDecoded
        let bootModeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.BootModeValues.self, forKey: .bootMode)
        bootMode = bootModeDecoded
        let tpmSupportDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.TpmSupportValues.self, forKey: .tpmSupport)
        tpmSupport = tpmSupportDecoded
        let uefiDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uefiData)
        uefiData = uefiDataDecoded
        let imdsSupportDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ImdsSupportValues.self, forKey: .imdsSupport)
        imdsSupport = imdsSupportDecoded
    }
}
