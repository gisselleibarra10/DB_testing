// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModifyIpamPoolInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let addAllocationResourceTags = addAllocationResourceTags {
            if !addAllocationResourceTags.isEmpty {
                for (index0, requestipamresourcetag0) in addAllocationResourceTags.enumerated() {
                    var addAllocationResourceTagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddAllocationResourceTag.\(index0.advanced(by: 1))"))
                    try addAllocationResourceTagsContainer0.encode(requestipamresourcetag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var addAllocationResourceTagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddAllocationResourceTag"))
                try addAllocationResourceTagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let allocationDefaultNetmaskLength = allocationDefaultNetmaskLength {
            try container.encode(allocationDefaultNetmaskLength, forKey: ClientRuntime.Key("AllocationDefaultNetmaskLength"))
        }
        if let allocationMaxNetmaskLength = allocationMaxNetmaskLength {
            try container.encode(allocationMaxNetmaskLength, forKey: ClientRuntime.Key("AllocationMaxNetmaskLength"))
        }
        if let allocationMinNetmaskLength = allocationMinNetmaskLength {
            try container.encode(allocationMinNetmaskLength, forKey: ClientRuntime.Key("AllocationMinNetmaskLength"))
        }
        if let autoImport = autoImport {
            try container.encode(autoImport, forKey: ClientRuntime.Key("AutoImport"))
        }
        if let clearAllocationDefaultNetmaskLength = clearAllocationDefaultNetmaskLength {
            try container.encode(clearAllocationDefaultNetmaskLength, forKey: ClientRuntime.Key("ClearAllocationDefaultNetmaskLength"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let ipamPoolId = ipamPoolId {
            try container.encode(ipamPoolId, forKey: ClientRuntime.Key("IpamPoolId"))
        }
        if let removeAllocationResourceTags = removeAllocationResourceTags {
            if !removeAllocationResourceTags.isEmpty {
                for (index0, requestipamresourcetag0) in removeAllocationResourceTags.enumerated() {
                    var removeAllocationResourceTagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveAllocationResourceTag.\(index0.advanced(by: 1))"))
                    try removeAllocationResourceTagsContainer0.encode(requestipamresourcetag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var removeAllocationResourceTagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveAllocationResourceTag"))
                try removeAllocationResourceTagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyIpamPool", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
