// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateVpcEndpointServiceConfigurationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let acceptanceRequired = acceptanceRequired {
            try container.encode(acceptanceRequired, forKey: ClientRuntime.Key("AcceptanceRequired"))
        }
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: ClientRuntime.Key("ClientToken"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let gatewayLoadBalancerArns = gatewayLoadBalancerArns {
            if !gatewayLoadBalancerArns.isEmpty {
                for (index0, string0) in gatewayLoadBalancerArns.enumerated() {
                    var gatewayLoadBalancerArnsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("GatewayLoadBalancerArn.\(index0.advanced(by: 1))"))
                    try gatewayLoadBalancerArnsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let networkLoadBalancerArns = networkLoadBalancerArns {
            if !networkLoadBalancerArns.isEmpty {
                for (index0, string0) in networkLoadBalancerArns.enumerated() {
                    var networkLoadBalancerArnsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NetworkLoadBalancerArn.\(index0.advanced(by: 1))"))
                    try networkLoadBalancerArnsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let privateDnsName = privateDnsName {
            try container.encode(privateDnsName, forKey: ClientRuntime.Key("PrivateDnsName"))
        }
        if let supportedIpAddressTypes = supportedIpAddressTypes {
            if !supportedIpAddressTypes.isEmpty {
                for (index0, string0) in supportedIpAddressTypes.enumerated() {
                    var supportedIpAddressTypesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedIpAddressType.\(index0.advanced(by: 1))"))
                    try supportedIpAddressTypesContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        try container.encode("CreateVpcEndpointServiceConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
