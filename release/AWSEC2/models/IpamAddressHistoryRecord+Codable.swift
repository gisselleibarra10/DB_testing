// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.IpamAddressHistoryRecord: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceCidr = "resourceCidr"
        case resourceComplianceStatus = "resourceComplianceStatus"
        case resourceId = "resourceId"
        case resourceName = "resourceName"
        case resourceOverlapStatus = "resourceOverlapStatus"
        case resourceOwnerId = "resourceOwnerId"
        case resourceRegion = "resourceRegion"
        case resourceType = "resourceType"
        case sampledEndTime = "sampledEndTime"
        case sampledStartTime = "sampledStartTime"
        case vpcId = "vpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceCidr = resourceCidr {
            try container.encode(resourceCidr, forKey: ClientRuntime.Key("ResourceCidr"))
        }
        if let resourceComplianceStatus = resourceComplianceStatus {
            try container.encode(resourceComplianceStatus, forKey: ClientRuntime.Key("ResourceComplianceStatus"))
        }
        if let resourceId = resourceId {
            try container.encode(resourceId, forKey: ClientRuntime.Key("ResourceId"))
        }
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        if let resourceOverlapStatus = resourceOverlapStatus {
            try container.encode(resourceOverlapStatus, forKey: ClientRuntime.Key("ResourceOverlapStatus"))
        }
        if let resourceOwnerId = resourceOwnerId {
            try container.encode(resourceOwnerId, forKey: ClientRuntime.Key("ResourceOwnerId"))
        }
        if let resourceRegion = resourceRegion {
            try container.encode(resourceRegion, forKey: ClientRuntime.Key("ResourceRegion"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let sampledEndTime = sampledEndTime {
            try container.encode(ClientRuntime.TimestampWrapper(sampledEndTime, format: .dateTime), forKey: ClientRuntime.Key("SampledEndTime"))
        }
        if let sampledStartTime = sampledStartTime {
            try container.encode(ClientRuntime.TimestampWrapper(sampledStartTime, format: .dateTime), forKey: ClientRuntime.Key("SampledStartTime"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceOwnerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwnerId)
        resourceOwnerId = resourceOwnerIdDecoded
        let resourceRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceRegion)
        resourceRegion = resourceRegionDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.IpamAddressHistoryResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceCidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceCidr)
        resourceCidr = resourceCidrDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceComplianceStatusDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.IpamComplianceStatus.self, forKey: .resourceComplianceStatus)
        resourceComplianceStatus = resourceComplianceStatusDecoded
        let resourceOverlapStatusDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.IpamOverlapStatus.self, forKey: .resourceOverlapStatus)
        resourceOverlapStatus = resourceOverlapStatusDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let sampledStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sampledStartTime)
        var sampledStartTimeBuffer:ClientRuntime.Date? = nil
        if let sampledStartTimeDecoded = sampledStartTimeDecoded {
            sampledStartTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(sampledStartTimeDecoded, format: .dateTime)
        }
        sampledStartTime = sampledStartTimeBuffer
        let sampledEndTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sampledEndTime)
        var sampledEndTimeBuffer:ClientRuntime.Date? = nil
        if let sampledEndTimeDecoded = sampledEndTimeDecoded {
            sampledEndTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(sampledEndTimeDecoded, format: .dateTime)
        }
        sampledEndTime = sampledEndTimeBuffer
    }
}
