// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PurchaseScheduledInstancesOutputResponseBody: Swift.Equatable {
    let scheduledInstanceSet: [Ec2ClientTypes.ScheduledInstance]?
}

extension PurchaseScheduledInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduledInstanceSet = "scheduledInstanceSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.scheduledInstanceSet) {
            struct KeyVal0{struct item{}}
            let scheduledInstanceSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .scheduledInstanceSet)
            if let scheduledInstanceSetWrappedContainer = scheduledInstanceSetWrappedContainer {
                let scheduledInstanceSetContainer = try scheduledInstanceSetWrappedContainer.decodeIfPresent([Ec2ClientTypes.ScheduledInstance].self, forKey: .member)
                var scheduledInstanceSetBuffer:[Ec2ClientTypes.ScheduledInstance]? = nil
                if let scheduledInstanceSetContainer = scheduledInstanceSetContainer {
                    scheduledInstanceSetBuffer = [Ec2ClientTypes.ScheduledInstance]()
                    for structureContainer0 in scheduledInstanceSetContainer {
                        scheduledInstanceSetBuffer?.append(structureContainer0)
                    }
                }
                scheduledInstanceSet = scheduledInstanceSetBuffer
            } else {
                scheduledInstanceSet = []
            }
        } else {
            scheduledInstanceSet = nil
        }
    }
}
