// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyIpamPoolInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let ipamPoolId: Swift.String?
    let description: Swift.String?
    let autoImport: Swift.Bool?
    let allocationMinNetmaskLength: Swift.Int?
    let allocationMaxNetmaskLength: Swift.Int?
    let allocationDefaultNetmaskLength: Swift.Int?
    let clearAllocationDefaultNetmaskLength: Swift.Bool?
    let addAllocationResourceTags: [Ec2ClientTypes.RequestIpamResourceTag]?
    let removeAllocationResourceTags: [Ec2ClientTypes.RequestIpamResourceTag]?
}

extension ModifyIpamPoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addAllocationResourceTags = "AddAllocationResourceTag"
        case allocationDefaultNetmaskLength = "AllocationDefaultNetmaskLength"
        case allocationMaxNetmaskLength = "AllocationMaxNetmaskLength"
        case allocationMinNetmaskLength = "AllocationMinNetmaskLength"
        case autoImport = "AutoImport"
        case clearAllocationDefaultNetmaskLength = "ClearAllocationDefaultNetmaskLength"
        case description = "Description"
        case dryRun = "DryRun"
        case ipamPoolId = "IpamPoolId"
        case removeAllocationResourceTags = "RemoveAllocationResourceTag"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let ipamPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipamPoolId)
        ipamPoolId = ipamPoolIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let autoImportDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoImport)
        autoImport = autoImportDecoded
        let allocationMinNetmaskLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .allocationMinNetmaskLength)
        allocationMinNetmaskLength = allocationMinNetmaskLengthDecoded
        let allocationMaxNetmaskLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .allocationMaxNetmaskLength)
        allocationMaxNetmaskLength = allocationMaxNetmaskLengthDecoded
        let allocationDefaultNetmaskLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .allocationDefaultNetmaskLength)
        allocationDefaultNetmaskLength = allocationDefaultNetmaskLengthDecoded
        let clearAllocationDefaultNetmaskLengthDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .clearAllocationDefaultNetmaskLength)
        clearAllocationDefaultNetmaskLength = clearAllocationDefaultNetmaskLengthDecoded
        if containerValues.contains(.addAllocationResourceTags) {
            struct KeyVal0{struct item{}}
            let addAllocationResourceTagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .addAllocationResourceTags)
            if let addAllocationResourceTagsWrappedContainer = addAllocationResourceTagsWrappedContainer {
                let addAllocationResourceTagsContainer = try addAllocationResourceTagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.RequestIpamResourceTag].self, forKey: .member)
                var addAllocationResourceTagsBuffer:[Ec2ClientTypes.RequestIpamResourceTag]? = nil
                if let addAllocationResourceTagsContainer = addAllocationResourceTagsContainer {
                    addAllocationResourceTagsBuffer = [Ec2ClientTypes.RequestIpamResourceTag]()
                    for structureContainer0 in addAllocationResourceTagsContainer {
                        addAllocationResourceTagsBuffer?.append(structureContainer0)
                    }
                }
                addAllocationResourceTags = addAllocationResourceTagsBuffer
            } else {
                addAllocationResourceTags = []
            }
        } else {
            addAllocationResourceTags = nil
        }
        if containerValues.contains(.removeAllocationResourceTags) {
            struct KeyVal0{struct item{}}
            let removeAllocationResourceTagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .removeAllocationResourceTags)
            if let removeAllocationResourceTagsWrappedContainer = removeAllocationResourceTagsWrappedContainer {
                let removeAllocationResourceTagsContainer = try removeAllocationResourceTagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.RequestIpamResourceTag].self, forKey: .member)
                var removeAllocationResourceTagsBuffer:[Ec2ClientTypes.RequestIpamResourceTag]? = nil
                if let removeAllocationResourceTagsContainer = removeAllocationResourceTagsContainer {
                    removeAllocationResourceTagsBuffer = [Ec2ClientTypes.RequestIpamResourceTag]()
                    for structureContainer0 in removeAllocationResourceTagsContainer {
                        removeAllocationResourceTagsBuffer?.append(structureContainer0)
                    }
                }
                removeAllocationResourceTags = removeAllocationResourceTagsBuffer
            } else {
                removeAllocationResourceTags = []
            }
        } else {
            removeAllocationResourceTags = nil
        }
    }
}
