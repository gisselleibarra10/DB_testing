// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeleteLaunchTemplateVersionsInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let launchTemplateId: Swift.String?
    let launchTemplateName: Swift.String?
    let versions: [Swift.String]?
}

extension DeleteLaunchTemplateVersionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case launchTemplateId = "LaunchTemplateId"
        case launchTemplateName = "LaunchTemplateName"
        case versions = "LaunchTemplateVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let launchTemplateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchTemplateId)
        launchTemplateId = launchTemplateIdDecoded
        let launchTemplateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchTemplateName)
        launchTemplateName = launchTemplateNameDecoded
        if containerValues.contains(.versions) {
            struct KeyVal0{struct item{}}
            let versionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .versions)
            if let versionsWrappedContainer = versionsWrappedContainer {
                let versionsContainer = try versionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var versionsBuffer:[Swift.String]? = nil
                if let versionsContainer = versionsContainer {
                    versionsBuffer = [Swift.String]()
                    for stringContainer0 in versionsContainer {
                        versionsBuffer?.append(stringContainer0)
                    }
                }
                versions = versionsBuffer
            } else {
                versions = []
            }
        } else {
            versions = nil
        }
    }
}
