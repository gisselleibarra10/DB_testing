// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.InstanceEventWindowAssociationTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dedicatedHostIds = "dedicatedHostIdSet"
        case instanceIds = "instanceIdSet"
        case tags = "tagSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dedicatedHostIds = dedicatedHostIds {
            if !dedicatedHostIds.isEmpty {
                for (index0, dedicatedhostid0) in dedicatedHostIds.enumerated() {
                    var dedicatedHostIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DedicatedHostIdSet.\(index0.advanced(by: 1))"))
                    try dedicatedHostIdsContainer0.encode(dedicatedhostid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var dedicatedHostIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DedicatedHostIdSet"))
                try dedicatedHostIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let instanceIds = instanceIds {
            if !instanceIds.isEmpty {
                for (index0, instanceid0) in instanceIds.enumerated() {
                    var instanceIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIdSet.\(index0.advanced(by: 1))"))
                    try instanceIdsContainer0.encode(instanceid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIdSet"))
                try instanceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.instanceIds) {
            struct KeyVal0{struct item{}}
            let instanceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .instanceIds)
            if let instanceIdsWrappedContainer = instanceIdsWrappedContainer {
                let instanceIdsContainer = try instanceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var instanceIdsBuffer:[Swift.String]? = nil
                if let instanceIdsContainer = instanceIdsContainer {
                    instanceIdsBuffer = [Swift.String]()
                    for stringContainer0 in instanceIdsContainer {
                        instanceIdsBuffer?.append(stringContainer0)
                    }
                }
                instanceIds = instanceIdsBuffer
            } else {
                instanceIds = []
            }
        } else {
            instanceIds = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.dedicatedHostIds) {
            struct KeyVal0{struct item{}}
            let dedicatedHostIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .dedicatedHostIds)
            if let dedicatedHostIdsWrappedContainer = dedicatedHostIdsWrappedContainer {
                let dedicatedHostIdsContainer = try dedicatedHostIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var dedicatedHostIdsBuffer:[Swift.String]? = nil
                if let dedicatedHostIdsContainer = dedicatedHostIdsContainer {
                    dedicatedHostIdsBuffer = [Swift.String]()
                    for stringContainer0 in dedicatedHostIdsContainer {
                        dedicatedHostIdsBuffer?.append(stringContainer0)
                    }
                }
                dedicatedHostIds = dedicatedHostIdsBuffer
            } else {
                dedicatedHostIds = []
            }
        } else {
            dedicatedHostIds = nil
        }
    }
}
