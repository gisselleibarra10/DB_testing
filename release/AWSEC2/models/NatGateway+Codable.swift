// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.NatGateway: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectivityType = "connectivityType"
        case createTime = "createTime"
        case deleteTime = "deleteTime"
        case failureCode = "failureCode"
        case failureMessage = "failureMessage"
        case natGatewayAddresses = "natGatewayAddressSet"
        case natGatewayId = "natGatewayId"
        case provisionedBandwidth = "provisionedBandwidth"
        case state = "state"
        case subnetId = "subnetId"
        case tags = "tagSet"
        case vpcId = "vpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let connectivityType = connectivityType {
            try container.encode(connectivityType, forKey: ClientRuntime.Key("ConnectivityType"))
        }
        if let createTime = createTime {
            try container.encodeTimestamp(createTime, format: .dateTime, forKey: ClientRuntime.Key("CreateTime"))
        }
        if let deleteTime = deleteTime {
            try container.encodeTimestamp(deleteTime, format: .dateTime, forKey: ClientRuntime.Key("DeleteTime"))
        }
        if let failureCode = failureCode {
            try container.encode(failureCode, forKey: ClientRuntime.Key("FailureCode"))
        }
        if let failureMessage = failureMessage {
            try container.encode(failureMessage, forKey: ClientRuntime.Key("FailureMessage"))
        }
        if let natGatewayAddresses = natGatewayAddresses {
            if !natGatewayAddresses.isEmpty {
                for (index0, natgatewayaddress0) in natGatewayAddresses.enumerated() {
                    var natGatewayAddressesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NatGatewayAddressSet.\(index0.advanced(by: 1))"))
                    try natGatewayAddressesContainer0.encode(natgatewayaddress0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var natGatewayAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NatGatewayAddressSet"))
                try natGatewayAddressesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let natGatewayId = natGatewayId {
            try container.encode(natGatewayId, forKey: ClientRuntime.Key("NatGatewayId"))
        }
        if let provisionedBandwidth = provisionedBandwidth {
            try container.encode(provisionedBandwidth, forKey: ClientRuntime.Key("ProvisionedBandwidth"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let subnetId = subnetId {
            try container.encode(subnetId, forKey: ClientRuntime.Key("SubnetId"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .createTime)
        createTime = createTimeDecoded
        let deleteTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .deleteTime)
        deleteTime = deleteTimeDecoded
        let failureCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureCode)
        failureCode = failureCodeDecoded
        let failureMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureMessage)
        failureMessage = failureMessageDecoded
        if containerValues.contains(.natGatewayAddresses) {
            struct KeyVal0{struct item{}}
            let natGatewayAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .natGatewayAddresses)
            if let natGatewayAddressesWrappedContainer = natGatewayAddressesWrappedContainer {
                let natGatewayAddressesContainer = try natGatewayAddressesWrappedContainer.decodeIfPresent([EC2ClientTypes.NatGatewayAddress].self, forKey: .member)
                var natGatewayAddressesBuffer:[EC2ClientTypes.NatGatewayAddress]? = nil
                if let natGatewayAddressesContainer = natGatewayAddressesContainer {
                    natGatewayAddressesBuffer = [EC2ClientTypes.NatGatewayAddress]()
                    for structureContainer0 in natGatewayAddressesContainer {
                        natGatewayAddressesBuffer?.append(structureContainer0)
                    }
                }
                natGatewayAddresses = natGatewayAddressesBuffer
            } else {
                natGatewayAddresses = []
            }
        } else {
            natGatewayAddresses = nil
        }
        let natGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .natGatewayId)
        natGatewayId = natGatewayIdDecoded
        let provisionedBandwidthDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ProvisionedBandwidth.self, forKey: .provisionedBandwidth)
        provisionedBandwidth = provisionedBandwidthDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.NatGatewayState.self, forKey: .state)
        state = stateDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let connectivityTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ConnectivityType.self, forKey: .connectivityType)
        connectivityType = connectivityTypeDecoded
    }
}
