// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetIpamPoolAllocationsOutputResponseBody: Swift.Equatable {
    let ipamPoolAllocations: [Ec2ClientTypes.IpamPoolAllocation]?
    let nextToken: Swift.String?
}

extension GetIpamPoolAllocationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipamPoolAllocations = "ipamPoolAllocationSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.ipamPoolAllocations) {
            struct KeyVal0{struct item{}}
            let ipamPoolAllocationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .ipamPoolAllocations)
            if let ipamPoolAllocationsWrappedContainer = ipamPoolAllocationsWrappedContainer {
                let ipamPoolAllocationsContainer = try ipamPoolAllocationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.IpamPoolAllocation].self, forKey: .member)
                var ipamPoolAllocationsBuffer:[Ec2ClientTypes.IpamPoolAllocation]? = nil
                if let ipamPoolAllocationsContainer = ipamPoolAllocationsContainer {
                    ipamPoolAllocationsBuffer = [Ec2ClientTypes.IpamPoolAllocation]()
                    for structureContainer0 in ipamPoolAllocationsContainer {
                        ipamPoolAllocationsBuffer?.append(structureContainer0)
                    }
                }
                ipamPoolAllocations = ipamPoolAllocationsBuffer
            } else {
                ipamPoolAllocations = []
            }
        } else {
            ipamPoolAllocations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
