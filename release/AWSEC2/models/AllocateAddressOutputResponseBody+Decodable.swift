// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AllocateAddressOutputResponseBody: Swift.Equatable {
    let publicIp: Swift.String?
    let allocationId: Swift.String?
    let publicIpv4Pool: Swift.String?
    let networkBorderGroup: Swift.String?
    let domain: EC2ClientTypes.DomainType?
    let customerOwnedIp: Swift.String?
    let customerOwnedIpv4Pool: Swift.String?
    let carrierIp: Swift.String?
}

extension AllocateAddressOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationId = "allocationId"
        case carrierIp = "carrierIp"
        case customerOwnedIp = "customerOwnedIp"
        case customerOwnedIpv4Pool = "customerOwnedIpv4Pool"
        case domain = "domain"
        case networkBorderGroup = "networkBorderGroup"
        case publicIp = "publicIp"
        case publicIpv4Pool = "publicIpv4Pool"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let publicIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicIp)
        publicIp = publicIpDecoded
        let allocationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allocationId)
        allocationId = allocationIdDecoded
        let publicIpv4PoolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicIpv4Pool)
        publicIpv4Pool = publicIpv4PoolDecoded
        let networkBorderGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkBorderGroup)
        networkBorderGroup = networkBorderGroupDecoded
        let domainDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.DomainType.self, forKey: .domain)
        domain = domainDecoded
        let customerOwnedIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerOwnedIp)
        customerOwnedIp = customerOwnedIpDecoded
        let customerOwnedIpv4PoolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerOwnedIpv4Pool)
        customerOwnedIpv4Pool = customerOwnedIpv4PoolDecoded
        let carrierIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .carrierIp)
        carrierIp = carrierIpDecoded
    }
}
