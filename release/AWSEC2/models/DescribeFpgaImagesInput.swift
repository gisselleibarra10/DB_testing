// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeFpgaImagesInput: Swift.Equatable {
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// The filters.
    ///
    /// * create-time - The creation time of the AFI.
    ///
    /// * fpga-image-id - The FPGA image identifier (AFI ID).
    ///
    /// * fpga-image-global-id - The global FPGA image identifier (AGFI ID).
    ///
    /// * name - The name of the AFI.
    ///
    /// * owner-id - The Amazon Web Services account ID of the AFI owner.
    ///
    /// * product-code - The product code.
    ///
    /// * shell-version - The version of the Amazon Web Services Shell that was used to create the bitstream.
    ///
    /// * state - The state of the AFI (pending | failed | available | unavailable).
    ///
    /// * tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
    ///
    /// * tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///
    /// * update-time - The time of the most recent update.
    public var filters: [Ec2ClientTypes.Filter]?
    /// The AFI IDs.
    public var fpgaImageIds: [Swift.String]?
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// The token to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// Filters the AFI by owner. Specify an Amazon Web Services account ID, self (owner is the sender of the request), or an Amazon Web Services owner alias (valid values are amazon | aws-marketplace).
    public var owners: [Swift.String]?

    public init (
        dryRun: Swift.Bool? = nil,
        filters: [Ec2ClientTypes.Filter]? = nil,
        fpgaImageIds: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        owners: [Swift.String]? = nil
    )
    {
        self.dryRun = dryRun
        self.filters = filters
        self.fpgaImageIds = fpgaImageIds
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.owners = owners
    }
}
