// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeleteFleetsOutputResponseBody: Swift.Equatable {
    let successfulFleetDeletions: [Ec2ClientTypes.DeleteFleetSuccessItem]?
    let unsuccessfulFleetDeletions: [Ec2ClientTypes.DeleteFleetErrorItem]?
}

extension DeleteFleetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case successfulFleetDeletions = "successfulFleetDeletionSet"
        case unsuccessfulFleetDeletions = "unsuccessfulFleetDeletionSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.successfulFleetDeletions) {
            struct KeyVal0{struct item{}}
            let successfulFleetDeletionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .successfulFleetDeletions)
            if let successfulFleetDeletionsWrappedContainer = successfulFleetDeletionsWrappedContainer {
                let successfulFleetDeletionsContainer = try successfulFleetDeletionsWrappedContainer.decodeIfPresent([Ec2ClientTypes.DeleteFleetSuccessItem].self, forKey: .member)
                var successfulFleetDeletionsBuffer:[Ec2ClientTypes.DeleteFleetSuccessItem]? = nil
                if let successfulFleetDeletionsContainer = successfulFleetDeletionsContainer {
                    successfulFleetDeletionsBuffer = [Ec2ClientTypes.DeleteFleetSuccessItem]()
                    for structureContainer0 in successfulFleetDeletionsContainer {
                        successfulFleetDeletionsBuffer?.append(structureContainer0)
                    }
                }
                successfulFleetDeletions = successfulFleetDeletionsBuffer
            } else {
                successfulFleetDeletions = []
            }
        } else {
            successfulFleetDeletions = nil
        }
        if containerValues.contains(.unsuccessfulFleetDeletions) {
            struct KeyVal0{struct item{}}
            let unsuccessfulFleetDeletionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .unsuccessfulFleetDeletions)
            if let unsuccessfulFleetDeletionsWrappedContainer = unsuccessfulFleetDeletionsWrappedContainer {
                let unsuccessfulFleetDeletionsContainer = try unsuccessfulFleetDeletionsWrappedContainer.decodeIfPresent([Ec2ClientTypes.DeleteFleetErrorItem].self, forKey: .member)
                var unsuccessfulFleetDeletionsBuffer:[Ec2ClientTypes.DeleteFleetErrorItem]? = nil
                if let unsuccessfulFleetDeletionsContainer = unsuccessfulFleetDeletionsContainer {
                    unsuccessfulFleetDeletionsBuffer = [Ec2ClientTypes.DeleteFleetErrorItem]()
                    for structureContainer0 in unsuccessfulFleetDeletionsContainer {
                        unsuccessfulFleetDeletionsBuffer?.append(structureContainer0)
                    }
                }
                unsuccessfulFleetDeletions = unsuccessfulFleetDeletionsBuffer
            } else {
                unsuccessfulFleetDeletions = []
            }
        } else {
            unsuccessfulFleetDeletions = nil
        }
    }
}
