// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyIpamInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let ipamId: Swift.String?
    let description: Swift.String?
    let addOperatingRegions: [EC2ClientTypes.AddIpamOperatingRegion]?
    let removeOperatingRegions: [EC2ClientTypes.RemoveIpamOperatingRegion]?
}

extension ModifyIpamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOperatingRegions = "AddOperatingRegion"
        case description = "Description"
        case dryRun = "DryRun"
        case ipamId = "IpamId"
        case removeOperatingRegions = "RemoveOperatingRegion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let ipamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipamId)
        ipamId = ipamIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.addOperatingRegions) {
            struct KeyVal0{struct member{}}
            let addOperatingRegionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .addOperatingRegions)
            if let addOperatingRegionsWrappedContainer = addOperatingRegionsWrappedContainer {
                let addOperatingRegionsContainer = try addOperatingRegionsWrappedContainer.decodeIfPresent([EC2ClientTypes.AddIpamOperatingRegion].self, forKey: .member)
                var addOperatingRegionsBuffer:[EC2ClientTypes.AddIpamOperatingRegion]? = nil
                if let addOperatingRegionsContainer = addOperatingRegionsContainer {
                    addOperatingRegionsBuffer = [EC2ClientTypes.AddIpamOperatingRegion]()
                    for structureContainer0 in addOperatingRegionsContainer {
                        addOperatingRegionsBuffer?.append(structureContainer0)
                    }
                }
                addOperatingRegions = addOperatingRegionsBuffer
            } else {
                addOperatingRegions = []
            }
        } else {
            addOperatingRegions = nil
        }
        if containerValues.contains(.removeOperatingRegions) {
            struct KeyVal0{struct member{}}
            let removeOperatingRegionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .removeOperatingRegions)
            if let removeOperatingRegionsWrappedContainer = removeOperatingRegionsWrappedContainer {
                let removeOperatingRegionsContainer = try removeOperatingRegionsWrappedContainer.decodeIfPresent([EC2ClientTypes.RemoveIpamOperatingRegion].self, forKey: .member)
                var removeOperatingRegionsBuffer:[EC2ClientTypes.RemoveIpamOperatingRegion]? = nil
                if let removeOperatingRegionsContainer = removeOperatingRegionsContainer {
                    removeOperatingRegionsBuffer = [EC2ClientTypes.RemoveIpamOperatingRegion]()
                    for structureContainer0 in removeOperatingRegionsContainer {
                        removeOperatingRegionsBuffer?.append(structureContainer0)
                    }
                }
                removeOperatingRegions = removeOperatingRegionsBuffer
            } else {
                removeOperatingRegions = []
            }
        } else {
            removeOperatingRegions = nil
        }
    }
}
