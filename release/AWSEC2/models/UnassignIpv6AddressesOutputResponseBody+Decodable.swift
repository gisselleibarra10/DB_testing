// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UnassignIpv6AddressesOutputResponseBody: Swift.Equatable {
    let networkInterfaceId: Swift.String?
    let unassignedIpv6Addresses: [Swift.String]?
    let unassignedIpv6Prefixes: [Swift.String]?
}

extension UnassignIpv6AddressesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case networkInterfaceId = "networkInterfaceId"
        case unassignedIpv6Addresses = "unassignedIpv6Addresses"
        case unassignedIpv6Prefixes = "unassignedIpv6PrefixSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        if containerValues.contains(.unassignedIpv6Addresses) {
            struct KeyVal0{struct item{}}
            let unassignedIpv6AddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .unassignedIpv6Addresses)
            if let unassignedIpv6AddressesWrappedContainer = unassignedIpv6AddressesWrappedContainer {
                let unassignedIpv6AddressesContainer = try unassignedIpv6AddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var unassignedIpv6AddressesBuffer:[Swift.String]? = nil
                if let unassignedIpv6AddressesContainer = unassignedIpv6AddressesContainer {
                    unassignedIpv6AddressesBuffer = [Swift.String]()
                    for stringContainer0 in unassignedIpv6AddressesContainer {
                        unassignedIpv6AddressesBuffer?.append(stringContainer0)
                    }
                }
                unassignedIpv6Addresses = unassignedIpv6AddressesBuffer
            } else {
                unassignedIpv6Addresses = []
            }
        } else {
            unassignedIpv6Addresses = nil
        }
        if containerValues.contains(.unassignedIpv6Prefixes) {
            struct KeyVal0{struct item{}}
            let unassignedIpv6PrefixesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .unassignedIpv6Prefixes)
            if let unassignedIpv6PrefixesWrappedContainer = unassignedIpv6PrefixesWrappedContainer {
                let unassignedIpv6PrefixesContainer = try unassignedIpv6PrefixesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var unassignedIpv6PrefixesBuffer:[Swift.String]? = nil
                if let unassignedIpv6PrefixesContainer = unassignedIpv6PrefixesContainer {
                    unassignedIpv6PrefixesBuffer = [Swift.String]()
                    for stringContainer0 in unassignedIpv6PrefixesContainer {
                        unassignedIpv6PrefixesBuffer?.append(stringContainer0)
                    }
                }
                unassignedIpv6Prefixes = unassignedIpv6PrefixesBuffer
            } else {
                unassignedIpv6Prefixes = []
            }
        } else {
            unassignedIpv6Prefixes = nil
        }
    }
}
