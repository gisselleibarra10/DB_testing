// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetHostReservationPurchasePreviewOutputResponseBody: Swift.Equatable {
    let currencyCode: Ec2ClientTypes.CurrencyCodeValues?
    let purchase: [Ec2ClientTypes.Purchase]?
    let totalHourlyPrice: Swift.String?
    let totalUpfrontPrice: Swift.String?
}

extension GetHostReservationPurchasePreviewOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currencyCode = "currencyCode"
        case purchase = "purchase"
        case totalHourlyPrice = "totalHourlyPrice"
        case totalUpfrontPrice = "totalUpfrontPrice"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.CurrencyCodeValues.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        if containerValues.contains(.purchase) {
            struct KeyVal0{struct item{}}
            let purchaseWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .purchase)
            if let purchaseWrappedContainer = purchaseWrappedContainer {
                let purchaseContainer = try purchaseWrappedContainer.decodeIfPresent([Ec2ClientTypes.Purchase].self, forKey: .member)
                var purchaseBuffer:[Ec2ClientTypes.Purchase]? = nil
                if let purchaseContainer = purchaseContainer {
                    purchaseBuffer = [Ec2ClientTypes.Purchase]()
                    for structureContainer0 in purchaseContainer {
                        purchaseBuffer?.append(structureContainer0)
                    }
                }
                purchase = purchaseBuffer
            } else {
                purchase = []
            }
        } else {
            purchase = nil
        }
        let totalHourlyPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .totalHourlyPrice)
        totalHourlyPrice = totalHourlyPriceDecoded
        let totalUpfrontPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .totalUpfrontPrice)
        totalUpfrontPrice = totalUpfrontPriceDecoded
    }
}
