// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AuthorizeSecurityGroupEgressOutputResponseBody: Swift.Equatable {
    let `return`: Swift.Bool?
    let securityGroupRules: [Ec2ClientTypes.SecurityGroupRule]?
}

extension AuthorizeSecurityGroupEgressOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `return` = "return"
        case securityGroupRules = "securityGroupRuleSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let returnDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .return)
        `return` = returnDecoded
        if containerValues.contains(.securityGroupRules) {
            struct KeyVal0{struct item{}}
            let securityGroupRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .securityGroupRules)
            if let securityGroupRulesWrappedContainer = securityGroupRulesWrappedContainer {
                let securityGroupRulesContainer = try securityGroupRulesWrappedContainer.decodeIfPresent([Ec2ClientTypes.SecurityGroupRule].self, forKey: .member)
                var securityGroupRulesBuffer:[Ec2ClientTypes.SecurityGroupRule]? = nil
                if let securityGroupRulesContainer = securityGroupRulesContainer {
                    securityGroupRulesBuffer = [Ec2ClientTypes.SecurityGroupRule]()
                    for structureContainer0 in securityGroupRulesContainer {
                        securityGroupRulesBuffer?.append(structureContainer0)
                    }
                }
                securityGroupRules = securityGroupRulesBuffer
            } else {
                securityGroupRules = []
            }
        } else {
            securityGroupRules = nil
        }
    }
}
