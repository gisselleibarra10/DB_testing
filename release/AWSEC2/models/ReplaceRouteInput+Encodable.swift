// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReplaceRouteInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let carrierGatewayId = carrierGatewayId {
            try container.encode(carrierGatewayId, forKey: ClientRuntime.Key("CarrierGatewayId"))
        }
        if let coreNetworkArn = coreNetworkArn {
            try container.encode(coreNetworkArn, forKey: ClientRuntime.Key("CoreNetworkArn"))
        }
        if let destinationCidrBlock = destinationCidrBlock {
            try container.encode(destinationCidrBlock, forKey: ClientRuntime.Key("DestinationCidrBlock"))
        }
        if let destinationIpv6CidrBlock = destinationIpv6CidrBlock {
            try container.encode(destinationIpv6CidrBlock, forKey: ClientRuntime.Key("DestinationIpv6CidrBlock"))
        }
        if let destinationPrefixListId = destinationPrefixListId {
            try container.encode(destinationPrefixListId, forKey: ClientRuntime.Key("DestinationPrefixListId"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let egressOnlyInternetGatewayId = egressOnlyInternetGatewayId {
            try container.encode(egressOnlyInternetGatewayId, forKey: ClientRuntime.Key("EgressOnlyInternetGatewayId"))
        }
        if let gatewayId = gatewayId {
            try container.encode(gatewayId, forKey: ClientRuntime.Key("GatewayId"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let localGatewayId = localGatewayId {
            try container.encode(localGatewayId, forKey: ClientRuntime.Key("LocalGatewayId"))
        }
        if let localTarget = localTarget {
            try container.encode(localTarget, forKey: ClientRuntime.Key("LocalTarget"))
        }
        if let natGatewayId = natGatewayId {
            try container.encode(natGatewayId, forKey: ClientRuntime.Key("NatGatewayId"))
        }
        if let networkInterfaceId = networkInterfaceId {
            try container.encode(networkInterfaceId, forKey: ClientRuntime.Key("NetworkInterfaceId"))
        }
        if let routeTableId = routeTableId {
            try container.encode(routeTableId, forKey: ClientRuntime.Key("RouteTableId"))
        }
        if let transitGatewayId = transitGatewayId {
            try container.encode(transitGatewayId, forKey: ClientRuntime.Key("TransitGatewayId"))
        }
        if let vpcEndpointId = vpcEndpointId {
            try container.encode(vpcEndpointId, forKey: ClientRuntime.Key("VpcEndpointId"))
        }
        if let vpcPeeringConnectionId = vpcPeeringConnectionId {
            try container.encode(vpcPeeringConnectionId, forKey: ClientRuntime.Key("VpcPeeringConnectionId"))
        }
        try container.encode("ReplaceRoute", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
