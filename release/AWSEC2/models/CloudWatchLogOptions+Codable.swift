// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.CloudWatchLogOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logEnabled = "logEnabled"
        case logGroupArn = "logGroupArn"
        case logOutputFormat = "logOutputFormat"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logEnabled = logEnabled {
            try container.encode(logEnabled, forKey: ClientRuntime.Key("LogEnabled"))
        }
        if let logGroupArn = logGroupArn {
            try container.encode(logGroupArn, forKey: ClientRuntime.Key("LogGroupArn"))
        }
        if let logOutputFormat = logOutputFormat {
            try container.encode(logOutputFormat, forKey: ClientRuntime.Key("LogOutputFormat"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .logEnabled)
        logEnabled = logEnabledDecoded
        let logGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupArn)
        logGroupArn = logGroupArnDecoded
        let logOutputFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logOutputFormat)
        logOutputFormat = logOutputFormatDecoded
    }
}
