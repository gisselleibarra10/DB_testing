// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes {
    /// Describes a Capacity Reservation.
    public struct CapacityReservation: Swift.Equatable {
        /// The Availability Zone in which the capacity is reserved.
        public var availabilityZone: Swift.String?
        /// The Availability Zone ID of the Capacity Reservation.
        public var availabilityZoneId: Swift.String?
        /// The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.
        public var availableInstanceCount: Swift.Int?
        /// Information about instance capacity usage.
        public var capacityAllocations: [Ec2ClientTypes.CapacityAllocation]?
        /// The Amazon Resource Name (ARN) of the Capacity Reservation.
        public var capacityReservationArn: Swift.String?
        /// The ID of the Capacity Reservation Fleet to which the Capacity Reservation belongs. Only valid for Capacity Reservations that were created by a Capacity Reservation Fleet.
        public var capacityReservationFleetId: Swift.String?
        /// The ID of the Capacity Reservation.
        public var capacityReservationId: Swift.String?
        /// The date and time at which the Capacity Reservation was created.
        public var createDate: ClientRuntime.Date?
        /// Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
        public var ebsOptimized: Swift.Bool?
        /// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time.
        public var endDate: ClientRuntime.Date?
        /// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:
        ///
        /// * unlimited - The Capacity Reservation remains active until you explicitly cancel it.
        ///
        /// * limited - The Capacity Reservation expires automatically at a specified date and time.
        public var endDateType: Ec2ClientTypes.EndDateType?
        /// Deprecated.
        public var ephemeralStorage: Swift.Bool?
        /// Indicates the type of instance launches that the Capacity Reservation accepts. The options include:
        ///
        /// * open - The Capacity Reservation accepts all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes launch into the Capacity Reservation automatically without specifying any additional parameters.
        ///
        /// * targeted - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.
        public var instanceMatchCriteria: Ec2ClientTypes.InstanceMatchCriteria?
        /// The type of operating system for which the Capacity Reservation reserves capacity.
        public var instancePlatform: Ec2ClientTypes.CapacityReservationInstancePlatform?
        /// The type of instance for which the Capacity Reservation reserves capacity.
        public var instanceType: Swift.String?
        /// The Amazon Resource Name (ARN) of the Outpost on which the Capacity Reservation was created.
        public var outpostArn: Swift.String?
        /// The ID of the Amazon Web Services account that owns the Capacity Reservation.
        public var ownerId: Swift.String?
        /// The Amazon Resource Name (ARN) of the cluster placement group in which the Capacity Reservation was created. For more information, see [ Capacity Reservations for cluster placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cr-cpg.html) in the Amazon EC2 User Guide.
        public var placementGroupArn: Swift.String?
        /// The date and time at which the Capacity Reservation was started.
        public var startDate: ClientRuntime.Date?
        /// The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:
        ///
        /// * active - The Capacity Reservation is active and the capacity is available for your use.
        ///
        /// * expired - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.
        ///
        /// * cancelled - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.
        ///
        /// * pending - The Capacity Reservation request was successful but the capacity provisioning is still pending.
        ///
        /// * failed - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.
        public var state: Ec2ClientTypes.CapacityReservationState?
        /// Any tags assigned to the Capacity Reservation.
        public var tags: [Ec2ClientTypes.Tag]?
        /// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:
        ///
        /// * default - The Capacity Reservation is created on hardware that is shared with other Amazon Web Services accounts.
        ///
        /// * dedicated - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single Amazon Web Services account.
        public var tenancy: Ec2ClientTypes.CapacityReservationTenancy?
        /// The total number of instances for which the Capacity Reservation reserves capacity.
        public var totalInstanceCount: Swift.Int?

        public init (
            availabilityZone: Swift.String? = nil,
            availabilityZoneId: Swift.String? = nil,
            availableInstanceCount: Swift.Int? = nil,
            capacityAllocations: [Ec2ClientTypes.CapacityAllocation]? = nil,
            capacityReservationArn: Swift.String? = nil,
            capacityReservationFleetId: Swift.String? = nil,
            capacityReservationId: Swift.String? = nil,
            createDate: ClientRuntime.Date? = nil,
            ebsOptimized: Swift.Bool? = nil,
            endDate: ClientRuntime.Date? = nil,
            endDateType: Ec2ClientTypes.EndDateType? = nil,
            ephemeralStorage: Swift.Bool? = nil,
            instanceMatchCriteria: Ec2ClientTypes.InstanceMatchCriteria? = nil,
            instancePlatform: Ec2ClientTypes.CapacityReservationInstancePlatform? = nil,
            instanceType: Swift.String? = nil,
            outpostArn: Swift.String? = nil,
            ownerId: Swift.String? = nil,
            placementGroupArn: Swift.String? = nil,
            startDate: ClientRuntime.Date? = nil,
            state: Ec2ClientTypes.CapacityReservationState? = nil,
            tags: [Ec2ClientTypes.Tag]? = nil,
            tenancy: Ec2ClientTypes.CapacityReservationTenancy? = nil,
            totalInstanceCount: Swift.Int? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.availableInstanceCount = availableInstanceCount
            self.capacityAllocations = capacityAllocations
            self.capacityReservationArn = capacityReservationArn
            self.capacityReservationFleetId = capacityReservationFleetId
            self.capacityReservationId = capacityReservationId
            self.createDate = createDate
            self.ebsOptimized = ebsOptimized
            self.endDate = endDate
            self.endDateType = endDateType
            self.ephemeralStorage = ephemeralStorage
            self.instanceMatchCriteria = instanceMatchCriteria
            self.instancePlatform = instancePlatform
            self.instanceType = instanceType
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.placementGroupArn = placementGroupArn
            self.startDate = startDate
            self.state = state
            self.tags = tags
            self.tenancy = tenancy
            self.totalInstanceCount = totalInstanceCount
        }
    }

}
