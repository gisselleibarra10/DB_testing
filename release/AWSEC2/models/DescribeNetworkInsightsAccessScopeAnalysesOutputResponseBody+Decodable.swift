// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNetworkInsightsAccessScopeAnalysesOutputResponseBody: Swift.Equatable {
    let networkInsightsAccessScopeAnalyses: [Ec2ClientTypes.NetworkInsightsAccessScopeAnalysis]?
    let nextToken: Swift.String?
}

extension DescribeNetworkInsightsAccessScopeAnalysesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case networkInsightsAccessScopeAnalyses = "networkInsightsAccessScopeAnalysisSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.networkInsightsAccessScopeAnalyses) {
            struct KeyVal0{struct item{}}
            let networkInsightsAccessScopeAnalysesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .networkInsightsAccessScopeAnalyses)
            if let networkInsightsAccessScopeAnalysesWrappedContainer = networkInsightsAccessScopeAnalysesWrappedContainer {
                let networkInsightsAccessScopeAnalysesContainer = try networkInsightsAccessScopeAnalysesWrappedContainer.decodeIfPresent([Ec2ClientTypes.NetworkInsightsAccessScopeAnalysis].self, forKey: .member)
                var networkInsightsAccessScopeAnalysesBuffer:[Ec2ClientTypes.NetworkInsightsAccessScopeAnalysis]? = nil
                if let networkInsightsAccessScopeAnalysesContainer = networkInsightsAccessScopeAnalysesContainer {
                    networkInsightsAccessScopeAnalysesBuffer = [Ec2ClientTypes.NetworkInsightsAccessScopeAnalysis]()
                    for structureContainer0 in networkInsightsAccessScopeAnalysesContainer {
                        networkInsightsAccessScopeAnalysesBuffer?.append(structureContainer0)
                    }
                }
                networkInsightsAccessScopeAnalyses = networkInsightsAccessScopeAnalysesBuffer
            } else {
                networkInsightsAccessScopeAnalyses = []
            }
        } else {
            networkInsightsAccessScopeAnalyses = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
