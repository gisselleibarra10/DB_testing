// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyIpamResourceCidrInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let resourceId: Swift.String?
    let resourceCidr: Swift.String?
    let resourceRegion: Swift.String?
    let currentIpamScopeId: Swift.String?
    let destinationIpamScopeId: Swift.String?
    let monitored: Swift.Bool?
}

extension ModifyIpamResourceCidrInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentIpamScopeId = "CurrentIpamScopeId"
        case destinationIpamScopeId = "DestinationIpamScopeId"
        case dryRun = "DryRun"
        case monitored = "Monitored"
        case resourceCidr = "ResourceCidr"
        case resourceId = "ResourceId"
        case resourceRegion = "ResourceRegion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceCidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceCidr)
        resourceCidr = resourceCidrDecoded
        let resourceRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceRegion)
        resourceRegion = resourceRegionDecoded
        let currentIpamScopeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentIpamScopeId)
        currentIpamScopeId = currentIpamScopeIdDecoded
        let destinationIpamScopeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationIpamScopeId)
        destinationIpamScopeId = destinationIpamScopeIdDecoded
        let monitoredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .monitored)
        monitored = monitoredDecoded
    }
}
