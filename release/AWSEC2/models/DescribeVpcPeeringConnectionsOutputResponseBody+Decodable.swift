// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVpcPeeringConnectionsOutputResponseBody: Swift.Equatable {
    let vpcPeeringConnections: [Ec2ClientTypes.VpcPeeringConnection]?
    let nextToken: Swift.String?
}

extension DescribeVpcPeeringConnectionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case vpcPeeringConnections = "vpcPeeringConnectionSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.vpcPeeringConnections) {
            struct KeyVal0{struct item{}}
            let vpcPeeringConnectionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .vpcPeeringConnections)
            if let vpcPeeringConnectionsWrappedContainer = vpcPeeringConnectionsWrappedContainer {
                let vpcPeeringConnectionsContainer = try vpcPeeringConnectionsWrappedContainer.decodeIfPresent([Ec2ClientTypes.VpcPeeringConnection].self, forKey: .member)
                var vpcPeeringConnectionsBuffer:[Ec2ClientTypes.VpcPeeringConnection]? = nil
                if let vpcPeeringConnectionsContainer = vpcPeeringConnectionsContainer {
                    vpcPeeringConnectionsBuffer = [Ec2ClientTypes.VpcPeeringConnection]()
                    for structureContainer0 in vpcPeeringConnectionsContainer {
                        vpcPeeringConnectionsBuffer?.append(structureContainer0)
                    }
                }
                vpcPeeringConnections = vpcPeeringConnectionsBuffer
            } else {
                vpcPeeringConnections = []
            }
        } else {
            vpcPeeringConnections = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
