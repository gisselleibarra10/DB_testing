// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAddressTransfersInputBody: Swift.Equatable {
    let allocationIds: [Swift.String]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let dryRun: Swift.Bool?
}

extension DescribeAddressTransfersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationIds = "AllocationId"
        case dryRun = "DryRun"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.allocationIds) {
            struct KeyVal0{struct AllocationId{}}
            let allocationIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AllocationId>.CodingKeys.self, forKey: .allocationIds)
            if let allocationIdsWrappedContainer = allocationIdsWrappedContainer {
                let allocationIdsContainer = try allocationIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var allocationIdsBuffer:[Swift.String]? = nil
                if let allocationIdsContainer = allocationIdsContainer {
                    allocationIdsBuffer = [Swift.String]()
                    for stringContainer0 in allocationIdsContainer {
                        allocationIdsBuffer?.append(stringContainer0)
                    }
                }
                allocationIds = allocationIdsBuffer
            } else {
                allocationIds = []
            }
        } else {
            allocationIds = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
