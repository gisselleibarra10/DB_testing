// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeLaunchTemplatesInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let launchTemplateIds: [Swift.String]?
    let launchTemplateNames: [Swift.String]?
    let filters: [Ec2ClientTypes.Filter]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension DescribeLaunchTemplatesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case filters = "Filter"
        case launchTemplateIds = "LaunchTemplateId"
        case launchTemplateNames = "LaunchTemplateName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.launchTemplateIds) {
            struct KeyVal0{struct item{}}
            let launchTemplateIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .launchTemplateIds)
            if let launchTemplateIdsWrappedContainer = launchTemplateIdsWrappedContainer {
                let launchTemplateIdsContainer = try launchTemplateIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var launchTemplateIdsBuffer:[Swift.String]? = nil
                if let launchTemplateIdsContainer = launchTemplateIdsContainer {
                    launchTemplateIdsBuffer = [Swift.String]()
                    for stringContainer0 in launchTemplateIdsContainer {
                        launchTemplateIdsBuffer?.append(stringContainer0)
                    }
                }
                launchTemplateIds = launchTemplateIdsBuffer
            } else {
                launchTemplateIds = []
            }
        } else {
            launchTemplateIds = nil
        }
        if containerValues.contains(.launchTemplateNames) {
            struct KeyVal0{struct item{}}
            let launchTemplateNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .launchTemplateNames)
            if let launchTemplateNamesWrappedContainer = launchTemplateNamesWrappedContainer {
                let launchTemplateNamesContainer = try launchTemplateNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var launchTemplateNamesBuffer:[Swift.String]? = nil
                if let launchTemplateNamesContainer = launchTemplateNamesContainer {
                    launchTemplateNamesBuffer = [Swift.String]()
                    for stringContainer0 in launchTemplateNamesContainer {
                        launchTemplateNamesBuffer?.append(stringContainer0)
                    }
                }
                launchTemplateNames = launchTemplateNamesBuffer
            } else {
                launchTemplateNames = []
            }
        } else {
            launchTemplateNames = nil
        }
        if containerValues.contains(.filters) {
            struct KeyVal0{struct Filter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Filter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([Ec2ClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[Ec2ClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [Ec2ClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
