// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribePlacementGroupsInputBody: Swift.Equatable {
    let filters: [Ec2ClientTypes.Filter]?
    let dryRun: Swift.Bool?
    let groupNames: [Swift.String]?
    let groupIds: [Swift.String]?
}

extension DescribePlacementGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "dryRun"
        case filters = "Filter"
        case groupIds = "GroupId"
        case groupNames = "groupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.filters) {
            struct KeyVal0{struct Filter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Filter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([Ec2ClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[Ec2ClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [Ec2ClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.groupNames) {
            struct KeyVal0{struct member{}}
            let groupNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .groupNames)
            if let groupNamesWrappedContainer = groupNamesWrappedContainer {
                let groupNamesContainer = try groupNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var groupNamesBuffer:[Swift.String]? = nil
                if let groupNamesContainer = groupNamesContainer {
                    groupNamesBuffer = [Swift.String]()
                    for stringContainer0 in groupNamesContainer {
                        groupNamesBuffer?.append(stringContainer0)
                    }
                }
                groupNames = groupNamesBuffer
            } else {
                groupNames = []
            }
        } else {
            groupNames = nil
        }
        if containerValues.contains(.groupIds) {
            struct KeyVal0{struct GroupId{}}
            let groupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GroupId>.CodingKeys.self, forKey: .groupIds)
            if let groupIdsWrappedContainer = groupIdsWrappedContainer {
                let groupIdsContainer = try groupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var groupIdsBuffer:[Swift.String]? = nil
                if let groupIdsContainer = groupIdsContainer {
                    groupIdsBuffer = [Swift.String]()
                    for stringContainer0 in groupIdsContainer {
                        groupIdsBuffer?.append(stringContainer0)
                    }
                }
                groupIds = groupIdsBuffer
            } else {
                groupIds = []
            }
        } else {
            groupIds = nil
        }
    }
}
