// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes {
    /// Describes a NAT gateway.
    public struct NatGateway: Swift.Equatable {
        /// Indicates whether the NAT gateway supports public or private connectivity.
        public var connectivityType: Ec2ClientTypes.ConnectivityType?
        /// The date and time the NAT gateway was created.
        public var createTime: ClientRuntime.Date?
        /// The date and time the NAT gateway was deleted, if applicable.
        public var deleteTime: ClientRuntime.Date?
        /// If the NAT gateway could not be created, specifies the error code for the failure. (InsufficientFreeAddressesInSubnet | Gateway.NotAttached | InvalidAllocationID.NotFound | Resource.AlreadyAssociated | InternalError | InvalidSubnetID.NotFound)
        public var failureCode: Swift.String?
        /// If the NAT gateway could not be created, specifies the error message for the failure, that corresponds to the error code.
        ///
        /// * For InsufficientFreeAddressesInSubnet: "Subnet has insufficient free addresses to create this NAT gateway"
        ///
        /// * For Gateway.NotAttached: "Network vpc-xxxxxxxx has no Internet gateway attached"
        ///
        /// * For InvalidAllocationID.NotFound: "Elastic IP address eipalloc-xxxxxxxx could not be associated with this NAT gateway"
        ///
        /// * For Resource.AlreadyAssociated: "Elastic IP address eipalloc-xxxxxxxx is already associated"
        ///
        /// * For InternalError: "Network interface eni-xxxxxxxx, created and used internally by this NAT gateway is in an invalid state. Please try again."
        ///
        /// * For InvalidSubnetID.NotFound: "The specified subnet subnet-xxxxxxxx does not exist or could not be found."
        public var failureMessage: Swift.String?
        /// Information about the IP addresses and network interface associated with the NAT gateway.
        public var natGatewayAddresses: [Ec2ClientTypes.NatGatewayAddress]?
        /// The ID of the NAT gateway.
        public var natGatewayId: Swift.String?
        /// Reserved. If you need to sustain traffic greater than the [documented limits](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html), contact us through the [Support Center](https://console.aws.amazon.com/support/home?).
        public var provisionedBandwidth: Ec2ClientTypes.ProvisionedBandwidth?
        /// The state of the NAT gateway.
        ///
        /// * pending: The NAT gateway is being created and is not ready to process traffic.
        ///
        /// * failed: The NAT gateway could not be created. Check the failureCode and failureMessage fields for the reason.
        ///
        /// * available: The NAT gateway is able to process traffic. This status remains until you delete the NAT gateway, and does not indicate the health of the NAT gateway.
        ///
        /// * deleting: The NAT gateway is in the process of being terminated and may still be processing traffic.
        ///
        /// * deleted: The NAT gateway has been terminated and is no longer processing traffic.
        public var state: Ec2ClientTypes.NatGatewayState?
        /// The ID of the subnet in which the NAT gateway is located.
        public var subnetId: Swift.String?
        /// The tags for the NAT gateway.
        public var tags: [Ec2ClientTypes.Tag]?
        /// The ID of the VPC in which the NAT gateway is located.
        public var vpcId: Swift.String?

        public init (
            connectivityType: Ec2ClientTypes.ConnectivityType? = nil,
            createTime: ClientRuntime.Date? = nil,
            deleteTime: ClientRuntime.Date? = nil,
            failureCode: Swift.String? = nil,
            failureMessage: Swift.String? = nil,
            natGatewayAddresses: [Ec2ClientTypes.NatGatewayAddress]? = nil,
            natGatewayId: Swift.String? = nil,
            provisionedBandwidth: Ec2ClientTypes.ProvisionedBandwidth? = nil,
            state: Ec2ClientTypes.NatGatewayState? = nil,
            subnetId: Swift.String? = nil,
            tags: [Ec2ClientTypes.Tag]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.connectivityType = connectivityType
            self.createTime = createTime
            self.deleteTime = deleteTime
            self.failureCode = failureCode
            self.failureMessage = failureMessage
            self.natGatewayAddresses = natGatewayAddresses
            self.natGatewayId = natGatewayId
            self.provisionedBandwidth = provisionedBandwidth
            self.state = state
            self.subnetId = subnetId
            self.tags = tags
            self.vpcId = vpcId
        }
    }

}
