// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClientVpnAuthorizationRulesOutputResponseBody: Swift.Equatable {
    let authorizationRules: [Ec2ClientTypes.AuthorizationRule]?
    let nextToken: Swift.String?
}

extension DescribeClientVpnAuthorizationRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizationRules = "authorizationRule"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.authorizationRules) {
            struct KeyVal0{struct item{}}
            let authorizationRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .authorizationRules)
            if let authorizationRulesWrappedContainer = authorizationRulesWrappedContainer {
                let authorizationRulesContainer = try authorizationRulesWrappedContainer.decodeIfPresent([Ec2ClientTypes.AuthorizationRule].self, forKey: .member)
                var authorizationRulesBuffer:[Ec2ClientTypes.AuthorizationRule]? = nil
                if let authorizationRulesContainer = authorizationRulesContainer {
                    authorizationRulesBuffer = [Ec2ClientTypes.AuthorizationRule]()
                    for structureContainer0 in authorizationRulesContainer {
                        authorizationRulesBuffer?.append(structureContainer0)
                    }
                }
                authorizationRules = authorizationRulesBuffer
            } else {
                authorizationRules = []
            }
        } else {
            authorizationRules = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
