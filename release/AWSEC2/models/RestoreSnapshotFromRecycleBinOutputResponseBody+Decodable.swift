// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RestoreSnapshotFromRecycleBinOutputResponseBody: Swift.Equatable {
    let snapshotId: Swift.String?
    let outpostArn: Swift.String?
    let description: Swift.String?
    let encrypted: Swift.Bool?
    let ownerId: Swift.String?
    let progress: Swift.String?
    let startTime: ClientRuntime.Date?
    let state: Ec2ClientTypes.SnapshotState?
    let volumeId: Swift.String?
    let volumeSize: Swift.Int?
}

extension RestoreSnapshotFromRecycleBinOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "description"
        case encrypted = "encrypted"
        case outpostArn = "outpostArn"
        case ownerId = "ownerId"
        case progress = "progress"
        case snapshotId = "snapshotId"
        case startTime = "startTime"
        case state = "status"
        case volumeId = "volumeId"
        case volumeSize = "volumeSize"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let outpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outpostArn)
        outpostArn = outpostArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let progressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .progress)
        progress = progressDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let stateDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.SnapshotState.self, forKey: .state)
        state = stateDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let volumeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSize)
        volumeSize = volumeSizeDecoded
    }
}
