// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ImportImageInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let architecture = architecture {
            try container.encode(architecture, forKey: ClientRuntime.Key("Architecture"))
        }
        if let bootMode = bootMode {
            try container.encode(bootMode, forKey: ClientRuntime.Key("BootMode"))
        }
        if let clientData = clientData {
            try container.encode(clientData, forKey: ClientRuntime.Key("ClientData"))
        }
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: ClientRuntime.Key("ClientToken"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let diskContainers = diskContainers {
            if !diskContainers.isEmpty {
                for (index0, imagediskcontainer0) in diskContainers.enumerated() {
                    var diskContainersContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DiskContainer.\(index0.advanced(by: 1))"))
                    try diskContainersContainer0.encode(imagediskcontainer0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: ClientRuntime.Key("Encrypted"))
        }
        if let hypervisor = hypervisor {
            try container.encode(hypervisor, forKey: ClientRuntime.Key("Hypervisor"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let licenseSpecifications = licenseSpecifications {
            if !licenseSpecifications.isEmpty {
                for (index0, importimagelicenseconfigurationrequest0) in licenseSpecifications.enumerated() {
                    var licenseSpecificationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LicenseSpecifications.\(index0.advanced(by: 1))"))
                    try licenseSpecificationsContainer0.encode(importimagelicenseconfigurationrequest0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let licenseType = licenseType {
            try container.encode(licenseType, forKey: ClientRuntime.Key("LicenseType"))
        }
        if let platform = platform {
            try container.encode(platform, forKey: ClientRuntime.Key("Platform"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: ClientRuntime.Key("RoleName"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let usageOperation = usageOperation {
            try container.encode(usageOperation, forKey: ClientRuntime.Key("UsageOperation"))
        }
        try container.encode("ImportImage", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
