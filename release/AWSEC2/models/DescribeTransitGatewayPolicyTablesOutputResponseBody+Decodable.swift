// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTransitGatewayPolicyTablesOutputResponseBody: Swift.Equatable {
    let transitGatewayPolicyTables: [EC2ClientTypes.TransitGatewayPolicyTable]?
    let nextToken: Swift.String?
}

extension DescribeTransitGatewayPolicyTablesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case transitGatewayPolicyTables = "transitGatewayPolicyTables"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.transitGatewayPolicyTables) {
            struct KeyVal0{struct item{}}
            let transitGatewayPolicyTablesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .transitGatewayPolicyTables)
            if let transitGatewayPolicyTablesWrappedContainer = transitGatewayPolicyTablesWrappedContainer {
                let transitGatewayPolicyTablesContainer = try transitGatewayPolicyTablesWrappedContainer.decodeIfPresent([EC2ClientTypes.TransitGatewayPolicyTable].self, forKey: .member)
                var transitGatewayPolicyTablesBuffer:[EC2ClientTypes.TransitGatewayPolicyTable]? = nil
                if let transitGatewayPolicyTablesContainer = transitGatewayPolicyTablesContainer {
                    transitGatewayPolicyTablesBuffer = [EC2ClientTypes.TransitGatewayPolicyTable]()
                    for structureContainer0 in transitGatewayPolicyTablesContainer {
                        transitGatewayPolicyTablesBuffer?.append(structureContainer0)
                    }
                }
                transitGatewayPolicyTables = transitGatewayPolicyTablesBuffer
            } else {
                transitGatewayPolicyTables = []
            }
        } else {
            transitGatewayPolicyTables = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
