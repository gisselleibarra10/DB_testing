// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifySecurityGroupRulesInputBody: Swift.Equatable {
    let groupId: Swift.String?
    let securityGroupRules: [Ec2ClientTypes.SecurityGroupRuleUpdate]?
    let dryRun: Swift.Bool?
}

extension ModifySecurityGroupRulesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case groupId = "GroupId"
        case securityGroupRules = "SecurityGroupRule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        if containerValues.contains(.securityGroupRules) {
            struct KeyVal0{struct item{}}
            let securityGroupRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .securityGroupRules)
            if let securityGroupRulesWrappedContainer = securityGroupRulesWrappedContainer {
                let securityGroupRulesContainer = try securityGroupRulesWrappedContainer.decodeIfPresent([Ec2ClientTypes.SecurityGroupRuleUpdate].self, forKey: .member)
                var securityGroupRulesBuffer:[Ec2ClientTypes.SecurityGroupRuleUpdate]? = nil
                if let securityGroupRulesContainer = securityGroupRulesContainer {
                    securityGroupRulesBuffer = [Ec2ClientTypes.SecurityGroupRuleUpdate]()
                    for structureContainer0 in securityGroupRulesContainer {
                        securityGroupRulesBuffer?.append(structureContainer0)
                    }
                }
                securityGroupRules = securityGroupRulesBuffer
            } else {
                securityGroupRules = []
            }
        } else {
            securityGroupRules = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
