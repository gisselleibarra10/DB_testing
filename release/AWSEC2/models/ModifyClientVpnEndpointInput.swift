// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ModifyClientVpnEndpointInput: Swift.Equatable {
    /// The options for managing connection authorization for new client connections.
    public var clientConnectOptions: EC2ClientTypes.ClientConnectOptions?
    /// Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established.
    public var clientLoginBannerOptions: EC2ClientTypes.ClientLoginBannerOptions?
    /// The ID of the Client VPN endpoint to modify.
    /// This member is required.
    public var clientVpnEndpointId: Swift.String?
    /// Information about the client connection logging options. If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:
    ///
    /// * Client connection requests
    ///
    /// * Client connection results (successful and unsuccessful)
    ///
    /// * Reasons for unsuccessful client connection requests
    ///
    /// * Client connection termination time
    public var connectionLogOptions: EC2ClientTypes.ConnectionLogOptions?
    /// A brief description of the Client VPN endpoint.
    public var description: Swift.String?
    /// Information about the DNS servers to be used by Client VPN connections. A Client VPN endpoint can have up to two DNS servers.
    public var dnsServers: EC2ClientTypes.DnsServersOptionsModifyStructure?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// The IDs of one or more security groups to apply to the target network.
    public var securityGroupIds: [Swift.String]?
    /// Specify whether to enable the self-service portal for the Client VPN endpoint.
    public var selfServicePortal: EC2ClientTypes.SelfServicePortal?
    /// The ARN of the server certificate to be used. The server certificate must be provisioned in Certificate Manager (ACM).
    public var serverCertificateArn: Swift.String?
    /// The maximum VPN session duration time in hours. Valid values: 8 | 10 | 12 | 24 Default value: 24
    public var sessionTimeoutHours: Swift.Int?
    /// Indicates whether the VPN is split-tunnel. For information about split-tunnel VPN endpoints, see [Split-tunnel Client VPN endpoint](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html) in the Client VPN Administrator Guide.
    public var splitTunnel: Swift.Bool?
    /// The ID of the VPC to associate with the Client VPN endpoint.
    public var vpcId: Swift.String?
    /// The port number to assign to the Client VPN endpoint for TCP and UDP traffic. Valid Values: 443 | 1194 Default Value: 443
    public var vpnPort: Swift.Int?

    public init (
        clientConnectOptions: EC2ClientTypes.ClientConnectOptions? = nil,
        clientLoginBannerOptions: EC2ClientTypes.ClientLoginBannerOptions? = nil,
        clientVpnEndpointId: Swift.String? = nil,
        connectionLogOptions: EC2ClientTypes.ConnectionLogOptions? = nil,
        description: Swift.String? = nil,
        dnsServers: EC2ClientTypes.DnsServersOptionsModifyStructure? = nil,
        dryRun: Swift.Bool? = nil,
        securityGroupIds: [Swift.String]? = nil,
        selfServicePortal: EC2ClientTypes.SelfServicePortal? = nil,
        serverCertificateArn: Swift.String? = nil,
        sessionTimeoutHours: Swift.Int? = nil,
        splitTunnel: Swift.Bool? = nil,
        vpcId: Swift.String? = nil,
        vpnPort: Swift.Int? = nil
    )
    {
        self.clientConnectOptions = clientConnectOptions
        self.clientLoginBannerOptions = clientLoginBannerOptions
        self.clientVpnEndpointId = clientVpnEndpointId
        self.connectionLogOptions = connectionLogOptions
        self.description = description
        self.dnsServers = dnsServers
        self.dryRun = dryRun
        self.securityGroupIds = securityGroupIds
        self.selfServicePortal = selfServicePortal
        self.serverCertificateArn = serverCertificateArn
        self.sessionTimeoutHours = sessionTimeoutHours
        self.splitTunnel = splitTunnel
        self.vpcId = vpcId
        self.vpnPort = vpnPort
    }
}
