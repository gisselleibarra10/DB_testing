// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNetworkAclsOutputResponseBody: Swift.Equatable {
    let networkAcls: [Ec2ClientTypes.NetworkAcl]?
    let nextToken: Swift.String?
}

extension DescribeNetworkAclsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case networkAcls = "networkAclSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.networkAcls) {
            struct KeyVal0{struct item{}}
            let networkAclsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .networkAcls)
            if let networkAclsWrappedContainer = networkAclsWrappedContainer {
                let networkAclsContainer = try networkAclsWrappedContainer.decodeIfPresent([Ec2ClientTypes.NetworkAcl].self, forKey: .member)
                var networkAclsBuffer:[Ec2ClientTypes.NetworkAcl]? = nil
                if let networkAclsContainer = networkAclsContainer {
                    networkAclsBuffer = [Ec2ClientTypes.NetworkAcl]()
                    for structureContainer0 in networkAclsContainer {
                        networkAclsBuffer?.append(structureContainer0)
                    }
                }
                networkAcls = networkAclsBuffer
            } else {
                networkAcls = []
            }
        } else {
            networkAcls = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
