// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.SnapshotTaskDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "description"
        case diskImageSize = "diskImageSize"
        case encrypted = "encrypted"
        case format = "format"
        case kmsKeyId = "kmsKeyId"
        case progress = "progress"
        case snapshotId = "snapshotId"
        case status = "status"
        case statusMessage = "statusMessage"
        case url = "url"
        case userBucket = "userBucket"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let diskImageSize = diskImageSize {
            try container.encode(diskImageSize, forKey: ClientRuntime.Key("DiskImageSize"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: ClientRuntime.Key("Encrypted"))
        }
        if let format = format {
            try container.encode(format, forKey: ClientRuntime.Key("Format"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let progress = progress {
            try container.encode(progress, forKey: ClientRuntime.Key("Progress"))
        }
        if let snapshotId = snapshotId {
            try container.encode(snapshotId, forKey: ClientRuntime.Key("SnapshotId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: ClientRuntime.Key("StatusMessage"))
        }
        if let url = url {
            try container.encode(url, forKey: ClientRuntime.Key("Url"))
        }
        if let userBucket = userBucket {
            try container.encode(userBucket, forKey: ClientRuntime.Key("UserBucket"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let diskImageSizeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .diskImageSize)
        diskImageSize = diskImageSizeDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let formatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .format)
        format = formatDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let progressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .progress)
        progress = progressDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let userBucketDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.UserBucketDetails.self, forKey: .userBucket)
        userBucket = userBucketDecoded
    }
}
