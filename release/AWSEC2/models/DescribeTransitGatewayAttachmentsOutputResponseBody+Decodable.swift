// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTransitGatewayAttachmentsOutputResponseBody: Swift.Equatable {
    let transitGatewayAttachments: [Ec2ClientTypes.TransitGatewayAttachment]?
    let nextToken: Swift.String?
}

extension DescribeTransitGatewayAttachmentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case transitGatewayAttachments = "transitGatewayAttachments"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.transitGatewayAttachments) {
            struct KeyVal0{struct item{}}
            let transitGatewayAttachmentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .transitGatewayAttachments)
            if let transitGatewayAttachmentsWrappedContainer = transitGatewayAttachmentsWrappedContainer {
                let transitGatewayAttachmentsContainer = try transitGatewayAttachmentsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TransitGatewayAttachment].self, forKey: .member)
                var transitGatewayAttachmentsBuffer:[Ec2ClientTypes.TransitGatewayAttachment]? = nil
                if let transitGatewayAttachmentsContainer = transitGatewayAttachmentsContainer {
                    transitGatewayAttachmentsBuffer = [Ec2ClientTypes.TransitGatewayAttachment]()
                    for structureContainer0 in transitGatewayAttachmentsContainer {
                        transitGatewayAttachmentsBuffer?.append(structureContainer0)
                    }
                }
                transitGatewayAttachments = transitGatewayAttachmentsBuffer
            } else {
                transitGatewayAttachments = []
            }
        } else {
            transitGatewayAttachments = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
