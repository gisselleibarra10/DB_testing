// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.InstanceStorageInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case disks = "disks"
        case encryptionSupport = "encryptionSupport"
        case nvmeSupport = "nvmeSupport"
        case totalSizeInGB = "totalSizeInGB"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let disks = disks {
            if !disks.isEmpty {
                for (index0, diskinfo0) in disks.enumerated() {
                    var disksContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Disks.\(index0.advanced(by: 1))"))
                    try disksContainer0.encode(diskinfo0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let encryptionSupport = encryptionSupport {
            try container.encode(encryptionSupport, forKey: ClientRuntime.Key("EncryptionSupport"))
        }
        if let nvmeSupport = nvmeSupport {
            try container.encode(nvmeSupport, forKey: ClientRuntime.Key("NvmeSupport"))
        }
        if let totalSizeInGB = totalSizeInGB {
            try container.encode(totalSizeInGB, forKey: ClientRuntime.Key("TotalSizeInGB"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalSizeInGBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalSizeInGB)
        totalSizeInGB = totalSizeInGBDecoded
        if containerValues.contains(.disks) {
            struct KeyVal0{struct item{}}
            let disksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .disks)
            if let disksWrappedContainer = disksWrappedContainer {
                let disksContainer = try disksWrappedContainer.decodeIfPresent([Ec2ClientTypes.DiskInfo].self, forKey: .member)
                var disksBuffer:[Ec2ClientTypes.DiskInfo]? = nil
                if let disksContainer = disksContainer {
                    disksBuffer = [Ec2ClientTypes.DiskInfo]()
                    for structureContainer0 in disksContainer {
                        disksBuffer?.append(structureContainer0)
                    }
                }
                disks = disksBuffer
            } else {
                disks = []
            }
        } else {
            disks = nil
        }
        let nvmeSupportDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.EphemeralNvmeSupport.self, forKey: .nvmeSupport)
        nvmeSupport = nvmeSupportDecoded
        let encryptionSupportDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.InstanceStorageEncryptionSupport.self, forKey: .encryptionSupport)
        encryptionSupport = encryptionSupportDecoded
    }
}
