// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateSecurityGroupRuleDescriptionsIngressInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let groupId: Swift.String?
    let groupName: Swift.String?
    let ipPermissions: [Ec2ClientTypes.IpPermission]?
    let securityGroupRuleDescriptions: [Ec2ClientTypes.SecurityGroupRuleDescription]?
}

extension UpdateSecurityGroupRuleDescriptionsIngressInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case groupId = "GroupId"
        case groupName = "GroupName"
        case ipPermissions = "IpPermissions"
        case securityGroupRuleDescriptions = "SecurityGroupRuleDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        if containerValues.contains(.ipPermissions) {
            struct KeyVal0{struct item{}}
            let ipPermissionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .ipPermissions)
            if let ipPermissionsWrappedContainer = ipPermissionsWrappedContainer {
                let ipPermissionsContainer = try ipPermissionsWrappedContainer.decodeIfPresent([Ec2ClientTypes.IpPermission].self, forKey: .member)
                var ipPermissionsBuffer:[Ec2ClientTypes.IpPermission]? = nil
                if let ipPermissionsContainer = ipPermissionsContainer {
                    ipPermissionsBuffer = [Ec2ClientTypes.IpPermission]()
                    for structureContainer0 in ipPermissionsContainer {
                        ipPermissionsBuffer?.append(structureContainer0)
                    }
                }
                ipPermissions = ipPermissionsBuffer
            } else {
                ipPermissions = []
            }
        } else {
            ipPermissions = nil
        }
        if containerValues.contains(.securityGroupRuleDescriptions) {
            struct KeyVal0{struct item{}}
            let securityGroupRuleDescriptionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .securityGroupRuleDescriptions)
            if let securityGroupRuleDescriptionsWrappedContainer = securityGroupRuleDescriptionsWrappedContainer {
                let securityGroupRuleDescriptionsContainer = try securityGroupRuleDescriptionsWrappedContainer.decodeIfPresent([Ec2ClientTypes.SecurityGroupRuleDescription].self, forKey: .member)
                var securityGroupRuleDescriptionsBuffer:[Ec2ClientTypes.SecurityGroupRuleDescription]? = nil
                if let securityGroupRuleDescriptionsContainer = securityGroupRuleDescriptionsContainer {
                    securityGroupRuleDescriptionsBuffer = [Ec2ClientTypes.SecurityGroupRuleDescription]()
                    for structureContainer0 in securityGroupRuleDescriptionsContainer {
                        securityGroupRuleDescriptionsBuffer?.append(structureContainer0)
                    }
                }
                securityGroupRuleDescriptions = securityGroupRuleDescriptionsBuffer
            } else {
                securityGroupRuleDescriptions = []
            }
        } else {
            securityGroupRuleDescriptions = nil
        }
    }
}
