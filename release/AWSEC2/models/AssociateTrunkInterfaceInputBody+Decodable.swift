// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AssociateTrunkInterfaceInputBody: Swift.Equatable {
    let branchInterfaceId: Swift.String?
    let trunkInterfaceId: Swift.String?
    let vlanId: Swift.Int?
    let greKey: Swift.Int?
    let clientToken: Swift.String?
    let dryRun: Swift.Bool?
}

extension AssociateTrunkInterfaceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branchInterfaceId = "BranchInterfaceId"
        case clientToken = "ClientToken"
        case dryRun = "DryRun"
        case greKey = "GreKey"
        case trunkInterfaceId = "TrunkInterfaceId"
        case vlanId = "VlanId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let branchInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .branchInterfaceId)
        branchInterfaceId = branchInterfaceIdDecoded
        let trunkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trunkInterfaceId)
        trunkInterfaceId = trunkInterfaceIdDecoded
        let vlanIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .vlanId)
        vlanId = vlanIdDecoded
        let greKeyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .greKey)
        greKey = greKeyDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
