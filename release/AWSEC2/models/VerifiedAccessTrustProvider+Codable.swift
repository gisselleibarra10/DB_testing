// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.VerifiedAccessTrustProvider: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "creationTime"
        case description = "description"
        case deviceOptions = "deviceOptions"
        case deviceTrustProviderType = "deviceTrustProviderType"
        case lastUpdatedTime = "lastUpdatedTime"
        case oidcOptions = "oidcOptions"
        case policyReferenceName = "policyReferenceName"
        case tags = "tagSet"
        case trustProviderType = "trustProviderType"
        case userTrustProviderType = "userTrustProviderType"
        case verifiedAccessTrustProviderId = "verifiedAccessTrustProviderId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let creationTime = creationTime {
            try container.encode(creationTime, forKey: ClientRuntime.Key("CreationTime"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let deviceOptions = deviceOptions {
            try container.encode(deviceOptions, forKey: ClientRuntime.Key("DeviceOptions"))
        }
        if let deviceTrustProviderType = deviceTrustProviderType {
            try container.encode(deviceTrustProviderType, forKey: ClientRuntime.Key("DeviceTrustProviderType"))
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try container.encode(lastUpdatedTime, forKey: ClientRuntime.Key("LastUpdatedTime"))
        }
        if let oidcOptions = oidcOptions {
            try container.encode(oidcOptions, forKey: ClientRuntime.Key("OidcOptions"))
        }
        if let policyReferenceName = policyReferenceName {
            try container.encode(policyReferenceName, forKey: ClientRuntime.Key("PolicyReferenceName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let trustProviderType = trustProviderType {
            try container.encode(trustProviderType, forKey: ClientRuntime.Key("TrustProviderType"))
        }
        if let userTrustProviderType = userTrustProviderType {
            try container.encode(userTrustProviderType, forKey: ClientRuntime.Key("UserTrustProviderType"))
        }
        if let verifiedAccessTrustProviderId = verifiedAccessTrustProviderId {
            try container.encode(verifiedAccessTrustProviderId, forKey: ClientRuntime.Key("VerifiedAccessTrustProviderId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let verifiedAccessTrustProviderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verifiedAccessTrustProviderId)
        verifiedAccessTrustProviderId = verifiedAccessTrustProviderIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let trustProviderTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.TrustProviderType.self, forKey: .trustProviderType)
        trustProviderType = trustProviderTypeDecoded
        let userTrustProviderTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.UserTrustProviderType.self, forKey: .userTrustProviderType)
        userTrustProviderType = userTrustProviderTypeDecoded
        let deviceTrustProviderTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.DeviceTrustProviderType.self, forKey: .deviceTrustProviderType)
        deviceTrustProviderType = deviceTrustProviderTypeDecoded
        let oidcOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.OidcOptions.self, forKey: .oidcOptions)
        oidcOptions = oidcOptionsDecoded
        let deviceOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.DeviceOptions.self, forKey: .deviceOptions)
        deviceOptions = deviceOptionsDecoded
        let policyReferenceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyReferenceName)
        policyReferenceName = policyReferenceNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
