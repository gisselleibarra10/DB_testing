// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSnapshotOutputResponseBody: Swift.Equatable {
    let dataEncryptionKeyId: Swift.String?
    let description: Swift.String?
    let encrypted: Swift.Bool?
    let kmsKeyId: Swift.String?
    let ownerId: Swift.String?
    let progress: Swift.String?
    let snapshotId: Swift.String?
    let startTime: ClientRuntime.Date?
    let state: Ec2ClientTypes.SnapshotState?
    let stateMessage: Swift.String?
    let volumeId: Swift.String?
    let volumeSize: Swift.Int?
    let ownerAlias: Swift.String?
    let outpostArn: Swift.String?
    let tags: [Ec2ClientTypes.Tag]?
    let storageTier: Ec2ClientTypes.StorageTier?
    let restoreExpiryTime: ClientRuntime.Date?
}

extension CreateSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataEncryptionKeyId = "dataEncryptionKeyId"
        case description = "description"
        case encrypted = "encrypted"
        case kmsKeyId = "kmsKeyId"
        case outpostArn = "outpostArn"
        case ownerAlias = "ownerAlias"
        case ownerId = "ownerId"
        case progress = "progress"
        case restoreExpiryTime = "restoreExpiryTime"
        case snapshotId = "snapshotId"
        case startTime = "startTime"
        case state = "status"
        case stateMessage = "statusMessage"
        case storageTier = "storageTier"
        case tags = "tagSet"
        case volumeId = "volumeId"
        case volumeSize = "volumeSize"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataEncryptionKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataEncryptionKeyId)
        dataEncryptionKeyId = dataEncryptionKeyIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let progressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .progress)
        progress = progressDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let stateDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.SnapshotState.self, forKey: .state)
        state = stateDecoded
        let stateMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMessage)
        stateMessage = stateMessageDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let volumeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSize)
        volumeSize = volumeSizeDecoded
        let ownerAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAlias)
        ownerAlias = ownerAliasDecoded
        let outpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outpostArn)
        outpostArn = outpostArnDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let storageTierDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.StorageTier.self, forKey: .storageTier)
        storageTier = storageTierDecoded
        let restoreExpiryTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .restoreExpiryTime)
        var restoreExpiryTimeBuffer:ClientRuntime.Date? = nil
        if let restoreExpiryTimeDecoded = restoreExpiryTimeDecoded {
            restoreExpiryTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(restoreExpiryTimeDecoded, format: .dateTime)
        }
        restoreExpiryTime = restoreExpiryTimeBuffer
    }
}
