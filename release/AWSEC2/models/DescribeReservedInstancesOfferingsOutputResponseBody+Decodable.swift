// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReservedInstancesOfferingsOutputResponseBody: Swift.Equatable {
    let reservedInstancesOfferings: [EC2ClientTypes.ReservedInstancesOffering]?
    let nextToken: Swift.String?
}

extension DescribeReservedInstancesOfferingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case reservedInstancesOfferings = "reservedInstancesOfferingsSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.reservedInstancesOfferings) {
            struct KeyVal0{struct item{}}
            let reservedInstancesOfferingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .reservedInstancesOfferings)
            if let reservedInstancesOfferingsWrappedContainer = reservedInstancesOfferingsWrappedContainer {
                let reservedInstancesOfferingsContainer = try reservedInstancesOfferingsWrappedContainer.decodeIfPresent([EC2ClientTypes.ReservedInstancesOffering].self, forKey: .member)
                var reservedInstancesOfferingsBuffer:[EC2ClientTypes.ReservedInstancesOffering]? = nil
                if let reservedInstancesOfferingsContainer = reservedInstancesOfferingsContainer {
                    reservedInstancesOfferingsBuffer = [EC2ClientTypes.ReservedInstancesOffering]()
                    for structureContainer0 in reservedInstancesOfferingsContainer {
                        reservedInstancesOfferingsBuffer?.append(structureContainer0)
                    }
                }
                reservedInstancesOfferings = reservedInstancesOfferingsBuffer
            } else {
                reservedInstancesOfferings = []
            }
        } else {
            reservedInstancesOfferings = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
