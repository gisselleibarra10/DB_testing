// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AttachClassicLinkVpcInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let groups: [Swift.String]?
    let instanceId: Swift.String?
    let vpcId: Swift.String?
}

extension AttachClassicLinkVpcInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "dryRun"
        case groups = "SecurityGroupId"
        case instanceId = "instanceId"
        case vpcId = "vpcId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.groups) {
            struct KeyVal0{struct groupId{}}
            let groupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.groupId>.CodingKeys.self, forKey: .groups)
            if let groupsWrappedContainer = groupsWrappedContainer {
                let groupsContainer = try groupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var groupsBuffer:[Swift.String]? = nil
                if let groupsContainer = groupsContainer {
                    groupsBuffer = [Swift.String]()
                    for stringContainer0 in groupsContainer {
                        groupsBuffer?.append(stringContainer0)
                    }
                }
                groups = groupsBuffer
            } else {
                groups = []
            }
        } else {
            groups = nil
        }
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
    }
}
