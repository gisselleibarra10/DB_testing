// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateFlowLogsInput: Swift.Equatable {
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see [How to ensure idempotency](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
    public var clientToken: Swift.String?
    /// The ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
    public var deliverCrossAccountRole: Swift.String?
    /// The ARN of the IAM role that allows Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account. This parameter is required if the destination type is cloud-watch-logs and unsupported otherwise.
    public var deliverLogsPermissionArn: Swift.String?
    /// The destination options.
    public var destinationOptions: Ec2ClientTypes.DestinationOptionsRequest?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// The destination for the flow log data. The meaning of this parameter depends on the destination type.
    ///
    /// * If the destination type is cloud-watch-logs, specify the ARN of a CloudWatch Logs log group. For example: arn:aws:logs:region:account_id:log-group:my_group Alternatively, use the LogGroupName parameter.
    ///
    /// * If the destination type is s3, specify the ARN of an S3 bucket. For example: arn:aws:s3:::my_bucket/my_subfolder/ The subfolder is optional. Note that you can't use AWSLogs as a subfolder name.
    ///
    /// * If the destination type is kinesis-data-firehose, specify the ARN of a Kinesis Data Firehose delivery stream. For example: arn:aws:firehose:region:account_id:deliverystream:my_stream
    public var logDestination: Swift.String?
    /// The type of destination for the flow log data. Default: cloud-watch-logs
    public var logDestinationType: Ec2ClientTypes.LogDestinationType?
    /// The fields to include in the flow log record. List the fields in the order in which they should appear. For more information about the available fields, see [Flow log records](https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records). If you omit this parameter, the flow log is created using the default format. If you specify this parameter, you must include at least one field. Specify the fields using the ${field-id} format, separated by spaces. For the CLI, surround this parameter value with single quotes on Linux or double quotes on Windows.
    public var logFormat: Swift.String?
    /// The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs. This parameter is valid only if the destination type is cloud-watch-logs.
    public var logGroupName: Swift.String?
    /// The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can specify 60 seconds (1 minute) or 600 seconds (10 minutes). When a network interface is attached to a [Nitro-based instance](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances), the aggregation interval is always 60 seconds or less, regardless of the value that you specify. Default: 600
    public var maxAggregationInterval: Swift.Int?
    /// The IDs of the resources to monitor. For example, if the resource type is VPC, specify the IDs of the VPCs. Constraints: Maximum of 1000 resources
    /// This member is required.
    public var resourceIds: [Swift.String]?
    /// The type of resource to monitor.
    /// This member is required.
    public var resourceType: Ec2ClientTypes.FlowLogsResourceType?
    /// The tags to apply to the flow logs.
    public var tagSpecifications: [Ec2ClientTypes.TagSpecification]?
    /// The type of traffic to monitor (accepted traffic, rejected traffic, or all traffic).
    public var trafficType: Ec2ClientTypes.TrafficType?

    public init (
        clientToken: Swift.String? = nil,
        deliverCrossAccountRole: Swift.String? = nil,
        deliverLogsPermissionArn: Swift.String? = nil,
        destinationOptions: Ec2ClientTypes.DestinationOptionsRequest? = nil,
        dryRun: Swift.Bool? = nil,
        logDestination: Swift.String? = nil,
        logDestinationType: Ec2ClientTypes.LogDestinationType? = nil,
        logFormat: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        maxAggregationInterval: Swift.Int? = nil,
        resourceIds: [Swift.String]? = nil,
        resourceType: Ec2ClientTypes.FlowLogsResourceType? = nil,
        tagSpecifications: [Ec2ClientTypes.TagSpecification]? = nil,
        trafficType: Ec2ClientTypes.TrafficType? = nil
    )
    {
        self.clientToken = clientToken
        self.deliverCrossAccountRole = deliverCrossAccountRole
        self.deliverLogsPermissionArn = deliverLogsPermissionArn
        self.destinationOptions = destinationOptions
        self.dryRun = dryRun
        self.logDestination = logDestination
        self.logDestinationType = logDestinationType
        self.logFormat = logFormat
        self.logGroupName = logGroupName
        self.maxAggregationInterval = maxAggregationInterval
        self.resourceIds = resourceIds
        self.resourceType = resourceType
        self.tagSpecifications = tagSpecifications
        self.trafficType = trafficType
    }
}
