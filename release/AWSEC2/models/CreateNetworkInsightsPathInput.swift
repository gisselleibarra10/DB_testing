// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateNetworkInsightsPathInput: Swift.Equatable {
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see [How to ensure idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    /// This member is required.
    public var clientToken: Swift.String?
    /// The Amazon Web Services resource that is the destination of the path.
    /// This member is required.
    public var destination: Swift.String?
    /// The IP address of the Amazon Web Services resource that is the destination of the path.
    public var destinationIp: Swift.String?
    /// The destination port.
    public var destinationPort: Swift.Int?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// The protocol.
    /// This member is required.
    public var `protocol`: Ec2ClientTypes.ModelProtocol?
    /// The Amazon Web Services resource that is the source of the path.
    /// This member is required.
    public var source: Swift.String?
    /// The IP address of the Amazon Web Services resource that is the source of the path.
    public var sourceIp: Swift.String?
    /// The tags to add to the path.
    public var tagSpecifications: [Ec2ClientTypes.TagSpecification]?

    public init (
        clientToken: Swift.String? = nil,
        destination: Swift.String? = nil,
        destinationIp: Swift.String? = nil,
        destinationPort: Swift.Int? = nil,
        dryRun: Swift.Bool? = nil,
        `protocol`: Ec2ClientTypes.ModelProtocol? = nil,
        source: Swift.String? = nil,
        sourceIp: Swift.String? = nil,
        tagSpecifications: [Ec2ClientTypes.TagSpecification]? = nil
    )
    {
        self.clientToken = clientToken
        self.destination = destination
        self.destinationIp = destinationIp
        self.destinationPort = destinationPort
        self.dryRun = dryRun
        self.`protocol` = `protocol`
        self.source = source
        self.sourceIp = sourceIp
        self.tagSpecifications = tagSpecifications
    }
}
