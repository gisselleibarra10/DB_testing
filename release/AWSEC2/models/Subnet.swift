// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// Describes a subnet.
    public struct Subnet: Swift.Equatable {
        /// Indicates whether a network interface created in this subnet (including a network interface created by [RunInstances]) receives an IPv6 address.
        public var assignIpv6AddressOnCreation: Swift.Bool?
        /// The Availability Zone of the subnet.
        public var availabilityZone: Swift.String?
        /// The AZ ID of the subnet.
        public var availabilityZoneId: Swift.String?
        /// The number of unused private IPv4 addresses in the subnet. The IPv4 addresses for any stopped instances are considered unavailable.
        public var availableIpAddressCount: Swift.Int?
        /// The IPv4 CIDR block assigned to the subnet.
        public var cidrBlock: Swift.String?
        /// The customer-owned IPv4 address pool associated with the subnet.
        public var customerOwnedIpv4Pool: Swift.String?
        /// Indicates whether this is the default subnet for the Availability Zone.
        public var defaultForAz: Swift.Bool?
        /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations.
        public var enableDns64: Swift.Bool?
        /// Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1).
        public var enableLniAtDeviceIndex: Swift.Int?
        /// Information about the IPv6 CIDR blocks associated with the subnet.
        public var ipv6CidrBlockAssociationSet: [Ec2ClientTypes.SubnetIpv6CidrBlockAssociation]?
        /// Indicates whether this is an IPv6 only subnet.
        public var ipv6Native: Swift.Bool?
        /// Indicates whether a network interface created in this subnet (including a network interface created by [RunInstances]) receives a customer-owned IPv4 address.
        public var mapCustomerOwnedIpOnLaunch: Swift.Bool?
        /// Indicates whether instances launched in this subnet receive a public IPv4 address.
        public var mapPublicIpOnLaunch: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public var outpostArn: Swift.String?
        /// The ID of the Amazon Web Services account that owns the subnet.
        public var ownerId: Swift.String?
        /// The type of hostnames to assign to instances in the subnet at launch. An instance hostname is based on the IPv4 address or ID of the instance.
        public var privateDnsNameOptionsOnLaunch: Ec2ClientTypes.PrivateDnsNameOptionsOnLaunch?
        /// The current state of the subnet.
        public var state: Ec2ClientTypes.SubnetState?
        /// The Amazon Resource Name (ARN) of the subnet.
        public var subnetArn: Swift.String?
        /// The ID of the subnet.
        public var subnetId: Swift.String?
        /// Any tags assigned to the subnet.
        public var tags: [Ec2ClientTypes.Tag]?
        /// The ID of the VPC the subnet is in.
        public var vpcId: Swift.String?

        public init (
            assignIpv6AddressOnCreation: Swift.Bool? = nil,
            availabilityZone: Swift.String? = nil,
            availabilityZoneId: Swift.String? = nil,
            availableIpAddressCount: Swift.Int? = nil,
            cidrBlock: Swift.String? = nil,
            customerOwnedIpv4Pool: Swift.String? = nil,
            defaultForAz: Swift.Bool? = nil,
            enableDns64: Swift.Bool? = nil,
            enableLniAtDeviceIndex: Swift.Int? = nil,
            ipv6CidrBlockAssociationSet: [Ec2ClientTypes.SubnetIpv6CidrBlockAssociation]? = nil,
            ipv6Native: Swift.Bool? = nil,
            mapCustomerOwnedIpOnLaunch: Swift.Bool? = nil,
            mapPublicIpOnLaunch: Swift.Bool? = nil,
            outpostArn: Swift.String? = nil,
            ownerId: Swift.String? = nil,
            privateDnsNameOptionsOnLaunch: Ec2ClientTypes.PrivateDnsNameOptionsOnLaunch? = nil,
            state: Ec2ClientTypes.SubnetState? = nil,
            subnetArn: Swift.String? = nil,
            subnetId: Swift.String? = nil,
            tags: [Ec2ClientTypes.Tag]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.availableIpAddressCount = availableIpAddressCount
            self.cidrBlock = cidrBlock
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.defaultForAz = defaultForAz
            self.enableDns64 = enableDns64
            self.enableLniAtDeviceIndex = enableLniAtDeviceIndex
            self.ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet
            self.ipv6Native = ipv6Native
            self.mapCustomerOwnedIpOnLaunch = mapCustomerOwnedIpOnLaunch
            self.mapPublicIpOnLaunch = mapPublicIpOnLaunch
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.privateDnsNameOptionsOnLaunch = privateDnsNameOptionsOnLaunch
            self.state = state
            self.subnetArn = subnetArn
            self.subnetId = subnetId
            self.tags = tags
            self.vpcId = vpcId
        }
    }

}
