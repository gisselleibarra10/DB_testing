// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInstanceEventWindowsOutputResponseBody: Swift.Equatable {
    let instanceEventWindows: [EC2ClientTypes.InstanceEventWindow]?
    let nextToken: Swift.String?
}

extension DescribeInstanceEventWindowsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceEventWindows = "instanceEventWindowSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.instanceEventWindows) {
            struct KeyVal0{struct item{}}
            let instanceEventWindowsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .instanceEventWindows)
            if let instanceEventWindowsWrappedContainer = instanceEventWindowsWrappedContainer {
                let instanceEventWindowsContainer = try instanceEventWindowsWrappedContainer.decodeIfPresent([EC2ClientTypes.InstanceEventWindow].self, forKey: .member)
                var instanceEventWindowsBuffer:[EC2ClientTypes.InstanceEventWindow]? = nil
                if let instanceEventWindowsContainer = instanceEventWindowsContainer {
                    instanceEventWindowsBuffer = [EC2ClientTypes.InstanceEventWindow]()
                    for structureContainer0 in instanceEventWindowsContainer {
                        instanceEventWindowsBuffer?.append(structureContainer0)
                    }
                }
                instanceEventWindows = instanceEventWindowsBuffer
            } else {
                instanceEventWindows = []
            }
        } else {
            instanceEventWindows = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
