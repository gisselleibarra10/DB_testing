// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.AnalysisPacketHeader: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationAddresses = "destinationAddressSet"
        case destinationPortRanges = "destinationPortRangeSet"
        case `protocol` = "protocol"
        case sourceAddresses = "sourceAddressSet"
        case sourcePortRanges = "sourcePortRangeSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let destinationAddresses = destinationAddresses {
            if !destinationAddresses.isEmpty {
                for (index0, ipaddress0) in destinationAddresses.enumerated() {
                    var destinationAddressesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DestinationAddressSet.\(index0.advanced(by: 1))"))
                    try destinationAddressesContainer0.encode(ipaddress0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let destinationPortRanges = destinationPortRanges {
            if !destinationPortRanges.isEmpty {
                for (index0, portrange0) in destinationPortRanges.enumerated() {
                    var destinationPortRangesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DestinationPortRangeSet.\(index0.advanced(by: 1))"))
                    try destinationPortRangesContainer0.encode(portrange0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: ClientRuntime.Key("Protocol"))
        }
        if let sourceAddresses = sourceAddresses {
            if !sourceAddresses.isEmpty {
                for (index0, ipaddress0) in sourceAddresses.enumerated() {
                    var sourceAddressesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceAddressSet.\(index0.advanced(by: 1))"))
                    try sourceAddressesContainer0.encode(ipaddress0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let sourcePortRanges = sourcePortRanges {
            if !sourcePortRanges.isEmpty {
                for (index0, portrange0) in sourcePortRanges.enumerated() {
                    var sourcePortRangesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourcePortRangeSet.\(index0.advanced(by: 1))"))
                    try sourcePortRangesContainer0.encode(portrange0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.destinationAddresses) {
            struct KeyVal0{struct item{}}
            let destinationAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .destinationAddresses)
            if let destinationAddressesWrappedContainer = destinationAddressesWrappedContainer {
                let destinationAddressesContainer = try destinationAddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var destinationAddressesBuffer:[Swift.String]? = nil
                if let destinationAddressesContainer = destinationAddressesContainer {
                    destinationAddressesBuffer = [Swift.String]()
                    for stringContainer0 in destinationAddressesContainer {
                        destinationAddressesBuffer?.append(stringContainer0)
                    }
                }
                destinationAddresses = destinationAddressesBuffer
            } else {
                destinationAddresses = []
            }
        } else {
            destinationAddresses = nil
        }
        if containerValues.contains(.destinationPortRanges) {
            struct KeyVal0{struct item{}}
            let destinationPortRangesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .destinationPortRanges)
            if let destinationPortRangesWrappedContainer = destinationPortRangesWrappedContainer {
                let destinationPortRangesContainer = try destinationPortRangesWrappedContainer.decodeIfPresent([Ec2ClientTypes.PortRange].self, forKey: .member)
                var destinationPortRangesBuffer:[Ec2ClientTypes.PortRange]? = nil
                if let destinationPortRangesContainer = destinationPortRangesContainer {
                    destinationPortRangesBuffer = [Ec2ClientTypes.PortRange]()
                    for structureContainer0 in destinationPortRangesContainer {
                        destinationPortRangesBuffer?.append(structureContainer0)
                    }
                }
                destinationPortRanges = destinationPortRangesBuffer
            } else {
                destinationPortRanges = []
            }
        } else {
            destinationPortRanges = nil
        }
        let protocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protocol)
        `protocol` = protocolDecoded
        if containerValues.contains(.sourceAddresses) {
            struct KeyVal0{struct item{}}
            let sourceAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .sourceAddresses)
            if let sourceAddressesWrappedContainer = sourceAddressesWrappedContainer {
                let sourceAddressesContainer = try sourceAddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var sourceAddressesBuffer:[Swift.String]? = nil
                if let sourceAddressesContainer = sourceAddressesContainer {
                    sourceAddressesBuffer = [Swift.String]()
                    for stringContainer0 in sourceAddressesContainer {
                        sourceAddressesBuffer?.append(stringContainer0)
                    }
                }
                sourceAddresses = sourceAddressesBuffer
            } else {
                sourceAddresses = []
            }
        } else {
            sourceAddresses = nil
        }
        if containerValues.contains(.sourcePortRanges) {
            struct KeyVal0{struct item{}}
            let sourcePortRangesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .sourcePortRanges)
            if let sourcePortRangesWrappedContainer = sourcePortRangesWrappedContainer {
                let sourcePortRangesContainer = try sourcePortRangesWrappedContainer.decodeIfPresent([Ec2ClientTypes.PortRange].self, forKey: .member)
                var sourcePortRangesBuffer:[Ec2ClientTypes.PortRange]? = nil
                if let sourcePortRangesContainer = sourcePortRangesContainer {
                    sourcePortRangesBuffer = [Ec2ClientTypes.PortRange]()
                    for structureContainer0 in sourcePortRangesContainer {
                        sourcePortRangesBuffer?.append(structureContainer0)
                    }
                }
                sourcePortRanges = sourcePortRangesBuffer
            } else {
                sourcePortRanges = []
            }
        } else {
            sourcePortRanges = nil
        }
    }
}
