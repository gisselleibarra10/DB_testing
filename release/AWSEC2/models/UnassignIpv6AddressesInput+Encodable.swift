// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UnassignIpv6AddressesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ipv6Addresses = ipv6Addresses {
            if !ipv6Addresses.isEmpty {
                for (index0, string0) in ipv6Addresses.enumerated() {
                    var ipv6AddressesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Ipv6Addresses.\(index0.advanced(by: 1))"))
                    try ipv6AddressesContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var ipv6AddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Ipv6Addresses"))
                try ipv6AddressesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ipv6Prefixes = ipv6Prefixes {
            if !ipv6Prefixes.isEmpty {
                for (index0, string0) in ipv6Prefixes.enumerated() {
                    var ipv6PrefixesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Ipv6Prefix.\(index0.advanced(by: 1))"))
                    try ipv6PrefixesContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var ipv6PrefixesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Ipv6Prefix"))
                try ipv6PrefixesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let networkInterfaceId = networkInterfaceId {
            try container.encode(networkInterfaceId, forKey: ClientRuntime.Key("NetworkInterfaceId"))
        }
        try container.encode("UnassignIpv6Addresses", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
