// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSnapshotsInputBody: Swift.Equatable {
    let filters: [Ec2ClientTypes.Filter]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let ownerIds: [Swift.String]?
    let restorableByUserIds: [Swift.String]?
    let snapshotIds: [Swift.String]?
    let dryRun: Swift.Bool?
}

extension DescribeSnapshotsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "dryRun"
        case filters = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case ownerIds = "Owner"
        case restorableByUserIds = "RestorableBy"
        case snapshotIds = "SnapshotId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.filters) {
            struct KeyVal0{struct Filter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Filter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([Ec2ClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[Ec2ClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [Ec2ClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.ownerIds) {
            struct KeyVal0{struct Owner{}}
            let ownerIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Owner>.CodingKeys.self, forKey: .ownerIds)
            if let ownerIdsWrappedContainer = ownerIdsWrappedContainer {
                let ownerIdsContainer = try ownerIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var ownerIdsBuffer:[Swift.String]? = nil
                if let ownerIdsContainer = ownerIdsContainer {
                    ownerIdsBuffer = [Swift.String]()
                    for stringContainer0 in ownerIdsContainer {
                        ownerIdsBuffer?.append(stringContainer0)
                    }
                }
                ownerIds = ownerIdsBuffer
            } else {
                ownerIds = []
            }
        } else {
            ownerIds = nil
        }
        if containerValues.contains(.restorableByUserIds) {
            struct KeyVal0{struct member{}}
            let restorableByUserIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .restorableByUserIds)
            if let restorableByUserIdsWrappedContainer = restorableByUserIdsWrappedContainer {
                let restorableByUserIdsContainer = try restorableByUserIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var restorableByUserIdsBuffer:[Swift.String]? = nil
                if let restorableByUserIdsContainer = restorableByUserIdsContainer {
                    restorableByUserIdsBuffer = [Swift.String]()
                    for stringContainer0 in restorableByUserIdsContainer {
                        restorableByUserIdsBuffer?.append(stringContainer0)
                    }
                }
                restorableByUserIds = restorableByUserIdsBuffer
            } else {
                restorableByUserIds = []
            }
        } else {
            restorableByUserIds = nil
        }
        if containerValues.contains(.snapshotIds) {
            struct KeyVal0{struct SnapshotId{}}
            let snapshotIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SnapshotId>.CodingKeys.self, forKey: .snapshotIds)
            if let snapshotIdsWrappedContainer = snapshotIdsWrappedContainer {
                let snapshotIdsContainer = try snapshotIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var snapshotIdsBuffer:[Swift.String]? = nil
                if let snapshotIdsContainer = snapshotIdsContainer {
                    snapshotIdsBuffer = [Swift.String]()
                    for stringContainer0 in snapshotIdsContainer {
                        snapshotIdsBuffer?.append(stringContainer0)
                    }
                }
                snapshotIds = snapshotIdsBuffer
            } else {
                snapshotIds = []
            }
        } else {
            snapshotIds = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
