// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSpotPriceHistoryOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let spotPriceHistory: [Ec2ClientTypes.SpotPrice]?
}

extension DescribeSpotPriceHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case spotPriceHistory = "spotPriceHistorySet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.spotPriceHistory) {
            struct KeyVal0{struct item{}}
            let spotPriceHistoryWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .spotPriceHistory)
            if let spotPriceHistoryWrappedContainer = spotPriceHistoryWrappedContainer {
                let spotPriceHistoryContainer = try spotPriceHistoryWrappedContainer.decodeIfPresent([Ec2ClientTypes.SpotPrice].self, forKey: .member)
                var spotPriceHistoryBuffer:[Ec2ClientTypes.SpotPrice]? = nil
                if let spotPriceHistoryContainer = spotPriceHistoryContainer {
                    spotPriceHistoryBuffer = [Ec2ClientTypes.SpotPrice]()
                    for structureContainer0 in spotPriceHistoryContainer {
                        spotPriceHistoryBuffer?.append(structureContainer0)
                    }
                }
                spotPriceHistory = spotPriceHistoryBuffer
            } else {
                spotPriceHistory = []
            }
        } else {
            spotPriceHistory = nil
        }
    }
}
