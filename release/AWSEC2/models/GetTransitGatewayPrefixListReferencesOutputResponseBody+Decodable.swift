// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetTransitGatewayPrefixListReferencesOutputResponseBody: Swift.Equatable {
    let transitGatewayPrefixListReferences: [Ec2ClientTypes.TransitGatewayPrefixListReference]?
    let nextToken: Swift.String?
}

extension GetTransitGatewayPrefixListReferencesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case transitGatewayPrefixListReferences = "transitGatewayPrefixListReferenceSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.transitGatewayPrefixListReferences) {
            struct KeyVal0{struct item{}}
            let transitGatewayPrefixListReferencesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .transitGatewayPrefixListReferences)
            if let transitGatewayPrefixListReferencesWrappedContainer = transitGatewayPrefixListReferencesWrappedContainer {
                let transitGatewayPrefixListReferencesContainer = try transitGatewayPrefixListReferencesWrappedContainer.decodeIfPresent([Ec2ClientTypes.TransitGatewayPrefixListReference].self, forKey: .member)
                var transitGatewayPrefixListReferencesBuffer:[Ec2ClientTypes.TransitGatewayPrefixListReference]? = nil
                if let transitGatewayPrefixListReferencesContainer = transitGatewayPrefixListReferencesContainer {
                    transitGatewayPrefixListReferencesBuffer = [Ec2ClientTypes.TransitGatewayPrefixListReference]()
                    for structureContainer0 in transitGatewayPrefixListReferencesContainer {
                        transitGatewayPrefixListReferencesBuffer?.append(structureContainer0)
                    }
                }
                transitGatewayPrefixListReferences = transitGatewayPrefixListReferencesBuffer
            } else {
                transitGatewayPrefixListReferences = []
            }
        } else {
            transitGatewayPrefixListReferences = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
