// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyVpcEndpointServicePermissionsInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let serviceId: Swift.String?
    let addAllowedPrincipals: [Swift.String]?
    let removeAllowedPrincipals: [Swift.String]?
}

extension ModifyVpcEndpointServicePermissionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addAllowedPrincipals = "AddAllowedPrincipals"
        case dryRun = "DryRun"
        case removeAllowedPrincipals = "RemoveAllowedPrincipals"
        case serviceId = "ServiceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let serviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceId)
        serviceId = serviceIdDecoded
        if containerValues.contains(.addAllowedPrincipals) {
            struct KeyVal0{struct item{}}
            let addAllowedPrincipalsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .addAllowedPrincipals)
            if let addAllowedPrincipalsWrappedContainer = addAllowedPrincipalsWrappedContainer {
                let addAllowedPrincipalsContainer = try addAllowedPrincipalsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var addAllowedPrincipalsBuffer:[Swift.String]? = nil
                if let addAllowedPrincipalsContainer = addAllowedPrincipalsContainer {
                    addAllowedPrincipalsBuffer = [Swift.String]()
                    for stringContainer0 in addAllowedPrincipalsContainer {
                        addAllowedPrincipalsBuffer?.append(stringContainer0)
                    }
                }
                addAllowedPrincipals = addAllowedPrincipalsBuffer
            } else {
                addAllowedPrincipals = []
            }
        } else {
            addAllowedPrincipals = nil
        }
        if containerValues.contains(.removeAllowedPrincipals) {
            struct KeyVal0{struct item{}}
            let removeAllowedPrincipalsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .removeAllowedPrincipals)
            if let removeAllowedPrincipalsWrappedContainer = removeAllowedPrincipalsWrappedContainer {
                let removeAllowedPrincipalsContainer = try removeAllowedPrincipalsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var removeAllowedPrincipalsBuffer:[Swift.String]? = nil
                if let removeAllowedPrincipalsContainer = removeAllowedPrincipalsContainer {
                    removeAllowedPrincipalsBuffer = [Swift.String]()
                    for stringContainer0 in removeAllowedPrincipalsContainer {
                        removeAllowedPrincipalsBuffer?.append(stringContainer0)
                    }
                }
                removeAllowedPrincipals = removeAllowedPrincipalsBuffer
            } else {
                removeAllowedPrincipals = []
            }
        } else {
            removeAllowedPrincipals = nil
        }
    }
}
