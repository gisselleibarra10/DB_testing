// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTransitGatewayConnectPeerInputBody: Swift.Equatable {
    let transitGatewayAttachmentId: Swift.String?
    let transitGatewayAddress: Swift.String?
    let peerAddress: Swift.String?
    let bgpOptions: Ec2ClientTypes.TransitGatewayConnectRequestBgpOptions?
    let insideCidrBlocks: [Swift.String]?
    let tagSpecifications: [Ec2ClientTypes.TagSpecification]?
    let dryRun: Swift.Bool?
}

extension CreateTransitGatewayConnectPeerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bgpOptions = "BgpOptions"
        case dryRun = "DryRun"
        case insideCidrBlocks = "InsideCidrBlocks"
        case peerAddress = "PeerAddress"
        case tagSpecifications = "TagSpecification"
        case transitGatewayAddress = "TransitGatewayAddress"
        case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transitGatewayAttachmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayAttachmentId)
        transitGatewayAttachmentId = transitGatewayAttachmentIdDecoded
        let transitGatewayAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayAddress)
        transitGatewayAddress = transitGatewayAddressDecoded
        let peerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerAddress)
        peerAddress = peerAddressDecoded
        let bgpOptionsDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.TransitGatewayConnectRequestBgpOptions.self, forKey: .bgpOptions)
        bgpOptions = bgpOptionsDecoded
        if containerValues.contains(.insideCidrBlocks) {
            struct KeyVal0{struct item{}}
            let insideCidrBlocksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .insideCidrBlocks)
            if let insideCidrBlocksWrappedContainer = insideCidrBlocksWrappedContainer {
                let insideCidrBlocksContainer = try insideCidrBlocksWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var insideCidrBlocksBuffer:[Swift.String]? = nil
                if let insideCidrBlocksContainer = insideCidrBlocksContainer {
                    insideCidrBlocksBuffer = [Swift.String]()
                    for stringContainer0 in insideCidrBlocksContainer {
                        insideCidrBlocksBuffer?.append(stringContainer0)
                    }
                }
                insideCidrBlocks = insideCidrBlocksBuffer
            } else {
                insideCidrBlocks = []
            }
        } else {
            insideCidrBlocks = nil
        }
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[Ec2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [Ec2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
