// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateCustomerGatewayInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bgpAsn = bgpAsn {
            try container.encode(bgpAsn, forKey: ClientRuntime.Key("BgpAsn"))
        }
        if let certificateArn = certificateArn {
            try container.encode(certificateArn, forKey: ClientRuntime.Key("CertificateArn"))
        }
        if let deviceName = deviceName {
            try container.encode(deviceName, forKey: ClientRuntime.Key("DeviceName"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let ipAddress = ipAddress {
            try container.encode(ipAddress, forKey: ClientRuntime.Key("IpAddress"))
        }
        if let publicIp = publicIp {
            try container.encode(publicIp, forKey: ClientRuntime.Key("PublicIp"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagSpecificationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification"))
                try tagSpecificationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        try container.encode("CreateCustomerGateway", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
