// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DescribeReservedInstancesOfferingsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                for (index0, filter0) in filters.enumerated() {
                    var filtersContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                    try filtersContainer0.encode(filter0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filter"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let includeMarketplace = includeMarketplace {
            try container.encode(includeMarketplace, forKey: ClientRuntime.Key("IncludeMarketplace"))
        }
        if let instanceTenancy = instanceTenancy {
            try container.encode(instanceTenancy, forKey: ClientRuntime.Key("InstanceTenancy"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let maxDuration = maxDuration {
            try container.encode(maxDuration, forKey: ClientRuntime.Key("MaxDuration"))
        }
        if let maxInstanceCount = maxInstanceCount {
            try container.encode(maxInstanceCount, forKey: ClientRuntime.Key("MaxInstanceCount"))
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let minDuration = minDuration {
            try container.encode(minDuration, forKey: ClientRuntime.Key("MinDuration"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let offeringClass = offeringClass {
            try container.encode(offeringClass, forKey: ClientRuntime.Key("OfferingClass"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: ClientRuntime.Key("OfferingType"))
        }
        if let productDescription = productDescription {
            try container.encode(productDescription, forKey: ClientRuntime.Key("ProductDescription"))
        }
        if let reservedInstancesOfferingIds = reservedInstancesOfferingIds {
            if !reservedInstancesOfferingIds.isEmpty {
                for (index0, reservedinstancesofferingid0) in reservedInstancesOfferingIds.enumerated() {
                    var reservedInstancesOfferingIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReservedInstancesOfferingId.\(index0.advanced(by: 1))"))
                    try reservedInstancesOfferingIdsContainer0.encode(reservedinstancesofferingid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var reservedInstancesOfferingIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReservedInstancesOfferingId"))
                try reservedInstancesOfferingIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeReservedInstancesOfferings", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
