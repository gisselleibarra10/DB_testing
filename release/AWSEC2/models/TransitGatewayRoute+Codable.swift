// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.TransitGatewayRoute: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationCidrBlock = "destinationCidrBlock"
        case prefixListId = "prefixListId"
        case state = "state"
        case transitGatewayAttachments = "transitGatewayAttachments"
        case transitGatewayRouteTableAnnouncementId = "transitGatewayRouteTableAnnouncementId"
        case type = "type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let destinationCidrBlock = destinationCidrBlock {
            try container.encode(destinationCidrBlock, forKey: ClientRuntime.Key("DestinationCidrBlock"))
        }
        if let prefixListId = prefixListId {
            try container.encode(prefixListId, forKey: ClientRuntime.Key("PrefixListId"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let transitGatewayAttachments = transitGatewayAttachments {
            if !transitGatewayAttachments.isEmpty {
                for (index0, transitgatewayrouteattachment0) in transitGatewayAttachments.enumerated() {
                    var transitGatewayAttachmentsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TransitGatewayAttachments.\(index0.advanced(by: 1))"))
                    try transitGatewayAttachmentsContainer0.encode(transitgatewayrouteattachment0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var transitGatewayAttachmentsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TransitGatewayAttachments"))
                try transitGatewayAttachmentsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let transitGatewayRouteTableAnnouncementId = transitGatewayRouteTableAnnouncementId {
            try container.encode(transitGatewayRouteTableAnnouncementId, forKey: ClientRuntime.Key("TransitGatewayRouteTableAnnouncementId"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationCidrBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationCidrBlock)
        destinationCidrBlock = destinationCidrBlockDecoded
        let prefixListIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefixListId)
        prefixListId = prefixListIdDecoded
        let transitGatewayRouteTableAnnouncementIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayRouteTableAnnouncementId)
        transitGatewayRouteTableAnnouncementId = transitGatewayRouteTableAnnouncementIdDecoded
        if containerValues.contains(.transitGatewayAttachments) {
            struct KeyVal0{struct item{}}
            let transitGatewayAttachmentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .transitGatewayAttachments)
            if let transitGatewayAttachmentsWrappedContainer = transitGatewayAttachmentsWrappedContainer {
                let transitGatewayAttachmentsContainer = try transitGatewayAttachmentsWrappedContainer.decodeIfPresent([EC2ClientTypes.TransitGatewayRouteAttachment].self, forKey: .member)
                var transitGatewayAttachmentsBuffer:[EC2ClientTypes.TransitGatewayRouteAttachment]? = nil
                if let transitGatewayAttachmentsContainer = transitGatewayAttachmentsContainer {
                    transitGatewayAttachmentsBuffer = [EC2ClientTypes.TransitGatewayRouteAttachment]()
                    for structureContainer0 in transitGatewayAttachmentsContainer {
                        transitGatewayAttachmentsBuffer?.append(structureContainer0)
                    }
                }
                transitGatewayAttachments = transitGatewayAttachmentsBuffer
            } else {
                transitGatewayAttachments = []
            }
        } else {
            transitGatewayAttachments = nil
        }
        let typeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.TransitGatewayRouteType.self, forKey: .type)
        type = typeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.TransitGatewayRouteState.self, forKey: .state)
        state = stateDecoded
    }
}
