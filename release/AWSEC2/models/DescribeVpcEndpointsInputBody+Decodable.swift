// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVpcEndpointsInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let vpcEndpointIds: [Swift.String]?
    let filters: [EC2ClientTypes.Filter]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeVpcEndpointsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case filters = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case vpcEndpointIds = "VpcEndpointId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.vpcEndpointIds) {
            struct KeyVal0{struct item{}}
            let vpcEndpointIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .vpcEndpointIds)
            if let vpcEndpointIdsWrappedContainer = vpcEndpointIdsWrappedContainer {
                let vpcEndpointIdsContainer = try vpcEndpointIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var vpcEndpointIdsBuffer:[Swift.String]? = nil
                if let vpcEndpointIdsContainer = vpcEndpointIdsContainer {
                    vpcEndpointIdsBuffer = [Swift.String]()
                    for stringContainer0 in vpcEndpointIdsContainer {
                        vpcEndpointIdsBuffer?.append(stringContainer0)
                    }
                }
                vpcEndpointIds = vpcEndpointIdsBuffer
            } else {
                vpcEndpointIds = []
            }
        } else {
            vpcEndpointIds = nil
        }
        if containerValues.contains(.filters) {
            struct KeyVal0{struct Filter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Filter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([EC2ClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[EC2ClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [EC2ClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
