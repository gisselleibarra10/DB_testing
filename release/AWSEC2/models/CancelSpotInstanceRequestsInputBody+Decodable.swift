// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CancelSpotInstanceRequestsInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let spotInstanceRequestIds: [Swift.String]?
}

extension CancelSpotInstanceRequestsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "dryRun"
        case spotInstanceRequestIds = "SpotInstanceRequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.spotInstanceRequestIds) {
            struct KeyVal0{struct SpotInstanceRequestId{}}
            let spotInstanceRequestIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SpotInstanceRequestId>.CodingKeys.self, forKey: .spotInstanceRequestIds)
            if let spotInstanceRequestIdsWrappedContainer = spotInstanceRequestIdsWrappedContainer {
                let spotInstanceRequestIdsContainer = try spotInstanceRequestIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var spotInstanceRequestIdsBuffer:[Swift.String]? = nil
                if let spotInstanceRequestIdsContainer = spotInstanceRequestIdsContainer {
                    spotInstanceRequestIdsBuffer = [Swift.String]()
                    for stringContainer0 in spotInstanceRequestIdsContainer {
                        spotInstanceRequestIdsBuffer?.append(stringContainer0)
                    }
                }
                spotInstanceRequestIds = spotInstanceRequestIdsBuffer
            } else {
                spotInstanceRequestIds = []
            }
        } else {
            spotInstanceRequestIds = nil
        }
    }
}
