// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CancelSpotFleetRequestsOutputResponseBody: Swift.Equatable {
    let successfulFleetRequests: [EC2ClientTypes.CancelSpotFleetRequestsSuccessItem]?
    let unsuccessfulFleetRequests: [EC2ClientTypes.CancelSpotFleetRequestsErrorItem]?
}

extension CancelSpotFleetRequestsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case successfulFleetRequests = "successfulFleetRequestSet"
        case unsuccessfulFleetRequests = "unsuccessfulFleetRequestSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.successfulFleetRequests) {
            struct KeyVal0{struct item{}}
            let successfulFleetRequestsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .successfulFleetRequests)
            if let successfulFleetRequestsWrappedContainer = successfulFleetRequestsWrappedContainer {
                let successfulFleetRequestsContainer = try successfulFleetRequestsWrappedContainer.decodeIfPresent([EC2ClientTypes.CancelSpotFleetRequestsSuccessItem].self, forKey: .member)
                var successfulFleetRequestsBuffer:[EC2ClientTypes.CancelSpotFleetRequestsSuccessItem]? = nil
                if let successfulFleetRequestsContainer = successfulFleetRequestsContainer {
                    successfulFleetRequestsBuffer = [EC2ClientTypes.CancelSpotFleetRequestsSuccessItem]()
                    for structureContainer0 in successfulFleetRequestsContainer {
                        successfulFleetRequestsBuffer?.append(structureContainer0)
                    }
                }
                successfulFleetRequests = successfulFleetRequestsBuffer
            } else {
                successfulFleetRequests = []
            }
        } else {
            successfulFleetRequests = nil
        }
        if containerValues.contains(.unsuccessfulFleetRequests) {
            struct KeyVal0{struct item{}}
            let unsuccessfulFleetRequestsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .unsuccessfulFleetRequests)
            if let unsuccessfulFleetRequestsWrappedContainer = unsuccessfulFleetRequestsWrappedContainer {
                let unsuccessfulFleetRequestsContainer = try unsuccessfulFleetRequestsWrappedContainer.decodeIfPresent([EC2ClientTypes.CancelSpotFleetRequestsErrorItem].self, forKey: .member)
                var unsuccessfulFleetRequestsBuffer:[EC2ClientTypes.CancelSpotFleetRequestsErrorItem]? = nil
                if let unsuccessfulFleetRequestsContainer = unsuccessfulFleetRequestsContainer {
                    unsuccessfulFleetRequestsBuffer = [EC2ClientTypes.CancelSpotFleetRequestsErrorItem]()
                    for structureContainer0 in unsuccessfulFleetRequestsContainer {
                        unsuccessfulFleetRequestsBuffer?.append(structureContainer0)
                    }
                }
                unsuccessfulFleetRequests = unsuccessfulFleetRequestsBuffer
            } else {
                unsuccessfulFleetRequests = []
            }
        } else {
            unsuccessfulFleetRequests = nil
        }
    }
}
