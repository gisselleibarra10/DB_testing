// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.Host: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationTime = "allocationTime"
        case allowsMultipleInstanceTypes = "allowsMultipleInstanceTypes"
        case autoPlacement = "autoPlacement"
        case availabilityZone = "availabilityZone"
        case availabilityZoneId = "availabilityZoneId"
        case availableCapacity = "availableCapacity"
        case clientToken = "clientToken"
        case hostId = "hostId"
        case hostProperties = "hostProperties"
        case hostRecovery = "hostRecovery"
        case hostReservationId = "hostReservationId"
        case instances = "instances"
        case memberOfServiceLinkedResourceGroup = "memberOfServiceLinkedResourceGroup"
        case outpostArn = "outpostArn"
        case ownerId = "ownerId"
        case releaseTime = "releaseTime"
        case state = "state"
        case tags = "tagSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocationTime = allocationTime {
            try container.encode(ClientRuntime.TimestampWrapper(allocationTime, format: .dateTime), forKey: ClientRuntime.Key("AllocationTime"))
        }
        if let allowsMultipleInstanceTypes = allowsMultipleInstanceTypes {
            try container.encode(allowsMultipleInstanceTypes, forKey: ClientRuntime.Key("AllowsMultipleInstanceTypes"))
        }
        if let autoPlacement = autoPlacement {
            try container.encode(autoPlacement, forKey: ClientRuntime.Key("AutoPlacement"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let availabilityZoneId = availabilityZoneId {
            try container.encode(availabilityZoneId, forKey: ClientRuntime.Key("AvailabilityZoneId"))
        }
        if let availableCapacity = availableCapacity {
            try container.encode(availableCapacity, forKey: ClientRuntime.Key("AvailableCapacity"))
        }
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: ClientRuntime.Key("ClientToken"))
        }
        if let hostId = hostId {
            try container.encode(hostId, forKey: ClientRuntime.Key("HostId"))
        }
        if let hostProperties = hostProperties {
            try container.encode(hostProperties, forKey: ClientRuntime.Key("HostProperties"))
        }
        if let hostRecovery = hostRecovery {
            try container.encode(hostRecovery, forKey: ClientRuntime.Key("HostRecovery"))
        }
        if let hostReservationId = hostReservationId {
            try container.encode(hostReservationId, forKey: ClientRuntime.Key("HostReservationId"))
        }
        if let instances = instances {
            if !instances.isEmpty {
                for (index0, hostinstance0) in instances.enumerated() {
                    var instancesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Instances.\(index0.advanced(by: 1))"))
                    try instancesContainer0.encode(hostinstance0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let memberOfServiceLinkedResourceGroup = memberOfServiceLinkedResourceGroup {
            try container.encode(memberOfServiceLinkedResourceGroup, forKey: ClientRuntime.Key("MemberOfServiceLinkedResourceGroup"))
        }
        if let outpostArn = outpostArn {
            try container.encode(outpostArn, forKey: ClientRuntime.Key("OutpostArn"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: ClientRuntime.Key("OwnerId"))
        }
        if let releaseTime = releaseTime {
            try container.encode(ClientRuntime.TimestampWrapper(releaseTime, format: .dateTime), forKey: ClientRuntime.Key("ReleaseTime"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoPlacementDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AutoPlacement.self, forKey: .autoPlacement)
        autoPlacement = autoPlacementDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let availableCapacityDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AvailableCapacity.self, forKey: .availableCapacity)
        availableCapacity = availableCapacityDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let hostIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostId)
        hostId = hostIdDecoded
        let hostPropertiesDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.HostProperties.self, forKey: .hostProperties)
        hostProperties = hostPropertiesDecoded
        let hostReservationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostReservationId)
        hostReservationId = hostReservationIdDecoded
        if containerValues.contains(.instances) {
            struct KeyVal0{struct item{}}
            let instancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .instances)
            if let instancesWrappedContainer = instancesWrappedContainer {
                let instancesContainer = try instancesWrappedContainer.decodeIfPresent([Ec2ClientTypes.HostInstance].self, forKey: .member)
                var instancesBuffer:[Ec2ClientTypes.HostInstance]? = nil
                if let instancesContainer = instancesContainer {
                    instancesBuffer = [Ec2ClientTypes.HostInstance]()
                    for structureContainer0 in instancesContainer {
                        instancesBuffer?.append(structureContainer0)
                    }
                }
                instances = instancesBuffer
            } else {
                instances = []
            }
        } else {
            instances = nil
        }
        let stateDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AllocationState.self, forKey: .state)
        state = stateDecoded
        let allocationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allocationTime)
        var allocationTimeBuffer:ClientRuntime.Date? = nil
        if let allocationTimeDecoded = allocationTimeDecoded {
            allocationTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(allocationTimeDecoded, format: .dateTime)
        }
        allocationTime = allocationTimeBuffer
        let releaseTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseTime)
        var releaseTimeBuffer:ClientRuntime.Date? = nil
        if let releaseTimeDecoded = releaseTimeDecoded {
            releaseTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(releaseTimeDecoded, format: .dateTime)
        }
        releaseTime = releaseTimeBuffer
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let hostRecoveryDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.HostRecovery.self, forKey: .hostRecovery)
        hostRecovery = hostRecoveryDecoded
        let allowsMultipleInstanceTypesDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AllowsMultipleInstanceTypes.self, forKey: .allowsMultipleInstanceTypes)
        allowsMultipleInstanceTypes = allowsMultipleInstanceTypesDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let availabilityZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZoneId)
        availabilityZoneId = availabilityZoneIdDecoded
        let memberOfServiceLinkedResourceGroupDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .memberOfServiceLinkedResourceGroup)
        memberOfServiceLinkedResourceGroup = memberOfServiceLinkedResourceGroupDecoded
        let outpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outpostArn)
        outpostArn = outpostArnDecoded
    }
}
