// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeCapacityReservationFleetsOutputResponseBody: Swift.Equatable {
    let capacityReservationFleets: [EC2ClientTypes.CapacityReservationFleet]?
    let nextToken: Swift.String?
}

extension DescribeCapacityReservationFleetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityReservationFleets = "capacityReservationFleetSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.capacityReservationFleets) {
            struct KeyVal0{struct item{}}
            let capacityReservationFleetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .capacityReservationFleets)
            if let capacityReservationFleetsWrappedContainer = capacityReservationFleetsWrappedContainer {
                let capacityReservationFleetsContainer = try capacityReservationFleetsWrappedContainer.decodeIfPresent([EC2ClientTypes.CapacityReservationFleet].self, forKey: .member)
                var capacityReservationFleetsBuffer:[EC2ClientTypes.CapacityReservationFleet]? = nil
                if let capacityReservationFleetsContainer = capacityReservationFleetsContainer {
                    capacityReservationFleetsBuffer = [EC2ClientTypes.CapacityReservationFleet]()
                    for structureContainer0 in capacityReservationFleetsContainer {
                        capacityReservationFleetsBuffer?.append(structureContainer0)
                    }
                }
                capacityReservationFleets = capacityReservationFleetsBuffer
            } else {
                capacityReservationFleets = []
            }
        } else {
            capacityReservationFleets = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
