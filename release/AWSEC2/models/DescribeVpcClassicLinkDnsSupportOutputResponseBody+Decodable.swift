// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVpcClassicLinkDnsSupportOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let vpcs: [Ec2ClientTypes.ClassicLinkDnsSupport]?
}

extension DescribeVpcClassicLinkDnsSupportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case vpcs = "vpcs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.vpcs) {
            struct KeyVal0{struct item{}}
            let vpcsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .vpcs)
            if let vpcsWrappedContainer = vpcsWrappedContainer {
                let vpcsContainer = try vpcsWrappedContainer.decodeIfPresent([Ec2ClientTypes.ClassicLinkDnsSupport].self, forKey: .member)
                var vpcsBuffer:[Ec2ClientTypes.ClassicLinkDnsSupport]? = nil
                if let vpcsContainer = vpcsContainer {
                    vpcsBuffer = [Ec2ClientTypes.ClassicLinkDnsSupport]()
                    for structureContainer0 in vpcsContainer {
                        vpcsBuffer?.append(structureContainer0)
                    }
                }
                vpcs = vpcsBuffer
            } else {
                vpcs = []
            }
        } else {
            vpcs = nil
        }
    }
}
