// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.TrunkInterfaceAssociation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId = "associationId"
        case branchInterfaceId = "branchInterfaceId"
        case greKey = "greKey"
        case interfaceProtocol = "interfaceProtocol"
        case tags = "tagSet"
        case trunkInterfaceId = "trunkInterfaceId"
        case vlanId = "vlanId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let associationId = associationId {
            try container.encode(associationId, forKey: ClientRuntime.Key("AssociationId"))
        }
        if let branchInterfaceId = branchInterfaceId {
            try container.encode(branchInterfaceId, forKey: ClientRuntime.Key("BranchInterfaceId"))
        }
        if let greKey = greKey {
            try container.encode(greKey, forKey: ClientRuntime.Key("GreKey"))
        }
        if let interfaceProtocol = interfaceProtocol {
            try container.encode(interfaceProtocol, forKey: ClientRuntime.Key("InterfaceProtocol"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let trunkInterfaceId = trunkInterfaceId {
            try container.encode(trunkInterfaceId, forKey: ClientRuntime.Key("TrunkInterfaceId"))
        }
        if let vlanId = vlanId {
            try container.encode(vlanId, forKey: ClientRuntime.Key("VlanId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let branchInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .branchInterfaceId)
        branchInterfaceId = branchInterfaceIdDecoded
        let trunkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trunkInterfaceId)
        trunkInterfaceId = trunkInterfaceIdDecoded
        let interfaceProtocolDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.InterfaceProtocolType.self, forKey: .interfaceProtocol)
        interfaceProtocol = interfaceProtocolDecoded
        let vlanIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .vlanId)
        vlanId = vlanIdDecoded
        let greKeyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .greKey)
        greKey = greKeyDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
