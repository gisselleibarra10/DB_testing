// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.VolumeAttachment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachTime = "attachTime"
        case deleteOnTermination = "deleteOnTermination"
        case device = "device"
        case instanceId = "instanceId"
        case state = "status"
        case volumeId = "volumeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attachTime = attachTime {
            try container.encodeTimestamp(attachTime, format: .dateTime, forKey: ClientRuntime.Key("AttachTime"))
        }
        if let deleteOnTermination = deleteOnTermination {
            try container.encode(deleteOnTermination, forKey: ClientRuntime.Key("DeleteOnTermination"))
        }
        if let device = device {
            try container.encode(device, forKey: ClientRuntime.Key("Device"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("Status"))
        }
        if let volumeId = volumeId {
            try container.encode(volumeId, forKey: ClientRuntime.Key("VolumeId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .attachTime)
        attachTime = attachTimeDecoded
        let deviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .device)
        device = deviceDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.VolumeAttachmentState.self, forKey: .state)
        state = stateDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let deleteOnTerminationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteOnTermination)
        deleteOnTermination = deleteOnTerminationDecoded
    }
}
