// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EC2ClientTypes {
    /// Describes a network interface.
    public struct NetworkInterface: Swift.Equatable {
        /// The association information for an Elastic IP address (IPv4) associated with the network interface.
        public var association: EC2ClientTypes.NetworkInterfaceAssociation?
        /// The network interface attachment.
        public var attachment: EC2ClientTypes.NetworkInterfaceAttachment?
        /// The Availability Zone.
        public var availabilityZone: Swift.String?
        /// Indicates whether a network interface with an IPv6 address is unreachable from the public internet. If the value is true, inbound traffic from the internet is dropped and you cannot assign an elastic IP address to the network interface. The network interface is reachable from peered VPCs and resources connected through a transit gateway, including on-premises networks.
        public var denyAllIgwTraffic: Swift.Bool?
        /// A description.
        public var description: Swift.String?
        /// Any security groups for the network interface.
        public var groups: [EC2ClientTypes.GroupIdentifier]?
        /// The type of network interface.
        public var interfaceType: EC2ClientTypes.NetworkInterfaceType?
        /// The IPv4 prefixes that are assigned to the network interface.
        public var ipv4Prefixes: [EC2ClientTypes.Ipv4PrefixSpecification]?
        /// The IPv6 globally unique address associated with the network interface.
        public var ipv6Address: Swift.String?
        /// The IPv6 addresses associated with the network interface.
        public var ipv6Addresses: [EC2ClientTypes.NetworkInterfaceIpv6Address]?
        /// Indicates whether this is an IPv6 only network interface.
        public var ipv6Native: Swift.Bool?
        /// The IPv6 prefixes that are assigned to the network interface.
        public var ipv6Prefixes: [EC2ClientTypes.Ipv6PrefixSpecification]?
        /// The MAC address.
        public var macAddress: Swift.String?
        /// The ID of the network interface.
        public var networkInterfaceId: Swift.String?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public var outpostArn: Swift.String?
        /// The Amazon Web Services account ID of the owner of the network interface.
        public var ownerId: Swift.String?
        /// The private DNS name.
        public var privateDnsName: Swift.String?
        /// The IPv4 address of the network interface within the subnet.
        public var privateIpAddress: Swift.String?
        /// The private IPv4 addresses associated with the network interface.
        public var privateIpAddresses: [EC2ClientTypes.NetworkInterfacePrivateIpAddress]?
        /// The alias or Amazon Web Services account ID of the principal or service that created the network interface.
        public var requesterId: Swift.String?
        /// Indicates whether the network interface is being managed by Amazon Web Services.
        public var requesterManaged: Swift.Bool?
        /// Indicates whether source/destination checking is enabled.
        public var sourceDestCheck: Swift.Bool?
        /// The status of the network interface.
        public var status: EC2ClientTypes.NetworkInterfaceStatus?
        /// The ID of the subnet.
        public var subnetId: Swift.String?
        /// Any tags assigned to the network interface.
        public var tagSet: [EC2ClientTypes.Tag]?
        /// The ID of the VPC.
        public var vpcId: Swift.String?

        public init (
            association: EC2ClientTypes.NetworkInterfaceAssociation? = nil,
            attachment: EC2ClientTypes.NetworkInterfaceAttachment? = nil,
            availabilityZone: Swift.String? = nil,
            denyAllIgwTraffic: Swift.Bool? = nil,
            description: Swift.String? = nil,
            groups: [EC2ClientTypes.GroupIdentifier]? = nil,
            interfaceType: EC2ClientTypes.NetworkInterfaceType? = nil,
            ipv4Prefixes: [EC2ClientTypes.Ipv4PrefixSpecification]? = nil,
            ipv6Address: Swift.String? = nil,
            ipv6Addresses: [EC2ClientTypes.NetworkInterfaceIpv6Address]? = nil,
            ipv6Native: Swift.Bool? = nil,
            ipv6Prefixes: [EC2ClientTypes.Ipv6PrefixSpecification]? = nil,
            macAddress: Swift.String? = nil,
            networkInterfaceId: Swift.String? = nil,
            outpostArn: Swift.String? = nil,
            ownerId: Swift.String? = nil,
            privateDnsName: Swift.String? = nil,
            privateIpAddress: Swift.String? = nil,
            privateIpAddresses: [EC2ClientTypes.NetworkInterfacePrivateIpAddress]? = nil,
            requesterId: Swift.String? = nil,
            requesterManaged: Swift.Bool? = nil,
            sourceDestCheck: Swift.Bool? = nil,
            status: EC2ClientTypes.NetworkInterfaceStatus? = nil,
            subnetId: Swift.String? = nil,
            tagSet: [EC2ClientTypes.Tag]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.association = association
            self.attachment = attachment
            self.availabilityZone = availabilityZone
            self.denyAllIgwTraffic = denyAllIgwTraffic
            self.description = description
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv4Prefixes = ipv4Prefixes
            self.ipv6Address = ipv6Address
            self.ipv6Addresses = ipv6Addresses
            self.ipv6Native = ipv6Native
            self.ipv6Prefixes = ipv6Prefixes
            self.macAddress = macAddress
            self.networkInterfaceId = networkInterfaceId
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.requesterId = requesterId
            self.requesterManaged = requesterManaged
            self.sourceDestCheck = sourceDestCheck
            self.status = status
            self.subnetId = subnetId
            self.tagSet = tagSet
            self.vpcId = vpcId
        }
    }

}
