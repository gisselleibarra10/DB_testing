// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DetachVolumeOutputResponseBody: Swift.Equatable {
    let attachTime: ClientRuntime.Date?
    let device: Swift.String?
    let instanceId: Swift.String?
    let state: EC2ClientTypes.VolumeAttachmentState?
    let volumeId: Swift.String?
    let deleteOnTermination: Swift.Bool?
}

extension DetachVolumeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachTime = "attachTime"
        case deleteOnTermination = "deleteOnTermination"
        case device = "device"
        case instanceId = "instanceId"
        case state = "status"
        case volumeId = "volumeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .attachTime)
        attachTime = attachTimeDecoded
        let deviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .device)
        device = deviceDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.VolumeAttachmentState.self, forKey: .state)
        state = stateDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let deleteOnTerminationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteOnTermination)
        deleteOnTermination = deleteOnTerminationDecoded
    }
}
