// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListImagesInRecycleBinInputBody: Swift.Equatable {
    let imageIds: [Swift.String]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let dryRun: Swift.Bool?
}

extension ListImagesInRecycleBinInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case imageIds = "ImageId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.imageIds) {
            struct KeyVal0{struct ImageId{}}
            let imageIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ImageId>.CodingKeys.self, forKey: .imageIds)
            if let imageIdsWrappedContainer = imageIdsWrappedContainer {
                let imageIdsContainer = try imageIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var imageIdsBuffer:[Swift.String]? = nil
                if let imageIdsContainer = imageIdsContainer {
                    imageIdsBuffer = [Swift.String]()
                    for stringContainer0 in imageIdsContainer {
                        imageIdsBuffer?.append(stringContainer0)
                    }
                }
                imageIds = imageIdsBuffer
            } else {
                imageIds = []
            }
        } else {
            imageIds = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
