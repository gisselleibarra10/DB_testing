// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAvailabilityZonesInputBody: Swift.Equatable {
    let filters: [Ec2ClientTypes.Filter]?
    let zoneNames: [Swift.String]?
    let zoneIds: [Swift.String]?
    let allAvailabilityZones: Swift.Bool?
    let dryRun: Swift.Bool?
}

extension DescribeAvailabilityZonesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allAvailabilityZones = "AllAvailabilityZones"
        case dryRun = "dryRun"
        case filters = "Filter"
        case zoneIds = "ZoneId"
        case zoneNames = "ZoneName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.filters) {
            struct KeyVal0{struct Filter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Filter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([Ec2ClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[Ec2ClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [Ec2ClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        if containerValues.contains(.zoneNames) {
            struct KeyVal0{struct ZoneName{}}
            let zoneNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ZoneName>.CodingKeys.self, forKey: .zoneNames)
            if let zoneNamesWrappedContainer = zoneNamesWrappedContainer {
                let zoneNamesContainer = try zoneNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var zoneNamesBuffer:[Swift.String]? = nil
                if let zoneNamesContainer = zoneNamesContainer {
                    zoneNamesBuffer = [Swift.String]()
                    for stringContainer0 in zoneNamesContainer {
                        zoneNamesBuffer?.append(stringContainer0)
                    }
                }
                zoneNames = zoneNamesBuffer
            } else {
                zoneNames = []
            }
        } else {
            zoneNames = nil
        }
        if containerValues.contains(.zoneIds) {
            struct KeyVal0{struct ZoneId{}}
            let zoneIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ZoneId>.CodingKeys.self, forKey: .zoneIds)
            if let zoneIdsWrappedContainer = zoneIdsWrappedContainer {
                let zoneIdsContainer = try zoneIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var zoneIdsBuffer:[Swift.String]? = nil
                if let zoneIdsContainer = zoneIdsContainer {
                    zoneIdsBuffer = [Swift.String]()
                    for stringContainer0 in zoneIdsContainer {
                        zoneIdsBuffer?.append(stringContainer0)
                    }
                }
                zoneIds = zoneIdsBuffer
            } else {
                zoneIds = []
            }
        } else {
            zoneIds = nil
        }
        let allAvailabilityZonesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allAvailabilityZones)
        allAvailabilityZones = allAvailabilityZonesDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
