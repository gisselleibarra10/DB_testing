// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.KeyPairInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTime = "createTime"
        case keyFingerprint = "keyFingerprint"
        case keyName = "keyName"
        case keyPairId = "keyPairId"
        case keyType = "keyType"
        case publicKey = "publicKey"
        case tags = "tagSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createTime = createTime {
            try container.encode(ClientRuntime.TimestampWrapper(createTime, format: .dateTime), forKey: ClientRuntime.Key("CreateTime"))
        }
        if let keyFingerprint = keyFingerprint {
            try container.encode(keyFingerprint, forKey: ClientRuntime.Key("KeyFingerprint"))
        }
        if let keyName = keyName {
            try container.encode(keyName, forKey: ClientRuntime.Key("KeyName"))
        }
        if let keyPairId = keyPairId {
            try container.encode(keyPairId, forKey: ClientRuntime.Key("KeyPairId"))
        }
        if let keyType = keyType {
            try container.encode(keyType, forKey: ClientRuntime.Key("KeyType"))
        }
        if let publicKey = publicKey {
            try container.encode(publicKey, forKey: ClientRuntime.Key("PublicKey"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPairIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPairId)
        keyPairId = keyPairIdDecoded
        let keyFingerprintDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyFingerprint)
        keyFingerprint = keyFingerprintDecoded
        let keyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyName)
        keyName = keyNameDecoded
        let keyTypeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.KeyType.self, forKey: .keyType)
        keyType = keyTypeDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let publicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createTime)
        var createTimeBuffer:ClientRuntime.Date? = nil
        if let createTimeDecoded = createTimeDecoded {
            createTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createTimeDecoded, format: .dateTime)
        }
        createTime = createTimeBuffer
    }
}
