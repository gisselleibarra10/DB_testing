// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UnassignPrivateIpAddressesInputBody: Swift.Equatable {
    let networkInterfaceId: Swift.String?
    let privateIpAddresses: [Swift.String]?
    let ipv4Prefixes: [Swift.String]?
}

extension UnassignPrivateIpAddressesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipv4Prefixes = "Ipv4Prefix"
        case networkInterfaceId = "networkInterfaceId"
        case privateIpAddresses = "privateIpAddress"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        if containerValues.contains(.privateIpAddresses) {
            struct KeyVal0{struct PrivateIpAddress{}}
            let privateIpAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.PrivateIpAddress>.CodingKeys.self, forKey: .privateIpAddresses)
            if let privateIpAddressesWrappedContainer = privateIpAddressesWrappedContainer {
                let privateIpAddressesContainer = try privateIpAddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var privateIpAddressesBuffer:[Swift.String]? = nil
                if let privateIpAddressesContainer = privateIpAddressesContainer {
                    privateIpAddressesBuffer = [Swift.String]()
                    for stringContainer0 in privateIpAddressesContainer {
                        privateIpAddressesBuffer?.append(stringContainer0)
                    }
                }
                privateIpAddresses = privateIpAddressesBuffer
            } else {
                privateIpAddresses = []
            }
        } else {
            privateIpAddresses = nil
        }
        if containerValues.contains(.ipv4Prefixes) {
            struct KeyVal0{struct item{}}
            let ipv4PrefixesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .ipv4Prefixes)
            if let ipv4PrefixesWrappedContainer = ipv4PrefixesWrappedContainer {
                let ipv4PrefixesContainer = try ipv4PrefixesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var ipv4PrefixesBuffer:[Swift.String]? = nil
                if let ipv4PrefixesContainer = ipv4PrefixesContainer {
                    ipv4PrefixesBuffer = [Swift.String]()
                    for stringContainer0 in ipv4PrefixesContainer {
                        ipv4PrefixesBuffer?.append(stringContainer0)
                    }
                }
                ipv4Prefixes = ipv4PrefixesBuffer
            } else {
                ipv4Prefixes = []
            }
        } else {
            ipv4Prefixes = nil
        }
    }
}
