// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// Describes a network interface.
    public struct InstanceNetworkInterface: Swift.Equatable {
        /// The association information for an Elastic IPv4 associated with the network interface.
        public var association: Ec2ClientTypes.InstanceNetworkInterfaceAssociation?
        /// The network interface attachment.
        public var attachment: Ec2ClientTypes.InstanceNetworkInterfaceAttachment?
        /// The description.
        public var description: Swift.String?
        /// The security groups.
        public var groups: [Ec2ClientTypes.GroupIdentifier]?
        /// The type of network interface. Valid values: interface | efa | trunk
        public var interfaceType: Swift.String?
        /// The IPv4 delegated prefixes that are assigned to the network interface.
        public var ipv4Prefixes: [Ec2ClientTypes.InstanceIpv4Prefix]?
        /// The IPv6 addresses associated with the network interface.
        public var ipv6Addresses: [Ec2ClientTypes.InstanceIpv6Address]?
        /// The IPv6 delegated prefixes that are assigned to the network interface.
        public var ipv6Prefixes: [Ec2ClientTypes.InstanceIpv6Prefix]?
        /// The MAC address.
        public var macAddress: Swift.String?
        /// The ID of the network interface.
        public var networkInterfaceId: Swift.String?
        /// The ID of the Amazon Web Services account that created the network interface.
        public var ownerId: Swift.String?
        /// The private DNS name.
        public var privateDnsName: Swift.String?
        /// The IPv4 address of the network interface within the subnet.
        public var privateIpAddress: Swift.String?
        /// The private IPv4 addresses associated with the network interface.
        public var privateIpAddresses: [Ec2ClientTypes.InstancePrivateIpAddress]?
        /// Indicates whether source/destination checking is enabled.
        public var sourceDestCheck: Swift.Bool?
        /// The status of the network interface.
        public var status: Ec2ClientTypes.NetworkInterfaceStatus?
        /// The ID of the subnet.
        public var subnetId: Swift.String?
        /// The ID of the VPC.
        public var vpcId: Swift.String?

        public init (
            association: Ec2ClientTypes.InstanceNetworkInterfaceAssociation? = nil,
            attachment: Ec2ClientTypes.InstanceNetworkInterfaceAttachment? = nil,
            description: Swift.String? = nil,
            groups: [Ec2ClientTypes.GroupIdentifier]? = nil,
            interfaceType: Swift.String? = nil,
            ipv4Prefixes: [Ec2ClientTypes.InstanceIpv4Prefix]? = nil,
            ipv6Addresses: [Ec2ClientTypes.InstanceIpv6Address]? = nil,
            ipv6Prefixes: [Ec2ClientTypes.InstanceIpv6Prefix]? = nil,
            macAddress: Swift.String? = nil,
            networkInterfaceId: Swift.String? = nil,
            ownerId: Swift.String? = nil,
            privateDnsName: Swift.String? = nil,
            privateIpAddress: Swift.String? = nil,
            privateIpAddresses: [Ec2ClientTypes.InstancePrivateIpAddress]? = nil,
            sourceDestCheck: Swift.Bool? = nil,
            status: Ec2ClientTypes.NetworkInterfaceStatus? = nil,
            subnetId: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.association = association
            self.attachment = attachment
            self.description = description
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv4Prefixes = ipv4Prefixes
            self.ipv6Addresses = ipv6Addresses
            self.ipv6Prefixes = ipv6Prefixes
            self.macAddress = macAddress
            self.networkInterfaceId = networkInterfaceId
            self.ownerId = ownerId
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.sourceDestCheck = sourceDestCheck
            self.status = status
            self.subnetId = subnetId
            self.vpcId = vpcId
        }
    }

}
