// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EC2ClientTypes {
    /// Describes a Reserved Instance offering.
    public struct ReservedInstancesOffering: Swift.Equatable {
        /// The Availability Zone in which the Reserved Instance can be used.
        public var availabilityZone: Swift.String?
        /// The currency of the Reserved Instance offering you are purchasing. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is USD.
        public var currencyCode: EC2ClientTypes.CurrencyCodeValues?
        /// The duration of the Reserved Instance, in seconds.
        public var duration: Swift.Int?
        /// The purchase price of the Reserved Instance.
        public var fixedPrice: Swift.Float?
        /// The tenancy of the instance.
        public var instanceTenancy: EC2ClientTypes.Tenancy?
        /// The instance type on which the Reserved Instance can be used.
        public var instanceType: EC2ClientTypes.InstanceType?
        /// Indicates whether the offering is available through the Reserved Instance Marketplace (resale) or Amazon Web Services. If it's a Reserved Instance Marketplace offering, this is true.
        public var marketplace: Swift.Bool?
        /// If convertible it can be exchanged for Reserved Instances of the same or higher monetary value, with different configurations. If standard, it is not possible to perform an exchange.
        public var offeringClass: EC2ClientTypes.OfferingClassType?
        /// The Reserved Instance offering type.
        public var offeringType: EC2ClientTypes.OfferingTypeValues?
        /// The pricing details of the Reserved Instance offering.
        public var pricingDetails: [EC2ClientTypes.PricingDetail]?
        /// The Reserved Instance product platform description.
        public var productDescription: EC2ClientTypes.RIProductDescription?
        /// The recurring charge tag assigned to the resource.
        public var recurringCharges: [EC2ClientTypes.RecurringCharge]?
        /// The ID of the Reserved Instance offering. This is the offering ID used in [GetReservedInstancesExchangeQuote] to confirm that an exchange can be made.
        public var reservedInstancesOfferingId: Swift.String?
        /// Whether the Reserved Instance is applied to instances in a Region or an Availability Zone.
        public var scope: EC2ClientTypes.Scope?
        /// The usage price of the Reserved Instance, per hour.
        public var usagePrice: Swift.Float?

        public init (
            availabilityZone: Swift.String? = nil,
            currencyCode: EC2ClientTypes.CurrencyCodeValues? = nil,
            duration: Swift.Int? = nil,
            fixedPrice: Swift.Float? = nil,
            instanceTenancy: EC2ClientTypes.Tenancy? = nil,
            instanceType: EC2ClientTypes.InstanceType? = nil,
            marketplace: Swift.Bool? = nil,
            offeringClass: EC2ClientTypes.OfferingClassType? = nil,
            offeringType: EC2ClientTypes.OfferingTypeValues? = nil,
            pricingDetails: [EC2ClientTypes.PricingDetail]? = nil,
            productDescription: EC2ClientTypes.RIProductDescription? = nil,
            recurringCharges: [EC2ClientTypes.RecurringCharge]? = nil,
            reservedInstancesOfferingId: Swift.String? = nil,
            scope: EC2ClientTypes.Scope? = nil,
            usagePrice: Swift.Float? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.currencyCode = currencyCode
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.instanceTenancy = instanceTenancy
            self.instanceType = instanceType
            self.marketplace = marketplace
            self.offeringClass = offeringClass
            self.offeringType = offeringType
            self.pricingDetails = pricingDetails
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservedInstancesOfferingId = reservedInstancesOfferingId
            self.scope = scope
            self.usagePrice = usagePrice
        }
    }

}
