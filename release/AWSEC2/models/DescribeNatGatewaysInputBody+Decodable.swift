// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNatGatewaysInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let filter: [EC2ClientTypes.Filter]?
    let maxResults: Swift.Int?
    let natGatewayIds: [Swift.String]?
    let nextToken: Swift.String?
}

extension DescribeNatGatewaysInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case filter = "Filter"
        case maxResults = "MaxResults"
        case natGatewayIds = "NatGatewayId"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.filter) {
            struct KeyVal0{struct Filter{}}
            let filterWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Filter>.CodingKeys.self, forKey: .filter)
            if let filterWrappedContainer = filterWrappedContainer {
                let filterContainer = try filterWrappedContainer.decodeIfPresent([EC2ClientTypes.Filter].self, forKey: .member)
                var filterBuffer:[EC2ClientTypes.Filter]? = nil
                if let filterContainer = filterContainer {
                    filterBuffer = [EC2ClientTypes.Filter]()
                    for structureContainer0 in filterContainer {
                        filterBuffer?.append(structureContainer0)
                    }
                }
                filter = filterBuffer
            } else {
                filter = []
            }
        } else {
            filter = nil
        }
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        if containerValues.contains(.natGatewayIds) {
            struct KeyVal0{struct item{}}
            let natGatewayIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .natGatewayIds)
            if let natGatewayIdsWrappedContainer = natGatewayIdsWrappedContainer {
                let natGatewayIdsContainer = try natGatewayIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var natGatewayIdsBuffer:[Swift.String]? = nil
                if let natGatewayIdsContainer = natGatewayIdsContainer {
                    natGatewayIdsBuffer = [Swift.String]()
                    for stringContainer0 in natGatewayIdsContainer {
                        natGatewayIdsBuffer?.append(stringContainer0)
                    }
                }
                natGatewayIds = natGatewayIdsBuffer
            } else {
                natGatewayIds = []
            }
        } else {
            natGatewayIds = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
