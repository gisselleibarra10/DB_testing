// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EC2ClientTypes {
    /// Describes an entry in a network ACL.
    public struct NetworkAclEntry: Swift.Equatable {
        /// The IPv4 network range to allow or deny, in CIDR notation.
        public var cidrBlock: Swift.String?
        /// Indicates whether the rule is an egress rule (applied to traffic leaving the subnet).
        public var egress: Swift.Bool?
        /// ICMP protocol: The ICMP type and code.
        public var icmpTypeCode: EC2ClientTypes.IcmpTypeCode?
        /// The IPv6 network range to allow or deny, in CIDR notation.
        public var ipv6CidrBlock: Swift.String?
        /// TCP or UDP protocols: The range of ports the rule applies to.
        public var portRange: EC2ClientTypes.PortRange?
        /// The protocol number. A value of "-1" means all protocols.
        public var `protocol`: Swift.String?
        /// Indicates whether to allow or deny the traffic that matches the rule.
        public var ruleAction: EC2ClientTypes.RuleAction?
        /// The rule number for the entry. ACL entries are processed in ascending order by rule number.
        public var ruleNumber: Swift.Int?

        public init (
            cidrBlock: Swift.String? = nil,
            egress: Swift.Bool? = nil,
            icmpTypeCode: EC2ClientTypes.IcmpTypeCode? = nil,
            ipv6CidrBlock: Swift.String? = nil,
            portRange: EC2ClientTypes.PortRange? = nil,
            `protocol`: Swift.String? = nil,
            ruleAction: EC2ClientTypes.RuleAction? = nil,
            ruleNumber: Swift.Int? = nil
        )
        {
            self.cidrBlock = cidrBlock
            self.egress = egress
            self.icmpTypeCode = icmpTypeCode
            self.ipv6CidrBlock = ipv6CidrBlock
            self.portRange = portRange
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
        }
    }

}
