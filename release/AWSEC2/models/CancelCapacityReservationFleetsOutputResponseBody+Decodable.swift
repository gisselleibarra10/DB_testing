// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CancelCapacityReservationFleetsOutputResponseBody: Swift.Equatable {
    let successfulFleetCancellations: [Ec2ClientTypes.CapacityReservationFleetCancellationState]?
    let failedFleetCancellations: [Ec2ClientTypes.FailedCapacityReservationFleetCancellationResult]?
}

extension CancelCapacityReservationFleetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedFleetCancellations = "failedFleetCancellationSet"
        case successfulFleetCancellations = "successfulFleetCancellationSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.successfulFleetCancellations) {
            struct KeyVal0{struct item{}}
            let successfulFleetCancellationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .successfulFleetCancellations)
            if let successfulFleetCancellationsWrappedContainer = successfulFleetCancellationsWrappedContainer {
                let successfulFleetCancellationsContainer = try successfulFleetCancellationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.CapacityReservationFleetCancellationState].self, forKey: .member)
                var successfulFleetCancellationsBuffer:[Ec2ClientTypes.CapacityReservationFleetCancellationState]? = nil
                if let successfulFleetCancellationsContainer = successfulFleetCancellationsContainer {
                    successfulFleetCancellationsBuffer = [Ec2ClientTypes.CapacityReservationFleetCancellationState]()
                    for structureContainer0 in successfulFleetCancellationsContainer {
                        successfulFleetCancellationsBuffer?.append(structureContainer0)
                    }
                }
                successfulFleetCancellations = successfulFleetCancellationsBuffer
            } else {
                successfulFleetCancellations = []
            }
        } else {
            successfulFleetCancellations = nil
        }
        if containerValues.contains(.failedFleetCancellations) {
            struct KeyVal0{struct item{}}
            let failedFleetCancellationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .failedFleetCancellations)
            if let failedFleetCancellationsWrappedContainer = failedFleetCancellationsWrappedContainer {
                let failedFleetCancellationsContainer = try failedFleetCancellationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.FailedCapacityReservationFleetCancellationResult].self, forKey: .member)
                var failedFleetCancellationsBuffer:[Ec2ClientTypes.FailedCapacityReservationFleetCancellationResult]? = nil
                if let failedFleetCancellationsContainer = failedFleetCancellationsContainer {
                    failedFleetCancellationsBuffer = [Ec2ClientTypes.FailedCapacityReservationFleetCancellationResult]()
                    for structureContainer0 in failedFleetCancellationsContainer {
                        failedFleetCancellationsBuffer?.append(structureContainer0)
                    }
                }
                failedFleetCancellations = failedFleetCancellationsBuffer
            } else {
                failedFleetCancellations = []
            }
        } else {
            failedFleetCancellations = nil
        }
    }
}
