// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyFpgaImageAttributeInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let fpgaImageId: Swift.String?
    let attribute: EC2ClientTypes.FpgaImageAttributeName?
    let operationType: EC2ClientTypes.OperationType?
    let userIds: [Swift.String]?
    let userGroups: [Swift.String]?
    let productCodes: [Swift.String]?
    let loadPermission: EC2ClientTypes.LoadPermissionModifications?
    let description: Swift.String?
    let name: Swift.String?
}

extension ModifyFpgaImageAttributeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attribute = "Attribute"
        case description = "Description"
        case dryRun = "DryRun"
        case fpgaImageId = "FpgaImageId"
        case loadPermission = "LoadPermission"
        case name = "Name"
        case operationType = "OperationType"
        case productCodes = "ProductCode"
        case userGroups = "UserGroup"
        case userIds = "UserId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let fpgaImageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fpgaImageId)
        fpgaImageId = fpgaImageIdDecoded
        let attributeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.FpgaImageAttributeName.self, forKey: .attribute)
        attribute = attributeDecoded
        let operationTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.OperationType.self, forKey: .operationType)
        operationType = operationTypeDecoded
        if containerValues.contains(.userIds) {
            struct KeyVal0{struct UserId{}}
            let userIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.UserId>.CodingKeys.self, forKey: .userIds)
            if let userIdsWrappedContainer = userIdsWrappedContainer {
                let userIdsContainer = try userIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userIdsBuffer:[Swift.String]? = nil
                if let userIdsContainer = userIdsContainer {
                    userIdsBuffer = [Swift.String]()
                    for stringContainer0 in userIdsContainer {
                        userIdsBuffer?.append(stringContainer0)
                    }
                }
                userIds = userIdsBuffer
            } else {
                userIds = []
            }
        } else {
            userIds = nil
        }
        if containerValues.contains(.userGroups) {
            struct KeyVal0{struct UserGroup{}}
            let userGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.UserGroup>.CodingKeys.self, forKey: .userGroups)
            if let userGroupsWrappedContainer = userGroupsWrappedContainer {
                let userGroupsContainer = try userGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userGroupsBuffer:[Swift.String]? = nil
                if let userGroupsContainer = userGroupsContainer {
                    userGroupsBuffer = [Swift.String]()
                    for stringContainer0 in userGroupsContainer {
                        userGroupsBuffer?.append(stringContainer0)
                    }
                }
                userGroups = userGroupsBuffer
            } else {
                userGroups = []
            }
        } else {
            userGroups = nil
        }
        if containerValues.contains(.productCodes) {
            struct KeyVal0{struct ProductCode{}}
            let productCodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ProductCode>.CodingKeys.self, forKey: .productCodes)
            if let productCodesWrappedContainer = productCodesWrappedContainer {
                let productCodesContainer = try productCodesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var productCodesBuffer:[Swift.String]? = nil
                if let productCodesContainer = productCodesContainer {
                    productCodesBuffer = [Swift.String]()
                    for stringContainer0 in productCodesContainer {
                        productCodesBuffer?.append(stringContainer0)
                    }
                }
                productCodes = productCodesBuffer
            } else {
                productCodes = []
            }
        } else {
            productCodes = nil
        }
        let loadPermissionDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.LoadPermissionModifications.self, forKey: .loadPermission)
        loadPermission = loadPermissionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}
