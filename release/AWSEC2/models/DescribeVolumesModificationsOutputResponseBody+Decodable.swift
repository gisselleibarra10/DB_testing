// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVolumesModificationsOutputResponseBody: Swift.Equatable {
    let volumesModifications: [EC2ClientTypes.VolumeModification]?
    let nextToken: Swift.String?
}

extension DescribeVolumesModificationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case volumesModifications = "volumeModificationSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.volumesModifications) {
            struct KeyVal0{struct item{}}
            let volumesModificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .volumesModifications)
            if let volumesModificationsWrappedContainer = volumesModificationsWrappedContainer {
                let volumesModificationsContainer = try volumesModificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.VolumeModification].self, forKey: .member)
                var volumesModificationsBuffer:[EC2ClientTypes.VolumeModification]? = nil
                if let volumesModificationsContainer = volumesModificationsContainer {
                    volumesModificationsBuffer = [EC2ClientTypes.VolumeModification]()
                    for structureContainer0 in volumesModificationsContainer {
                        volumesModificationsBuffer?.append(structureContainer0)
                    }
                }
                volumesModifications = volumesModificationsBuffer
            } else {
                volumesModifications = []
            }
        } else {
            volumesModifications = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
