// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateIpamPoolInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let ipamScopeId: Swift.String?
    let locale: Swift.String?
    let sourceIpamPoolId: Swift.String?
    let description: Swift.String?
    let addressFamily: EC2ClientTypes.AddressFamily?
    let autoImport: Swift.Bool?
    let publiclyAdvertisable: Swift.Bool?
    let allocationMinNetmaskLength: Swift.Int?
    let allocationMaxNetmaskLength: Swift.Int?
    let allocationDefaultNetmaskLength: Swift.Int?
    let allocationResourceTags: [EC2ClientTypes.RequestIpamResourceTag]?
    let tagSpecifications: [EC2ClientTypes.TagSpecification]?
    let clientToken: Swift.String?
    let awsService: EC2ClientTypes.IpamPoolAwsService?
}

extension CreateIpamPoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily = "AddressFamily"
        case allocationDefaultNetmaskLength = "AllocationDefaultNetmaskLength"
        case allocationMaxNetmaskLength = "AllocationMaxNetmaskLength"
        case allocationMinNetmaskLength = "AllocationMinNetmaskLength"
        case allocationResourceTags = "AllocationResourceTag"
        case autoImport = "AutoImport"
        case awsService = "AwsService"
        case clientToken = "ClientToken"
        case description = "Description"
        case dryRun = "DryRun"
        case ipamScopeId = "IpamScopeId"
        case locale = "Locale"
        case publiclyAdvertisable = "PubliclyAdvertisable"
        case sourceIpamPoolId = "SourceIpamPoolId"
        case tagSpecifications = "TagSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let ipamScopeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipamScopeId)
        ipamScopeId = ipamScopeIdDecoded
        let localeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locale)
        locale = localeDecoded
        let sourceIpamPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceIpamPoolId)
        sourceIpamPoolId = sourceIpamPoolIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let autoImportDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoImport)
        autoImport = autoImportDecoded
        let publiclyAdvertisableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAdvertisable)
        publiclyAdvertisable = publiclyAdvertisableDecoded
        let allocationMinNetmaskLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .allocationMinNetmaskLength)
        allocationMinNetmaskLength = allocationMinNetmaskLengthDecoded
        let allocationMaxNetmaskLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .allocationMaxNetmaskLength)
        allocationMaxNetmaskLength = allocationMaxNetmaskLengthDecoded
        let allocationDefaultNetmaskLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .allocationDefaultNetmaskLength)
        allocationDefaultNetmaskLength = allocationDefaultNetmaskLengthDecoded
        if containerValues.contains(.allocationResourceTags) {
            struct KeyVal0{struct item{}}
            let allocationResourceTagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .allocationResourceTags)
            if let allocationResourceTagsWrappedContainer = allocationResourceTagsWrappedContainer {
                let allocationResourceTagsContainer = try allocationResourceTagsWrappedContainer.decodeIfPresent([EC2ClientTypes.RequestIpamResourceTag].self, forKey: .member)
                var allocationResourceTagsBuffer:[EC2ClientTypes.RequestIpamResourceTag]? = nil
                if let allocationResourceTagsContainer = allocationResourceTagsContainer {
                    allocationResourceTagsBuffer = [EC2ClientTypes.RequestIpamResourceTag]()
                    for structureContainer0 in allocationResourceTagsContainer {
                        allocationResourceTagsBuffer?.append(structureContainer0)
                    }
                }
                allocationResourceTags = allocationResourceTagsBuffer
            } else {
                allocationResourceTags = []
            }
        } else {
            allocationResourceTags = nil
        }
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[EC2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [EC2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let awsServiceDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.IpamPoolAwsService.self, forKey: .awsService)
        awsService = awsServiceDecoded
    }
}
