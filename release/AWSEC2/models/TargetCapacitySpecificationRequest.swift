// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EC2ClientTypes {
    /// The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later. You can use the On-Demand Instance MaxTotalPrice parameter, the Spot Instance MaxTotalPrice parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasnâ€™t met the target capacity. The MaxTotalPrice parameters are located in [OnDemandOptionsRequest](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptionsRequest) and [SpotOptionsRequest](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptionsRequest).
    public struct TargetCapacitySpecificationRequest: Swift.Equatable {
        /// The default TotalTargetCapacity, which is either Spot or On-Demand.
        public var defaultTargetCapacityType: EC2ClientTypes.DefaultTargetCapacityType?
        /// The number of On-Demand units to request.
        public var onDemandTargetCapacity: Swift.Int?
        /// The number of Spot units to request.
        public var spotTargetCapacity: Swift.Int?
        /// The unit for the target capacity. Default: units (translates to number of instances)
        public var targetCapacityUnitType: EC2ClientTypes.TargetCapacityUnitType?
        /// The number of units to request, filled using DefaultTargetCapacityType.
        /// This member is required.
        public var totalTargetCapacity: Swift.Int?

        public init (
            defaultTargetCapacityType: EC2ClientTypes.DefaultTargetCapacityType? = nil,
            onDemandTargetCapacity: Swift.Int? = nil,
            spotTargetCapacity: Swift.Int? = nil,
            targetCapacityUnitType: EC2ClientTypes.TargetCapacityUnitType? = nil,
            totalTargetCapacity: Swift.Int? = nil
        )
        {
            self.defaultTargetCapacityType = defaultTargetCapacityType
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.spotTargetCapacity = spotTargetCapacity
            self.targetCapacityUnitType = targetCapacityUnitType
            self.totalTargetCapacity = totalTargetCapacity
        }
    }

}
