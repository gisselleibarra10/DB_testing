// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.TransitGatewayConnectPeerConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bgpConfigurations = "bgpConfigurations"
        case insideCidrBlocks = "insideCidrBlocks"
        case peerAddress = "peerAddress"
        case `protocol` = "protocol"
        case transitGatewayAddress = "transitGatewayAddress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bgpConfigurations = bgpConfigurations {
            if !bgpConfigurations.isEmpty {
                for (index0, transitgatewayattachmentbgpconfiguration0) in bgpConfigurations.enumerated() {
                    var bgpConfigurationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BgpConfigurations.\(index0.advanced(by: 1))"))
                    try bgpConfigurationsContainer0.encode(transitgatewayattachmentbgpconfiguration0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let insideCidrBlocks = insideCidrBlocks {
            if !insideCidrBlocks.isEmpty {
                for (index0, string0) in insideCidrBlocks.enumerated() {
                    var insideCidrBlocksContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsideCidrBlocks.\(index0.advanced(by: 1))"))
                    try insideCidrBlocksContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let peerAddress = peerAddress {
            try container.encode(peerAddress, forKey: ClientRuntime.Key("PeerAddress"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: ClientRuntime.Key("Protocol"))
        }
        if let transitGatewayAddress = transitGatewayAddress {
            try container.encode(transitGatewayAddress, forKey: ClientRuntime.Key("TransitGatewayAddress"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transitGatewayAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayAddress)
        transitGatewayAddress = transitGatewayAddressDecoded
        let peerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerAddress)
        peerAddress = peerAddressDecoded
        if containerValues.contains(.insideCidrBlocks) {
            struct KeyVal0{struct item{}}
            let insideCidrBlocksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .insideCidrBlocks)
            if let insideCidrBlocksWrappedContainer = insideCidrBlocksWrappedContainer {
                let insideCidrBlocksContainer = try insideCidrBlocksWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var insideCidrBlocksBuffer:[Swift.String]? = nil
                if let insideCidrBlocksContainer = insideCidrBlocksContainer {
                    insideCidrBlocksBuffer = [Swift.String]()
                    for stringContainer0 in insideCidrBlocksContainer {
                        insideCidrBlocksBuffer?.append(stringContainer0)
                    }
                }
                insideCidrBlocks = insideCidrBlocksBuffer
            } else {
                insideCidrBlocks = []
            }
        } else {
            insideCidrBlocks = nil
        }
        let protocolDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.ProtocolValue.self, forKey: .protocol)
        `protocol` = protocolDecoded
        if containerValues.contains(.bgpConfigurations) {
            struct KeyVal0{struct item{}}
            let bgpConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .bgpConfigurations)
            if let bgpConfigurationsWrappedContainer = bgpConfigurationsWrappedContainer {
                let bgpConfigurationsContainer = try bgpConfigurationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TransitGatewayAttachmentBgpConfiguration].self, forKey: .member)
                var bgpConfigurationsBuffer:[Ec2ClientTypes.TransitGatewayAttachmentBgpConfiguration]? = nil
                if let bgpConfigurationsContainer = bgpConfigurationsContainer {
                    bgpConfigurationsBuffer = [Ec2ClientTypes.TransitGatewayAttachmentBgpConfiguration]()
                    for structureContainer0 in bgpConfigurationsContainer {
                        bgpConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                bgpConfigurations = bgpConfigurationsBuffer
            } else {
                bgpConfigurations = []
            }
        } else {
            bgpConfigurations = nil
        }
    }
}
