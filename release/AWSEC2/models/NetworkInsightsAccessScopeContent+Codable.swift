// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.NetworkInsightsAccessScopeContent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludePaths = "excludePathSet"
        case matchPaths = "matchPathSet"
        case networkInsightsAccessScopeId = "networkInsightsAccessScopeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let excludePaths = excludePaths {
            if !excludePaths.isEmpty {
                for (index0, accessscopepath0) in excludePaths.enumerated() {
                    var excludePathsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludePathSet.\(index0.advanced(by: 1))"))
                    try excludePathsContainer0.encode(accessscopepath0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var excludePathsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludePathSet"))
                try excludePathsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let matchPaths = matchPaths {
            if !matchPaths.isEmpty {
                for (index0, accessscopepath0) in matchPaths.enumerated() {
                    var matchPathsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MatchPathSet.\(index0.advanced(by: 1))"))
                    try matchPathsContainer0.encode(accessscopepath0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var matchPathsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MatchPathSet"))
                try matchPathsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let networkInsightsAccessScopeId = networkInsightsAccessScopeId {
            try container.encode(networkInsightsAccessScopeId, forKey: ClientRuntime.Key("NetworkInsightsAccessScopeId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkInsightsAccessScopeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInsightsAccessScopeId)
        networkInsightsAccessScopeId = networkInsightsAccessScopeIdDecoded
        if containerValues.contains(.matchPaths) {
            struct KeyVal0{struct item{}}
            let matchPathsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .matchPaths)
            if let matchPathsWrappedContainer = matchPathsWrappedContainer {
                let matchPathsContainer = try matchPathsWrappedContainer.decodeIfPresent([EC2ClientTypes.AccessScopePath].self, forKey: .member)
                var matchPathsBuffer:[EC2ClientTypes.AccessScopePath]? = nil
                if let matchPathsContainer = matchPathsContainer {
                    matchPathsBuffer = [EC2ClientTypes.AccessScopePath]()
                    for structureContainer0 in matchPathsContainer {
                        matchPathsBuffer?.append(structureContainer0)
                    }
                }
                matchPaths = matchPathsBuffer
            } else {
                matchPaths = []
            }
        } else {
            matchPaths = nil
        }
        if containerValues.contains(.excludePaths) {
            struct KeyVal0{struct item{}}
            let excludePathsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .excludePaths)
            if let excludePathsWrappedContainer = excludePathsWrappedContainer {
                let excludePathsContainer = try excludePathsWrappedContainer.decodeIfPresent([EC2ClientTypes.AccessScopePath].self, forKey: .member)
                var excludePathsBuffer:[EC2ClientTypes.AccessScopePath]? = nil
                if let excludePathsContainer = excludePathsContainer {
                    excludePathsBuffer = [EC2ClientTypes.AccessScopePath]()
                    for structureContainer0 in excludePathsContainer {
                        excludePathsBuffer?.append(structureContainer0)
                    }
                }
                excludePaths = excludePathsBuffer
            } else {
                excludePaths = []
            }
        } else {
            excludePaths = nil
        }
    }
}
