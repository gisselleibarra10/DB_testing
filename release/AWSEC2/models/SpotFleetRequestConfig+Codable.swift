// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.SpotFleetRequestConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityStatus = "activityStatus"
        case createTime = "createTime"
        case spotFleetRequestConfig = "spotFleetRequestConfig"
        case spotFleetRequestId = "spotFleetRequestId"
        case spotFleetRequestState = "spotFleetRequestState"
        case tags = "tagSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let activityStatus = activityStatus {
            try container.encode(activityStatus, forKey: ClientRuntime.Key("ActivityStatus"))
        }
        if let createTime = createTime {
            try container.encode(ClientRuntime.TimestampWrapper(createTime, format: .dateTime), forKey: ClientRuntime.Key("CreateTime"))
        }
        if let spotFleetRequestConfig = spotFleetRequestConfig {
            try container.encode(spotFleetRequestConfig, forKey: ClientRuntime.Key("SpotFleetRequestConfig"))
        }
        if let spotFleetRequestId = spotFleetRequestId {
            try container.encode(spotFleetRequestId, forKey: ClientRuntime.Key("SpotFleetRequestId"))
        }
        if let spotFleetRequestState = spotFleetRequestState {
            try container.encode(spotFleetRequestState, forKey: ClientRuntime.Key("SpotFleetRequestState"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityStatusDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.ActivityStatus.self, forKey: .activityStatus)
        activityStatus = activityStatusDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createTime)
        var createTimeBuffer:ClientRuntime.Date? = nil
        if let createTimeDecoded = createTimeDecoded {
            createTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createTimeDecoded, format: .dateTime)
        }
        createTime = createTimeBuffer
        let spotFleetRequestConfigDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.SpotFleetRequestConfigData.self, forKey: .spotFleetRequestConfig)
        spotFleetRequestConfig = spotFleetRequestConfigDecoded
        let spotFleetRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spotFleetRequestId)
        spotFleetRequestId = spotFleetRequestIdDecoded
        let spotFleetRequestStateDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.BatchState.self, forKey: .spotFleetRequestState)
        spotFleetRequestState = spotFleetRequestStateDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
