// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ProvisionByoipCidrInputBody: Swift.Equatable {
    let cidr: Swift.String?
    let cidrAuthorizationContext: Ec2ClientTypes.CidrAuthorizationContext?
    let publiclyAdvertisable: Swift.Bool?
    let description: Swift.String?
    let dryRun: Swift.Bool?
    let poolTagSpecifications: [Ec2ClientTypes.TagSpecification]?
    let multiRegion: Swift.Bool?
}

extension ProvisionByoipCidrInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidr = "Cidr"
        case cidrAuthorizationContext = "CidrAuthorizationContext"
        case description = "Description"
        case dryRun = "DryRun"
        case multiRegion = "MultiRegion"
        case poolTagSpecifications = "PoolTagSpecification"
        case publiclyAdvertisable = "PubliclyAdvertisable"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidr)
        cidr = cidrDecoded
        let cidrAuthorizationContextDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.CidrAuthorizationContext.self, forKey: .cidrAuthorizationContext)
        cidrAuthorizationContext = cidrAuthorizationContextDecoded
        let publiclyAdvertisableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAdvertisable)
        publiclyAdvertisable = publiclyAdvertisableDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.poolTagSpecifications) {
            struct KeyVal0{struct item{}}
            let poolTagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .poolTagSpecifications)
            if let poolTagSpecificationsWrappedContainer = poolTagSpecificationsWrappedContainer {
                let poolTagSpecificationsContainer = try poolTagSpecificationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TagSpecification].self, forKey: .member)
                var poolTagSpecificationsBuffer:[Ec2ClientTypes.TagSpecification]? = nil
                if let poolTagSpecificationsContainer = poolTagSpecificationsContainer {
                    poolTagSpecificationsBuffer = [Ec2ClientTypes.TagSpecification]()
                    for structureContainer0 in poolTagSpecificationsContainer {
                        poolTagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                poolTagSpecifications = poolTagSpecificationsBuffer
            } else {
                poolTagSpecifications = []
            }
        } else {
            poolTagSpecifications = nil
        }
        let multiRegionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .multiRegion)
        multiRegion = multiRegionDecoded
    }
}
