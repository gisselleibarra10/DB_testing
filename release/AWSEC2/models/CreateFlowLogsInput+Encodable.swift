// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateFlowLogsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: ClientRuntime.Key("ClientToken"))
        }
        if let deliverCrossAccountRole = deliverCrossAccountRole {
            try container.encode(deliverCrossAccountRole, forKey: ClientRuntime.Key("DeliverCrossAccountRole"))
        }
        if let deliverLogsPermissionArn = deliverLogsPermissionArn {
            try container.encode(deliverLogsPermissionArn, forKey: ClientRuntime.Key("DeliverLogsPermissionArn"))
        }
        if let destinationOptions = destinationOptions {
            try container.encode(destinationOptions, forKey: ClientRuntime.Key("DestinationOptions"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let logDestination = logDestination {
            try container.encode(logDestination, forKey: ClientRuntime.Key("LogDestination"))
        }
        if let logDestinationType = logDestinationType {
            try container.encode(logDestinationType, forKey: ClientRuntime.Key("LogDestinationType"))
        }
        if let logFormat = logFormat {
            try container.encode(logFormat, forKey: ClientRuntime.Key("LogFormat"))
        }
        if let logGroupName = logGroupName {
            try container.encode(logGroupName, forKey: ClientRuntime.Key("LogGroupName"))
        }
        if let maxAggregationInterval = maxAggregationInterval {
            try container.encode(maxAggregationInterval, forKey: ClientRuntime.Key("MaxAggregationInterval"))
        }
        if let resourceIds = resourceIds {
            if !resourceIds.isEmpty {
                for (index0, flowlogresourceid0) in resourceIds.enumerated() {
                    var resourceIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceId.\(index0.advanced(by: 1))"))
                    try resourceIdsContainer0.encode(flowlogresourceid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var resourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceId"))
                try resourceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagSpecificationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification"))
                try tagSpecificationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let trafficType = trafficType {
            try container.encode(trafficType, forKey: ClientRuntime.Key("TrafficType"))
        }
        try container.encode("CreateFlowLogs", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
