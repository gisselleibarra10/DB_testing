// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.SecurityGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "groupDescription"
        case groupId = "groupId"
        case groupName = "groupName"
        case ipPermissions = "ipPermissions"
        case ipPermissionsEgress = "ipPermissionsEgress"
        case ownerId = "ownerId"
        case tags = "tagSet"
        case vpcId = "vpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("GroupDescription"))
        }
        if let groupId = groupId {
            try container.encode(groupId, forKey: ClientRuntime.Key("GroupId"))
        }
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let ipPermissions = ipPermissions {
            if !ipPermissions.isEmpty {
                for (index0, ippermission0) in ipPermissions.enumerated() {
                    var ipPermissionsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IpPermissions.\(index0.advanced(by: 1))"))
                    try ipPermissionsContainer0.encode(ippermission0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var ipPermissionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IpPermissions"))
                try ipPermissionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ipPermissionsEgress = ipPermissionsEgress {
            if !ipPermissionsEgress.isEmpty {
                for (index0, ippermission0) in ipPermissionsEgress.enumerated() {
                    var ipPermissionsEgressContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IpPermissionsEgress.\(index0.advanced(by: 1))"))
                    try ipPermissionsEgressContainer0.encode(ippermission0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var ipPermissionsEgressContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IpPermissionsEgress"))
                try ipPermissionsEgressContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: ClientRuntime.Key("OwnerId"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        if containerValues.contains(.ipPermissions) {
            struct KeyVal0{struct item{}}
            let ipPermissionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .ipPermissions)
            if let ipPermissionsWrappedContainer = ipPermissionsWrappedContainer {
                let ipPermissionsContainer = try ipPermissionsWrappedContainer.decodeIfPresent([EC2ClientTypes.IpPermission].self, forKey: .member)
                var ipPermissionsBuffer:[EC2ClientTypes.IpPermission]? = nil
                if let ipPermissionsContainer = ipPermissionsContainer {
                    ipPermissionsBuffer = [EC2ClientTypes.IpPermission]()
                    for structureContainer0 in ipPermissionsContainer {
                        ipPermissionsBuffer?.append(structureContainer0)
                    }
                }
                ipPermissions = ipPermissionsBuffer
            } else {
                ipPermissions = []
            }
        } else {
            ipPermissions = nil
        }
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        if containerValues.contains(.ipPermissionsEgress) {
            struct KeyVal0{struct item{}}
            let ipPermissionsEgressWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .ipPermissionsEgress)
            if let ipPermissionsEgressWrappedContainer = ipPermissionsEgressWrappedContainer {
                let ipPermissionsEgressContainer = try ipPermissionsEgressWrappedContainer.decodeIfPresent([EC2ClientTypes.IpPermission].self, forKey: .member)
                var ipPermissionsEgressBuffer:[EC2ClientTypes.IpPermission]? = nil
                if let ipPermissionsEgressContainer = ipPermissionsEgressContainer {
                    ipPermissionsEgressBuffer = [EC2ClientTypes.IpPermission]()
                    for structureContainer0 in ipPermissionsEgressContainer {
                        ipPermissionsEgressBuffer?.append(structureContainer0)
                    }
                }
                ipPermissionsEgress = ipPermissionsEgressBuffer
            } else {
                ipPermissionsEgress = []
            }
        } else {
            ipPermissionsEgress = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
    }
}
