// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateVpcEndpointInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: ClientRuntime.Key("ClientToken"))
        }
        if let dnsOptions = dnsOptions {
            try container.encode(dnsOptions, forKey: ClientRuntime.Key("DnsOptions"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let policyDocument = policyDocument {
            try container.encode(policyDocument, forKey: ClientRuntime.Key("PolicyDocument"))
        }
        if let privateDnsEnabled = privateDnsEnabled {
            try container.encode(privateDnsEnabled, forKey: ClientRuntime.Key("PrivateDnsEnabled"))
        }
        if let routeTableIds = routeTableIds {
            if !routeTableIds.isEmpty {
                for (index0, routetableid0) in routeTableIds.enumerated() {
                    var routeTableIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RouteTableId.\(index0.advanced(by: 1))"))
                    try routeTableIdsContainer0.encode(routetableid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var routeTableIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RouteTableId"))
                try routeTableIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let securityGroupIds = securityGroupIds {
            if !securityGroupIds.isEmpty {
                for (index0, securitygroupid0) in securityGroupIds.enumerated() {
                    var securityGroupIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroupId.\(index0.advanced(by: 1))"))
                    try securityGroupIdsContainer0.encode(securitygroupid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var securityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroupId"))
                try securityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let serviceName = serviceName {
            try container.encode(serviceName, forKey: ClientRuntime.Key("ServiceName"))
        }
        if let subnetIds = subnetIds {
            if !subnetIds.isEmpty {
                for (index0, subnetid0) in subnetIds.enumerated() {
                    var subnetIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetId.\(index0.advanced(by: 1))"))
                    try subnetIdsContainer0.encode(subnetid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var subnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetId"))
                try subnetIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagSpecificationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification"))
                try tagSpecificationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcEndpointType = vpcEndpointType {
            try container.encode(vpcEndpointType, forKey: ClientRuntime.Key("VpcEndpointType"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
        try container.encode("CreateVpcEndpoint", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
