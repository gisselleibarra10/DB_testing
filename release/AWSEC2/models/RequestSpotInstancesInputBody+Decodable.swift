// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RequestSpotInstancesInputBody: Swift.Equatable {
    let availabilityZoneGroup: Swift.String?
    let blockDurationMinutes: Swift.Int?
    let clientToken: Swift.String?
    let dryRun: Swift.Bool?
    let instanceCount: Swift.Int?
    let launchGroup: Swift.String?
    let launchSpecification: EC2ClientTypes.RequestSpotLaunchSpecification?
    let spotPrice: Swift.String?
    let type: EC2ClientTypes.SpotInstanceType?
    let validFrom: ClientRuntime.Date?
    let validUntil: ClientRuntime.Date?
    let tagSpecifications: [EC2ClientTypes.TagSpecification]?
    let instanceInterruptionBehavior: EC2ClientTypes.InstanceInterruptionBehavior?
}

extension RequestSpotInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZoneGroup = "availabilityZoneGroup"
        case blockDurationMinutes = "blockDurationMinutes"
        case clientToken = "clientToken"
        case dryRun = "dryRun"
        case instanceCount = "instanceCount"
        case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
        case launchGroup = "launchGroup"
        case launchSpecification = "LaunchSpecification"
        case spotPrice = "spotPrice"
        case tagSpecifications = "TagSpecification"
        case type = "type"
        case validFrom = "validFrom"
        case validUntil = "validUntil"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZoneGroup)
        availabilityZoneGroup = availabilityZoneGroupDecoded
        let blockDurationMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blockDurationMinutes)
        blockDurationMinutes = blockDurationMinutesDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let launchGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchGroup)
        launchGroup = launchGroupDecoded
        let launchSpecificationDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.RequestSpotLaunchSpecification.self, forKey: .launchSpecification)
        launchSpecification = launchSpecificationDecoded
        let spotPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spotPrice)
        spotPrice = spotPriceDecoded
        let typeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.SpotInstanceType.self, forKey: .type)
        type = typeDecoded
        let validFromDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .validFrom)
        validFrom = validFromDecoded
        let validUntilDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .validUntil)
        validUntil = validUntilDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[EC2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [EC2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let instanceInterruptionBehaviorDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.InstanceInterruptionBehavior.self, forKey: .instanceInterruptionBehavior)
        instanceInterruptionBehavior = instanceInterruptionBehaviorDecoded
    }
}
