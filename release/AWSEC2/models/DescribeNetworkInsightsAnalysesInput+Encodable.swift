// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DescribeNetworkInsightsAnalysesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let analysisEndTime = analysisEndTime {
            try container.encodeTimestamp(analysisEndTime, format: .dateTime, forKey: ClientRuntime.Key("AnalysisEndTime"))
        }
        if let analysisStartTime = analysisStartTime {
            try container.encodeTimestamp(analysisStartTime, format: .dateTime, forKey: ClientRuntime.Key("AnalysisStartTime"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                for (index0, filter0) in filters.enumerated() {
                    var filtersContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                    try filtersContainer0.encode(filter0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filter"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let networkInsightsAnalysisIds = networkInsightsAnalysisIds {
            if !networkInsightsAnalysisIds.isEmpty {
                for (index0, networkinsightsanalysisid0) in networkInsightsAnalysisIds.enumerated() {
                    var networkInsightsAnalysisIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NetworkInsightsAnalysisId.\(index0.advanced(by: 1))"))
                    try networkInsightsAnalysisIdsContainer0.encode(networkinsightsanalysisid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var networkInsightsAnalysisIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NetworkInsightsAnalysisId"))
                try networkInsightsAnalysisIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let networkInsightsPathId = networkInsightsPathId {
            try container.encode(networkInsightsPathId, forKey: ClientRuntime.Key("NetworkInsightsPathId"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeNetworkInsightsAnalyses", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
