// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyManagedPrefixListInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let prefixListId: Swift.String?
    let currentVersion: Swift.Int?
    let prefixListName: Swift.String?
    let addEntries: [EC2ClientTypes.AddPrefixListEntry]?
    let removeEntries: [EC2ClientTypes.RemovePrefixListEntry]?
    let maxEntries: Swift.Int?
}

extension ModifyManagedPrefixListInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addEntries = "AddEntry"
        case currentVersion = "CurrentVersion"
        case dryRun = "DryRun"
        case maxEntries = "MaxEntries"
        case prefixListId = "PrefixListId"
        case prefixListName = "PrefixListName"
        case removeEntries = "RemoveEntry"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let prefixListIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefixListId)
        prefixListId = prefixListIdDecoded
        let currentVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .currentVersion)
        currentVersion = currentVersionDecoded
        let prefixListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefixListName)
        prefixListName = prefixListNameDecoded
        if containerValues.contains(.addEntries) {
            struct KeyVal0{struct member{}}
            let addEntriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .addEntries)
            if let addEntriesWrappedContainer = addEntriesWrappedContainer {
                let addEntriesContainer = try addEntriesWrappedContainer.decodeIfPresent([EC2ClientTypes.AddPrefixListEntry].self, forKey: .member)
                var addEntriesBuffer:[EC2ClientTypes.AddPrefixListEntry]? = nil
                if let addEntriesContainer = addEntriesContainer {
                    addEntriesBuffer = [EC2ClientTypes.AddPrefixListEntry]()
                    for structureContainer0 in addEntriesContainer {
                        addEntriesBuffer?.append(structureContainer0)
                    }
                }
                addEntries = addEntriesBuffer
            } else {
                addEntries = []
            }
        } else {
            addEntries = nil
        }
        if containerValues.contains(.removeEntries) {
            struct KeyVal0{struct member{}}
            let removeEntriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .removeEntries)
            if let removeEntriesWrappedContainer = removeEntriesWrappedContainer {
                let removeEntriesContainer = try removeEntriesWrappedContainer.decodeIfPresent([EC2ClientTypes.RemovePrefixListEntry].self, forKey: .member)
                var removeEntriesBuffer:[EC2ClientTypes.RemovePrefixListEntry]? = nil
                if let removeEntriesContainer = removeEntriesContainer {
                    removeEntriesBuffer = [EC2ClientTypes.RemovePrefixListEntry]()
                    for structureContainer0 in removeEntriesContainer {
                        removeEntriesBuffer?.append(structureContainer0)
                    }
                }
                removeEntries = removeEntriesBuffer
            } else {
                removeEntries = []
            }
        } else {
            removeEntries = nil
        }
        let maxEntriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxEntries)
        maxEntries = maxEntriesDecoded
    }
}
