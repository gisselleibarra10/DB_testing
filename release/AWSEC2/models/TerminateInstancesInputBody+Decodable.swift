// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TerminateInstancesInputBody: Swift.Equatable {
    let instanceIds: [Swift.String]?
    let dryRun: Swift.Bool?
}

extension TerminateInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "dryRun"
        case instanceIds = "InstanceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.instanceIds) {
            struct KeyVal0{struct InstanceId{}}
            let instanceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.InstanceId>.CodingKeys.self, forKey: .instanceIds)
            if let instanceIdsWrappedContainer = instanceIdsWrappedContainer {
                let instanceIdsContainer = try instanceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var instanceIdsBuffer:[Swift.String]? = nil
                if let instanceIdsContainer = instanceIdsContainer {
                    instanceIdsBuffer = [Swift.String]()
                    for stringContainer0 in instanceIdsContainer {
                        instanceIdsBuffer?.append(stringContainer0)
                    }
                }
                instanceIds = instanceIdsBuffer
            } else {
                instanceIds = []
            }
        } else {
            instanceIds = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
