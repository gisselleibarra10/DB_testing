// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// Describes a service configuration for a VPC endpoint service.
    public struct ServiceConfiguration: Swift.Equatable {
        /// Indicates whether requests from other Amazon Web Services accounts to create an endpoint to the service must first be accepted.
        public var acceptanceRequired: Swift.Bool?
        /// The Availability Zones in which the service is available.
        public var availabilityZones: [Swift.String]?
        /// The DNS names for the service.
        public var baseEndpointDnsNames: [Swift.String]?
        /// The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.
        public var gatewayLoadBalancerArns: [Swift.String]?
        /// Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.
        public var managesVpcEndpoints: Swift.Bool?
        /// The Amazon Resource Names (ARNs) of the Network Load Balancers for the service.
        public var networkLoadBalancerArns: [Swift.String]?
        /// The payer responsibility.
        public var payerResponsibility: Ec2ClientTypes.PayerResponsibility?
        /// The private DNS name for the service.
        public var privateDnsName: Swift.String?
        /// Information about the endpoint service private DNS name configuration.
        public var privateDnsNameConfiguration: Ec2ClientTypes.PrivateDnsNameConfiguration?
        /// The ID of the service.
        public var serviceId: Swift.String?
        /// The name of the service.
        public var serviceName: Swift.String?
        /// The service state.
        public var serviceState: Ec2ClientTypes.ServiceState?
        /// The type of service.
        public var serviceType: [Ec2ClientTypes.ServiceTypeDetail]?
        /// The supported IP address types.
        public var supportedIpAddressTypes: [Ec2ClientTypes.ServiceConnectivityType]?
        /// Any tags assigned to the service.
        public var tags: [Ec2ClientTypes.Tag]?

        public init (
            acceptanceRequired: Swift.Bool? = nil,
            availabilityZones: [Swift.String]? = nil,
            baseEndpointDnsNames: [Swift.String]? = nil,
            gatewayLoadBalancerArns: [Swift.String]? = nil,
            managesVpcEndpoints: Swift.Bool? = nil,
            networkLoadBalancerArns: [Swift.String]? = nil,
            payerResponsibility: Ec2ClientTypes.PayerResponsibility? = nil,
            privateDnsName: Swift.String? = nil,
            privateDnsNameConfiguration: Ec2ClientTypes.PrivateDnsNameConfiguration? = nil,
            serviceId: Swift.String? = nil,
            serviceName: Swift.String? = nil,
            serviceState: Ec2ClientTypes.ServiceState? = nil,
            serviceType: [Ec2ClientTypes.ServiceTypeDetail]? = nil,
            supportedIpAddressTypes: [Ec2ClientTypes.ServiceConnectivityType]? = nil,
            tags: [Ec2ClientTypes.Tag]? = nil
        )
        {
            self.acceptanceRequired = acceptanceRequired
            self.availabilityZones = availabilityZones
            self.baseEndpointDnsNames = baseEndpointDnsNames
            self.gatewayLoadBalancerArns = gatewayLoadBalancerArns
            self.managesVpcEndpoints = managesVpcEndpoints
            self.networkLoadBalancerArns = networkLoadBalancerArns
            self.payerResponsibility = payerResponsibility
            self.privateDnsName = privateDnsName
            self.privateDnsNameConfiguration = privateDnsNameConfiguration
            self.serviceId = serviceId
            self.serviceName = serviceName
            self.serviceState = serviceState
            self.serviceType = serviceType
            self.supportedIpAddressTypes = supportedIpAddressTypes
            self.tags = tags
        }
    }

}
