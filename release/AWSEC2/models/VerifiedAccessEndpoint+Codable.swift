// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.VerifiedAccessEndpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationDomain = "applicationDomain"
        case attachmentType = "attachmentType"
        case creationTime = "creationTime"
        case deletionTime = "deletionTime"
        case description = "description"
        case deviceValidationDomain = "deviceValidationDomain"
        case domainCertificateArn = "domainCertificateArn"
        case endpointDomain = "endpointDomain"
        case endpointType = "endpointType"
        case lastUpdatedTime = "lastUpdatedTime"
        case loadBalancerOptions = "loadBalancerOptions"
        case networkInterfaceOptions = "networkInterfaceOptions"
        case securityGroupIds = "securityGroupIdSet"
        case status = "status"
        case tags = "tagSet"
        case verifiedAccessEndpointId = "verifiedAccessEndpointId"
        case verifiedAccessGroupId = "verifiedAccessGroupId"
        case verifiedAccessInstanceId = "verifiedAccessInstanceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationDomain = applicationDomain {
            try container.encode(applicationDomain, forKey: ClientRuntime.Key("ApplicationDomain"))
        }
        if let attachmentType = attachmentType {
            try container.encode(attachmentType, forKey: ClientRuntime.Key("AttachmentType"))
        }
        if let creationTime = creationTime {
            try container.encode(creationTime, forKey: ClientRuntime.Key("CreationTime"))
        }
        if let deletionTime = deletionTime {
            try container.encode(deletionTime, forKey: ClientRuntime.Key("DeletionTime"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let deviceValidationDomain = deviceValidationDomain {
            try container.encode(deviceValidationDomain, forKey: ClientRuntime.Key("DeviceValidationDomain"))
        }
        if let domainCertificateArn = domainCertificateArn {
            try container.encode(domainCertificateArn, forKey: ClientRuntime.Key("DomainCertificateArn"))
        }
        if let endpointDomain = endpointDomain {
            try container.encode(endpointDomain, forKey: ClientRuntime.Key("EndpointDomain"))
        }
        if let endpointType = endpointType {
            try container.encode(endpointType, forKey: ClientRuntime.Key("EndpointType"))
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try container.encode(lastUpdatedTime, forKey: ClientRuntime.Key("LastUpdatedTime"))
        }
        if let loadBalancerOptions = loadBalancerOptions {
            try container.encode(loadBalancerOptions, forKey: ClientRuntime.Key("LoadBalancerOptions"))
        }
        if let networkInterfaceOptions = networkInterfaceOptions {
            try container.encode(networkInterfaceOptions, forKey: ClientRuntime.Key("NetworkInterfaceOptions"))
        }
        if let securityGroupIds = securityGroupIds {
            if !securityGroupIds.isEmpty {
                for (index0, securitygroupid0) in securityGroupIds.enumerated() {
                    var securityGroupIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroupIdSet.\(index0.advanced(by: 1))"))
                    try securityGroupIdsContainer0.encode(securitygroupid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var securityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroupIdSet"))
                try securityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let verifiedAccessEndpointId = verifiedAccessEndpointId {
            try container.encode(verifiedAccessEndpointId, forKey: ClientRuntime.Key("VerifiedAccessEndpointId"))
        }
        if let verifiedAccessGroupId = verifiedAccessGroupId {
            try container.encode(verifiedAccessGroupId, forKey: ClientRuntime.Key("VerifiedAccessGroupId"))
        }
        if let verifiedAccessInstanceId = verifiedAccessInstanceId {
            try container.encode(verifiedAccessInstanceId, forKey: ClientRuntime.Key("VerifiedAccessInstanceId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let verifiedAccessInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verifiedAccessInstanceId)
        verifiedAccessInstanceId = verifiedAccessInstanceIdDecoded
        let verifiedAccessGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verifiedAccessGroupId)
        verifiedAccessGroupId = verifiedAccessGroupIdDecoded
        let verifiedAccessEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verifiedAccessEndpointId)
        verifiedAccessEndpointId = verifiedAccessEndpointIdDecoded
        let applicationDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationDomain)
        applicationDomain = applicationDomainDecoded
        let endpointTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.VerifiedAccessEndpointType.self, forKey: .endpointType)
        endpointType = endpointTypeDecoded
        let attachmentTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.VerifiedAccessEndpointAttachmentType.self, forKey: .attachmentType)
        attachmentType = attachmentTypeDecoded
        let domainCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainCertificateArn)
        domainCertificateArn = domainCertificateArnDecoded
        let endpointDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointDomain)
        endpointDomain = endpointDomainDecoded
        let deviceValidationDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceValidationDomain)
        deviceValidationDomain = deviceValidationDomainDecoded
        if containerValues.contains(.securityGroupIds) {
            struct KeyVal0{struct item{}}
            let securityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .securityGroupIds)
            if let securityGroupIdsWrappedContainer = securityGroupIdsWrappedContainer {
                let securityGroupIdsContainer = try securityGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var securityGroupIdsBuffer:[Swift.String]? = nil
                if let securityGroupIdsContainer = securityGroupIdsContainer {
                    securityGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in securityGroupIdsContainer {
                        securityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                securityGroupIds = securityGroupIdsBuffer
            } else {
                securityGroupIds = []
            }
        } else {
            securityGroupIds = nil
        }
        let loadBalancerOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.VerifiedAccessEndpointLoadBalancerOptions.self, forKey: .loadBalancerOptions)
        loadBalancerOptions = loadBalancerOptionsDecoded
        let networkInterfaceOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.VerifiedAccessEndpointEniOptions.self, forKey: .networkInterfaceOptions)
        networkInterfaceOptions = networkInterfaceOptionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.VerifiedAccessEndpointStatus.self, forKey: .status)
        status = statusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let deletionTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deletionTime)
        deletionTime = deletionTimeDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
