// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLocalGatewayRouteTableInputBody: Swift.Equatable {
    let localGatewayId: Swift.String?
    let mode: Ec2ClientTypes.LocalGatewayRouteTableMode?
    let tagSpecifications: [Ec2ClientTypes.TagSpecification]?
    let dryRun: Swift.Bool?
}

extension CreateLocalGatewayRouteTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case localGatewayId = "LocalGatewayId"
        case mode = "Mode"
        case tagSpecifications = "TagSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let localGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localGatewayId)
        localGatewayId = localGatewayIdDecoded
        let modeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.LocalGatewayRouteTableMode.self, forKey: .mode)
        mode = modeDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[Ec2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [Ec2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
