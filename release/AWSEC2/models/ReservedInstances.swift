// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes {
    /// Describes a Reserved Instance.
    public struct ReservedInstances: Swift.Equatable {
        /// The Availability Zone in which the Reserved Instance can be used.
        public var availabilityZone: Swift.String?
        /// The currency of the Reserved Instance. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is USD.
        public var currencyCode: Ec2ClientTypes.CurrencyCodeValues?
        /// The duration of the Reserved Instance, in seconds.
        public var duration: Swift.Int?
        /// The time when the Reserved Instance expires.
        public var end: ClientRuntime.Date?
        /// The purchase price of the Reserved Instance.
        public var fixedPrice: Swift.Float?
        /// The number of reservations purchased.
        public var instanceCount: Swift.Int?
        /// The tenancy of the instance.
        public var instanceTenancy: Ec2ClientTypes.Tenancy?
        /// The instance type on which the Reserved Instance can be used.
        public var instanceType: Ec2ClientTypes.InstanceType?
        /// The offering class of the Reserved Instance.
        public var offeringClass: Ec2ClientTypes.OfferingClassType?
        /// The Reserved Instance offering type.
        public var offeringType: Ec2ClientTypes.OfferingTypeValues?
        /// The Reserved Instance product platform description.
        public var productDescription: Ec2ClientTypes.RIProductDescription?
        /// The recurring charge tag assigned to the resource.
        public var recurringCharges: [Ec2ClientTypes.RecurringCharge]?
        /// The ID of the Reserved Instance.
        public var reservedInstancesId: Swift.String?
        /// The scope of the Reserved Instance.
        public var scope: Ec2ClientTypes.Scope?
        /// The date and time the Reserved Instance started.
        public var start: ClientRuntime.Date?
        /// The state of the Reserved Instance purchase.
        public var state: Ec2ClientTypes.ReservedInstanceState?
        /// Any tags assigned to the resource.
        public var tags: [Ec2ClientTypes.Tag]?
        /// The usage price of the Reserved Instance, per hour.
        public var usagePrice: Swift.Float?

        public init (
            availabilityZone: Swift.String? = nil,
            currencyCode: Ec2ClientTypes.CurrencyCodeValues? = nil,
            duration: Swift.Int? = nil,
            end: ClientRuntime.Date? = nil,
            fixedPrice: Swift.Float? = nil,
            instanceCount: Swift.Int? = nil,
            instanceTenancy: Ec2ClientTypes.Tenancy? = nil,
            instanceType: Ec2ClientTypes.InstanceType? = nil,
            offeringClass: Ec2ClientTypes.OfferingClassType? = nil,
            offeringType: Ec2ClientTypes.OfferingTypeValues? = nil,
            productDescription: Ec2ClientTypes.RIProductDescription? = nil,
            recurringCharges: [Ec2ClientTypes.RecurringCharge]? = nil,
            reservedInstancesId: Swift.String? = nil,
            scope: Ec2ClientTypes.Scope? = nil,
            start: ClientRuntime.Date? = nil,
            state: Ec2ClientTypes.ReservedInstanceState? = nil,
            tags: [Ec2ClientTypes.Tag]? = nil,
            usagePrice: Swift.Float? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.currencyCode = currencyCode
            self.duration = duration
            self.end = end
            self.fixedPrice = fixedPrice
            self.instanceCount = instanceCount
            self.instanceTenancy = instanceTenancy
            self.instanceType = instanceType
            self.offeringClass = offeringClass
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservedInstancesId = reservedInstancesId
            self.scope = scope
            self.start = start
            self.state = state
            self.tags = tags
            self.usagePrice = usagePrice
        }
    }

}
