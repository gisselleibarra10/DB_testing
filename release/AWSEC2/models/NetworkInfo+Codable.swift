// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.NetworkInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultNetworkCardIndex = "defaultNetworkCardIndex"
        case efaInfo = "efaInfo"
        case efaSupported = "efaSupported"
        case enaSrdSupported = "enaSrdSupported"
        case enaSupport = "enaSupport"
        case encryptionInTransitSupported = "encryptionInTransitSupported"
        case ipv4AddressesPerInterface = "ipv4AddressesPerInterface"
        case ipv6AddressesPerInterface = "ipv6AddressesPerInterface"
        case ipv6Supported = "ipv6Supported"
        case maximumNetworkCards = "maximumNetworkCards"
        case maximumNetworkInterfaces = "maximumNetworkInterfaces"
        case networkCards = "networkCards"
        case networkPerformance = "networkPerformance"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultNetworkCardIndex = defaultNetworkCardIndex {
            try container.encode(defaultNetworkCardIndex, forKey: ClientRuntime.Key("DefaultNetworkCardIndex"))
        }
        if let efaInfo = efaInfo {
            try container.encode(efaInfo, forKey: ClientRuntime.Key("EfaInfo"))
        }
        if let efaSupported = efaSupported {
            try container.encode(efaSupported, forKey: ClientRuntime.Key("EfaSupported"))
        }
        if let enaSrdSupported = enaSrdSupported {
            try container.encode(enaSrdSupported, forKey: ClientRuntime.Key("EnaSrdSupported"))
        }
        if let enaSupport = enaSupport {
            try container.encode(enaSupport, forKey: ClientRuntime.Key("EnaSupport"))
        }
        if let encryptionInTransitSupported = encryptionInTransitSupported {
            try container.encode(encryptionInTransitSupported, forKey: ClientRuntime.Key("EncryptionInTransitSupported"))
        }
        if let ipv4AddressesPerInterface = ipv4AddressesPerInterface {
            try container.encode(ipv4AddressesPerInterface, forKey: ClientRuntime.Key("Ipv4AddressesPerInterface"))
        }
        if let ipv6AddressesPerInterface = ipv6AddressesPerInterface {
            try container.encode(ipv6AddressesPerInterface, forKey: ClientRuntime.Key("Ipv6AddressesPerInterface"))
        }
        if let ipv6Supported = ipv6Supported {
            try container.encode(ipv6Supported, forKey: ClientRuntime.Key("Ipv6Supported"))
        }
        if let maximumNetworkCards = maximumNetworkCards {
            try container.encode(maximumNetworkCards, forKey: ClientRuntime.Key("MaximumNetworkCards"))
        }
        if let maximumNetworkInterfaces = maximumNetworkInterfaces {
            try container.encode(maximumNetworkInterfaces, forKey: ClientRuntime.Key("MaximumNetworkInterfaces"))
        }
        if let networkCards = networkCards {
            if !networkCards.isEmpty {
                for (index0, networkcardinfo0) in networkCards.enumerated() {
                    var networkCardsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NetworkCards.\(index0.advanced(by: 1))"))
                    try networkCardsContainer0.encode(networkcardinfo0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var networkCardsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NetworkCards"))
                try networkCardsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let networkPerformance = networkPerformance {
            try container.encode(networkPerformance, forKey: ClientRuntime.Key("NetworkPerformance"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkPerformanceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkPerformance)
        networkPerformance = networkPerformanceDecoded
        let maximumNetworkInterfacesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumNetworkInterfaces)
        maximumNetworkInterfaces = maximumNetworkInterfacesDecoded
        let maximumNetworkCardsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumNetworkCards)
        maximumNetworkCards = maximumNetworkCardsDecoded
        let defaultNetworkCardIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultNetworkCardIndex)
        defaultNetworkCardIndex = defaultNetworkCardIndexDecoded
        if containerValues.contains(.networkCards) {
            struct KeyVal0{struct item{}}
            let networkCardsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .networkCards)
            if let networkCardsWrappedContainer = networkCardsWrappedContainer {
                let networkCardsContainer = try networkCardsWrappedContainer.decodeIfPresent([EC2ClientTypes.NetworkCardInfo].self, forKey: .member)
                var networkCardsBuffer:[EC2ClientTypes.NetworkCardInfo]? = nil
                if let networkCardsContainer = networkCardsContainer {
                    networkCardsBuffer = [EC2ClientTypes.NetworkCardInfo]()
                    for structureContainer0 in networkCardsContainer {
                        networkCardsBuffer?.append(structureContainer0)
                    }
                }
                networkCards = networkCardsBuffer
            } else {
                networkCards = []
            }
        } else {
            networkCards = nil
        }
        let ipv4AddressesPerInterfaceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ipv4AddressesPerInterface)
        ipv4AddressesPerInterface = ipv4AddressesPerInterfaceDecoded
        let ipv6AddressesPerInterfaceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ipv6AddressesPerInterface)
        ipv6AddressesPerInterface = ipv6AddressesPerInterfaceDecoded
        let ipv6SupportedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ipv6Supported)
        ipv6Supported = ipv6SupportedDecoded
        let enaSupportDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.EnaSupport.self, forKey: .enaSupport)
        enaSupport = enaSupportDecoded
        let efaSupportedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .efaSupported)
        efaSupported = efaSupportedDecoded
        let efaInfoDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.EfaInfo.self, forKey: .efaInfo)
        efaInfo = efaInfoDecoded
        let encryptionInTransitSupportedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encryptionInTransitSupported)
        encryptionInTransitSupported = encryptionInTransitSupportedDecoded
        let enaSrdSupportedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enaSrdSupported)
        enaSrdSupported = enaSrdSupportedDecoded
    }
}
