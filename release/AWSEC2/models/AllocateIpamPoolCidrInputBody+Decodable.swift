// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AllocateIpamPoolCidrInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let ipamPoolId: Swift.String?
    let cidr: Swift.String?
    let netmaskLength: Swift.Int?
    let clientToken: Swift.String?
    let description: Swift.String?
    let previewNextCidr: Swift.Bool?
    let disallowedCidrs: [Swift.String]?
}

extension AllocateIpamPoolCidrInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidr = "Cidr"
        case clientToken = "ClientToken"
        case description = "Description"
        case disallowedCidrs = "DisallowedCidr"
        case dryRun = "DryRun"
        case ipamPoolId = "IpamPoolId"
        case netmaskLength = "NetmaskLength"
        case previewNextCidr = "PreviewNextCidr"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let ipamPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipamPoolId)
        ipamPoolId = ipamPoolIdDecoded
        let cidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidr)
        cidr = cidrDecoded
        let netmaskLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .netmaskLength)
        netmaskLength = netmaskLengthDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let previewNextCidrDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .previewNextCidr)
        previewNextCidr = previewNextCidrDecoded
        if containerValues.contains(.disallowedCidrs) {
            struct KeyVal0{struct item{}}
            let disallowedCidrsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .disallowedCidrs)
            if let disallowedCidrsWrappedContainer = disallowedCidrsWrappedContainer {
                let disallowedCidrsContainer = try disallowedCidrsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var disallowedCidrsBuffer:[Swift.String]? = nil
                if let disallowedCidrsContainer = disallowedCidrsContainer {
                    disallowedCidrsBuffer = [Swift.String]()
                    for stringContainer0 in disallowedCidrsContainer {
                        disallowedCidrsBuffer?.append(stringContainer0)
                    }
                }
                disallowedCidrs = disallowedCidrsBuffer
            } else {
                disallowedCidrs = []
            }
        } else {
            disallowedCidrs = nil
        }
    }
}
