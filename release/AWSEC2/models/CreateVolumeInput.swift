// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateVolumeInput: Swift.Equatable {
    /// The Availability Zone in which to create the volume.
    /// This member is required.
    public var availabilityZone: Swift.String?
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see [Ensure Idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    public var clientToken: Swift.String?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// Indicates whether the volume should be encrypted. The effect of setting the encryption state to true depends on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see [Encryption by default](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default) in the Amazon Elastic Compute Cloud User Guide. Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see [Supported instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances).
    public var encrypted: Swift.Bool?
    /// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type:
    ///
    /// * gp3: 3,000-16,000 IOPS
    ///
    /// * io1: 100-64,000 IOPS
    ///
    /// * io2: 100-64,000 IOPS
    ///
    ///
    /// io1 and io2 volumes support up to 64,000 IOPS only on [Instances built on the Nitro System](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). Other instance families support performance up to 32,000 IOPS. This parameter is required for io1 and io2 volumes. The default for gp3 volumes is 3,000 IOPS. This parameter is not supported for gp2, st1, sc1, or standard volumes.
    public var iops: Swift.Int?
    /// The identifier of the Key Management Service (KMS) KMS key to use for Amazon EBS encryption. If this parameter is not specified, your KMS key for Amazon EBS is used. If KmsKeyId is specified, the encrypted state must be true. You can specify the KMS key using any of the following:
    ///
    /// * Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.
    ///
    /// * Key alias. For example, alias/ExampleAlias.
    ///
    /// * Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.
    ///
    /// * Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
    ///
    ///
    /// Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails.
    public var kmsKeyId: Swift.String?
    /// Indicates whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach, you can attach the volume to up to 16 [Instances built on the Nitro System](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances) in the same Availability Zone. This parameter is supported with io1 and io2 volumes only. For more information, see [ Amazon EBS Multi-Attach](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html) in the Amazon Elastic Compute Cloud User Guide.
    public var multiAttachEnabled: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the Outpost.
    public var outpostArn: Swift.String?
    /// The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size. The following are the supported volumes sizes for each volume type:
    ///
    /// * gp2 and gp3: 1-16,384
    ///
    /// * io1 and io2: 4-16,384
    ///
    /// * st1 and sc1: 125-16,384
    ///
    /// * standard: 1-1,024
    public var size: Swift.Int?
    /// The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size.
    public var snapshotId: Swift.String?
    /// The tags to apply to the volume during creation.
    public var tagSpecifications: [Ec2ClientTypes.TagSpecification]?
    /// The throughput to provision for a volume, with a maximum of 1,000 MiB/s. This parameter is valid only for gp3 volumes. Valid Range: Minimum value of 125. Maximum value of 1000.
    public var throughput: Swift.Int?
    /// The volume type. This parameter can be one of the following values:
    ///
    /// * General Purpose SSD: gp2 | gp3
    ///
    /// * Provisioned IOPS SSD: io1 | io2
    ///
    /// * Throughput Optimized HDD: st1
    ///
    /// * Cold HDD: sc1
    ///
    /// * Magnetic: standard
    ///
    ///
    /// For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the Amazon Elastic Compute Cloud User Guide. Default: gp2
    public var volumeType: Ec2ClientTypes.VolumeType?

    public init (
        availabilityZone: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        dryRun: Swift.Bool? = nil,
        encrypted: Swift.Bool? = nil,
        iops: Swift.Int? = nil,
        kmsKeyId: Swift.String? = nil,
        multiAttachEnabled: Swift.Bool? = nil,
        outpostArn: Swift.String? = nil,
        size: Swift.Int? = nil,
        snapshotId: Swift.String? = nil,
        tagSpecifications: [Ec2ClientTypes.TagSpecification]? = nil,
        throughput: Swift.Int? = nil,
        volumeType: Ec2ClientTypes.VolumeType? = nil
    )
    {
        self.availabilityZone = availabilityZone
        self.clientToken = clientToken
        self.dryRun = dryRun
        self.encrypted = encrypted
        self.iops = iops
        self.kmsKeyId = kmsKeyId
        self.multiAttachEnabled = multiAttachEnabled
        self.outpostArn = outpostArn
        self.size = size
        self.snapshotId = snapshotId
        self.tagSpecifications = tagSpecifications
        self.throughput = throughput
        self.volumeType = volumeType
    }
}
