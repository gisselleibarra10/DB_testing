// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.PublicIpv4PoolRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressCount = "addressCount"
        case availableAddressCount = "availableAddressCount"
        case firstAddress = "firstAddress"
        case lastAddress = "lastAddress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let addressCount = addressCount {
            try container.encode(addressCount, forKey: ClientRuntime.Key("AddressCount"))
        }
        if let availableAddressCount = availableAddressCount {
            try container.encode(availableAddressCount, forKey: ClientRuntime.Key("AvailableAddressCount"))
        }
        if let firstAddress = firstAddress {
            try container.encode(firstAddress, forKey: ClientRuntime.Key("FirstAddress"))
        }
        if let lastAddress = lastAddress {
            try container.encode(lastAddress, forKey: ClientRuntime.Key("LastAddress"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firstAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firstAddress)
        firstAddress = firstAddressDecoded
        let lastAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAddress)
        lastAddress = lastAddressDecoded
        let addressCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .addressCount)
        addressCount = addressCountDecoded
        let availableAddressCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .availableAddressCount)
        availableAddressCount = availableAddressCountDecoded
    }
}
