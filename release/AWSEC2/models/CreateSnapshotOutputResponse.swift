// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Describes a snapshot.
public struct CreateSnapshotOutputResponse: Swift.Equatable {
    /// The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by [DescribeSnapshots].
    public var dataEncryptionKeyId: Swift.String?
    /// The description for the snapshot.
    public var description: Swift.String?
    /// Indicates whether the snapshot is encrypted.
    public var encrypted: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key that was used to protect the volume encryption key for the parent volume.
    public var kmsKeyId: Swift.String?
    /// The ARN of the Outpost on which the snapshot is stored. For more information, see [Amazon EBS local snapshots on Outposts](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html) in the Amazon Elastic Compute Cloud User Guide.
    public var outpostArn: Swift.String?
    /// The Amazon Web Services owner alias, from an Amazon-maintained list (amazon). This is not the user-configured Amazon Web Services account alias set using the IAM console.
    public var ownerAlias: Swift.String?
    /// The ID of the Amazon Web Services account that owns the EBS snapshot.
    public var ownerId: Swift.String?
    /// The progress of the snapshot, as a percentage.
    public var progress: Swift.String?
    /// Only for archived snapshots that are temporarily restored. Indicates the date and time when a temporarily restored snapshot will be automatically re-archived.
    public var restoreExpiryTime: ClientRuntime.Date?
    /// The ID of the snapshot. Each snapshot receives a unique identifier when it is created.
    public var snapshotId: Swift.String?
    /// The time stamp when the snapshot was initiated.
    public var startTime: ClientRuntime.Date?
    /// The snapshot state.
    public var state: Ec2ClientTypes.SnapshotState?
    /// Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper Key Management Service (KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by [DescribeSnapshots].
    public var stateMessage: Swift.String?
    /// The storage tier in which the snapshot is stored. standard indicates that the snapshot is stored in the standard snapshot storage tier and that it is ready for use. archive indicates that the snapshot is currently archived and that it must be restored before it can be used.
    public var storageTier: Ec2ClientTypes.StorageTier?
    /// Any tags assigned to the snapshot.
    public var tags: [Ec2ClientTypes.Tag]?
    /// The ID of the volume that was used to create the snapshot. Snapshots created by the [CopySnapshot] action have an arbitrary volume ID that should not be used for any purpose.
    public var volumeId: Swift.String?
    /// The size of the volume, in GiB.
    public var volumeSize: Swift.Int?

    public init (
        dataEncryptionKeyId: Swift.String? = nil,
        description: Swift.String? = nil,
        encrypted: Swift.Bool? = nil,
        kmsKeyId: Swift.String? = nil,
        outpostArn: Swift.String? = nil,
        ownerAlias: Swift.String? = nil,
        ownerId: Swift.String? = nil,
        progress: Swift.String? = nil,
        restoreExpiryTime: ClientRuntime.Date? = nil,
        snapshotId: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        state: Ec2ClientTypes.SnapshotState? = nil,
        stateMessage: Swift.String? = nil,
        storageTier: Ec2ClientTypes.StorageTier? = nil,
        tags: [Ec2ClientTypes.Tag]? = nil,
        volumeId: Swift.String? = nil,
        volumeSize: Swift.Int? = nil
    )
    {
        self.dataEncryptionKeyId = dataEncryptionKeyId
        self.description = description
        self.encrypted = encrypted
        self.kmsKeyId = kmsKeyId
        self.outpostArn = outpostArn
        self.ownerAlias = ownerAlias
        self.ownerId = ownerId
        self.progress = progress
        self.restoreExpiryTime = restoreExpiryTime
        self.snapshotId = snapshotId
        self.startTime = startTime
        self.state = state
        self.stateMessage = stateMessage
        self.storageTier = storageTier
        self.tags = tags
        self.volumeId = volumeId
        self.volumeSize = volumeSize
    }
}
