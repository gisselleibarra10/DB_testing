// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModifyImageAttributeInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attribute = attribute {
            try container.encode(attribute, forKey: ClientRuntime.Key("Attribute"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let imageId = imageId {
            try container.encode(imageId, forKey: ClientRuntime.Key("ImageId"))
        }
        if let launchPermission = launchPermission {
            try container.encode(launchPermission, forKey: ClientRuntime.Key("LaunchPermission"))
        }
        if let operationType = operationType {
            try container.encode(operationType, forKey: ClientRuntime.Key("OperationType"))
        }
        if let organizationArns = organizationArns {
            if !organizationArns.isEmpty {
                for (index0, string0) in organizationArns.enumerated() {
                    var organizationArnsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationArn.\(index0.advanced(by: 1))"))
                    try organizationArnsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let organizationalUnitArns = organizationalUnitArns {
            if !organizationalUnitArns.isEmpty {
                for (index0, string0) in organizationalUnitArns.enumerated() {
                    var organizationalUnitArnsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationalUnitArn.\(index0.advanced(by: 1))"))
                    try organizationalUnitArnsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let productCodes = productCodes {
            if !productCodes.isEmpty {
                for (index0, string0) in productCodes.enumerated() {
                    var productCodesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProductCode.\(index0.advanced(by: 1))"))
                    try productCodesContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let userGroups = userGroups {
            if !userGroups.isEmpty {
                for (index0, string0) in userGroups.enumerated() {
                    var userGroupsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserGroup.\(index0.advanced(by: 1))"))
                    try userGroupsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let userIds = userIds {
            if !userIds.isEmpty {
                for (index0, string0) in userIds.enumerated() {
                    var userIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserId.\(index0.advanced(by: 1))"))
                    try userIdsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
        try container.encode("ModifyImageAttribute", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
