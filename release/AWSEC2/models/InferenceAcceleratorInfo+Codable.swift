// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.InferenceAcceleratorInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accelerators = "accelerators"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accelerators = accelerators {
            if !accelerators.isEmpty {
                for (index0, inferencedeviceinfo0) in accelerators.enumerated() {
                    var acceleratorsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accelerators.\(index0.advanced(by: 1))"))
                    try acceleratorsContainer0.encode(inferencedeviceinfo0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var acceleratorsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accelerators"))
                try acceleratorsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.accelerators) {
            struct KeyVal0{struct member{}}
            let acceleratorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accelerators)
            if let acceleratorsWrappedContainer = acceleratorsWrappedContainer {
                let acceleratorsContainer = try acceleratorsWrappedContainer.decodeIfPresent([EC2ClientTypes.InferenceDeviceInfo].self, forKey: .member)
                var acceleratorsBuffer:[EC2ClientTypes.InferenceDeviceInfo]? = nil
                if let acceleratorsContainer = acceleratorsContainer {
                    acceleratorsBuffer = [EC2ClientTypes.InferenceDeviceInfo]()
                    for structureContainer0 in acceleratorsContainer {
                        acceleratorsBuffer?.append(structureContainer0)
                    }
                }
                accelerators = acceleratorsBuffer
            } else {
                accelerators = []
            }
        } else {
            accelerators = nil
        }
    }
}
