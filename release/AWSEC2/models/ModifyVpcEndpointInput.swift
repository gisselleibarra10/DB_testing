// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Contains the parameters for ModifyVpcEndpoint.
public struct ModifyVpcEndpointInput: Swift.Equatable {
    /// (Gateway endpoint) One or more route tables IDs to associate with the endpoint.
    public var addRouteTableIds: [Swift.String]?
    /// (Interface endpoint) One or more security group IDs to associate with the network interface.
    public var addSecurityGroupIds: [Swift.String]?
    /// (Interface and Gateway Load Balancer endpoints) One or more subnet IDs in which to serve the endpoint. For a Gateway Load Balancer endpoint, you can specify only one subnet.
    public var addSubnetIds: [Swift.String]?
    /// The DNS options for the endpoint.
    public var dnsOptions: EC2ClientTypes.DnsOptionsSpecification?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// The IP address type for the endpoint.
    public var ipAddressType: EC2ClientTypes.IpAddressType?
    /// (Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format.
    public var policyDocument: Swift.String?
    /// (Interface endpoint) Indicates whether a private hosted zone is associated with the VPC.
    public var privateDnsEnabled: Swift.Bool?
    /// (Gateway endpoint) One or more route table IDs to disassociate from the endpoint.
    public var removeRouteTableIds: [Swift.String]?
    /// (Interface endpoint) One or more security group IDs to disassociate from the network interface.
    public var removeSecurityGroupIds: [Swift.String]?
    /// (Interface endpoint) One or more subnets IDs in which to remove the endpoint.
    public var removeSubnetIds: [Swift.String]?
    /// (Gateway endpoint) Specify true to reset the policy document to the default policy. The default policy allows full access to the service.
    public var resetPolicy: Swift.Bool?
    /// The ID of the endpoint.
    /// This member is required.
    public var vpcEndpointId: Swift.String?

    public init (
        addRouteTableIds: [Swift.String]? = nil,
        addSecurityGroupIds: [Swift.String]? = nil,
        addSubnetIds: [Swift.String]? = nil,
        dnsOptions: EC2ClientTypes.DnsOptionsSpecification? = nil,
        dryRun: Swift.Bool? = nil,
        ipAddressType: EC2ClientTypes.IpAddressType? = nil,
        policyDocument: Swift.String? = nil,
        privateDnsEnabled: Swift.Bool? = nil,
        removeRouteTableIds: [Swift.String]? = nil,
        removeSecurityGroupIds: [Swift.String]? = nil,
        removeSubnetIds: [Swift.String]? = nil,
        resetPolicy: Swift.Bool? = nil,
        vpcEndpointId: Swift.String? = nil
    )
    {
        self.addRouteTableIds = addRouteTableIds
        self.addSecurityGroupIds = addSecurityGroupIds
        self.addSubnetIds = addSubnetIds
        self.dnsOptions = dnsOptions
        self.dryRun = dryRun
        self.ipAddressType = ipAddressType
        self.policyDocument = policyDocument
        self.privateDnsEnabled = privateDnsEnabled
        self.removeRouteTableIds = removeRouteTableIds
        self.removeSecurityGroupIds = removeSecurityGroupIds
        self.removeSubnetIds = removeSubnetIds
        self.resetPolicy = resetPolicy
        self.vpcEndpointId = vpcEndpointId
    }
}
