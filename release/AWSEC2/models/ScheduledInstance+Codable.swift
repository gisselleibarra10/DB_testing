// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.ScheduledInstance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "availabilityZone"
        case createDate = "createDate"
        case hourlyPrice = "hourlyPrice"
        case instanceCount = "instanceCount"
        case instanceType = "instanceType"
        case networkPlatform = "networkPlatform"
        case nextSlotStartTime = "nextSlotStartTime"
        case platform = "platform"
        case previousSlotEndTime = "previousSlotEndTime"
        case recurrence = "recurrence"
        case scheduledInstanceId = "scheduledInstanceId"
        case slotDurationInHours = "slotDurationInHours"
        case termEndDate = "termEndDate"
        case termStartDate = "termStartDate"
        case totalScheduledInstanceHours = "totalScheduledInstanceHours"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("CreateDate"))
        }
        if let hourlyPrice = hourlyPrice {
            try container.encode(hourlyPrice, forKey: ClientRuntime.Key("HourlyPrice"))
        }
        if let instanceCount = instanceCount {
            try container.encode(instanceCount, forKey: ClientRuntime.Key("InstanceCount"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let networkPlatform = networkPlatform {
            try container.encode(networkPlatform, forKey: ClientRuntime.Key("NetworkPlatform"))
        }
        if let nextSlotStartTime = nextSlotStartTime {
            try container.encode(ClientRuntime.TimestampWrapper(nextSlotStartTime, format: .dateTime), forKey: ClientRuntime.Key("NextSlotStartTime"))
        }
        if let platform = platform {
            try container.encode(platform, forKey: ClientRuntime.Key("Platform"))
        }
        if let previousSlotEndTime = previousSlotEndTime {
            try container.encode(ClientRuntime.TimestampWrapper(previousSlotEndTime, format: .dateTime), forKey: ClientRuntime.Key("PreviousSlotEndTime"))
        }
        if let recurrence = recurrence {
            try container.encode(recurrence, forKey: ClientRuntime.Key("Recurrence"))
        }
        if let scheduledInstanceId = scheduledInstanceId {
            try container.encode(scheduledInstanceId, forKey: ClientRuntime.Key("ScheduledInstanceId"))
        }
        if let slotDurationInHours = slotDurationInHours {
            try container.encode(slotDurationInHours, forKey: ClientRuntime.Key("SlotDurationInHours"))
        }
        if let termEndDate = termEndDate {
            try container.encode(ClientRuntime.TimestampWrapper(termEndDate, format: .dateTime), forKey: ClientRuntime.Key("TermEndDate"))
        }
        if let termStartDate = termStartDate {
            try container.encode(ClientRuntime.TimestampWrapper(termStartDate, format: .dateTime), forKey: ClientRuntime.Key("TermStartDate"))
        }
        if let totalScheduledInstanceHours = totalScheduledInstanceHours {
            try container.encode(totalScheduledInstanceHours, forKey: ClientRuntime.Key("TotalScheduledInstanceHours"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        let hourlyPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hourlyPrice)
        hourlyPrice = hourlyPriceDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let networkPlatformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkPlatform)
        networkPlatform = networkPlatformDecoded
        let nextSlotStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextSlotStartTime)
        var nextSlotStartTimeBuffer:ClientRuntime.Date? = nil
        if let nextSlotStartTimeDecoded = nextSlotStartTimeDecoded {
            nextSlotStartTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nextSlotStartTimeDecoded, format: .dateTime)
        }
        nextSlotStartTime = nextSlotStartTimeBuffer
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let previousSlotEndTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .previousSlotEndTime)
        var previousSlotEndTimeBuffer:ClientRuntime.Date? = nil
        if let previousSlotEndTimeDecoded = previousSlotEndTimeDecoded {
            previousSlotEndTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(previousSlotEndTimeDecoded, format: .dateTime)
        }
        previousSlotEndTime = previousSlotEndTimeBuffer
        let recurrenceDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.ScheduledInstanceRecurrence.self, forKey: .recurrence)
        recurrence = recurrenceDecoded
        let scheduledInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledInstanceId)
        scheduledInstanceId = scheduledInstanceIdDecoded
        let slotDurationInHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .slotDurationInHours)
        slotDurationInHours = slotDurationInHoursDecoded
        let termEndDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .termEndDate)
        var termEndDateBuffer:ClientRuntime.Date? = nil
        if let termEndDateDecoded = termEndDateDecoded {
            termEndDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(termEndDateDecoded, format: .dateTime)
        }
        termEndDate = termEndDateBuffer
        let termStartDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .termStartDate)
        var termStartDateBuffer:ClientRuntime.Date? = nil
        if let termStartDateDecoded = termStartDateDecoded {
            termStartDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(termStartDateDecoded, format: .dateTime)
        }
        termStartDate = termStartDateBuffer
        let totalScheduledInstanceHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalScheduledInstanceHours)
        totalScheduledInstanceHours = totalScheduledInstanceHoursDecoded
    }
}
