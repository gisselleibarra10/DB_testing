// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyClientVpnEndpointInputBody: Swift.Equatable {
    let clientVpnEndpointId: Swift.String?
    let serverCertificateArn: Swift.String?
    let connectionLogOptions: Ec2ClientTypes.ConnectionLogOptions?
    let dnsServers: Ec2ClientTypes.DnsServersOptionsModifyStructure?
    let vpnPort: Swift.Int?
    let description: Swift.String?
    let splitTunnel: Swift.Bool?
    let dryRun: Swift.Bool?
    let securityGroupIds: [Swift.String]?
    let vpcId: Swift.String?
    let selfServicePortal: Ec2ClientTypes.SelfServicePortal?
    let clientConnectOptions: Ec2ClientTypes.ClientConnectOptions?
    let sessionTimeoutHours: Swift.Int?
    let clientLoginBannerOptions: Ec2ClientTypes.ClientLoginBannerOptions?
}

extension ModifyClientVpnEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientConnectOptions = "ClientConnectOptions"
        case clientLoginBannerOptions = "ClientLoginBannerOptions"
        case clientVpnEndpointId = "ClientVpnEndpointId"
        case connectionLogOptions = "ConnectionLogOptions"
        case description = "Description"
        case dnsServers = "DnsServers"
        case dryRun = "DryRun"
        case securityGroupIds = "SecurityGroupId"
        case selfServicePortal = "SelfServicePortal"
        case serverCertificateArn = "ServerCertificateArn"
        case sessionTimeoutHours = "SessionTimeoutHours"
        case splitTunnel = "SplitTunnel"
        case vpcId = "VpcId"
        case vpnPort = "VpnPort"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientVpnEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientVpnEndpointId)
        clientVpnEndpointId = clientVpnEndpointIdDecoded
        let serverCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverCertificateArn)
        serverCertificateArn = serverCertificateArnDecoded
        let connectionLogOptionsDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.ConnectionLogOptions.self, forKey: .connectionLogOptions)
        connectionLogOptions = connectionLogOptionsDecoded
        let dnsServersDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.DnsServersOptionsModifyStructure.self, forKey: .dnsServers)
        dnsServers = dnsServersDecoded
        let vpnPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .vpnPort)
        vpnPort = vpnPortDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let splitTunnelDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .splitTunnel)
        splitTunnel = splitTunnelDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.securityGroupIds) {
            struct KeyVal0{struct item{}}
            let securityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .securityGroupIds)
            if let securityGroupIdsWrappedContainer = securityGroupIdsWrappedContainer {
                let securityGroupIdsContainer = try securityGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var securityGroupIdsBuffer:[Swift.String]? = nil
                if let securityGroupIdsContainer = securityGroupIdsContainer {
                    securityGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in securityGroupIdsContainer {
                        securityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                securityGroupIds = securityGroupIdsBuffer
            } else {
                securityGroupIds = []
            }
        } else {
            securityGroupIds = nil
        }
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let selfServicePortalDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.SelfServicePortal.self, forKey: .selfServicePortal)
        selfServicePortal = selfServicePortalDecoded
        let clientConnectOptionsDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.ClientConnectOptions.self, forKey: .clientConnectOptions)
        clientConnectOptions = clientConnectOptionsDecoded
        let sessionTimeoutHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionTimeoutHours)
        sessionTimeoutHours = sessionTimeoutHoursDecoded
        let clientLoginBannerOptionsDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.ClientLoginBannerOptions.self, forKey: .clientLoginBannerOptions)
        clientLoginBannerOptions = clientLoginBannerOptionsDecoded
    }
}
