// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportSnapshotInputBody: Swift.Equatable {
    let clientData: Ec2ClientTypes.ClientData?
    let clientToken: Swift.String?
    let description: Swift.String?
    let diskContainer: Ec2ClientTypes.SnapshotDiskContainer?
    let dryRun: Swift.Bool?
    let encrypted: Swift.Bool?
    let kmsKeyId: Swift.String?
    let roleName: Swift.String?
    let tagSpecifications: [Ec2ClientTypes.TagSpecification]?
}

extension ImportSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientData = "ClientData"
        case clientToken = "ClientToken"
        case description = "Description"
        case diskContainer = "DiskContainer"
        case dryRun = "DryRun"
        case encrypted = "Encrypted"
        case kmsKeyId = "KmsKeyId"
        case roleName = "RoleName"
        case tagSpecifications = "TagSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientDataDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.ClientData.self, forKey: .clientData)
        clientData = clientDataDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let diskContainerDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.SnapshotDiskContainer.self, forKey: .diskContainer)
        diskContainer = diskContainerDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleName)
        roleName = roleNameDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[Ec2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [Ec2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
    }
}
