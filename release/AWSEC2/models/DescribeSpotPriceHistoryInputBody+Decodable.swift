// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSpotPriceHistoryInputBody: Swift.Equatable {
    let filters: [Ec2ClientTypes.Filter]?
    let availabilityZone: Swift.String?
    let dryRun: Swift.Bool?
    let endTime: ClientRuntime.Date?
    let instanceTypes: [Ec2ClientTypes.InstanceType]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let productDescriptions: [Swift.String]?
    let startTime: ClientRuntime.Date?
}

extension DescribeSpotPriceHistoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "availabilityZone"
        case dryRun = "dryRun"
        case endTime = "endTime"
        case filters = "Filter"
        case instanceTypes = "InstanceType"
        case maxResults = "maxResults"
        case nextToken = "nextToken"
        case productDescriptions = "ProductDescription"
        case startTime = "startTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.filters) {
            struct KeyVal0{struct Filter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Filter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([Ec2ClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[Ec2ClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [Ec2ClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeBuffer:ClientRuntime.Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        if containerValues.contains(.instanceTypes) {
            struct KeyVal0{struct member{}}
            let instanceTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceTypes)
            if let instanceTypesWrappedContainer = instanceTypesWrappedContainer {
                let instanceTypesContainer = try instanceTypesWrappedContainer.decodeIfPresent([Ec2ClientTypes.InstanceType].self, forKey: .member)
                var instanceTypesBuffer:[Ec2ClientTypes.InstanceType]? = nil
                if let instanceTypesContainer = instanceTypesContainer {
                    instanceTypesBuffer = [Ec2ClientTypes.InstanceType]()
                    for enumContainer0 in instanceTypesContainer {
                        instanceTypesBuffer?.append(enumContainer0)
                    }
                }
                instanceTypes = instanceTypesBuffer
            } else {
                instanceTypes = []
            }
        } else {
            instanceTypes = nil
        }
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.productDescriptions) {
            struct KeyVal0{struct member{}}
            let productDescriptionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .productDescriptions)
            if let productDescriptionsWrappedContainer = productDescriptionsWrappedContainer {
                let productDescriptionsContainer = try productDescriptionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var productDescriptionsBuffer:[Swift.String]? = nil
                if let productDescriptionsContainer = productDescriptionsContainer {
                    productDescriptionsBuffer = [Swift.String]()
                    for stringContainer0 in productDescriptionsContainer {
                        productDescriptionsBuffer?.append(stringContainer0)
                    }
                }
                productDescriptions = productDescriptionsBuffer
            } else {
                productDescriptions = []
            }
        } else {
            productDescriptions = nil
        }
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
    }
}
