// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.FleetLaunchTemplateOverrides: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "availabilityZone"
        case imageId = "imageId"
        case instanceRequirements = "instanceRequirements"
        case instanceType = "instanceType"
        case maxPrice = "maxPrice"
        case placement = "placement"
        case priority = "priority"
        case subnetId = "subnetId"
        case weightedCapacity = "weightedCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let imageId = imageId {
            try container.encode(imageId, forKey: ClientRuntime.Key("ImageId"))
        }
        if let instanceRequirements = instanceRequirements {
            try container.encode(instanceRequirements, forKey: ClientRuntime.Key("InstanceRequirements"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let maxPrice = maxPrice {
            try container.encode(maxPrice, forKey: ClientRuntime.Key("MaxPrice"))
        }
        if let placement = placement {
            try container.encode(placement, forKey: ClientRuntime.Key("Placement"))
        }
        if let priority = priority {
            try container.encode(priority, forKey: ClientRuntime.Key("Priority"))
        }
        if let subnetId = subnetId {
            try container.encode(subnetId, forKey: ClientRuntime.Key("SubnetId"))
        }
        if let weightedCapacity = weightedCapacity {
            try container.encode(weightedCapacity, forKey: ClientRuntime.Key("WeightedCapacity"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let maxPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxPrice)
        maxPrice = maxPriceDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .priority)
        priority = priorityDecoded
        let placementDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.PlacementResponse.self, forKey: .placement)
        placement = placementDecoded
        let instanceRequirementsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.InstanceRequirements.self, forKey: .instanceRequirements)
        instanceRequirements = instanceRequirementsDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
    }
}
