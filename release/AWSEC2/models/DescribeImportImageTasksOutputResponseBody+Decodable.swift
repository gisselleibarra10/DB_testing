// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeImportImageTasksOutputResponseBody: Swift.Equatable {
    let importImageTasks: [Ec2ClientTypes.ImportImageTask]?
    let nextToken: Swift.String?
}

extension DescribeImportImageTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importImageTasks = "importImageTaskSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.importImageTasks) {
            struct KeyVal0{struct item{}}
            let importImageTasksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .importImageTasks)
            if let importImageTasksWrappedContainer = importImageTasksWrappedContainer {
                let importImageTasksContainer = try importImageTasksWrappedContainer.decodeIfPresent([Ec2ClientTypes.ImportImageTask].self, forKey: .member)
                var importImageTasksBuffer:[Ec2ClientTypes.ImportImageTask]? = nil
                if let importImageTasksContainer = importImageTasksContainer {
                    importImageTasksBuffer = [Ec2ClientTypes.ImportImageTask]()
                    for structureContainer0 in importImageTasksContainer {
                        importImageTasksBuffer?.append(structureContainer0)
                    }
                }
                importImageTasks = importImageTasksBuffer
            } else {
                importImageTasks = []
            }
        } else {
            importImageTasks = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
