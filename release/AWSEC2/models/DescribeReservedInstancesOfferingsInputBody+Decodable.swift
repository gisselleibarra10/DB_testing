// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReservedInstancesOfferingsInputBody: Swift.Equatable {
    let availabilityZone: Swift.String?
    let filters: [Ec2ClientTypes.Filter]?
    let includeMarketplace: Swift.Bool?
    let instanceType: Ec2ClientTypes.InstanceType?
    let maxDuration: Swift.Int?
    let maxInstanceCount: Swift.Int?
    let minDuration: Swift.Int?
    let offeringClass: Ec2ClientTypes.OfferingClassType?
    let productDescription: Ec2ClientTypes.RIProductDescription?
    let reservedInstancesOfferingIds: [Swift.String]?
    let dryRun: Swift.Bool?
    let instanceTenancy: Ec2ClientTypes.Tenancy?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let offeringType: Ec2ClientTypes.OfferingTypeValues?
}

extension DescribeReservedInstancesOfferingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case dryRun = "dryRun"
        case filters = "Filter"
        case includeMarketplace = "IncludeMarketplace"
        case instanceTenancy = "instanceTenancy"
        case instanceType = "InstanceType"
        case maxDuration = "MaxDuration"
        case maxInstanceCount = "MaxInstanceCount"
        case maxResults = "maxResults"
        case minDuration = "MinDuration"
        case nextToken = "nextToken"
        case offeringClass = "OfferingClass"
        case offeringType = "offeringType"
        case productDescription = "ProductDescription"
        case reservedInstancesOfferingIds = "ReservedInstancesOfferingId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        if containerValues.contains(.filters) {
            struct KeyVal0{struct Filter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Filter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([Ec2ClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[Ec2ClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [Ec2ClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let includeMarketplaceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeMarketplace)
        includeMarketplace = includeMarketplaceDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let maxDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxDuration)
        maxDuration = maxDurationDecoded
        let maxInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxInstanceCount)
        maxInstanceCount = maxInstanceCountDecoded
        let minDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minDuration)
        minDuration = minDurationDecoded
        let offeringClassDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.OfferingClassType.self, forKey: .offeringClass)
        offeringClass = offeringClassDecoded
        let productDescriptionDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.RIProductDescription.self, forKey: .productDescription)
        productDescription = productDescriptionDecoded
        if containerValues.contains(.reservedInstancesOfferingIds) {
            struct KeyVal0{struct member{}}
            let reservedInstancesOfferingIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .reservedInstancesOfferingIds)
            if let reservedInstancesOfferingIdsWrappedContainer = reservedInstancesOfferingIdsWrappedContainer {
                let reservedInstancesOfferingIdsContainer = try reservedInstancesOfferingIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var reservedInstancesOfferingIdsBuffer:[Swift.String]? = nil
                if let reservedInstancesOfferingIdsContainer = reservedInstancesOfferingIdsContainer {
                    reservedInstancesOfferingIdsBuffer = [Swift.String]()
                    for stringContainer0 in reservedInstancesOfferingIdsContainer {
                        reservedInstancesOfferingIdsBuffer?.append(stringContainer0)
                    }
                }
                reservedInstancesOfferingIds = reservedInstancesOfferingIdsBuffer
            } else {
                reservedInstancesOfferingIds = []
            }
        } else {
            reservedInstancesOfferingIds = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let instanceTenancyDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.Tenancy.self, forKey: .instanceTenancy)
        instanceTenancy = instanceTenancyDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.OfferingTypeValues.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
    }
}
