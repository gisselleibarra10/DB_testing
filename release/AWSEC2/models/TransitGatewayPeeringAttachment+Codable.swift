// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.TransitGatewayPeeringAttachment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accepterTgwInfo = "accepterTgwInfo"
        case accepterTransitGatewayAttachmentId = "accepterTransitGatewayAttachmentId"
        case creationTime = "creationTime"
        case options = "options"
        case requesterTgwInfo = "requesterTgwInfo"
        case state = "state"
        case status = "status"
        case tags = "tagSet"
        case transitGatewayAttachmentId = "transitGatewayAttachmentId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accepterTgwInfo = accepterTgwInfo {
            try container.encode(accepterTgwInfo, forKey: ClientRuntime.Key("AccepterTgwInfo"))
        }
        if let accepterTransitGatewayAttachmentId = accepterTransitGatewayAttachmentId {
            try container.encode(accepterTransitGatewayAttachmentId, forKey: ClientRuntime.Key("AccepterTransitGatewayAttachmentId"))
        }
        if let creationTime = creationTime {
            try container.encodeTimestamp(creationTime, format: .dateTime, forKey: ClientRuntime.Key("CreationTime"))
        }
        if let options = options {
            try container.encode(options, forKey: ClientRuntime.Key("Options"))
        }
        if let requesterTgwInfo = requesterTgwInfo {
            try container.encode(requesterTgwInfo, forKey: ClientRuntime.Key("RequesterTgwInfo"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let transitGatewayAttachmentId = transitGatewayAttachmentId {
            try container.encode(transitGatewayAttachmentId, forKey: ClientRuntime.Key("TransitGatewayAttachmentId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transitGatewayAttachmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayAttachmentId)
        transitGatewayAttachmentId = transitGatewayAttachmentIdDecoded
        let accepterTransitGatewayAttachmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accepterTransitGatewayAttachmentId)
        accepterTransitGatewayAttachmentId = accepterTransitGatewayAttachmentIdDecoded
        let requesterTgwInfoDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.PeeringTgwInfo.self, forKey: .requesterTgwInfo)
        requesterTgwInfo = requesterTgwInfoDecoded
        let accepterTgwInfoDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.PeeringTgwInfo.self, forKey: .accepterTgwInfo)
        accepterTgwInfo = accepterTgwInfoDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.TransitGatewayPeeringAttachmentOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.PeeringAttachmentStatus.self, forKey: .status)
        status = statusDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.TransitGatewayAttachmentState.self, forKey: .state)
        state = stateDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .creationTime)
        creationTime = creationTimeDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
