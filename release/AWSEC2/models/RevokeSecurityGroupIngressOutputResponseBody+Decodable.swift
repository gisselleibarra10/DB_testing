// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RevokeSecurityGroupIngressOutputResponseBody: Swift.Equatable {
    let `return`: Swift.Bool?
    let unknownIpPermissions: [Ec2ClientTypes.IpPermission]?
}

extension RevokeSecurityGroupIngressOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `return` = "return"
        case unknownIpPermissions = "unknownIpPermissionSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let returnDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .return)
        `return` = returnDecoded
        if containerValues.contains(.unknownIpPermissions) {
            struct KeyVal0{struct item{}}
            let unknownIpPermissionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .unknownIpPermissions)
            if let unknownIpPermissionsWrappedContainer = unknownIpPermissionsWrappedContainer {
                let unknownIpPermissionsContainer = try unknownIpPermissionsWrappedContainer.decodeIfPresent([Ec2ClientTypes.IpPermission].self, forKey: .member)
                var unknownIpPermissionsBuffer:[Ec2ClientTypes.IpPermission]? = nil
                if let unknownIpPermissionsContainer = unknownIpPermissionsContainer {
                    unknownIpPermissionsBuffer = [Ec2ClientTypes.IpPermission]()
                    for structureContainer0 in unknownIpPermissionsContainer {
                        unknownIpPermissionsBuffer?.append(structureContainer0)
                    }
                }
                unknownIpPermissions = unknownIpPermissionsBuffer
            } else {
                unknownIpPermissions = []
            }
        } else {
            unknownIpPermissions = nil
        }
    }
}
