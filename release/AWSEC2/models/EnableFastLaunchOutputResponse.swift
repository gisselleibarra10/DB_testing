// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct EnableFastLaunchOutputResponse: Swift.Equatable {
    /// The image ID that identifies the Windows AMI for which faster launching was enabled.
    public var imageId: Swift.String?
    /// The launch template that is used when launching Windows instances from pre-provisioned snapshots.
    public var launchTemplate: EC2ClientTypes.FastLaunchLaunchTemplateSpecificationResponse?
    /// The maximum number of parallel instances to launch for creating resources.
    public var maxParallelLaunches: Swift.Int?
    /// The owner ID for the Windows AMI for which faster launching was enabled.
    public var ownerId: Swift.String?
    /// The type of resource that was defined for pre-provisioning the Windows AMI for faster launching.
    public var resourceType: EC2ClientTypes.FastLaunchResourceType?
    /// The configuration settings that were defined for creating and managing the pre-provisioned snapshots for faster launching of the Windows AMI. This property is returned when the associated resourceType is snapshot.
    public var snapshotConfiguration: EC2ClientTypes.FastLaunchSnapshotConfigurationResponse?
    /// The current state of faster launching for the specified Windows AMI.
    public var state: EC2ClientTypes.FastLaunchStateCode?
    /// The reason that the state changed for faster launching for the Windows AMI.
    public var stateTransitionReason: Swift.String?
    /// The time that the state changed for faster launching for the Windows AMI.
    public var stateTransitionTime: ClientRuntime.Date?

    public init (
        imageId: Swift.String? = nil,
        launchTemplate: EC2ClientTypes.FastLaunchLaunchTemplateSpecificationResponse? = nil,
        maxParallelLaunches: Swift.Int? = nil,
        ownerId: Swift.String? = nil,
        resourceType: EC2ClientTypes.FastLaunchResourceType? = nil,
        snapshotConfiguration: EC2ClientTypes.FastLaunchSnapshotConfigurationResponse? = nil,
        state: EC2ClientTypes.FastLaunchStateCode? = nil,
        stateTransitionReason: Swift.String? = nil,
        stateTransitionTime: ClientRuntime.Date? = nil
    )
    {
        self.imageId = imageId
        self.launchTemplate = launchTemplate
        self.maxParallelLaunches = maxParallelLaunches
        self.ownerId = ownerId
        self.resourceType = resourceType
        self.snapshotConfiguration = snapshotConfiguration
        self.state = state
        self.stateTransitionReason = stateTransitionReason
        self.stateTransitionTime = stateTransitionTime
    }
}
