// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyFleetInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let excessCapacityTerminationPolicy: Ec2ClientTypes.FleetExcessCapacityTerminationPolicy?
    let launchTemplateConfigs: [Ec2ClientTypes.FleetLaunchTemplateConfigRequest]?
    let fleetId: Swift.String?
    let targetCapacitySpecification: Ec2ClientTypes.TargetCapacitySpecificationRequest?
    let context: Swift.String?
}

extension ModifyFleetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case context = "Context"
        case dryRun = "DryRun"
        case excessCapacityTerminationPolicy = "ExcessCapacityTerminationPolicy"
        case fleetId = "FleetId"
        case launchTemplateConfigs = "LaunchTemplateConfig"
        case targetCapacitySpecification = "TargetCapacitySpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let excessCapacityTerminationPolicyDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.FleetExcessCapacityTerminationPolicy.self, forKey: .excessCapacityTerminationPolicy)
        excessCapacityTerminationPolicy = excessCapacityTerminationPolicyDecoded
        if containerValues.contains(.launchTemplateConfigs) {
            struct KeyVal0{struct item{}}
            let launchTemplateConfigsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .launchTemplateConfigs)
            if let launchTemplateConfigsWrappedContainer = launchTemplateConfigsWrappedContainer {
                let launchTemplateConfigsContainer = try launchTemplateConfigsWrappedContainer.decodeIfPresent([Ec2ClientTypes.FleetLaunchTemplateConfigRequest].self, forKey: .member)
                var launchTemplateConfigsBuffer:[Ec2ClientTypes.FleetLaunchTemplateConfigRequest]? = nil
                if let launchTemplateConfigsContainer = launchTemplateConfigsContainer {
                    launchTemplateConfigsBuffer = [Ec2ClientTypes.FleetLaunchTemplateConfigRequest]()
                    for structureContainer0 in launchTemplateConfigsContainer {
                        launchTemplateConfigsBuffer?.append(structureContainer0)
                    }
                }
                launchTemplateConfigs = launchTemplateConfigsBuffer
            } else {
                launchTemplateConfigs = []
            }
        } else {
            launchTemplateConfigs = nil
        }
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let targetCapacitySpecificationDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.TargetCapacitySpecificationRequest.self, forKey: .targetCapacitySpecification)
        targetCapacitySpecification = targetCapacitySpecificationDecoded
        let contextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .context)
        context = contextDecoded
    }
}
