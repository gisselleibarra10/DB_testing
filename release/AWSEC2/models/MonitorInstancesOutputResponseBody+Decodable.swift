// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct MonitorInstancesOutputResponseBody: Swift.Equatable {
    let instanceMonitorings: [Ec2ClientTypes.InstanceMonitoring]?
}

extension MonitorInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceMonitorings = "instancesSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.instanceMonitorings) {
            struct KeyVal0{struct item{}}
            let instanceMonitoringsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .instanceMonitorings)
            if let instanceMonitoringsWrappedContainer = instanceMonitoringsWrappedContainer {
                let instanceMonitoringsContainer = try instanceMonitoringsWrappedContainer.decodeIfPresent([Ec2ClientTypes.InstanceMonitoring].self, forKey: .member)
                var instanceMonitoringsBuffer:[Ec2ClientTypes.InstanceMonitoring]? = nil
                if let instanceMonitoringsContainer = instanceMonitoringsContainer {
                    instanceMonitoringsBuffer = [Ec2ClientTypes.InstanceMonitoring]()
                    for structureContainer0 in instanceMonitoringsContainer {
                        instanceMonitoringsBuffer?.append(structureContainer0)
                    }
                }
                instanceMonitorings = instanceMonitoringsBuffer
            } else {
                instanceMonitorings = []
            }
        } else {
            instanceMonitorings = nil
        }
    }
}
