// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAddressesInputBody: Swift.Equatable {
    let filters: [Ec2ClientTypes.Filter]?
    let publicIps: [Swift.String]?
    let allocationIds: [Swift.String]?
    let dryRun: Swift.Bool?
}

extension DescribeAddressesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationIds = "AllocationId"
        case dryRun = "dryRun"
        case filters = "Filter"
        case publicIps = "PublicIp"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.filters) {
            struct KeyVal0{struct Filter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Filter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([Ec2ClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[Ec2ClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [Ec2ClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        if containerValues.contains(.publicIps) {
            struct KeyVal0{struct PublicIp{}}
            let publicIpsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.PublicIp>.CodingKeys.self, forKey: .publicIps)
            if let publicIpsWrappedContainer = publicIpsWrappedContainer {
                let publicIpsContainer = try publicIpsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var publicIpsBuffer:[Swift.String]? = nil
                if let publicIpsContainer = publicIpsContainer {
                    publicIpsBuffer = [Swift.String]()
                    for stringContainer0 in publicIpsContainer {
                        publicIpsBuffer?.append(stringContainer0)
                    }
                }
                publicIps = publicIpsBuffer
            } else {
                publicIps = []
            }
        } else {
            publicIps = nil
        }
        if containerValues.contains(.allocationIds) {
            struct KeyVal0{struct AllocationId{}}
            let allocationIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AllocationId>.CodingKeys.self, forKey: .allocationIds)
            if let allocationIdsWrappedContainer = allocationIdsWrappedContainer {
                let allocationIdsContainer = try allocationIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var allocationIdsBuffer:[Swift.String]? = nil
                if let allocationIdsContainer = allocationIdsContainer {
                    allocationIdsBuffer = [Swift.String]()
                    for stringContainer0 in allocationIdsContainer {
                        allocationIdsBuffer?.append(stringContainer0)
                    }
                }
                allocationIds = allocationIdsBuffer
            } else {
                allocationIds = []
            }
        } else {
            allocationIds = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
