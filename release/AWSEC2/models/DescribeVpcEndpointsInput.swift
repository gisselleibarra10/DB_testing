// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Contains the parameters for DescribeVpcEndpoints.
public struct DescribeVpcEndpointsInput: Swift.Equatable {
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// One or more filters.
    ///
    /// * ip-address-type - The IP address type (ipv4 | ipv6).
    ///
    /// * service-name - The name of the service.
    ///
    /// * vpc-id - The ID of the VPC in which the endpoint resides.
    ///
    /// * vpc-endpoint-id - The ID of the endpoint.
    ///
    /// * vpc-endpoint-state - The state of the endpoint (pendingAcceptance | pending | available | deleting | deleted | rejected | failed).
    ///
    /// * vpc-endpoint-type - The type of VPC endpoint (Interface | Gateway | GatewayLoadBalancer).
    ///
    /// * tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
    ///
    /// * tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    public var filters: [Ec2ClientTypes.Filter]?
    /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1,000, we return only 1,000 items.
    public var maxResults: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a prior call.)
    public var nextToken: Swift.String?
    /// One or more endpoint IDs.
    public var vpcEndpointIds: [Swift.String]?

    public init (
        dryRun: Swift.Bool? = nil,
        filters: [Ec2ClientTypes.Filter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        vpcEndpointIds: [Swift.String]? = nil
    )
    {
        self.dryRun = dryRun
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.vpcEndpointIds = vpcEndpointIds
    }
}
