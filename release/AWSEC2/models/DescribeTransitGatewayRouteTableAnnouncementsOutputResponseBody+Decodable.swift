// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTransitGatewayRouteTableAnnouncementsOutputResponseBody: Swift.Equatable {
    let transitGatewayRouteTableAnnouncements: [Ec2ClientTypes.TransitGatewayRouteTableAnnouncement]?
    let nextToken: Swift.String?
}

extension DescribeTransitGatewayRouteTableAnnouncementsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case transitGatewayRouteTableAnnouncements = "transitGatewayRouteTableAnnouncements"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.transitGatewayRouteTableAnnouncements) {
            struct KeyVal0{struct item{}}
            let transitGatewayRouteTableAnnouncementsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .transitGatewayRouteTableAnnouncements)
            if let transitGatewayRouteTableAnnouncementsWrappedContainer = transitGatewayRouteTableAnnouncementsWrappedContainer {
                let transitGatewayRouteTableAnnouncementsContainer = try transitGatewayRouteTableAnnouncementsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TransitGatewayRouteTableAnnouncement].self, forKey: .member)
                var transitGatewayRouteTableAnnouncementsBuffer:[Ec2ClientTypes.TransitGatewayRouteTableAnnouncement]? = nil
                if let transitGatewayRouteTableAnnouncementsContainer = transitGatewayRouteTableAnnouncementsContainer {
                    transitGatewayRouteTableAnnouncementsBuffer = [Ec2ClientTypes.TransitGatewayRouteTableAnnouncement]()
                    for structureContainer0 in transitGatewayRouteTableAnnouncementsContainer {
                        transitGatewayRouteTableAnnouncementsBuffer?.append(structureContainer0)
                    }
                }
                transitGatewayRouteTableAnnouncements = transitGatewayRouteTableAnnouncementsBuffer
            } else {
                transitGatewayRouteTableAnnouncements = []
            }
        } else {
            transitGatewayRouteTableAnnouncements = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
