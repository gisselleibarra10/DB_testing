// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFleetInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let clientToken: Swift.String?
    let spotOptions: Ec2ClientTypes.SpotOptionsRequest?
    let onDemandOptions: Ec2ClientTypes.OnDemandOptionsRequest?
    let excessCapacityTerminationPolicy: Ec2ClientTypes.FleetExcessCapacityTerminationPolicy?
    let launchTemplateConfigs: [Ec2ClientTypes.FleetLaunchTemplateConfigRequest]?
    let targetCapacitySpecification: Ec2ClientTypes.TargetCapacitySpecificationRequest?
    let terminateInstancesWithExpiration: Swift.Bool?
    let type: Ec2ClientTypes.FleetType?
    let validFrom: ClientRuntime.Date?
    let validUntil: ClientRuntime.Date?
    let replaceUnhealthyInstances: Swift.Bool?
    let tagSpecifications: [Ec2ClientTypes.TagSpecification]?
    let context: Swift.String?
}

extension CreateFleetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case context = "Context"
        case dryRun = "DryRun"
        case excessCapacityTerminationPolicy = "ExcessCapacityTerminationPolicy"
        case launchTemplateConfigs = "LaunchTemplateConfigs"
        case onDemandOptions = "OnDemandOptions"
        case replaceUnhealthyInstances = "ReplaceUnhealthyInstances"
        case spotOptions = "SpotOptions"
        case tagSpecifications = "TagSpecification"
        case targetCapacitySpecification = "TargetCapacitySpecification"
        case terminateInstancesWithExpiration = "TerminateInstancesWithExpiration"
        case type = "Type"
        case validFrom = "ValidFrom"
        case validUntil = "ValidUntil"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let spotOptionsDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.SpotOptionsRequest.self, forKey: .spotOptions)
        spotOptions = spotOptionsDecoded
        let onDemandOptionsDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.OnDemandOptionsRequest.self, forKey: .onDemandOptions)
        onDemandOptions = onDemandOptionsDecoded
        let excessCapacityTerminationPolicyDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.FleetExcessCapacityTerminationPolicy.self, forKey: .excessCapacityTerminationPolicy)
        excessCapacityTerminationPolicy = excessCapacityTerminationPolicyDecoded
        if containerValues.contains(.launchTemplateConfigs) {
            struct KeyVal0{struct item{}}
            let launchTemplateConfigsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .launchTemplateConfigs)
            if let launchTemplateConfigsWrappedContainer = launchTemplateConfigsWrappedContainer {
                let launchTemplateConfigsContainer = try launchTemplateConfigsWrappedContainer.decodeIfPresent([Ec2ClientTypes.FleetLaunchTemplateConfigRequest].self, forKey: .member)
                var launchTemplateConfigsBuffer:[Ec2ClientTypes.FleetLaunchTemplateConfigRequest]? = nil
                if let launchTemplateConfigsContainer = launchTemplateConfigsContainer {
                    launchTemplateConfigsBuffer = [Ec2ClientTypes.FleetLaunchTemplateConfigRequest]()
                    for structureContainer0 in launchTemplateConfigsContainer {
                        launchTemplateConfigsBuffer?.append(structureContainer0)
                    }
                }
                launchTemplateConfigs = launchTemplateConfigsBuffer
            } else {
                launchTemplateConfigs = []
            }
        } else {
            launchTemplateConfigs = nil
        }
        let targetCapacitySpecificationDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.TargetCapacitySpecificationRequest.self, forKey: .targetCapacitySpecification)
        targetCapacitySpecification = targetCapacitySpecificationDecoded
        let terminateInstancesWithExpirationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .terminateInstancesWithExpiration)
        terminateInstancesWithExpiration = terminateInstancesWithExpirationDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.FleetType.self, forKey: .type)
        type = typeDecoded
        let validFromDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validFrom)
        var validFromBuffer:ClientRuntime.Date? = nil
        if let validFromDecoded = validFromDecoded {
            validFromBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(validFromDecoded, format: .dateTime)
        }
        validFrom = validFromBuffer
        let validUntilDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validUntil)
        var validUntilBuffer:ClientRuntime.Date? = nil
        if let validUntilDecoded = validUntilDecoded {
            validUntilBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(validUntilDecoded, format: .dateTime)
        }
        validUntil = validUntilBuffer
        let replaceUnhealthyInstancesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .replaceUnhealthyInstances)
        replaceUnhealthyInstances = replaceUnhealthyInstancesDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[Ec2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [Ec2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let contextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .context)
        context = contextDecoded
    }
}
