// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SearchTransitGatewayRoutesOutputResponseBody: Swift.Equatable {
    let routes: [Ec2ClientTypes.TransitGatewayRoute]?
    let additionalRoutesAvailable: Swift.Bool?
}

extension SearchTransitGatewayRoutesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalRoutesAvailable = "additionalRoutesAvailable"
        case routes = "routeSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.routes) {
            struct KeyVal0{struct item{}}
            let routesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .routes)
            if let routesWrappedContainer = routesWrappedContainer {
                let routesContainer = try routesWrappedContainer.decodeIfPresent([Ec2ClientTypes.TransitGatewayRoute].self, forKey: .member)
                var routesBuffer:[Ec2ClientTypes.TransitGatewayRoute]? = nil
                if let routesContainer = routesContainer {
                    routesBuffer = [Ec2ClientTypes.TransitGatewayRoute]()
                    for structureContainer0 in routesContainer {
                        routesBuffer?.append(structureContainer0)
                    }
                }
                routes = routesBuffer
            } else {
                routes = []
            }
        } else {
            routes = nil
        }
        let additionalRoutesAvailableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .additionalRoutesAvailable)
        additionalRoutesAvailable = additionalRoutesAvailableDecoded
    }
}
