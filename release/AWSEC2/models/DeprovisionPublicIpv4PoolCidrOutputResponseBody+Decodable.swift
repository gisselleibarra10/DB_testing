// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeprovisionPublicIpv4PoolCidrOutputResponseBody: Swift.Equatable {
    let poolId: Swift.String?
    let deprovisionedAddresses: [Swift.String]?
}

extension DeprovisionPublicIpv4PoolCidrOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deprovisionedAddresses = "deprovisionedAddressSet"
        case poolId = "poolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let poolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .poolId)
        poolId = poolIdDecoded
        if containerValues.contains(.deprovisionedAddresses) {
            struct KeyVal0{struct item{}}
            let deprovisionedAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .deprovisionedAddresses)
            if let deprovisionedAddressesWrappedContainer = deprovisionedAddressesWrappedContainer {
                let deprovisionedAddressesContainer = try deprovisionedAddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var deprovisionedAddressesBuffer:[Swift.String]? = nil
                if let deprovisionedAddressesContainer = deprovisionedAddressesContainer {
                    deprovisionedAddressesBuffer = [Swift.String]()
                    for stringContainer0 in deprovisionedAddressesContainer {
                        deprovisionedAddressesBuffer?.append(stringContainer0)
                    }
                }
                deprovisionedAddresses = deprovisionedAddressesBuffer
            } else {
                deprovisionedAddresses = []
            }
        } else {
            deprovisionedAddresses = nil
        }
    }
}
