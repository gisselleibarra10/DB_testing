// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.FpgaImage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTime = "createTime"
        case dataRetentionSupport = "dataRetentionSupport"
        case description = "description"
        case fpgaImageGlobalId = "fpgaImageGlobalId"
        case fpgaImageId = "fpgaImageId"
        case name = "name"
        case ownerAlias = "ownerAlias"
        case ownerId = "ownerId"
        case pciId = "pciId"
        case productCodes = "productCodes"
        case `public` = "public"
        case shellVersion = "shellVersion"
        case state = "state"
        case tags = "tags"
        case updateTime = "updateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createTime = createTime {
            try container.encode(ClientRuntime.TimestampWrapper(createTime, format: .dateTime), forKey: ClientRuntime.Key("CreateTime"))
        }
        if let dataRetentionSupport = dataRetentionSupport {
            try container.encode(dataRetentionSupport, forKey: ClientRuntime.Key("DataRetentionSupport"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let fpgaImageGlobalId = fpgaImageGlobalId {
            try container.encode(fpgaImageGlobalId, forKey: ClientRuntime.Key("FpgaImageGlobalId"))
        }
        if let fpgaImageId = fpgaImageId {
            try container.encode(fpgaImageId, forKey: ClientRuntime.Key("FpgaImageId"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let ownerAlias = ownerAlias {
            try container.encode(ownerAlias, forKey: ClientRuntime.Key("OwnerAlias"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: ClientRuntime.Key("OwnerId"))
        }
        if let pciId = pciId {
            try container.encode(pciId, forKey: ClientRuntime.Key("PciId"))
        }
        if let productCodes = productCodes {
            if !productCodes.isEmpty {
                for (index0, productcode0) in productCodes.enumerated() {
                    var productCodesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ProductCodes.\(index0.advanced(by: 1))"))
                    try productCodesContainer0.encode(productcode0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let `public` = `public` {
            try container.encode(`public`, forKey: ClientRuntime.Key("Public"))
        }
        if let shellVersion = shellVersion {
            try container.encode(shellVersion, forKey: ClientRuntime.Key("ShellVersion"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let updateTime = updateTime {
            try container.encode(ClientRuntime.TimestampWrapper(updateTime, format: .dateTime), forKey: ClientRuntime.Key("UpdateTime"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fpgaImageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fpgaImageId)
        fpgaImageId = fpgaImageIdDecoded
        let fpgaImageGlobalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fpgaImageGlobalId)
        fpgaImageGlobalId = fpgaImageGlobalIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let shellVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shellVersion)
        shellVersion = shellVersionDecoded
        let pciIdDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.PciId.self, forKey: .pciId)
        pciId = pciIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.FpgaImageState.self, forKey: .state)
        state = stateDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createTime)
        var createTimeBuffer:ClientRuntime.Date? = nil
        if let createTimeDecoded = createTimeDecoded {
            createTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createTimeDecoded, format: .dateTime)
        }
        createTime = createTimeBuffer
        let updateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateTime)
        var updateTimeBuffer:ClientRuntime.Date? = nil
        if let updateTimeDecoded = updateTimeDecoded {
            updateTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(updateTimeDecoded, format: .dateTime)
        }
        updateTime = updateTimeBuffer
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let ownerAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAlias)
        ownerAlias = ownerAliasDecoded
        if containerValues.contains(.productCodes) {
            struct KeyVal0{struct item{}}
            let productCodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .productCodes)
            if let productCodesWrappedContainer = productCodesWrappedContainer {
                let productCodesContainer = try productCodesWrappedContainer.decodeIfPresent([Ec2ClientTypes.ProductCode].self, forKey: .member)
                var productCodesBuffer:[Ec2ClientTypes.ProductCode]? = nil
                if let productCodesContainer = productCodesContainer {
                    productCodesBuffer = [Ec2ClientTypes.ProductCode]()
                    for structureContainer0 in productCodesContainer {
                        productCodesBuffer?.append(structureContainer0)
                    }
                }
                productCodes = productCodesBuffer
            } else {
                productCodes = []
            }
        } else {
            productCodes = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let publicDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .public)
        `public` = publicDecoded
        let dataRetentionSupportDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dataRetentionSupport)
        dataRetentionSupport = dataRetentionSupportDecoded
    }
}
