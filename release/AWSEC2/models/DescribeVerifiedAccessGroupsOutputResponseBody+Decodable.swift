// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVerifiedAccessGroupsOutputResponseBody: Swift.Equatable {
    let verifiedAccessGroups: [EC2ClientTypes.VerifiedAccessGroup]?
    let nextToken: Swift.String?
}

extension DescribeVerifiedAccessGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case verifiedAccessGroups = "verifiedAccessGroupSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.verifiedAccessGroups) {
            struct KeyVal0{struct item{}}
            let verifiedAccessGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .verifiedAccessGroups)
            if let verifiedAccessGroupsWrappedContainer = verifiedAccessGroupsWrappedContainer {
                let verifiedAccessGroupsContainer = try verifiedAccessGroupsWrappedContainer.decodeIfPresent([EC2ClientTypes.VerifiedAccessGroup].self, forKey: .member)
                var verifiedAccessGroupsBuffer:[EC2ClientTypes.VerifiedAccessGroup]? = nil
                if let verifiedAccessGroupsContainer = verifiedAccessGroupsContainer {
                    verifiedAccessGroupsBuffer = [EC2ClientTypes.VerifiedAccessGroup]()
                    for structureContainer0 in verifiedAccessGroupsContainer {
                        verifiedAccessGroupsBuffer?.append(structureContainer0)
                    }
                }
                verifiedAccessGroups = verifiedAccessGroupsBuffer
            } else {
                verifiedAccessGroups = []
            }
        } else {
            verifiedAccessGroups = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
