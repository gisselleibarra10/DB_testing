// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.ConversionTask: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conversionTaskId = "conversionTaskId"
        case expirationTime = "expirationTime"
        case importInstance = "importInstance"
        case importVolume = "importVolume"
        case state = "state"
        case statusMessage = "statusMessage"
        case tags = "tagSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let conversionTaskId = conversionTaskId {
            try container.encode(conversionTaskId, forKey: ClientRuntime.Key("ConversionTaskId"))
        }
        if let expirationTime = expirationTime {
            try container.encode(expirationTime, forKey: ClientRuntime.Key("ExpirationTime"))
        }
        if let importInstance = importInstance {
            try container.encode(importInstance, forKey: ClientRuntime.Key("ImportInstance"))
        }
        if let importVolume = importVolume {
            try container.encode(importVolume, forKey: ClientRuntime.Key("ImportVolume"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: ClientRuntime.Key("StatusMessage"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conversionTaskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conversionTaskId)
        conversionTaskId = conversionTaskIdDecoded
        let expirationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expirationTime)
        expirationTime = expirationTimeDecoded
        let importInstanceDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ImportInstanceTaskDetails.self, forKey: .importInstance)
        importInstance = importInstanceDecoded
        let importVolumeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ImportVolumeTaskDetails.self, forKey: .importVolume)
        importVolume = importVolumeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ConversionTaskState.self, forKey: .state)
        state = stateDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
