// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.NetworkAcl: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associations = "associationSet"
        case entries = "entrySet"
        case isDefault = "default"
        case networkAclId = "networkAclId"
        case ownerId = "ownerId"
        case tags = "tagSet"
        case vpcId = "vpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let associations = associations {
            if !associations.isEmpty {
                for (index0, networkaclassociation0) in associations.enumerated() {
                    var associationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AssociationSet.\(index0.advanced(by: 1))"))
                    try associationsContainer0.encode(networkaclassociation0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let entries = entries {
            if !entries.isEmpty {
                for (index0, networkaclentry0) in entries.enumerated() {
                    var entriesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EntrySet.\(index0.advanced(by: 1))"))
                    try entriesContainer0.encode(networkaclentry0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let isDefault = isDefault {
            try container.encode(isDefault, forKey: ClientRuntime.Key("Default"))
        }
        if let networkAclId = networkAclId {
            try container.encode(networkAclId, forKey: ClientRuntime.Key("NetworkAclId"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: ClientRuntime.Key("OwnerId"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.associations) {
            struct KeyVal0{struct item{}}
            let associationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .associations)
            if let associationsWrappedContainer = associationsWrappedContainer {
                let associationsContainer = try associationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.NetworkAclAssociation].self, forKey: .member)
                var associationsBuffer:[Ec2ClientTypes.NetworkAclAssociation]? = nil
                if let associationsContainer = associationsContainer {
                    associationsBuffer = [Ec2ClientTypes.NetworkAclAssociation]()
                    for structureContainer0 in associationsContainer {
                        associationsBuffer?.append(structureContainer0)
                    }
                }
                associations = associationsBuffer
            } else {
                associations = []
            }
        } else {
            associations = nil
        }
        if containerValues.contains(.entries) {
            struct KeyVal0{struct item{}}
            let entriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .entries)
            if let entriesWrappedContainer = entriesWrappedContainer {
                let entriesContainer = try entriesWrappedContainer.decodeIfPresent([Ec2ClientTypes.NetworkAclEntry].self, forKey: .member)
                var entriesBuffer:[Ec2ClientTypes.NetworkAclEntry]? = nil
                if let entriesContainer = entriesContainer {
                    entriesBuffer = [Ec2ClientTypes.NetworkAclEntry]()
                    for structureContainer0 in entriesContainer {
                        entriesBuffer?.append(structureContainer0)
                    }
                }
                entries = entriesBuffer
            } else {
                entries = []
            }
        } else {
            entries = nil
        }
        let isDefaultDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDefault)
        isDefault = isDefaultDecoded
        let networkAclIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkAclId)
        networkAclId = networkAclIdDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
    }
}
