// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AssignIpv6AddressesOutputResponseBody: Swift.Equatable {
    let assignedIpv6Addresses: [Swift.String]?
    let assignedIpv6Prefixes: [Swift.String]?
    let networkInterfaceId: Swift.String?
}

extension AssignIpv6AddressesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignedIpv6Addresses = "assignedIpv6Addresses"
        case assignedIpv6Prefixes = "assignedIpv6PrefixSet"
        case networkInterfaceId = "networkInterfaceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.assignedIpv6Addresses) {
            struct KeyVal0{struct item{}}
            let assignedIpv6AddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .assignedIpv6Addresses)
            if let assignedIpv6AddressesWrappedContainer = assignedIpv6AddressesWrappedContainer {
                let assignedIpv6AddressesContainer = try assignedIpv6AddressesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var assignedIpv6AddressesBuffer:[Swift.String]? = nil
                if let assignedIpv6AddressesContainer = assignedIpv6AddressesContainer {
                    assignedIpv6AddressesBuffer = [Swift.String]()
                    for stringContainer0 in assignedIpv6AddressesContainer {
                        assignedIpv6AddressesBuffer?.append(stringContainer0)
                    }
                }
                assignedIpv6Addresses = assignedIpv6AddressesBuffer
            } else {
                assignedIpv6Addresses = []
            }
        } else {
            assignedIpv6Addresses = nil
        }
        if containerValues.contains(.assignedIpv6Prefixes) {
            struct KeyVal0{struct item{}}
            let assignedIpv6PrefixesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .assignedIpv6Prefixes)
            if let assignedIpv6PrefixesWrappedContainer = assignedIpv6PrefixesWrappedContainer {
                let assignedIpv6PrefixesContainer = try assignedIpv6PrefixesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var assignedIpv6PrefixesBuffer:[Swift.String]? = nil
                if let assignedIpv6PrefixesContainer = assignedIpv6PrefixesContainer {
                    assignedIpv6PrefixesBuffer = [Swift.String]()
                    for stringContainer0 in assignedIpv6PrefixesContainer {
                        assignedIpv6PrefixesBuffer?.append(stringContainer0)
                    }
                }
                assignedIpv6Prefixes = assignedIpv6PrefixesBuffer
            } else {
                assignedIpv6Prefixes = []
            }
        } else {
            assignedIpv6Prefixes = nil
        }
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
    }
}
