// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes {
    /// Describes the configuration of a Spot Fleet request.
    public struct SpotFleetRequestConfigData: Swift.Equatable {
        /// The strategy that determines how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the Spot Fleet launch configuration. For more information, see [Allocation strategies for Spot Instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-allocation-strategy.html) in the Amazon EC2 User Guide. priceCapacityOptimized (recommended) Spot Fleet identifies the pools with the highest capacity availability for the number of instances that are launching. This means that we will request Spot Instances from the pools that we believe have the lowest chance of interruption in the near term. Spot Fleet then requests Spot Instances from the lowest priced of these pools. capacityOptimized Spot Fleet identifies the pools with the highest capacity availability for the number of instances that are launching. This means that we will request Spot Instances from the pools that we believe have the lowest chance of interruption in the near term. To give certain instance types a higher chance of launching first, use capacityOptimizedPrioritized. Set a priority for each instance type by using the Priority parameter for LaunchTemplateOverrides. You can assign the same priority to different LaunchTemplateOverrides. EC2 implements the priorities on a best-effort basis, but optimizes for capacity first. capacityOptimizedPrioritized is supported only if your Spot Fleet uses a launch template. Note that if the OnDemandAllocationStrategy is set to prioritized, the same priority is applied when fulfilling On-Demand capacity. diversified Spot Fleet requests instances from all of the Spot Instance pools that you specify. lowestPrice Spot Fleet requests instances from the lowest priced Spot Instance pool that has available capacity. If the lowest priced pool doesn't have available capacity, the Spot Instances come from the next lowest priced pool that has available capacity. If a pool runs out of capacity before fulfilling your desired capacity, Spot Fleet will continue to fulfill your request by drawing from the next lowest priced pool. To ensure that your desired capacity is met, you might receive Spot Instances from several pools. Because this strategy only considers instance price and not capacity availability, it might lead to high interruption rates. Default: lowestPrice
        public var allocationStrategy: EC2ClientTypes.AllocationStrategy?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of your listings. This helps to avoid duplicate listings. For more information, see [Ensuring Idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
        public var clientToken: Swift.String?
        /// Reserved.
        public var context: Swift.String?
        /// Indicates whether running Spot Instances should be terminated if you decrease the target capacity of the Spot Fleet request below the current size of the Spot Fleet.
        public var excessCapacityTerminationPolicy: EC2ClientTypes.ExcessCapacityTerminationPolicy?
        /// The number of units fulfilled by this request compared to the set target capacity. You cannot set this value.
        public var fulfilledCapacity: Swift.Double?
        /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that grants the Spot Fleet the permission to request, launch, terminate, and tag instances on your behalf. For more information, see [Spot Fleet prerequisites](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html#spot-fleet-prerequisites) in the Amazon EC2 User Guide. Spot Fleet can terminate Spot Instances on your behalf when you cancel its Spot Fleet request using [CancelSpotFleetRequests](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CancelSpotFleetRequests) or when the Spot Fleet request expires, if you set TerminateInstancesWithExpiration.
        /// This member is required.
        public var iamFleetRole: Swift.String?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public var instanceInterruptionBehavior: EC2ClientTypes.InstanceInterruptionBehavior?
        /// The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot AllocationStrategy is set to lowest-price. Spot Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify. Note that Spot Fleet attempts to draw Spot Instances from the number of pools that you specify on a best effort basis. If a pool runs out of Spot capacity before fulfilling your target capacity, Spot Fleet will continue to fulfill your request by drawing from the next cheapest pool. To ensure that your target capacity is met, you might receive Spot Instances from more than the number of pools that you specified. Similarly, if most of the pools have no Spot capacity, you might receive your full target capacity from fewer than the number of pools that you specified.
        public var instancePoolsToUseCount: Swift.Int?
        /// The launch specifications for the Spot Fleet request. If you specify LaunchSpecifications, you can't specify LaunchTemplateConfigs. If you include On-Demand capacity in your request, you must use LaunchTemplateConfigs.
        public var launchSpecifications: [EC2ClientTypes.SpotFleetLaunchSpecification]?
        /// The launch template and overrides. If you specify LaunchTemplateConfigs, you can't specify LaunchSpecifications. If you include On-Demand capacity in your request, you must use LaunchTemplateConfigs.
        public var launchTemplateConfigs: [EC2ClientTypes.LaunchTemplateConfig]?
        /// One or more Classic Load Balancers and target groups to attach to the Spot Fleet request. Spot Fleet registers the running Spot Instances with the specified Classic Load Balancers and target groups. With Network Load Balancers, Spot Fleet cannot register instances that have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1.
        public var loadBalancersConfig: EC2ClientTypes.LoadBalancersConfig?
        /// The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify lowestPrice, Spot Fleet uses price to determine the order, launching the lowest price first. If you specify prioritized, Spot Fleet uses the priority that you assign to each Spot Fleet launch template override, launching the highest priority first. If you do not specify a value, Spot Fleet defaults to lowestPrice.
        public var onDemandAllocationStrategy: EC2ClientTypes.OnDemandAllocationStrategy?
        /// The number of On-Demand units fulfilled by this request compared to the set target On-Demand capacity.
        public var onDemandFulfilledCapacity: Swift.Double?
        /// The maximum amount per hour for On-Demand Instances that you're willing to pay. You can use the onDemandMaxTotalPrice parameter, the spotMaxTotalPrice parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.
        public var onDemandMaxTotalPrice: Swift.String?
        /// The number of On-Demand units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
        public var onDemandTargetCapacity: Swift.Int?
        /// Indicates whether Spot Fleet should replace unhealthy instances.
        public var replaceUnhealthyInstances: Swift.Bool?
        /// The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.
        public var spotMaintenanceStrategies: EC2ClientTypes.SpotMaintenanceStrategies?
        /// The maximum amount per hour for Spot Instances that you're willing to pay. You can use the spotdMaxTotalPrice parameter, the onDemandMaxTotalPrice parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.
        public var spotMaxTotalPrice: Swift.String?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price. If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.
        public var spotPrice: Swift.String?
        /// The key-value pair for tagging the Spot Fleet request on creation. The value for ResourceType must be spot-fleet-request, otherwise the Spot Fleet request fails. To tag instances at launch, specify the tags in the [launch template](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template) (valid only if you use LaunchTemplateConfigs) or in the [SpotFleetTagSpecification](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetTagSpecification.html) (valid only if you use LaunchSpecifications). For information about tagging after launch, see [Tagging Your Resources](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources).
        public var tagSpecifications: [EC2ClientTypes.TagSpecification]?
        /// The number of units to request for the Spot Fleet. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
        /// This member is required.
        public var targetCapacity: Swift.Int?
        /// The unit for the target capacity. Default: units (translates to number of instances)
        public var targetCapacityUnitType: EC2ClientTypes.TargetCapacityUnitType?
        /// Indicates whether running Spot Instances are terminated when the Spot Fleet request expires.
        public var terminateInstancesWithExpiration: Swift.Bool?
        /// The type of request. Indicates whether the Spot Fleet only requests the target capacity or also attempts to maintain it. When this value is request, the Spot Fleet only places the required requests. It does not attempt to replenish Spot Instances if capacity is diminished, nor does it submit requests in alternative Spot pools if capacity is not available. When this value is maintain, the Spot Fleet maintains the target capacity. The Spot Fleet places the required requests to meet capacity and automatically replenishes any interrupted instances. Default: maintain. instant is listed but is not used by Spot Fleet.
        public var type: EC2ClientTypes.FleetType?
        /// The start date and time of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). By default, Amazon EC2 starts fulfilling the request immediately.
        public var validFrom: ClientRuntime.Date?
        /// The end date and time of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). After the end date and time, no new Spot Instance requests are placed or able to fulfill the request. If no value is specified, the Spot Fleet request remains until you cancel it.
        public var validUntil: ClientRuntime.Date?

        public init (
            allocationStrategy: EC2ClientTypes.AllocationStrategy? = nil,
            clientToken: Swift.String? = nil,
            context: Swift.String? = nil,
            excessCapacityTerminationPolicy: EC2ClientTypes.ExcessCapacityTerminationPolicy? = nil,
            fulfilledCapacity: Swift.Double? = nil,
            iamFleetRole: Swift.String? = nil,
            instanceInterruptionBehavior: EC2ClientTypes.InstanceInterruptionBehavior? = nil,
            instancePoolsToUseCount: Swift.Int? = nil,
            launchSpecifications: [EC2ClientTypes.SpotFleetLaunchSpecification]? = nil,
            launchTemplateConfigs: [EC2ClientTypes.LaunchTemplateConfig]? = nil,
            loadBalancersConfig: EC2ClientTypes.LoadBalancersConfig? = nil,
            onDemandAllocationStrategy: EC2ClientTypes.OnDemandAllocationStrategy? = nil,
            onDemandFulfilledCapacity: Swift.Double? = nil,
            onDemandMaxTotalPrice: Swift.String? = nil,
            onDemandTargetCapacity: Swift.Int? = nil,
            replaceUnhealthyInstances: Swift.Bool? = nil,
            spotMaintenanceStrategies: EC2ClientTypes.SpotMaintenanceStrategies? = nil,
            spotMaxTotalPrice: Swift.String? = nil,
            spotPrice: Swift.String? = nil,
            tagSpecifications: [EC2ClientTypes.TagSpecification]? = nil,
            targetCapacity: Swift.Int? = nil,
            targetCapacityUnitType: EC2ClientTypes.TargetCapacityUnitType? = nil,
            terminateInstancesWithExpiration: Swift.Bool? = nil,
            type: EC2ClientTypes.FleetType? = nil,
            validFrom: ClientRuntime.Date? = nil,
            validUntil: ClientRuntime.Date? = nil
        )
        {
            self.allocationStrategy = allocationStrategy
            self.clientToken = clientToken
            self.context = context
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.fulfilledCapacity = fulfilledCapacity
            self.iamFleetRole = iamFleetRole
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.instancePoolsToUseCount = instancePoolsToUseCount
            self.launchSpecifications = launchSpecifications
            self.launchTemplateConfigs = launchTemplateConfigs
            self.loadBalancersConfig = loadBalancersConfig
            self.onDemandAllocationStrategy = onDemandAllocationStrategy
            self.onDemandFulfilledCapacity = onDemandFulfilledCapacity
            self.onDemandMaxTotalPrice = onDemandMaxTotalPrice
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.replaceUnhealthyInstances = replaceUnhealthyInstances
            self.spotMaintenanceStrategies = spotMaintenanceStrategies
            self.spotMaxTotalPrice = spotMaxTotalPrice
            self.spotPrice = spotPrice
            self.tagSpecifications = tagSpecifications
            self.targetCapacity = targetCapacity
            self.targetCapacityUnitType = targetCapacityUnitType
            self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
            self.type = type
            self.validFrom = validFrom
            self.validUntil = validUntil
        }
    }

}
