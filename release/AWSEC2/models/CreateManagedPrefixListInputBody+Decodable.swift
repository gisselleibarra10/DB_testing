// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateManagedPrefixListInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let prefixListName: Swift.String?
    let entries: [EC2ClientTypes.AddPrefixListEntry]?
    let maxEntries: Swift.Int?
    let tagSpecifications: [EC2ClientTypes.TagSpecification]?
    let addressFamily: Swift.String?
    let clientToken: Swift.String?
}

extension CreateManagedPrefixListInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily = "AddressFamily"
        case clientToken = "ClientToken"
        case dryRun = "DryRun"
        case entries = "Entry"
        case maxEntries = "MaxEntries"
        case prefixListName = "PrefixListName"
        case tagSpecifications = "TagSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let prefixListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefixListName)
        prefixListName = prefixListNameDecoded
        if containerValues.contains(.entries) {
            struct KeyVal0{struct member{}}
            let entriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .entries)
            if let entriesWrappedContainer = entriesWrappedContainer {
                let entriesContainer = try entriesWrappedContainer.decodeIfPresent([EC2ClientTypes.AddPrefixListEntry].self, forKey: .member)
                var entriesBuffer:[EC2ClientTypes.AddPrefixListEntry]? = nil
                if let entriesContainer = entriesContainer {
                    entriesBuffer = [EC2ClientTypes.AddPrefixListEntry]()
                    for structureContainer0 in entriesContainer {
                        entriesBuffer?.append(structureContainer0)
                    }
                }
                entries = entriesBuffer
            } else {
                entries = []
            }
        } else {
            entries = nil
        }
        let maxEntriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxEntries)
        maxEntries = maxEntriesDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[EC2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [EC2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let addressFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
