// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EC2ClientTypes {
    public enum OfferingTypeValues: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allUpfront
        case heavyUtilization
        case lightUtilization
        case mediumUtilization
        case noUpfront
        case partialUpfront
        case sdkUnknown(Swift.String)

        public static var allCases: [OfferingTypeValues] {
            return [
                .allUpfront,
                .heavyUtilization,
                .lightUtilization,
                .mediumUtilization,
                .noUpfront,
                .partialUpfront,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allUpfront: return "All Upfront"
            case .heavyUtilization: return "Heavy Utilization"
            case .lightUtilization: return "Light Utilization"
            case .mediumUtilization: return "Medium Utilization"
            case .noUpfront: return "No Upfront"
            case .partialUpfront: return "Partial Upfront"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OfferingTypeValues(rawValue: rawValue) ?? OfferingTypeValues.sdkUnknown(rawValue)
        }
    }
}
