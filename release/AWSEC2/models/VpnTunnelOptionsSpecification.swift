// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// The tunnel options for a single VPN tunnel.
    public struct VpnTunnelOptionsSpecification: Swift.Equatable {
        /// The action to take after DPD timeout occurs. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid Values: clear | none | restart Default: clear
        public var dPDTimeoutAction: Swift.String?
        /// The number of seconds after which a DPD timeout occurs. Constraints: A value greater than or equal to 30. Default: 30
        public var dPDTimeoutSeconds: Swift.Int?
        /// The IKE versions that are permitted for the VPN tunnel. Valid values: ikev1 | ikev2
        public var iKEVersions: [Ec2ClientTypes.IKEVersionsRequestListValue]?
        /// Options for logging VPN tunnel activity.
        public var logOptions: Ec2ClientTypes.VpnTunnelLogOptionsSpecification?
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: 2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24
        public var phase1DHGroupNumbers: [Ec2ClientTypes.Phase1DHGroupNumbersRequestListValue]?
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16
        public var phase1EncryptionAlgorithms: [Ec2ClientTypes.Phase1EncryptionAlgorithmsRequestListValue]?
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512
        public var phase1IntegrityAlgorithms: [Ec2ClientTypes.Phase1IntegrityAlgorithmsRequestListValue]?
        /// The lifetime for phase 1 of the IKE negotiation, in seconds. Constraints: A value between 900 and 28,800. Default: 28800
        public var phase1LifetimeSeconds: Swift.Int?
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24
        public var phase2DHGroupNumbers: [Ec2ClientTypes.Phase2DHGroupNumbersRequestListValue]?
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16
        public var phase2EncryptionAlgorithms: [Ec2ClientTypes.Phase2EncryptionAlgorithmsRequestListValue]?
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512
        public var phase2IntegrityAlgorithms: [Ec2ClientTypes.Phase2IntegrityAlgorithmsRequestListValue]?
        /// The lifetime for phase 2 of the IKE negotiation, in seconds. Constraints: A value between 900 and 3,600. The value must be less than the value for Phase1LifetimeSeconds. Default: 3600
        public var phase2LifetimeSeconds: Swift.Int?
        /// The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway. Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).
        public var preSharedKey: Swift.String?
        /// The percentage of the rekey window (determined by RekeyMarginTimeSeconds) during which the rekey time is randomly selected. Constraints: A value between 0 and 100. Default: 100
        public var rekeyFuzzPercentage: Swift.Int?
        /// The margin time, in seconds, before the phase 2 lifetime expires, during which the Amazon Web Services side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for RekeyFuzzPercentage. Constraints: A value between 60 and half of Phase2LifetimeSeconds. Default: 540
        public var rekeyMarginTimeSeconds: Swift.Int?
        /// The number of packets in an IKE replay window. Constraints: A value between 64 and 2048. Default: 1024
        public var replayWindowSize: Swift.Int?
        /// The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for Amazon Web Services to initiate the IKE negotiation. Valid Values: add | start Default: add
        public var startupAction: Swift.String?
        /// The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway. Constraints: A size /30 CIDR block from the 169.254.0.0/16 range. The following CIDR blocks are reserved and cannot be used:
        ///
        /// * 169.254.0.0/30
        ///
        /// * 169.254.1.0/30
        ///
        /// * 169.254.2.0/30
        ///
        /// * 169.254.3.0/30
        ///
        /// * 169.254.4.0/30
        ///
        /// * 169.254.5.0/30
        ///
        /// * 169.254.169.252/30
        public var tunnelInsideCidr: Swift.String?
        /// The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway. Constraints: A size /126 CIDR block from the local fd00::/8 range.
        public var tunnelInsideIpv6Cidr: Swift.String?

        public init (
            dPDTimeoutAction: Swift.String? = nil,
            dPDTimeoutSeconds: Swift.Int? = nil,
            iKEVersions: [Ec2ClientTypes.IKEVersionsRequestListValue]? = nil,
            logOptions: Ec2ClientTypes.VpnTunnelLogOptionsSpecification? = nil,
            phase1DHGroupNumbers: [Ec2ClientTypes.Phase1DHGroupNumbersRequestListValue]? = nil,
            phase1EncryptionAlgorithms: [Ec2ClientTypes.Phase1EncryptionAlgorithmsRequestListValue]? = nil,
            phase1IntegrityAlgorithms: [Ec2ClientTypes.Phase1IntegrityAlgorithmsRequestListValue]? = nil,
            phase1LifetimeSeconds: Swift.Int? = nil,
            phase2DHGroupNumbers: [Ec2ClientTypes.Phase2DHGroupNumbersRequestListValue]? = nil,
            phase2EncryptionAlgorithms: [Ec2ClientTypes.Phase2EncryptionAlgorithmsRequestListValue]? = nil,
            phase2IntegrityAlgorithms: [Ec2ClientTypes.Phase2IntegrityAlgorithmsRequestListValue]? = nil,
            phase2LifetimeSeconds: Swift.Int? = nil,
            preSharedKey: Swift.String? = nil,
            rekeyFuzzPercentage: Swift.Int? = nil,
            rekeyMarginTimeSeconds: Swift.Int? = nil,
            replayWindowSize: Swift.Int? = nil,
            startupAction: Swift.String? = nil,
            tunnelInsideCidr: Swift.String? = nil,
            tunnelInsideIpv6Cidr: Swift.String? = nil
        )
        {
            self.dPDTimeoutAction = dPDTimeoutAction
            self.dPDTimeoutSeconds = dPDTimeoutSeconds
            self.iKEVersions = iKEVersions
            self.logOptions = logOptions
            self.phase1DHGroupNumbers = phase1DHGroupNumbers
            self.phase1EncryptionAlgorithms = phase1EncryptionAlgorithms
            self.phase1IntegrityAlgorithms = phase1IntegrityAlgorithms
            self.phase1LifetimeSeconds = phase1LifetimeSeconds
            self.phase2DHGroupNumbers = phase2DHGroupNumbers
            self.phase2EncryptionAlgorithms = phase2EncryptionAlgorithms
            self.phase2IntegrityAlgorithms = phase2IntegrityAlgorithms
            self.phase2LifetimeSeconds = phase2LifetimeSeconds
            self.preSharedKey = preSharedKey
            self.rekeyFuzzPercentage = rekeyFuzzPercentage
            self.rekeyMarginTimeSeconds = rekeyMarginTimeSeconds
            self.replayWindowSize = replayWindowSize
            self.startupAction = startupAction
            self.tunnelInsideCidr = tunnelInsideCidr
            self.tunnelInsideIpv6Cidr = tunnelInsideIpv6Cidr
        }
    }

}
