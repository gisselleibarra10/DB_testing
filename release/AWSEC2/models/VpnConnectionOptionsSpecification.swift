// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// Describes VPN connection options.
    public struct VpnConnectionOptionsSpecification: Swift.Equatable {
        /// Indicate whether to enable acceleration for the VPN connection. Default: false
        public var enableAcceleration: Swift.Bool?
        /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: 0.0.0.0/0
        public var localIpv4NetworkCidr: Swift.String?
        /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: ::/0
        public var localIpv6NetworkCidr: Swift.String?
        /// The type of IPv4 address assigned to the outside interface of the customer gateway device. Valid values: PrivateIpv4 | PublicIpv4 Default: PublicIpv4
        public var outsideIpAddressType: Swift.String?
        /// The IPv4 CIDR on the Amazon Web Services side of the VPN connection. Default: 0.0.0.0/0
        public var remoteIpv4NetworkCidr: Swift.String?
        /// The IPv6 CIDR on the Amazon Web Services side of the VPN connection. Default: ::/0
        public var remoteIpv6NetworkCidr: Swift.String?
        /// Indicate whether the VPN connection uses static routes only. If you are creating a VPN connection for a device that does not support BGP, you must specify true. Use [CreateVpnConnectionRoute] to create a static route. Default: false
        public var staticRoutesOnly: Swift.Bool?
        /// The transit gateway attachment ID to use for the VPN tunnel. Required if OutsideIpAddressType is set to PrivateIpv4.
        public var transportTransitGatewayAttachmentId: Swift.String?
        /// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Default: ipv4
        public var tunnelInsideIpVersion: Ec2ClientTypes.TunnelInsideIpVersion?
        /// The tunnel options for the VPN connection.
        public var tunnelOptions: [Ec2ClientTypes.VpnTunnelOptionsSpecification]?

        public init (
            enableAcceleration: Swift.Bool? = nil,
            localIpv4NetworkCidr: Swift.String? = nil,
            localIpv6NetworkCidr: Swift.String? = nil,
            outsideIpAddressType: Swift.String? = nil,
            remoteIpv4NetworkCidr: Swift.String? = nil,
            remoteIpv6NetworkCidr: Swift.String? = nil,
            staticRoutesOnly: Swift.Bool? = nil,
            transportTransitGatewayAttachmentId: Swift.String? = nil,
            tunnelInsideIpVersion: Ec2ClientTypes.TunnelInsideIpVersion? = nil,
            tunnelOptions: [Ec2ClientTypes.VpnTunnelOptionsSpecification]? = nil
        )
        {
            self.enableAcceleration = enableAcceleration
            self.localIpv4NetworkCidr = localIpv4NetworkCidr
            self.localIpv6NetworkCidr = localIpv6NetworkCidr
            self.outsideIpAddressType = outsideIpAddressType
            self.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr
            self.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr
            self.staticRoutesOnly = staticRoutesOnly
            self.transportTransitGatewayAttachmentId = transportTransitGatewayAttachmentId
            self.tunnelInsideIpVersion = tunnelInsideIpVersion
            self.tunnelOptions = tunnelOptions
        }
    }

}
