// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EC2ClientTypes {
    public enum CapacityReservationInstancePlatform: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case linuxUnix
        case linuxWithSqlServerEnterprise
        case linuxWithSqlServerStandard
        case linuxWithSqlServerWeb
        case redHatEnterpriseLinux
        case rhelWithHa
        case rhelWithHaAndSqlServerEnterprise
        case rhelWithHaAndSqlServerStandard
        case rhelWithSqlServerEnterprise
        case rhelWithSqlServerStandard
        case rhelWithSqlServerWeb
        case suseLinux
        case windows
        case windowsWithSqlServer
        case windowsWithSqlServerEnterprise
        case windowsWithSqlServerStandard
        case windowsWithSqlServerWeb
        case sdkUnknown(Swift.String)

        public static var allCases: [CapacityReservationInstancePlatform] {
            return [
                .linuxUnix,
                .linuxWithSqlServerEnterprise,
                .linuxWithSqlServerStandard,
                .linuxWithSqlServerWeb,
                .redHatEnterpriseLinux,
                .rhelWithHa,
                .rhelWithHaAndSqlServerEnterprise,
                .rhelWithHaAndSqlServerStandard,
                .rhelWithSqlServerEnterprise,
                .rhelWithSqlServerStandard,
                .rhelWithSqlServerWeb,
                .suseLinux,
                .windows,
                .windowsWithSqlServer,
                .windowsWithSqlServerEnterprise,
                .windowsWithSqlServerStandard,
                .windowsWithSqlServerWeb,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .linuxUnix: return "Linux/UNIX"
            case .linuxWithSqlServerEnterprise: return "Linux with SQL Server Enterprise"
            case .linuxWithSqlServerStandard: return "Linux with SQL Server Standard"
            case .linuxWithSqlServerWeb: return "Linux with SQL Server Web"
            case .redHatEnterpriseLinux: return "Red Hat Enterprise Linux"
            case .rhelWithHa: return "RHEL with HA"
            case .rhelWithHaAndSqlServerEnterprise: return "RHEL with HA and SQL Server Enterprise"
            case .rhelWithHaAndSqlServerStandard: return "RHEL with HA and SQL Server Standard"
            case .rhelWithSqlServerEnterprise: return "RHEL with SQL Server Enterprise"
            case .rhelWithSqlServerStandard: return "RHEL with SQL Server Standard"
            case .rhelWithSqlServerWeb: return "RHEL with SQL Server Web"
            case .suseLinux: return "SUSE Linux"
            case .windows: return "Windows"
            case .windowsWithSqlServer: return "Windows with SQL Server"
            case .windowsWithSqlServerEnterprise: return "Windows with SQL Server Enterprise"
            case .windowsWithSqlServerStandard: return "Windows with SQL Server Standard"
            case .windowsWithSqlServerWeb: return "Windows with SQL Server Web"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CapacityReservationInstancePlatform(rawValue: rawValue) ?? CapacityReservationInstancePlatform.sdkUnknown(rawValue)
        }
    }
}
