// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CancelReservedInstancesListingOutputResponseBody: Swift.Equatable {
    let reservedInstancesListings: [Ec2ClientTypes.ReservedInstancesListing]?
}

extension CancelReservedInstancesListingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reservedInstancesListings = "reservedInstancesListingsSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.reservedInstancesListings) {
            struct KeyVal0{struct item{}}
            let reservedInstancesListingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .reservedInstancesListings)
            if let reservedInstancesListingsWrappedContainer = reservedInstancesListingsWrappedContainer {
                let reservedInstancesListingsContainer = try reservedInstancesListingsWrappedContainer.decodeIfPresent([Ec2ClientTypes.ReservedInstancesListing].self, forKey: .member)
                var reservedInstancesListingsBuffer:[Ec2ClientTypes.ReservedInstancesListing]? = nil
                if let reservedInstancesListingsContainer = reservedInstancesListingsContainer {
                    reservedInstancesListingsBuffer = [Ec2ClientTypes.ReservedInstancesListing]()
                    for structureContainer0 in reservedInstancesListingsContainer {
                        reservedInstancesListingsBuffer?.append(structureContainer0)
                    }
                }
                reservedInstancesListings = reservedInstancesListingsBuffer
            } else {
                reservedInstancesListings = []
            }
        } else {
            reservedInstancesListings = nil
        }
    }
}
