// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.Ipv6Pool: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "description"
        case poolCidrBlocks = "poolCidrBlockSet"
        case poolId = "poolId"
        case tags = "tagSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let poolCidrBlocks = poolCidrBlocks {
            if !poolCidrBlocks.isEmpty {
                for (index0, poolcidrblock0) in poolCidrBlocks.enumerated() {
                    var poolCidrBlocksContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PoolCidrBlockSet.\(index0.advanced(by: 1))"))
                    try poolCidrBlocksContainer0.encode(poolcidrblock0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let poolId = poolId {
            try container.encode(poolId, forKey: ClientRuntime.Key("PoolId"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let poolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .poolId)
        poolId = poolIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.poolCidrBlocks) {
            struct KeyVal0{struct item{}}
            let poolCidrBlocksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .poolCidrBlocks)
            if let poolCidrBlocksWrappedContainer = poolCidrBlocksWrappedContainer {
                let poolCidrBlocksContainer = try poolCidrBlocksWrappedContainer.decodeIfPresent([Ec2ClientTypes.PoolCidrBlock].self, forKey: .member)
                var poolCidrBlocksBuffer:[Ec2ClientTypes.PoolCidrBlock]? = nil
                if let poolCidrBlocksContainer = poolCidrBlocksContainer {
                    poolCidrBlocksBuffer = [Ec2ClientTypes.PoolCidrBlock]()
                    for structureContainer0 in poolCidrBlocksContainer {
                        poolCidrBlocksBuffer?.append(structureContainer0)
                    }
                }
                poolCidrBlocks = poolCidrBlocksBuffer
            } else {
                poolCidrBlocks = []
            }
        } else {
            poolCidrBlocks = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
