// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.ClientVpnConnection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientIp = "clientIp"
        case clientVpnEndpointId = "clientVpnEndpointId"
        case commonName = "commonName"
        case connectionEndTime = "connectionEndTime"
        case connectionEstablishedTime = "connectionEstablishedTime"
        case connectionId = "connectionId"
        case egressBytes = "egressBytes"
        case egressPackets = "egressPackets"
        case ingressBytes = "ingressBytes"
        case ingressPackets = "ingressPackets"
        case postureComplianceStatuses = "postureComplianceStatusSet"
        case status = "status"
        case timestamp = "timestamp"
        case username = "username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientIp = clientIp {
            try container.encode(clientIp, forKey: ClientRuntime.Key("ClientIp"))
        }
        if let clientVpnEndpointId = clientVpnEndpointId {
            try container.encode(clientVpnEndpointId, forKey: ClientRuntime.Key("ClientVpnEndpointId"))
        }
        if let commonName = commonName {
            try container.encode(commonName, forKey: ClientRuntime.Key("CommonName"))
        }
        if let connectionEndTime = connectionEndTime {
            try container.encode(connectionEndTime, forKey: ClientRuntime.Key("ConnectionEndTime"))
        }
        if let connectionEstablishedTime = connectionEstablishedTime {
            try container.encode(connectionEstablishedTime, forKey: ClientRuntime.Key("ConnectionEstablishedTime"))
        }
        if let connectionId = connectionId {
            try container.encode(connectionId, forKey: ClientRuntime.Key("ConnectionId"))
        }
        if let egressBytes = egressBytes {
            try container.encode(egressBytes, forKey: ClientRuntime.Key("EgressBytes"))
        }
        if let egressPackets = egressPackets {
            try container.encode(egressPackets, forKey: ClientRuntime.Key("EgressPackets"))
        }
        if let ingressBytes = ingressBytes {
            try container.encode(ingressBytes, forKey: ClientRuntime.Key("IngressBytes"))
        }
        if let ingressPackets = ingressPackets {
            try container.encode(ingressPackets, forKey: ClientRuntime.Key("IngressPackets"))
        }
        if let postureComplianceStatuses = postureComplianceStatuses {
            if !postureComplianceStatuses.isEmpty {
                for (index0, string0) in postureComplianceStatuses.enumerated() {
                    var postureComplianceStatusesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PostureComplianceStatusSet.\(index0.advanced(by: 1))"))
                    try postureComplianceStatusesContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let timestamp = timestamp {
            try container.encode(timestamp, forKey: ClientRuntime.Key("Timestamp"))
        }
        if let username = username {
            try container.encode(username, forKey: ClientRuntime.Key("Username"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientVpnEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientVpnEndpointId)
        clientVpnEndpointId = clientVpnEndpointIdDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let connectionEstablishedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionEstablishedTime)
        connectionEstablishedTime = connectionEstablishedTimeDecoded
        let ingressBytesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ingressBytes)
        ingressBytes = ingressBytesDecoded
        let egressBytesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .egressBytes)
        egressBytes = egressBytesDecoded
        let ingressPacketsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ingressPackets)
        ingressPackets = ingressPacketsDecoded
        let egressPacketsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .egressPackets)
        egressPackets = egressPacketsDecoded
        let clientIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientIp)
        clientIp = clientIpDecoded
        let commonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commonName)
        commonName = commonNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.ClientVpnConnectionStatus.self, forKey: .status)
        status = statusDecoded
        let connectionEndTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionEndTime)
        connectionEndTime = connectionEndTimeDecoded
        if containerValues.contains(.postureComplianceStatuses) {
            struct KeyVal0{struct item{}}
            let postureComplianceStatusesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .postureComplianceStatuses)
            if let postureComplianceStatusesWrappedContainer = postureComplianceStatusesWrappedContainer {
                let postureComplianceStatusesContainer = try postureComplianceStatusesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var postureComplianceStatusesBuffer:[Swift.String]? = nil
                if let postureComplianceStatusesContainer = postureComplianceStatusesContainer {
                    postureComplianceStatusesBuffer = [Swift.String]()
                    for stringContainer0 in postureComplianceStatusesContainer {
                        postureComplianceStatusesBuffer?.append(stringContainer0)
                    }
                }
                postureComplianceStatuses = postureComplianceStatusesBuffer
            } else {
                postureComplianceStatuses = []
            }
        } else {
            postureComplianceStatuses = nil
        }
    }
}
