// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeCoipPoolsOutputResponseBody: Swift.Equatable {
    let coipPools: [EC2ClientTypes.CoipPool]?
    let nextToken: Swift.String?
}

extension DescribeCoipPoolsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case coipPools = "coipPoolSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.coipPools) {
            struct KeyVal0{struct item{}}
            let coipPoolsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .coipPools)
            if let coipPoolsWrappedContainer = coipPoolsWrappedContainer {
                let coipPoolsContainer = try coipPoolsWrappedContainer.decodeIfPresent([EC2ClientTypes.CoipPool].self, forKey: .member)
                var coipPoolsBuffer:[EC2ClientTypes.CoipPool]? = nil
                if let coipPoolsContainer = coipPoolsContainer {
                    coipPoolsBuffer = [EC2ClientTypes.CoipPool]()
                    for structureContainer0 in coipPoolsContainer {
                        coipPoolsBuffer?.append(structureContainer0)
                    }
                }
                coipPools = coipPoolsBuffer
            } else {
                coipPools = []
            }
        } else {
            coipPools = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
