// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AssignPrivateIpAddressesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowReassignment = allowReassignment {
            try container.encode(allowReassignment, forKey: ClientRuntime.Key("AllowReassignment"))
        }
        if let ipv4PrefixCount = ipv4PrefixCount {
            try container.encode(ipv4PrefixCount, forKey: ClientRuntime.Key("Ipv4PrefixCount"))
        }
        if let ipv4Prefixes = ipv4Prefixes {
            if !ipv4Prefixes.isEmpty {
                for (index0, string0) in ipv4Prefixes.enumerated() {
                    var ipv4PrefixesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Ipv4Prefix.\(index0.advanced(by: 1))"))
                    try ipv4PrefixesContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let networkInterfaceId = networkInterfaceId {
            try container.encode(networkInterfaceId, forKey: ClientRuntime.Key("NetworkInterfaceId"))
        }
        if let privateIpAddresses = privateIpAddresses {
            if !privateIpAddresses.isEmpty {
                for (index0, string0) in privateIpAddresses.enumerated() {
                    var privateIpAddressesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PrivateIpAddress.\(index0.advanced(by: 1))"))
                    try privateIpAddressesContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount {
            try container.encode(secondaryPrivateIpAddressCount, forKey: ClientRuntime.Key("SecondaryPrivateIpAddressCount"))
        }
        try container.encode("AssignPrivateIpAddresses", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
