// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.SlotDateTimeRangeRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case earliestTime = "EarliestTime"
        case latestTime = "LatestTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let earliestTime = earliestTime {
            try container.encode(ClientRuntime.TimestampWrapper(earliestTime, format: .dateTime), forKey: ClientRuntime.Key("EarliestTime"))
        }
        if let latestTime = latestTime {
            try container.encode(ClientRuntime.TimestampWrapper(latestTime, format: .dateTime), forKey: ClientRuntime.Key("LatestTime"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let earliestTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .earliestTime)
        var earliestTimeBuffer:ClientRuntime.Date? = nil
        if let earliestTimeDecoded = earliestTimeDecoded {
            earliestTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(earliestTimeDecoded, format: .dateTime)
        }
        earliestTime = earliestTimeBuffer
        let latestTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestTime)
        var latestTimeBuffer:ClientRuntime.Date? = nil
        if let latestTimeDecoded = latestTimeDecoded {
            latestTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(latestTimeDecoded, format: .dateTime)
        }
        latestTime = latestTimeBuffer
    }
}
