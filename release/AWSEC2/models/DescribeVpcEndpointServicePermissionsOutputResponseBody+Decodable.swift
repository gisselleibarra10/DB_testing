// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVpcEndpointServicePermissionsOutputResponseBody: Swift.Equatable {
    let allowedPrincipals: [EC2ClientTypes.AllowedPrincipal]?
    let nextToken: Swift.String?
}

extension DescribeVpcEndpointServicePermissionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedPrincipals = "allowedPrincipals"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.allowedPrincipals) {
            struct KeyVal0{struct item{}}
            let allowedPrincipalsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .allowedPrincipals)
            if let allowedPrincipalsWrappedContainer = allowedPrincipalsWrappedContainer {
                let allowedPrincipalsContainer = try allowedPrincipalsWrappedContainer.decodeIfPresent([EC2ClientTypes.AllowedPrincipal].self, forKey: .member)
                var allowedPrincipalsBuffer:[EC2ClientTypes.AllowedPrincipal]? = nil
                if let allowedPrincipalsContainer = allowedPrincipalsContainer {
                    allowedPrincipalsBuffer = [EC2ClientTypes.AllowedPrincipal]()
                    for structureContainer0 in allowedPrincipalsContainer {
                        allowedPrincipalsBuffer?.append(structureContainer0)
                    }
                }
                allowedPrincipals = allowedPrincipalsBuffer
            } else {
                allowedPrincipals = []
            }
        } else {
            allowedPrincipals = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
