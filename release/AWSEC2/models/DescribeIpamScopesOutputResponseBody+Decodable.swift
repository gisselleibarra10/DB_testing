// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeIpamScopesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let ipamScopes: [Ec2ClientTypes.IpamScope]?
}

extension DescribeIpamScopesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipamScopes = "ipamScopeSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.ipamScopes) {
            struct KeyVal0{struct item{}}
            let ipamScopesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .ipamScopes)
            if let ipamScopesWrappedContainer = ipamScopesWrappedContainer {
                let ipamScopesContainer = try ipamScopesWrappedContainer.decodeIfPresent([Ec2ClientTypes.IpamScope].self, forKey: .member)
                var ipamScopesBuffer:[Ec2ClientTypes.IpamScope]? = nil
                if let ipamScopesContainer = ipamScopesContainer {
                    ipamScopesBuffer = [Ec2ClientTypes.IpamScope]()
                    for structureContainer0 in ipamScopesContainer {
                        ipamScopesBuffer?.append(structureContainer0)
                    }
                }
                ipamScopes = ipamScopesBuffer
            } else {
                ipamScopes = []
            }
        } else {
            ipamScopes = nil
        }
    }
}
