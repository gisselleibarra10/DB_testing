// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportInstanceInputBody: Swift.Equatable {
    let description: Swift.String?
    let diskImages: [Ec2ClientTypes.DiskImage]?
    let dryRun: Swift.Bool?
    let launchSpecification: Ec2ClientTypes.ImportInstanceLaunchSpecification?
    let platform: Ec2ClientTypes.PlatformValues?
}

extension ImportInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "description"
        case diskImages = "diskImage"
        case dryRun = "dryRun"
        case launchSpecification = "launchSpecification"
        case platform = "platform"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.diskImages) {
            struct KeyVal0{struct member{}}
            let diskImagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .diskImages)
            if let diskImagesWrappedContainer = diskImagesWrappedContainer {
                let diskImagesContainer = try diskImagesWrappedContainer.decodeIfPresent([Ec2ClientTypes.DiskImage].self, forKey: .member)
                var diskImagesBuffer:[Ec2ClientTypes.DiskImage]? = nil
                if let diskImagesContainer = diskImagesContainer {
                    diskImagesBuffer = [Ec2ClientTypes.DiskImage]()
                    for structureContainer0 in diskImagesContainer {
                        diskImagesBuffer?.append(structureContainer0)
                    }
                }
                diskImages = diskImagesBuffer
            } else {
                diskImages = []
            }
        } else {
            diskImages = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let launchSpecificationDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.ImportInstanceLaunchSpecification.self, forKey: .launchSpecification)
        launchSpecification = launchSpecificationDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.PlatformValues.self, forKey: .platform)
        platform = platformDecoded
    }
}
