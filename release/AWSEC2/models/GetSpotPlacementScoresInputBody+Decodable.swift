// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetSpotPlacementScoresInputBody: Swift.Equatable {
    let instanceTypes: [Swift.String]?
    let targetCapacity: Swift.Int?
    let targetCapacityUnitType: Ec2ClientTypes.TargetCapacityUnitType?
    let singleAvailabilityZone: Swift.Bool?
    let regionNames: [Swift.String]?
    let instanceRequirementsWithMetadata: Ec2ClientTypes.InstanceRequirementsWithMetadataRequest?
    let dryRun: Swift.Bool?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension GetSpotPlacementScoresInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case instanceRequirementsWithMetadata = "InstanceRequirementsWithMetadata"
        case instanceTypes = "InstanceType"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case regionNames = "RegionName"
        case singleAvailabilityZone = "SingleAvailabilityZone"
        case targetCapacity = "TargetCapacity"
        case targetCapacityUnitType = "TargetCapacityUnitType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.instanceTypes) {
            struct KeyVal0{struct member{}}
            let instanceTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceTypes)
            if let instanceTypesWrappedContainer = instanceTypesWrappedContainer {
                let instanceTypesContainer = try instanceTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var instanceTypesBuffer:[Swift.String]? = nil
                if let instanceTypesContainer = instanceTypesContainer {
                    instanceTypesBuffer = [Swift.String]()
                    for stringContainer0 in instanceTypesContainer {
                        instanceTypesBuffer?.append(stringContainer0)
                    }
                }
                instanceTypes = instanceTypesBuffer
            } else {
                instanceTypes = []
            }
        } else {
            instanceTypes = nil
        }
        let targetCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .targetCapacity)
        targetCapacity = targetCapacityDecoded
        let targetCapacityUnitTypeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.TargetCapacityUnitType.self, forKey: .targetCapacityUnitType)
        targetCapacityUnitType = targetCapacityUnitTypeDecoded
        let singleAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .singleAvailabilityZone)
        singleAvailabilityZone = singleAvailabilityZoneDecoded
        if containerValues.contains(.regionNames) {
            struct KeyVal0{struct member{}}
            let regionNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .regionNames)
            if let regionNamesWrappedContainer = regionNamesWrappedContainer {
                let regionNamesContainer = try regionNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var regionNamesBuffer:[Swift.String]? = nil
                if let regionNamesContainer = regionNamesContainer {
                    regionNamesBuffer = [Swift.String]()
                    for stringContainer0 in regionNamesContainer {
                        regionNamesBuffer?.append(stringContainer0)
                    }
                }
                regionNames = regionNamesBuffer
            } else {
                regionNames = []
            }
        } else {
            regionNames = nil
        }
        let instanceRequirementsWithMetadataDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.InstanceRequirementsWithMetadataRequest.self, forKey: .instanceRequirementsWithMetadata)
        instanceRequirementsWithMetadata = instanceRequirementsWithMetadataDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
