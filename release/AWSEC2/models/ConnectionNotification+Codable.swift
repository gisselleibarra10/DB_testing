// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.ConnectionNotification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionEvents = "connectionEvents"
        case connectionNotificationArn = "connectionNotificationArn"
        case connectionNotificationId = "connectionNotificationId"
        case connectionNotificationState = "connectionNotificationState"
        case connectionNotificationType = "connectionNotificationType"
        case serviceId = "serviceId"
        case vpcEndpointId = "vpcEndpointId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let connectionEvents = connectionEvents {
            if !connectionEvents.isEmpty {
                for (index0, string0) in connectionEvents.enumerated() {
                    var connectionEventsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ConnectionEvents.\(index0.advanced(by: 1))"))
                    try connectionEventsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var connectionEventsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ConnectionEvents"))
                try connectionEventsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let connectionNotificationArn = connectionNotificationArn {
            try container.encode(connectionNotificationArn, forKey: ClientRuntime.Key("ConnectionNotificationArn"))
        }
        if let connectionNotificationId = connectionNotificationId {
            try container.encode(connectionNotificationId, forKey: ClientRuntime.Key("ConnectionNotificationId"))
        }
        if let connectionNotificationState = connectionNotificationState {
            try container.encode(connectionNotificationState, forKey: ClientRuntime.Key("ConnectionNotificationState"))
        }
        if let connectionNotificationType = connectionNotificationType {
            try container.encode(connectionNotificationType, forKey: ClientRuntime.Key("ConnectionNotificationType"))
        }
        if let serviceId = serviceId {
            try container.encode(serviceId, forKey: ClientRuntime.Key("ServiceId"))
        }
        if let vpcEndpointId = vpcEndpointId {
            try container.encode(vpcEndpointId, forKey: ClientRuntime.Key("VpcEndpointId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionNotificationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionNotificationId)
        connectionNotificationId = connectionNotificationIdDecoded
        let serviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceId)
        serviceId = serviceIdDecoded
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let connectionNotificationTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ConnectionNotificationType.self, forKey: .connectionNotificationType)
        connectionNotificationType = connectionNotificationTypeDecoded
        let connectionNotificationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionNotificationArn)
        connectionNotificationArn = connectionNotificationArnDecoded
        if containerValues.contains(.connectionEvents) {
            struct KeyVal0{struct item{}}
            let connectionEventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .connectionEvents)
            if let connectionEventsWrappedContainer = connectionEventsWrappedContainer {
                let connectionEventsContainer = try connectionEventsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var connectionEventsBuffer:[Swift.String]? = nil
                if let connectionEventsContainer = connectionEventsContainer {
                    connectionEventsBuffer = [Swift.String]()
                    for stringContainer0 in connectionEventsContainer {
                        connectionEventsBuffer?.append(stringContainer0)
                    }
                }
                connectionEvents = connectionEventsBuffer
            } else {
                connectionEvents = []
            }
        } else {
            connectionEvents = nil
        }
        let connectionNotificationStateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ConnectionNotificationState.self, forKey: .connectionNotificationState)
        connectionNotificationState = connectionNotificationStateDecoded
    }
}
