// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVerifiedAccessInstancesOutputResponseBody: Swift.Equatable {
    let verifiedAccessInstances: [EC2ClientTypes.VerifiedAccessInstance]?
    let nextToken: Swift.String?
}

extension DescribeVerifiedAccessInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case verifiedAccessInstances = "verifiedAccessInstanceSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.verifiedAccessInstances) {
            struct KeyVal0{struct item{}}
            let verifiedAccessInstancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .verifiedAccessInstances)
            if let verifiedAccessInstancesWrappedContainer = verifiedAccessInstancesWrappedContainer {
                let verifiedAccessInstancesContainer = try verifiedAccessInstancesWrappedContainer.decodeIfPresent([EC2ClientTypes.VerifiedAccessInstance].self, forKey: .member)
                var verifiedAccessInstancesBuffer:[EC2ClientTypes.VerifiedAccessInstance]? = nil
                if let verifiedAccessInstancesContainer = verifiedAccessInstancesContainer {
                    verifiedAccessInstancesBuffer = [EC2ClientTypes.VerifiedAccessInstance]()
                    for structureContainer0 in verifiedAccessInstancesContainer {
                        verifiedAccessInstancesBuffer?.append(structureContainer0)
                    }
                }
                verifiedAccessInstances = verifiedAccessInstancesBuffer
            } else {
                verifiedAccessInstances = []
            }
        } else {
            verifiedAccessInstances = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
