// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateClientVpnEndpointInputBody: Swift.Equatable {
    let clientCidrBlock: Swift.String?
    let serverCertificateArn: Swift.String?
    let authenticationOptions: [Ec2ClientTypes.ClientVpnAuthenticationRequest]?
    let connectionLogOptions: Ec2ClientTypes.ConnectionLogOptions?
    let dnsServers: [Swift.String]?
    let transportProtocol: Ec2ClientTypes.TransportProtocol?
    let vpnPort: Swift.Int?
    let description: Swift.String?
    let splitTunnel: Swift.Bool?
    let dryRun: Swift.Bool?
    let clientToken: Swift.String?
    let tagSpecifications: [Ec2ClientTypes.TagSpecification]?
    let securityGroupIds: [Swift.String]?
    let vpcId: Swift.String?
    let selfServicePortal: Ec2ClientTypes.SelfServicePortal?
    let clientConnectOptions: Ec2ClientTypes.ClientConnectOptions?
    let sessionTimeoutHours: Swift.Int?
    let clientLoginBannerOptions: Ec2ClientTypes.ClientLoginBannerOptions?
}

extension CreateClientVpnEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationOptions = "Authentication"
        case clientCidrBlock = "ClientCidrBlock"
        case clientConnectOptions = "ClientConnectOptions"
        case clientLoginBannerOptions = "ClientLoginBannerOptions"
        case clientToken = "ClientToken"
        case connectionLogOptions = "ConnectionLogOptions"
        case description = "Description"
        case dnsServers = "DnsServers"
        case dryRun = "DryRun"
        case securityGroupIds = "SecurityGroupId"
        case selfServicePortal = "SelfServicePortal"
        case serverCertificateArn = "ServerCertificateArn"
        case sessionTimeoutHours = "SessionTimeoutHours"
        case splitTunnel = "SplitTunnel"
        case tagSpecifications = "TagSpecification"
        case transportProtocol = "TransportProtocol"
        case vpcId = "VpcId"
        case vpnPort = "VpnPort"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientCidrBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientCidrBlock)
        clientCidrBlock = clientCidrBlockDecoded
        let serverCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverCertificateArn)
        serverCertificateArn = serverCertificateArnDecoded
        if containerValues.contains(.authenticationOptions) {
            struct KeyVal0{struct member{}}
            let authenticationOptionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .authenticationOptions)
            if let authenticationOptionsWrappedContainer = authenticationOptionsWrappedContainer {
                let authenticationOptionsContainer = try authenticationOptionsWrappedContainer.decodeIfPresent([Ec2ClientTypes.ClientVpnAuthenticationRequest].self, forKey: .member)
                var authenticationOptionsBuffer:[Ec2ClientTypes.ClientVpnAuthenticationRequest]? = nil
                if let authenticationOptionsContainer = authenticationOptionsContainer {
                    authenticationOptionsBuffer = [Ec2ClientTypes.ClientVpnAuthenticationRequest]()
                    for structureContainer0 in authenticationOptionsContainer {
                        authenticationOptionsBuffer?.append(structureContainer0)
                    }
                }
                authenticationOptions = authenticationOptionsBuffer
            } else {
                authenticationOptions = []
            }
        } else {
            authenticationOptions = nil
        }
        let connectionLogOptionsDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.ConnectionLogOptions.self, forKey: .connectionLogOptions)
        connectionLogOptions = connectionLogOptionsDecoded
        if containerValues.contains(.dnsServers) {
            struct KeyVal0{struct item{}}
            let dnsServersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .dnsServers)
            if let dnsServersWrappedContainer = dnsServersWrappedContainer {
                let dnsServersContainer = try dnsServersWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var dnsServersBuffer:[Swift.String]? = nil
                if let dnsServersContainer = dnsServersContainer {
                    dnsServersBuffer = [Swift.String]()
                    for stringContainer0 in dnsServersContainer {
                        dnsServersBuffer?.append(stringContainer0)
                    }
                }
                dnsServers = dnsServersBuffer
            } else {
                dnsServers = []
            }
        } else {
            dnsServers = nil
        }
        let transportProtocolDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.TransportProtocol.self, forKey: .transportProtocol)
        transportProtocol = transportProtocolDecoded
        let vpnPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .vpnPort)
        vpnPort = vpnPortDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let splitTunnelDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .splitTunnel)
        splitTunnel = splitTunnelDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[Ec2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [Ec2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        if containerValues.contains(.securityGroupIds) {
            struct KeyVal0{struct item{}}
            let securityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .securityGroupIds)
            if let securityGroupIdsWrappedContainer = securityGroupIdsWrappedContainer {
                let securityGroupIdsContainer = try securityGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var securityGroupIdsBuffer:[Swift.String]? = nil
                if let securityGroupIdsContainer = securityGroupIdsContainer {
                    securityGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in securityGroupIdsContainer {
                        securityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                securityGroupIds = securityGroupIdsBuffer
            } else {
                securityGroupIds = []
            }
        } else {
            securityGroupIds = nil
        }
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let selfServicePortalDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.SelfServicePortal.self, forKey: .selfServicePortal)
        selfServicePortal = selfServicePortalDecoded
        let clientConnectOptionsDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.ClientConnectOptions.self, forKey: .clientConnectOptions)
        clientConnectOptions = clientConnectOptionsDecoded
        let sessionTimeoutHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionTimeoutHours)
        sessionTimeoutHours = sessionTimeoutHoursDecoded
        let clientLoginBannerOptionsDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.ClientLoginBannerOptions.self, forKey: .clientLoginBannerOptions)
        clientLoginBannerOptions = clientLoginBannerOptionsDecoded
    }
}
