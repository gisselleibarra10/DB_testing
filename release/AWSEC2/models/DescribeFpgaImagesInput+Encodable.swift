// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DescribeFpgaImagesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                for (index0, filter0) in filters.enumerated() {
                    var filtersContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filter.\(index0.advanced(by: 1))"))
                    try filtersContainer0.encode(filter0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filter"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let fpgaImageIds = fpgaImageIds {
            if !fpgaImageIds.isEmpty {
                for (index0, fpgaimageid0) in fpgaImageIds.enumerated() {
                    var fpgaImageIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("FpgaImageId.\(index0.advanced(by: 1))"))
                    try fpgaImageIdsContainer0.encode(fpgaimageid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var fpgaImageIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("FpgaImageId"))
                try fpgaImageIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let owners = owners {
            if !owners.isEmpty {
                for (index0, string0) in owners.enumerated() {
                    var ownersContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Owner.\(index0.advanced(by: 1))"))
                    try ownersContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var ownersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Owner"))
                try ownersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeFpgaImages", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
