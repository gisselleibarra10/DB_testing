// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.VCpuInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultCores = "defaultCores"
        case defaultThreadsPerCore = "defaultThreadsPerCore"
        case defaultVCpus = "defaultVCpus"
        case validCores = "validCores"
        case validThreadsPerCore = "validThreadsPerCore"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultCores = defaultCores {
            try container.encode(defaultCores, forKey: ClientRuntime.Key("DefaultCores"))
        }
        if let defaultThreadsPerCore = defaultThreadsPerCore {
            try container.encode(defaultThreadsPerCore, forKey: ClientRuntime.Key("DefaultThreadsPerCore"))
        }
        if let defaultVCpus = defaultVCpus {
            try container.encode(defaultVCpus, forKey: ClientRuntime.Key("DefaultVCpus"))
        }
        if let validCores = validCores {
            if !validCores.isEmpty {
                for (index0, corecount0) in validCores.enumerated() {
                    var validCoresContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValidCores.\(index0.advanced(by: 1))"))
                    try validCoresContainer0.encode(corecount0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var validCoresContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValidCores"))
                try validCoresContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let validThreadsPerCore = validThreadsPerCore {
            if !validThreadsPerCore.isEmpty {
                for (index0, threadspercore0) in validThreadsPerCore.enumerated() {
                    var validThreadsPerCoreContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValidThreadsPerCore.\(index0.advanced(by: 1))"))
                    try validThreadsPerCoreContainer0.encode(threadspercore0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var validThreadsPerCoreContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ValidThreadsPerCore"))
                try validThreadsPerCoreContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultVCpusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultVCpus)
        defaultVCpus = defaultVCpusDecoded
        let defaultCoresDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultCores)
        defaultCores = defaultCoresDecoded
        let defaultThreadsPerCoreDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultThreadsPerCore)
        defaultThreadsPerCore = defaultThreadsPerCoreDecoded
        if containerValues.contains(.validCores) {
            struct KeyVal0{struct item{}}
            let validCoresWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .validCores)
            if let validCoresWrappedContainer = validCoresWrappedContainer {
                let validCoresContainer = try validCoresWrappedContainer.decodeIfPresent([Swift.Int].self, forKey: .member)
                var validCoresBuffer:[Swift.Int]? = nil
                if let validCoresContainer = validCoresContainer {
                    validCoresBuffer = [Swift.Int]()
                    for integerContainer0 in validCoresContainer {
                        validCoresBuffer?.append(integerContainer0)
                    }
                }
                validCores = validCoresBuffer
            } else {
                validCores = []
            }
        } else {
            validCores = nil
        }
        if containerValues.contains(.validThreadsPerCore) {
            struct KeyVal0{struct item{}}
            let validThreadsPerCoreWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .validThreadsPerCore)
            if let validThreadsPerCoreWrappedContainer = validThreadsPerCoreWrappedContainer {
                let validThreadsPerCoreContainer = try validThreadsPerCoreWrappedContainer.decodeIfPresent([Swift.Int].self, forKey: .member)
                var validThreadsPerCoreBuffer:[Swift.Int]? = nil
                if let validThreadsPerCoreContainer = validThreadsPerCoreContainer {
                    validThreadsPerCoreBuffer = [Swift.Int]()
                    for integerContainer0 in validThreadsPerCoreContainer {
                        validThreadsPerCoreBuffer?.append(integerContainer0)
                    }
                }
                validThreadsPerCore = validThreadsPerCoreBuffer
            } else {
                validThreadsPerCore = []
            }
        } else {
            validThreadsPerCore = nil
        }
    }
}
