// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.EgressOnlyInternetGateway: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachments = "attachmentSet"
        case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
        case tags = "tagSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attachments = attachments {
            if !attachments.isEmpty {
                for (index0, internetgatewayattachment0) in attachments.enumerated() {
                    var attachmentsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttachmentSet.\(index0.advanced(by: 1))"))
                    try attachmentsContainer0.encode(internetgatewayattachment0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let egressOnlyInternetGatewayId = egressOnlyInternetGatewayId {
            try container.encode(egressOnlyInternetGatewayId, forKey: ClientRuntime.Key("EgressOnlyInternetGatewayId"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.attachments) {
            struct KeyVal0{struct item{}}
            let attachmentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .attachments)
            if let attachmentsWrappedContainer = attachmentsWrappedContainer {
                let attachmentsContainer = try attachmentsWrappedContainer.decodeIfPresent([Ec2ClientTypes.InternetGatewayAttachment].self, forKey: .member)
                var attachmentsBuffer:[Ec2ClientTypes.InternetGatewayAttachment]? = nil
                if let attachmentsContainer = attachmentsContainer {
                    attachmentsBuffer = [Ec2ClientTypes.InternetGatewayAttachment]()
                    for structureContainer0 in attachmentsContainer {
                        attachmentsBuffer?.append(structureContainer0)
                    }
                }
                attachments = attachmentsBuffer
            } else {
                attachments = []
            }
        } else {
            attachments = nil
        }
        let egressOnlyInternetGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .egressOnlyInternetGatewayId)
        egressOnlyInternetGatewayId = egressOnlyInternetGatewayIdDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
