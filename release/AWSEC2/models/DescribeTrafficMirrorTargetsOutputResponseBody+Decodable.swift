// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTrafficMirrorTargetsOutputResponseBody: Swift.Equatable {
    let trafficMirrorTargets: [Ec2ClientTypes.TrafficMirrorTarget]?
    let nextToken: Swift.String?
}

extension DescribeTrafficMirrorTargetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case trafficMirrorTargets = "trafficMirrorTargetSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.trafficMirrorTargets) {
            struct KeyVal0{struct item{}}
            let trafficMirrorTargetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .trafficMirrorTargets)
            if let trafficMirrorTargetsWrappedContainer = trafficMirrorTargetsWrappedContainer {
                let trafficMirrorTargetsContainer = try trafficMirrorTargetsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TrafficMirrorTarget].self, forKey: .member)
                var trafficMirrorTargetsBuffer:[Ec2ClientTypes.TrafficMirrorTarget]? = nil
                if let trafficMirrorTargetsContainer = trafficMirrorTargetsContainer {
                    trafficMirrorTargetsBuffer = [Ec2ClientTypes.TrafficMirrorTarget]()
                    for structureContainer0 in trafficMirrorTargetsContainer {
                        trafficMirrorTargetsBuffer?.append(structureContainer0)
                    }
                }
                trafficMirrorTargets = trafficMirrorTargetsBuffer
            } else {
                trafficMirrorTargets = []
            }
        } else {
            trafficMirrorTargets = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
