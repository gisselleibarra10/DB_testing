// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StopInstancesOutputResponseBody: Swift.Equatable {
    let stoppingInstances: [Ec2ClientTypes.InstanceStateChange]?
}

extension StopInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stoppingInstances = "instancesSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.stoppingInstances) {
            struct KeyVal0{struct item{}}
            let stoppingInstancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .stoppingInstances)
            if let stoppingInstancesWrappedContainer = stoppingInstancesWrappedContainer {
                let stoppingInstancesContainer = try stoppingInstancesWrappedContainer.decodeIfPresent([Ec2ClientTypes.InstanceStateChange].self, forKey: .member)
                var stoppingInstancesBuffer:[Ec2ClientTypes.InstanceStateChange]? = nil
                if let stoppingInstancesContainer = stoppingInstancesContainer {
                    stoppingInstancesBuffer = [Ec2ClientTypes.InstanceStateChange]()
                    for structureContainer0 in stoppingInstancesContainer {
                        stoppingInstancesBuffer?.append(structureContainer0)
                    }
                }
                stoppingInstances = stoppingInstancesBuffer
            } else {
                stoppingInstances = []
            }
        } else {
            stoppingInstances = nil
        }
    }
}
