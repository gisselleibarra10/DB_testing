// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreatePlacementGroupInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let groupName: Swift.String?
    let strategy: Ec2ClientTypes.PlacementStrategy?
    let partitionCount: Swift.Int?
    let tagSpecifications: [Ec2ClientTypes.TagSpecification]?
    let spreadLevel: Ec2ClientTypes.SpreadLevel?
}

extension CreatePlacementGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "dryRun"
        case groupName = "groupName"
        case partitionCount = "PartitionCount"
        case spreadLevel = "SpreadLevel"
        case strategy = "strategy"
        case tagSpecifications = "TagSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let strategyDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.PlacementStrategy.self, forKey: .strategy)
        strategy = strategyDecoded
        let partitionCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .partitionCount)
        partitionCount = partitionCountDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[Ec2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [Ec2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let spreadLevelDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.SpreadLevel.self, forKey: .spreadLevel)
        spreadLevel = spreadLevelDecoded
    }
}
