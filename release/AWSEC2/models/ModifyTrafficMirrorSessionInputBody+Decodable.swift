// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyTrafficMirrorSessionInputBody: Swift.Equatable {
    let trafficMirrorSessionId: Swift.String?
    let trafficMirrorTargetId: Swift.String?
    let trafficMirrorFilterId: Swift.String?
    let packetLength: Swift.Int?
    let sessionNumber: Swift.Int?
    let virtualNetworkId: Swift.Int?
    let description: Swift.String?
    let removeFields: [EC2ClientTypes.TrafficMirrorSessionField]?
    let dryRun: Swift.Bool?
}

extension ModifyTrafficMirrorSessionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case dryRun = "DryRun"
        case packetLength = "PacketLength"
        case removeFields = "RemoveField"
        case sessionNumber = "SessionNumber"
        case trafficMirrorFilterId = "TrafficMirrorFilterId"
        case trafficMirrorSessionId = "TrafficMirrorSessionId"
        case trafficMirrorTargetId = "TrafficMirrorTargetId"
        case virtualNetworkId = "VirtualNetworkId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficMirrorSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficMirrorSessionId)
        trafficMirrorSessionId = trafficMirrorSessionIdDecoded
        let trafficMirrorTargetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficMirrorTargetId)
        trafficMirrorTargetId = trafficMirrorTargetIdDecoded
        let trafficMirrorFilterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficMirrorFilterId)
        trafficMirrorFilterId = trafficMirrorFilterIdDecoded
        let packetLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .packetLength)
        packetLength = packetLengthDecoded
        let sessionNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionNumber)
        sessionNumber = sessionNumberDecoded
        let virtualNetworkIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .virtualNetworkId)
        virtualNetworkId = virtualNetworkIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.removeFields) {
            struct KeyVal0{struct member{}}
            let removeFieldsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .removeFields)
            if let removeFieldsWrappedContainer = removeFieldsWrappedContainer {
                let removeFieldsContainer = try removeFieldsWrappedContainer.decodeIfPresent([EC2ClientTypes.TrafficMirrorSessionField].self, forKey: .member)
                var removeFieldsBuffer:[EC2ClientTypes.TrafficMirrorSessionField]? = nil
                if let removeFieldsContainer = removeFieldsContainer {
                    removeFieldsBuffer = [EC2ClientTypes.TrafficMirrorSessionField]()
                    for enumContainer0 in removeFieldsContainer {
                        removeFieldsBuffer?.append(enumContainer0)
                    }
                }
                removeFields = removeFieldsBuffer
            } else {
                removeFields = []
            }
        } else {
            removeFields = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
