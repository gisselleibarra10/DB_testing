// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateCapacityReservationFleetInput: Swift.Equatable {
    /// The strategy used by the Capacity Reservation Fleet to determine which of the specified instance types to use. Currently, only the prioritized allocation strategy is supported. For more information, see [ Allocation strategy](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#allocation-strategy) in the Amazon EC2 User Guide. Valid values: prioritized
    public var allocationStrategy: Swift.String?
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see [Ensure Idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    public var clientToken: Swift.String?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// The date and time at which the Capacity Reservation Fleet expires. When the Capacity Reservation Fleet expires, its state changes to expired and all of the Capacity Reservations in the Fleet expire. The Capacity Reservation Fleet expires within an hour after the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation Fleet is guaranteed to expire between 13:30:55 and 14:30:55 on 5/31/2019.
    public var endDate: ClientRuntime.Date?
    /// Indicates the type of instance launches that the Capacity Reservation Fleet accepts. All Capacity Reservations in the Fleet inherit this instance matching criteria. Currently, Capacity Reservation Fleets support open instance matching criteria only. This means that instances that have matching attributes (instance type, platform, and Availability Zone) run in the Capacity Reservations automatically. Instances do not need to explicitly target a Capacity Reservation Fleet to use its reserved capacity.
    public var instanceMatchCriteria: Ec2ClientTypes.FleetInstanceMatchCriteria?
    /// Information about the instance types for which to reserve the capacity.
    /// This member is required.
    public var instanceTypeSpecifications: [Ec2ClientTypes.ReservationFleetInstanceSpecification]?
    /// The tags to assign to the Capacity Reservation Fleet. The tags are automatically assigned to the Capacity Reservations in the Fleet.
    public var tagSpecifications: [Ec2ClientTypes.TagSpecification]?
    /// Indicates the tenancy of the Capacity Reservation Fleet. All Capacity Reservations in the Fleet inherit this tenancy. The Capacity Reservation Fleet can have one of the following tenancy settings:
    ///
    /// * default - The Capacity Reservation Fleet is created on hardware that is shared with other Amazon Web Services accounts.
    ///
    /// * dedicated - The Capacity Reservations are created on single-tenant hardware that is dedicated to a single Amazon Web Services account.
    public var tenancy: Ec2ClientTypes.FleetCapacityReservationTenancy?
    /// The total number of capacity units to be reserved by the Capacity Reservation Fleet. This value, together with the instance type weights that you assign to each instance type used by the Fleet determine the number of instances for which the Fleet reserves capacity. Both values are based on units that make sense for your workload. For more information, see [ Total target capacity](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity) in the Amazon EC2 User Guide.
    /// This member is required.
    public var totalTargetCapacity: Swift.Int?

    public init (
        allocationStrategy: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        dryRun: Swift.Bool? = nil,
        endDate: ClientRuntime.Date? = nil,
        instanceMatchCriteria: Ec2ClientTypes.FleetInstanceMatchCriteria? = nil,
        instanceTypeSpecifications: [Ec2ClientTypes.ReservationFleetInstanceSpecification]? = nil,
        tagSpecifications: [Ec2ClientTypes.TagSpecification]? = nil,
        tenancy: Ec2ClientTypes.FleetCapacityReservationTenancy? = nil,
        totalTargetCapacity: Swift.Int? = nil
    )
    {
        self.allocationStrategy = allocationStrategy
        self.clientToken = clientToken
        self.dryRun = dryRun
        self.endDate = endDate
        self.instanceMatchCriteria = instanceMatchCriteria
        self.instanceTypeSpecifications = instanceTypeSpecifications
        self.tagSpecifications = tagSpecifications
        self.tenancy = tenancy
        self.totalTargetCapacity = totalTargetCapacity
    }
}
