// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeImagesInputBody: Swift.Equatable {
    let executableUsers: [Swift.String]?
    let filters: [EC2ClientTypes.Filter]?
    let imageIds: [Swift.String]?
    let owners: [Swift.String]?
    let includeDeprecated: Swift.Bool?
    let dryRun: Swift.Bool?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeImagesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "dryRun"
        case executableUsers = "ExecutableBy"
        case filters = "Filter"
        case imageIds = "ImageId"
        case includeDeprecated = "IncludeDeprecated"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case owners = "Owner"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.executableUsers) {
            struct KeyVal0{struct ExecutableBy{}}
            let executableUsersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ExecutableBy>.CodingKeys.self, forKey: .executableUsers)
            if let executableUsersWrappedContainer = executableUsersWrappedContainer {
                let executableUsersContainer = try executableUsersWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var executableUsersBuffer:[Swift.String]? = nil
                if let executableUsersContainer = executableUsersContainer {
                    executableUsersBuffer = [Swift.String]()
                    for stringContainer0 in executableUsersContainer {
                        executableUsersBuffer?.append(stringContainer0)
                    }
                }
                executableUsers = executableUsersBuffer
            } else {
                executableUsers = []
            }
        } else {
            executableUsers = nil
        }
        if containerValues.contains(.filters) {
            struct KeyVal0{struct Filter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Filter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([EC2ClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[EC2ClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [EC2ClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        if containerValues.contains(.imageIds) {
            struct KeyVal0{struct ImageId{}}
            let imageIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ImageId>.CodingKeys.self, forKey: .imageIds)
            if let imageIdsWrappedContainer = imageIdsWrappedContainer {
                let imageIdsContainer = try imageIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var imageIdsBuffer:[Swift.String]? = nil
                if let imageIdsContainer = imageIdsContainer {
                    imageIdsBuffer = [Swift.String]()
                    for stringContainer0 in imageIdsContainer {
                        imageIdsBuffer?.append(stringContainer0)
                    }
                }
                imageIds = imageIdsBuffer
            } else {
                imageIds = []
            }
        } else {
            imageIds = nil
        }
        if containerValues.contains(.owners) {
            struct KeyVal0{struct Owner{}}
            let ownersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Owner>.CodingKeys.self, forKey: .owners)
            if let ownersWrappedContainer = ownersWrappedContainer {
                let ownersContainer = try ownersWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var ownersBuffer:[Swift.String]? = nil
                if let ownersContainer = ownersContainer {
                    ownersBuffer = [Swift.String]()
                    for stringContainer0 in ownersContainer {
                        ownersBuffer?.append(stringContainer0)
                    }
                }
                owners = ownersBuffer
            } else {
                owners = []
            }
        } else {
            owners = nil
        }
        let includeDeprecatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeDeprecated)
        includeDeprecated = includeDeprecatedDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
