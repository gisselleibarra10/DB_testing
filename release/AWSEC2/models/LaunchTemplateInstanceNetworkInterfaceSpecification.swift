// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// Describes a network interface.
    public struct LaunchTemplateInstanceNetworkInterfaceSpecification: Swift.Equatable {
        /// Indicates whether to associate a Carrier IP address with eth0 for a new network interface. Use this option when you launch an instance in a Wavelength Zone and want to associate a Carrier IP address with the network interface. For more information about Carrier IP addresses, see [Carrier IP addresses](https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#provider-owned-ip) in the Wavelength Developer Guide.
        public var associateCarrierIpAddress: Swift.Bool?
        /// Indicates whether to associate a public IPv4 address with eth0 for a new network interface.
        public var associatePublicIpAddress: Swift.Bool?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public var deleteOnTermination: Swift.Bool?
        /// A description for the network interface.
        public var description: Swift.String?
        /// The device index for the network interface attachment.
        public var deviceIndex: Swift.Int?
        /// The IDs of one or more security groups.
        public var groups: [Swift.String]?
        /// The type of network interface.
        public var interfaceType: Swift.String?
        /// The number of IPv4 prefixes that Amazon Web Services automatically assigned to the network interface.
        public var ipv4PrefixCount: Swift.Int?
        /// One or more IPv4 prefixes assigned to the network interface.
        public var ipv4Prefixes: [Ec2ClientTypes.Ipv4PrefixSpecificationResponse]?
        /// The number of IPv6 addresses for the network interface.
        public var ipv6AddressCount: Swift.Int?
        /// The IPv6 addresses for the network interface.
        public var ipv6Addresses: [Ec2ClientTypes.InstanceIpv6Address]?
        /// The number of IPv6 prefixes that Amazon Web Services automatically assigned to the network interface.
        public var ipv6PrefixCount: Swift.Int?
        /// One or more IPv6 prefixes assigned to the network interface.
        public var ipv6Prefixes: [Ec2ClientTypes.Ipv6PrefixSpecificationResponse]?
        /// The index of the network card.
        public var networkCardIndex: Swift.Int?
        /// The ID of the network interface.
        public var networkInterfaceId: Swift.String?
        /// The primary private IPv4 address of the network interface.
        public var privateIpAddress: Swift.String?
        /// One or more private IPv4 addresses.
        public var privateIpAddresses: [Ec2ClientTypes.PrivateIpAddressSpecification]?
        /// The number of secondary private IPv4 addresses for the network interface.
        public var secondaryPrivateIpAddressCount: Swift.Int?
        /// The ID of the subnet for the network interface.
        public var subnetId: Swift.String?

        public init (
            associateCarrierIpAddress: Swift.Bool? = nil,
            associatePublicIpAddress: Swift.Bool? = nil,
            deleteOnTermination: Swift.Bool? = nil,
            description: Swift.String? = nil,
            deviceIndex: Swift.Int? = nil,
            groups: [Swift.String]? = nil,
            interfaceType: Swift.String? = nil,
            ipv4PrefixCount: Swift.Int? = nil,
            ipv4Prefixes: [Ec2ClientTypes.Ipv4PrefixSpecificationResponse]? = nil,
            ipv6AddressCount: Swift.Int? = nil,
            ipv6Addresses: [Ec2ClientTypes.InstanceIpv6Address]? = nil,
            ipv6PrefixCount: Swift.Int? = nil,
            ipv6Prefixes: [Ec2ClientTypes.Ipv6PrefixSpecificationResponse]? = nil,
            networkCardIndex: Swift.Int? = nil,
            networkInterfaceId: Swift.String? = nil,
            privateIpAddress: Swift.String? = nil,
            privateIpAddresses: [Ec2ClientTypes.PrivateIpAddressSpecification]? = nil,
            secondaryPrivateIpAddressCount: Swift.Int? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.associateCarrierIpAddress = associateCarrierIpAddress
            self.associatePublicIpAddress = associatePublicIpAddress
            self.deleteOnTermination = deleteOnTermination
            self.description = description
            self.deviceIndex = deviceIndex
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv4PrefixCount = ipv4PrefixCount
            self.ipv4Prefixes = ipv4Prefixes
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.ipv6PrefixCount = ipv6PrefixCount
            self.ipv6Prefixes = ipv6Prefixes
            self.networkCardIndex = networkCardIndex
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
        }
    }

}
