// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetIpamPoolCidrsOutputResponseBody: Swift.Equatable {
    let ipamPoolCidrs: [Ec2ClientTypes.IpamPoolCidr]?
    let nextToken: Swift.String?
}

extension GetIpamPoolCidrsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipamPoolCidrs = "ipamPoolCidrSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.ipamPoolCidrs) {
            struct KeyVal0{struct item{}}
            let ipamPoolCidrsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .ipamPoolCidrs)
            if let ipamPoolCidrsWrappedContainer = ipamPoolCidrsWrappedContainer {
                let ipamPoolCidrsContainer = try ipamPoolCidrsWrappedContainer.decodeIfPresent([Ec2ClientTypes.IpamPoolCidr].self, forKey: .member)
                var ipamPoolCidrsBuffer:[Ec2ClientTypes.IpamPoolCidr]? = nil
                if let ipamPoolCidrsContainer = ipamPoolCidrsContainer {
                    ipamPoolCidrsBuffer = [Ec2ClientTypes.IpamPoolCidr]()
                    for structureContainer0 in ipamPoolCidrsContainer {
                        ipamPoolCidrsBuffer?.append(structureContainer0)
                    }
                }
                ipamPoolCidrs = ipamPoolCidrsBuffer
            } else {
                ipamPoolCidrs = []
            }
        } else {
            ipamPoolCidrs = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
