// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct AllocateAddressInput: Swift.Equatable {
    /// [EC2-VPC] The Elastic IP address to recover or an IPv4 address from an address pool.
    public var address: Swift.String?
    /// The ID of a customer-owned address pool. Use this parameter to let Amazon EC2 select an address from the address pool. Alternatively, specify a specific address from the address pool.
    public var customerOwnedIpv4Pool: Swift.String?
    /// Indicates whether the Elastic IP address is for use with instances in a VPC or instances in EC2-Classic. Default: If the Region supports EC2-Classic, the default is standard. Otherwise, the default is vpc.
    public var domain: Ec2ClientTypes.DomainType?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// A unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses. Use this parameter to limit the IP address to this location. IP addresses cannot move between network border groups. Use [DescribeAvailabilityZones](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html) to view the network border groups. You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 Classic, you receive an InvalidParameterCombination error.
    public var networkBorderGroup: Swift.String?
    /// The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool. To specify a specific address from the address pool, use the Address parameter instead.
    public var publicIpv4Pool: Swift.String?
    /// The tags to assign to the Elastic IP address.
    public var tagSpecifications: [Ec2ClientTypes.TagSpecification]?

    public init (
        address: Swift.String? = nil,
        customerOwnedIpv4Pool: Swift.String? = nil,
        domain: Ec2ClientTypes.DomainType? = nil,
        dryRun: Swift.Bool? = nil,
        networkBorderGroup: Swift.String? = nil,
        publicIpv4Pool: Swift.String? = nil,
        tagSpecifications: [Ec2ClientTypes.TagSpecification]? = nil
    )
    {
        self.address = address
        self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
        self.domain = domain
        self.dryRun = dryRun
        self.networkBorderGroup = networkBorderGroup
        self.publicIpv4Pool = publicIpv4Pool
        self.tagSpecifications = tagSpecifications
    }
}
