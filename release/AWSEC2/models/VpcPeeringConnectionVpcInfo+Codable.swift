// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.VpcPeeringConnectionVpcInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrBlock = "cidrBlock"
        case cidrBlockSet = "cidrBlockSet"
        case ipv6CidrBlockSet = "ipv6CidrBlockSet"
        case ownerId = "ownerId"
        case peeringOptions = "peeringOptions"
        case region = "region"
        case vpcId = "vpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidrBlock = cidrBlock {
            try container.encode(cidrBlock, forKey: ClientRuntime.Key("CidrBlock"))
        }
        if let cidrBlockSet = cidrBlockSet {
            if !cidrBlockSet.isEmpty {
                for (index0, cidrblock0) in cidrBlockSet.enumerated() {
                    var cidrBlockSetContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CidrBlockSet.\(index0.advanced(by: 1))"))
                    try cidrBlockSetContainer0.encode(cidrblock0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var cidrBlockSetContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CidrBlockSet"))
                try cidrBlockSetContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ipv6CidrBlockSet = ipv6CidrBlockSet {
            if !ipv6CidrBlockSet.isEmpty {
                for (index0, ipv6cidrblock0) in ipv6CidrBlockSet.enumerated() {
                    var ipv6CidrBlockSetContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Ipv6CidrBlockSet.\(index0.advanced(by: 1))"))
                    try ipv6CidrBlockSetContainer0.encode(ipv6cidrblock0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var ipv6CidrBlockSetContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Ipv6CidrBlockSet"))
                try ipv6CidrBlockSetContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: ClientRuntime.Key("OwnerId"))
        }
        if let peeringOptions = peeringOptions {
            try container.encode(peeringOptions, forKey: ClientRuntime.Key("PeeringOptions"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidrBlock)
        cidrBlock = cidrBlockDecoded
        if containerValues.contains(.ipv6CidrBlockSet) {
            struct KeyVal0{struct item{}}
            let ipv6CidrBlockSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .ipv6CidrBlockSet)
            if let ipv6CidrBlockSetWrappedContainer = ipv6CidrBlockSetWrappedContainer {
                let ipv6CidrBlockSetContainer = try ipv6CidrBlockSetWrappedContainer.decodeIfPresent([EC2ClientTypes.Ipv6CidrBlock].self, forKey: .member)
                var ipv6CidrBlockSetBuffer:[EC2ClientTypes.Ipv6CidrBlock]? = nil
                if let ipv6CidrBlockSetContainer = ipv6CidrBlockSetContainer {
                    ipv6CidrBlockSetBuffer = [EC2ClientTypes.Ipv6CidrBlock]()
                    for structureContainer0 in ipv6CidrBlockSetContainer {
                        ipv6CidrBlockSetBuffer?.append(structureContainer0)
                    }
                }
                ipv6CidrBlockSet = ipv6CidrBlockSetBuffer
            } else {
                ipv6CidrBlockSet = []
            }
        } else {
            ipv6CidrBlockSet = nil
        }
        if containerValues.contains(.cidrBlockSet) {
            struct KeyVal0{struct item{}}
            let cidrBlockSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .cidrBlockSet)
            if let cidrBlockSetWrappedContainer = cidrBlockSetWrappedContainer {
                let cidrBlockSetContainer = try cidrBlockSetWrappedContainer.decodeIfPresent([EC2ClientTypes.CidrBlock].self, forKey: .member)
                var cidrBlockSetBuffer:[EC2ClientTypes.CidrBlock]? = nil
                if let cidrBlockSetContainer = cidrBlockSetContainer {
                    cidrBlockSetBuffer = [EC2ClientTypes.CidrBlock]()
                    for structureContainer0 in cidrBlockSetContainer {
                        cidrBlockSetBuffer?.append(structureContainer0)
                    }
                }
                cidrBlockSet = cidrBlockSetBuffer
            } else {
                cidrBlockSet = []
            }
        } else {
            cidrBlockSet = nil
        }
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let peeringOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.VpcPeeringConnectionOptionsDescription.self, forKey: .peeringOptions)
        peeringOptions = peeringOptionsDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
    }
}
