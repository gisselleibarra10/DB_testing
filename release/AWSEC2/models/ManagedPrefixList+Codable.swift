// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.ManagedPrefixList: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily = "addressFamily"
        case maxEntries = "maxEntries"
        case ownerId = "ownerId"
        case prefixListArn = "prefixListArn"
        case prefixListId = "prefixListId"
        case prefixListName = "prefixListName"
        case state = "state"
        case stateMessage = "stateMessage"
        case tags = "tagSet"
        case version = "version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let addressFamily = addressFamily {
            try container.encode(addressFamily, forKey: ClientRuntime.Key("AddressFamily"))
        }
        if let maxEntries = maxEntries {
            try container.encode(maxEntries, forKey: ClientRuntime.Key("MaxEntries"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: ClientRuntime.Key("OwnerId"))
        }
        if let prefixListArn = prefixListArn {
            try container.encode(prefixListArn, forKey: ClientRuntime.Key("PrefixListArn"))
        }
        if let prefixListId = prefixListId {
            try container.encode(prefixListId, forKey: ClientRuntime.Key("PrefixListId"))
        }
        if let prefixListName = prefixListName {
            try container.encode(prefixListName, forKey: ClientRuntime.Key("PrefixListName"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let stateMessage = stateMessage {
            try container.encode(stateMessage, forKey: ClientRuntime.Key("StateMessage"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let version = version {
            try container.encode(version, forKey: ClientRuntime.Key("Version"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixListIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefixListId)
        prefixListId = prefixListIdDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.PrefixListState.self, forKey: .state)
        state = stateDecoded
        let stateMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMessage)
        stateMessage = stateMessageDecoded
        let prefixListArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefixListArn)
        prefixListArn = prefixListArnDecoded
        let prefixListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefixListName)
        prefixListName = prefixListNameDecoded
        let maxEntriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxEntries)
        maxEntries = maxEntriesDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
    }
}
