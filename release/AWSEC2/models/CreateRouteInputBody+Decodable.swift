// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRouteInputBody: Swift.Equatable {
    let destinationCidrBlock: Swift.String?
    let destinationIpv6CidrBlock: Swift.String?
    let destinationPrefixListId: Swift.String?
    let dryRun: Swift.Bool?
    let vpcEndpointId: Swift.String?
    let egressOnlyInternetGatewayId: Swift.String?
    let gatewayId: Swift.String?
    let instanceId: Swift.String?
    let natGatewayId: Swift.String?
    let transitGatewayId: Swift.String?
    let localGatewayId: Swift.String?
    let carrierGatewayId: Swift.String?
    let networkInterfaceId: Swift.String?
    let routeTableId: Swift.String?
    let vpcPeeringConnectionId: Swift.String?
    let coreNetworkArn: Swift.String?
}

extension CreateRouteInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case carrierGatewayId = "CarrierGatewayId"
        case coreNetworkArn = "CoreNetworkArn"
        case destinationCidrBlock = "destinationCidrBlock"
        case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
        case destinationPrefixListId = "DestinationPrefixListId"
        case dryRun = "dryRun"
        case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
        case gatewayId = "gatewayId"
        case instanceId = "instanceId"
        case localGatewayId = "LocalGatewayId"
        case natGatewayId = "natGatewayId"
        case networkInterfaceId = "networkInterfaceId"
        case routeTableId = "routeTableId"
        case transitGatewayId = "TransitGatewayId"
        case vpcEndpointId = "VpcEndpointId"
        case vpcPeeringConnectionId = "vpcPeeringConnectionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationCidrBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationCidrBlock)
        destinationCidrBlock = destinationCidrBlockDecoded
        let destinationIpv6CidrBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationIpv6CidrBlock)
        destinationIpv6CidrBlock = destinationIpv6CidrBlockDecoded
        let destinationPrefixListIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationPrefixListId)
        destinationPrefixListId = destinationPrefixListIdDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let egressOnlyInternetGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .egressOnlyInternetGatewayId)
        egressOnlyInternetGatewayId = egressOnlyInternetGatewayIdDecoded
        let gatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayId)
        gatewayId = gatewayIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let natGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .natGatewayId)
        natGatewayId = natGatewayIdDecoded
        let transitGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayId)
        transitGatewayId = transitGatewayIdDecoded
        let localGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localGatewayId)
        localGatewayId = localGatewayIdDecoded
        let carrierGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .carrierGatewayId)
        carrierGatewayId = carrierGatewayIdDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let routeTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routeTableId)
        routeTableId = routeTableIdDecoded
        let vpcPeeringConnectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcPeeringConnectionId)
        vpcPeeringConnectionId = vpcPeeringConnectionIdDecoded
        let coreNetworkArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .coreNetworkArn)
        coreNetworkArn = coreNetworkArnDecoded
    }
}
