// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ImportImageInput: Swift.Equatable {
    /// The architecture of the virtual machine. Valid values: i386 | x86_64
    public var architecture: Swift.String?
    /// The boot mode of the virtual machine.
    public var bootMode: EC2ClientTypes.BootModeValues?
    /// The client-specific data.
    public var clientData: EC2ClientTypes.ClientData?
    /// The token to enable idempotency for VM import requests.
    public var clientToken: Swift.String?
    /// A description string for the import image task.
    public var description: Swift.String?
    /// Information about the disk containers.
    public var diskContainers: [EC2ClientTypes.ImageDiskContainer]?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// Specifies whether the destination AMI of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using KmsKeyId. For more information, see [Amazon EBS Encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) in the Amazon Elastic Compute Cloud User Guide.
    public var encrypted: Swift.Bool?
    /// The target hypervisor platform. Valid values: xen
    public var hypervisor: Swift.String?
    /// An identifier for the symmetric KMS key to use when creating the encrypted AMI. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set. The KMS key identifier may be provided in any of the following formats:
    ///
    /// * Key ID
    ///
    /// * Key alias. The alias ARN contains the arn:aws:kms namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the alias namespace, and then the key alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
    ///
    /// * ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the key namespace, and then the key ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.
    ///
    /// * ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the alias namespace, and then the key alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
    ///
    ///
    /// Amazon Web Services parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. The specified KMS key must exist in the Region that the AMI is being copied to. Amazon EBS does not support asymmetric KMS keys.
    public var kmsKeyId: Swift.String?
    /// The ARNs of the license configurations.
    public var licenseSpecifications: [EC2ClientTypes.ImportImageLicenseConfigurationRequest]?
    /// The license type to be used for the Amazon Machine Image (AMI) after importing. Specify AWS to replace the source-system license with an Amazon Web Services license or BYOL to retain the source-system license. Leaving this parameter undefined is the same as choosing AWS when importing a Windows Server operating system, and the same as choosing BYOL when importing a Windows client operating system (such as Windows 10) or a Linux operating system. To use BYOL, you must have existing licenses with rights to use these licenses in a third party cloud, such as Amazon Web Services. For more information, see [Prerequisites](https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image) in the VM Import/Export User Guide.
    public var licenseType: Swift.String?
    /// The operating system of the virtual machine. Valid values: Windows | Linux
    public var platform: Swift.String?
    /// The name of the role to use when not using the default role, 'vmimport'.
    public var roleName: Swift.String?
    /// The tags to apply to the import image task during creation.
    public var tagSpecifications: [EC2ClientTypes.TagSpecification]?
    /// The usage operation value. For more information, see [Licensing options](https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#prerequisites) in the VM Import/Export User Guide.
    public var usageOperation: Swift.String?

    public init (
        architecture: Swift.String? = nil,
        bootMode: EC2ClientTypes.BootModeValues? = nil,
        clientData: EC2ClientTypes.ClientData? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        diskContainers: [EC2ClientTypes.ImageDiskContainer]? = nil,
        dryRun: Swift.Bool? = nil,
        encrypted: Swift.Bool? = nil,
        hypervisor: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        licenseSpecifications: [EC2ClientTypes.ImportImageLicenseConfigurationRequest]? = nil,
        licenseType: Swift.String? = nil,
        platform: Swift.String? = nil,
        roleName: Swift.String? = nil,
        tagSpecifications: [EC2ClientTypes.TagSpecification]? = nil,
        usageOperation: Swift.String? = nil
    )
    {
        self.architecture = architecture
        self.bootMode = bootMode
        self.clientData = clientData
        self.clientToken = clientToken
        self.description = description
        self.diskContainers = diskContainers
        self.dryRun = dryRun
        self.encrypted = encrypted
        self.hypervisor = hypervisor
        self.kmsKeyId = kmsKeyId
        self.licenseSpecifications = licenseSpecifications
        self.licenseType = licenseType
        self.platform = platform
        self.roleName = roleName
        self.tagSpecifications = tagSpecifications
        self.usageOperation = usageOperation
    }
}
