// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyVerifiedAccessEndpointInputBody: Swift.Equatable {
    let verifiedAccessEndpointId: Swift.String?
    let verifiedAccessGroupId: Swift.String?
    let loadBalancerOptions: EC2ClientTypes.ModifyVerifiedAccessEndpointLoadBalancerOptions?
    let networkInterfaceOptions: EC2ClientTypes.ModifyVerifiedAccessEndpointEniOptions?
    let description: Swift.String?
    let clientToken: Swift.String?
    let dryRun: Swift.Bool?
}

extension ModifyVerifiedAccessEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case dryRun = "DryRun"
        case loadBalancerOptions = "LoadBalancerOptions"
        case networkInterfaceOptions = "NetworkInterfaceOptions"
        case verifiedAccessEndpointId = "VerifiedAccessEndpointId"
        case verifiedAccessGroupId = "VerifiedAccessGroupId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let verifiedAccessEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verifiedAccessEndpointId)
        verifiedAccessEndpointId = verifiedAccessEndpointIdDecoded
        let verifiedAccessGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verifiedAccessGroupId)
        verifiedAccessGroupId = verifiedAccessGroupIdDecoded
        let loadBalancerOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ModifyVerifiedAccessEndpointLoadBalancerOptions.self, forKey: .loadBalancerOptions)
        loadBalancerOptions = loadBalancerOptionsDecoded
        let networkInterfaceOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ModifyVerifiedAccessEndpointEniOptions.self, forKey: .networkInterfaceOptions)
        networkInterfaceOptions = networkInterfaceOptionsDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
