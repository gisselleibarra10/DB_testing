// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.ReplaceRootVolumeTask: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completeTime = "completeTime"
        case deleteReplacedRootVolume = "deleteReplacedRootVolume"
        case imageId = "imageId"
        case instanceId = "instanceId"
        case replaceRootVolumeTaskId = "replaceRootVolumeTaskId"
        case snapshotId = "snapshotId"
        case startTime = "startTime"
        case tags = "tagSet"
        case taskState = "taskState"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let completeTime = completeTime {
            try container.encode(completeTime, forKey: ClientRuntime.Key("CompleteTime"))
        }
        if let deleteReplacedRootVolume = deleteReplacedRootVolume {
            try container.encode(deleteReplacedRootVolume, forKey: ClientRuntime.Key("DeleteReplacedRootVolume"))
        }
        if let imageId = imageId {
            try container.encode(imageId, forKey: ClientRuntime.Key("ImageId"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let replaceRootVolumeTaskId = replaceRootVolumeTaskId {
            try container.encode(replaceRootVolumeTaskId, forKey: ClientRuntime.Key("ReplaceRootVolumeTaskId"))
        }
        if let snapshotId = snapshotId {
            try container.encode(snapshotId, forKey: ClientRuntime.Key("SnapshotId"))
        }
        if let startTime = startTime {
            try container.encode(startTime, forKey: ClientRuntime.Key("StartTime"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let taskState = taskState {
            try container.encode(taskState, forKey: ClientRuntime.Key("TaskState"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replaceRootVolumeTaskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replaceRootVolumeTaskId)
        replaceRootVolumeTaskId = replaceRootVolumeTaskIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let taskStateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ReplaceRootVolumeTaskState.self, forKey: .taskState)
        taskState = taskStateDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        startTime = startTimeDecoded
        let completeTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .completeTime)
        completeTime = completeTimeDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let deleteReplacedRootVolumeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteReplacedRootVolume)
        deleteReplacedRootVolume = deleteReplacedRootVolumeDecoded
    }
}
