// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateVerifiedAccessTrustProviderInput: Swift.Equatable {
    /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see [Ensuring Idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    public var clientToken: Swift.String?
    /// A description for the Amazon Web Services Verified Access trust provider.
    public var description: Swift.String?
    /// The options for device identity based trust providers.
    public var deviceOptions: EC2ClientTypes.CreateVerifiedAccessTrustProviderDeviceOptions?
    /// The type of device-based trust provider.
    public var deviceTrustProviderType: EC2ClientTypes.DeviceTrustProviderType?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// The OpenID Connect details for an oidc-type, user-identity based trust provider.
    public var oidcOptions: EC2ClientTypes.CreateVerifiedAccessTrustProviderOidcOptions?
    /// The identifier to be used when working with policy rules.
    /// This member is required.
    public var policyReferenceName: Swift.String?
    /// The tags to assign to the Amazon Web Services Verified Access trust provider.
    public var tagSpecifications: [EC2ClientTypes.TagSpecification]?
    /// The type of trust provider can be either user or device-based.
    /// This member is required.
    public var trustProviderType: EC2ClientTypes.TrustProviderType?
    /// The type of user-based trust provider.
    public var userTrustProviderType: EC2ClientTypes.UserTrustProviderType?

    public init (
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        deviceOptions: EC2ClientTypes.CreateVerifiedAccessTrustProviderDeviceOptions? = nil,
        deviceTrustProviderType: EC2ClientTypes.DeviceTrustProviderType? = nil,
        dryRun: Swift.Bool? = nil,
        oidcOptions: EC2ClientTypes.CreateVerifiedAccessTrustProviderOidcOptions? = nil,
        policyReferenceName: Swift.String? = nil,
        tagSpecifications: [EC2ClientTypes.TagSpecification]? = nil,
        trustProviderType: EC2ClientTypes.TrustProviderType? = nil,
        userTrustProviderType: EC2ClientTypes.UserTrustProviderType? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.deviceOptions = deviceOptions
        self.deviceTrustProviderType = deviceTrustProviderType
        self.dryRun = dryRun
        self.oidcOptions = oidcOptions
        self.policyReferenceName = policyReferenceName
        self.tagSpecifications = tagSpecifications
        self.trustProviderType = trustProviderType
        self.userTrustProviderType = userTrustProviderType
    }
}
