// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DisableFastLaunchOutputResponse: Swift.Equatable {
    /// The ID of the image for which faster-launching has been turned off.
    public var imageId: Swift.String?
    /// The launch template that was used to launch Windows instances from pre-provisioned snapshots.
    public var launchTemplate: Ec2ClientTypes.FastLaunchLaunchTemplateSpecificationResponse?
    /// The maximum number of parallel instances to launch for creating resources.
    public var maxParallelLaunches: Swift.Int?
    /// The owner of the Windows AMI for which faster launching was turned off.
    public var ownerId: Swift.String?
    /// The pre-provisioning resource type that must be cleaned after turning off faster launching for the Windows AMI. Supported values include: snapshot.
    public var resourceType: Ec2ClientTypes.FastLaunchResourceType?
    /// Parameters that were used for faster launching for the Windows AMI before faster launching was turned off. This informs the clean-up process.
    public var snapshotConfiguration: Ec2ClientTypes.FastLaunchSnapshotConfigurationResponse?
    /// The current state of faster launching for the specified Windows AMI.
    public var state: Ec2ClientTypes.FastLaunchStateCode?
    /// The reason that the state changed for faster launching for the Windows AMI.
    public var stateTransitionReason: Swift.String?
    /// The time that the state changed for faster launching for the Windows AMI.
    public var stateTransitionTime: ClientRuntime.Date?

    public init (
        imageId: Swift.String? = nil,
        launchTemplate: Ec2ClientTypes.FastLaunchLaunchTemplateSpecificationResponse? = nil,
        maxParallelLaunches: Swift.Int? = nil,
        ownerId: Swift.String? = nil,
        resourceType: Ec2ClientTypes.FastLaunchResourceType? = nil,
        snapshotConfiguration: Ec2ClientTypes.FastLaunchSnapshotConfigurationResponse? = nil,
        state: Ec2ClientTypes.FastLaunchStateCode? = nil,
        stateTransitionReason: Swift.String? = nil,
        stateTransitionTime: ClientRuntime.Date? = nil
    )
    {
        self.imageId = imageId
        self.launchTemplate = launchTemplate
        self.maxParallelLaunches = maxParallelLaunches
        self.ownerId = ownerId
        self.resourceType = resourceType
        self.snapshotConfiguration = snapshotConfiguration
        self.state = state
        self.stateTransitionReason = stateTransitionReason
        self.stateTransitionTime = stateTransitionTime
    }
}
