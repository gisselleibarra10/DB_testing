// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.VpnConnectionDeviceType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case platform = "platform"
        case software = "software"
        case vendor = "vendor"
        case vpnConnectionDeviceTypeId = "vpnConnectionDeviceTypeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let platform = platform {
            try container.encode(platform, forKey: ClientRuntime.Key("Platform"))
        }
        if let software = software {
            try container.encode(software, forKey: ClientRuntime.Key("Software"))
        }
        if let vendor = vendor {
            try container.encode(vendor, forKey: ClientRuntime.Key("Vendor"))
        }
        if let vpnConnectionDeviceTypeId = vpnConnectionDeviceTypeId {
            try container.encode(vpnConnectionDeviceTypeId, forKey: ClientRuntime.Key("VpnConnectionDeviceTypeId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpnConnectionDeviceTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpnConnectionDeviceTypeId)
        vpnConnectionDeviceTypeId = vpnConnectionDeviceTypeIdDecoded
        let vendorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vendor)
        vendor = vendorDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let softwareDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .software)
        software = softwareDecoded
    }
}
