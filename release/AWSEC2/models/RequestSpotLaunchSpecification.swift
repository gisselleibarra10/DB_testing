// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// Describes the launch specification for an instance.
    public struct RequestSpotLaunchSpecification: Swift.Equatable {
        /// Deprecated.
        public var addressingType: Swift.String?
        /// One or more block device mapping entries. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
        public var blockDeviceMappings: [Ec2ClientTypes.BlockDeviceMapping]?
        /// Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false
        public var ebsOptimized: Swift.Bool?
        /// The IAM instance profile.
        public var iamInstanceProfile: Ec2ClientTypes.IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public var imageId: Swift.String?
        /// The instance type. Only one instance type can be specified.
        public var instanceType: Ec2ClientTypes.InstanceType?
        /// The ID of the kernel.
        public var kernelId: Swift.String?
        /// The name of the key pair.
        public var keyName: Swift.String?
        /// Indicates whether basic or detailed monitoring is enabled for the instance. Default: Disabled
        public var monitoring: Ec2ClientTypes.RunInstancesMonitoringEnabled?
        /// One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
        public var networkInterfaces: [Ec2ClientTypes.InstanceNetworkInterfaceSpecification]?
        /// The placement information for the instance.
        public var placement: Ec2ClientTypes.SpotPlacement?
        /// The ID of the RAM disk.
        public var ramdiskId: Swift.String?
        /// One or more security group IDs.
        public var securityGroupIds: [Swift.String]?
        /// One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
        public var securityGroups: [Swift.String]?
        /// The ID of the subnet in which to launch the instance.
        public var subnetId: Swift.String?
        /// The Base64-encoded user data for the instance. User data is limited to 16 KB.
        public var userData: Swift.String?

        public init (
            addressingType: Swift.String? = nil,
            blockDeviceMappings: [Ec2ClientTypes.BlockDeviceMapping]? = nil,
            ebsOptimized: Swift.Bool? = nil,
            iamInstanceProfile: Ec2ClientTypes.IamInstanceProfileSpecification? = nil,
            imageId: Swift.String? = nil,
            instanceType: Ec2ClientTypes.InstanceType? = nil,
            kernelId: Swift.String? = nil,
            keyName: Swift.String? = nil,
            monitoring: Ec2ClientTypes.RunInstancesMonitoringEnabled? = nil,
            networkInterfaces: [Ec2ClientTypes.InstanceNetworkInterfaceSpecification]? = nil,
            placement: Ec2ClientTypes.SpotPlacement? = nil,
            ramdiskId: Swift.String? = nil,
            securityGroupIds: [Swift.String]? = nil,
            securityGroups: [Swift.String]? = nil,
            subnetId: Swift.String? = nil,
            userData: Swift.String? = nil
        )
        {
            self.addressingType = addressingType
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
            self.securityGroupIds = securityGroupIds
            self.securityGroups = securityGroups
            self.subnetId = subnetId
            self.userData = userData
        }
    }

}
