// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateCapacityReservationFleetInputBody: Swift.Equatable {
    let allocationStrategy: Swift.String?
    let clientToken: Swift.String?
    let instanceTypeSpecifications: [EC2ClientTypes.ReservationFleetInstanceSpecification]?
    let tenancy: EC2ClientTypes.FleetCapacityReservationTenancy?
    let totalTargetCapacity: Swift.Int?
    let endDate: ClientRuntime.Date?
    let instanceMatchCriteria: EC2ClientTypes.FleetInstanceMatchCriteria?
    let tagSpecifications: [EC2ClientTypes.TagSpecification]?
    let dryRun: Swift.Bool?
}

extension CreateCapacityReservationFleetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationStrategy = "AllocationStrategy"
        case clientToken = "ClientToken"
        case dryRun = "DryRun"
        case endDate = "EndDate"
        case instanceMatchCriteria = "InstanceMatchCriteria"
        case instanceTypeSpecifications = "InstanceTypeSpecification"
        case tagSpecifications = "TagSpecification"
        case tenancy = "Tenancy"
        case totalTargetCapacity = "TotalTargetCapacity"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allocationStrategyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allocationStrategy)
        allocationStrategy = allocationStrategyDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        if containerValues.contains(.instanceTypeSpecifications) {
            struct KeyVal0{struct member{}}
            let instanceTypeSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceTypeSpecifications)
            if let instanceTypeSpecificationsWrappedContainer = instanceTypeSpecificationsWrappedContainer {
                let instanceTypeSpecificationsContainer = try instanceTypeSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.ReservationFleetInstanceSpecification].self, forKey: .member)
                var instanceTypeSpecificationsBuffer:[EC2ClientTypes.ReservationFleetInstanceSpecification]? = nil
                if let instanceTypeSpecificationsContainer = instanceTypeSpecificationsContainer {
                    instanceTypeSpecificationsBuffer = [EC2ClientTypes.ReservationFleetInstanceSpecification]()
                    for structureContainer0 in instanceTypeSpecificationsContainer {
                        instanceTypeSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                instanceTypeSpecifications = instanceTypeSpecificationsBuffer
            } else {
                instanceTypeSpecifications = []
            }
        } else {
            instanceTypeSpecifications = nil
        }
        let tenancyDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.FleetCapacityReservationTenancy.self, forKey: .tenancy)
        tenancy = tenancyDecoded
        let totalTargetCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalTargetCapacity)
        totalTargetCapacity = totalTargetCapacityDecoded
        let endDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endDate)
        endDate = endDateDecoded
        let instanceMatchCriteriaDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.FleetInstanceMatchCriteria.self, forKey: .instanceMatchCriteria)
        instanceMatchCriteria = instanceMatchCriteriaDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[EC2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [EC2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
