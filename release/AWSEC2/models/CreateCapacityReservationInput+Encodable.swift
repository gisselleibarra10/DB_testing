// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateCapacityReservationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let availabilityZoneId = availabilityZoneId {
            try container.encode(availabilityZoneId, forKey: ClientRuntime.Key("AvailabilityZoneId"))
        }
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: ClientRuntime.Key("ClientToken"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let ebsOptimized = ebsOptimized {
            try container.encode(ebsOptimized, forKey: ClientRuntime.Key("EbsOptimized"))
        }
        if let endDate = endDate {
            try container.encode(ClientRuntime.TimestampWrapper(endDate, format: .dateTime), forKey: ClientRuntime.Key("EndDate"))
        }
        if let endDateType = endDateType {
            try container.encode(endDateType, forKey: ClientRuntime.Key("EndDateType"))
        }
        if let ephemeralStorage = ephemeralStorage {
            try container.encode(ephemeralStorage, forKey: ClientRuntime.Key("EphemeralStorage"))
        }
        if let instanceCount = instanceCount {
            try container.encode(instanceCount, forKey: ClientRuntime.Key("InstanceCount"))
        }
        if let instanceMatchCriteria = instanceMatchCriteria {
            try container.encode(instanceMatchCriteria, forKey: ClientRuntime.Key("InstanceMatchCriteria"))
        }
        if let instancePlatform = instancePlatform {
            try container.encode(instancePlatform, forKey: ClientRuntime.Key("InstancePlatform"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let outpostArn = outpostArn {
            try container.encode(outpostArn, forKey: ClientRuntime.Key("OutpostArn"))
        }
        if let placementGroupArn = placementGroupArn {
            try container.encode(placementGroupArn, forKey: ClientRuntime.Key("PlacementGroupArn"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecifications.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let tenancy = tenancy {
            try container.encode(tenancy, forKey: ClientRuntime.Key("Tenancy"))
        }
        try container.encode("CreateCapacityReservation", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
