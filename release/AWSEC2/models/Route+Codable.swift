// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.Route: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case carrierGatewayId = "carrierGatewayId"
        case coreNetworkArn = "coreNetworkArn"
        case destinationCidrBlock = "destinationCidrBlock"
        case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
        case destinationPrefixListId = "destinationPrefixListId"
        case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
        case gatewayId = "gatewayId"
        case instanceId = "instanceId"
        case instanceOwnerId = "instanceOwnerId"
        case localGatewayId = "localGatewayId"
        case natGatewayId = "natGatewayId"
        case networkInterfaceId = "networkInterfaceId"
        case origin = "origin"
        case state = "state"
        case transitGatewayId = "transitGatewayId"
        case vpcPeeringConnectionId = "vpcPeeringConnectionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let carrierGatewayId = carrierGatewayId {
            try container.encode(carrierGatewayId, forKey: ClientRuntime.Key("CarrierGatewayId"))
        }
        if let coreNetworkArn = coreNetworkArn {
            try container.encode(coreNetworkArn, forKey: ClientRuntime.Key("CoreNetworkArn"))
        }
        if let destinationCidrBlock = destinationCidrBlock {
            try container.encode(destinationCidrBlock, forKey: ClientRuntime.Key("DestinationCidrBlock"))
        }
        if let destinationIpv6CidrBlock = destinationIpv6CidrBlock {
            try container.encode(destinationIpv6CidrBlock, forKey: ClientRuntime.Key("DestinationIpv6CidrBlock"))
        }
        if let destinationPrefixListId = destinationPrefixListId {
            try container.encode(destinationPrefixListId, forKey: ClientRuntime.Key("DestinationPrefixListId"))
        }
        if let egressOnlyInternetGatewayId = egressOnlyInternetGatewayId {
            try container.encode(egressOnlyInternetGatewayId, forKey: ClientRuntime.Key("EgressOnlyInternetGatewayId"))
        }
        if let gatewayId = gatewayId {
            try container.encode(gatewayId, forKey: ClientRuntime.Key("GatewayId"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let instanceOwnerId = instanceOwnerId {
            try container.encode(instanceOwnerId, forKey: ClientRuntime.Key("InstanceOwnerId"))
        }
        if let localGatewayId = localGatewayId {
            try container.encode(localGatewayId, forKey: ClientRuntime.Key("LocalGatewayId"))
        }
        if let natGatewayId = natGatewayId {
            try container.encode(natGatewayId, forKey: ClientRuntime.Key("NatGatewayId"))
        }
        if let networkInterfaceId = networkInterfaceId {
            try container.encode(networkInterfaceId, forKey: ClientRuntime.Key("NetworkInterfaceId"))
        }
        if let origin = origin {
            try container.encode(origin, forKey: ClientRuntime.Key("Origin"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let transitGatewayId = transitGatewayId {
            try container.encode(transitGatewayId, forKey: ClientRuntime.Key("TransitGatewayId"))
        }
        if let vpcPeeringConnectionId = vpcPeeringConnectionId {
            try container.encode(vpcPeeringConnectionId, forKey: ClientRuntime.Key("VpcPeeringConnectionId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationCidrBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationCidrBlock)
        destinationCidrBlock = destinationCidrBlockDecoded
        let destinationIpv6CidrBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationIpv6CidrBlock)
        destinationIpv6CidrBlock = destinationIpv6CidrBlockDecoded
        let destinationPrefixListIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationPrefixListId)
        destinationPrefixListId = destinationPrefixListIdDecoded
        let egressOnlyInternetGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .egressOnlyInternetGatewayId)
        egressOnlyInternetGatewayId = egressOnlyInternetGatewayIdDecoded
        let gatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayId)
        gatewayId = gatewayIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceOwnerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceOwnerId)
        instanceOwnerId = instanceOwnerIdDecoded
        let natGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .natGatewayId)
        natGatewayId = natGatewayIdDecoded
        let transitGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayId)
        transitGatewayId = transitGatewayIdDecoded
        let localGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localGatewayId)
        localGatewayId = localGatewayIdDecoded
        let carrierGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .carrierGatewayId)
        carrierGatewayId = carrierGatewayIdDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let originDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.RouteOrigin.self, forKey: .origin)
        origin = originDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.RouteState.self, forKey: .state)
        state = stateDecoded
        let vpcPeeringConnectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcPeeringConnectionId)
        vpcPeeringConnectionId = vpcPeeringConnectionIdDecoded
        let coreNetworkArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .coreNetworkArn)
        coreNetworkArn = coreNetworkArnDecoded
    }
}
