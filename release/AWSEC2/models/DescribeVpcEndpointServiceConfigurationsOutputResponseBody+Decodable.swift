// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVpcEndpointServiceConfigurationsOutputResponseBody: Swift.Equatable {
    let serviceConfigurations: [EC2ClientTypes.ServiceConfiguration]?
    let nextToken: Swift.String?
}

extension DescribeVpcEndpointServiceConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case serviceConfigurations = "serviceConfigurationSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.serviceConfigurations) {
            struct KeyVal0{struct item{}}
            let serviceConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .serviceConfigurations)
            if let serviceConfigurationsWrappedContainer = serviceConfigurationsWrappedContainer {
                let serviceConfigurationsContainer = try serviceConfigurationsWrappedContainer.decodeIfPresent([EC2ClientTypes.ServiceConfiguration].self, forKey: .member)
                var serviceConfigurationsBuffer:[EC2ClientTypes.ServiceConfiguration]? = nil
                if let serviceConfigurationsContainer = serviceConfigurationsContainer {
                    serviceConfigurationsBuffer = [EC2ClientTypes.ServiceConfiguration]()
                    for structureContainer0 in serviceConfigurationsContainer {
                        serviceConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                serviceConfigurations = serviceConfigurationsBuffer
            } else {
                serviceConfigurations = []
            }
        } else {
            serviceConfigurations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
