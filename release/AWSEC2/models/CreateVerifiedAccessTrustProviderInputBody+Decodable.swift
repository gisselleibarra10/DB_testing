// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateVerifiedAccessTrustProviderInputBody: Swift.Equatable {
    let trustProviderType: EC2ClientTypes.TrustProviderType?
    let userTrustProviderType: EC2ClientTypes.UserTrustProviderType?
    let deviceTrustProviderType: EC2ClientTypes.DeviceTrustProviderType?
    let oidcOptions: EC2ClientTypes.CreateVerifiedAccessTrustProviderOidcOptions?
    let deviceOptions: EC2ClientTypes.CreateVerifiedAccessTrustProviderDeviceOptions?
    let policyReferenceName: Swift.String?
    let description: Swift.String?
    let tagSpecifications: [EC2ClientTypes.TagSpecification]?
    let clientToken: Swift.String?
    let dryRun: Swift.Bool?
}

extension CreateVerifiedAccessTrustProviderInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case deviceOptions = "DeviceOptions"
        case deviceTrustProviderType = "DeviceTrustProviderType"
        case dryRun = "DryRun"
        case oidcOptions = "OidcOptions"
        case policyReferenceName = "PolicyReferenceName"
        case tagSpecifications = "TagSpecification"
        case trustProviderType = "TrustProviderType"
        case userTrustProviderType = "UserTrustProviderType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trustProviderTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.TrustProviderType.self, forKey: .trustProviderType)
        trustProviderType = trustProviderTypeDecoded
        let userTrustProviderTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.UserTrustProviderType.self, forKey: .userTrustProviderType)
        userTrustProviderType = userTrustProviderTypeDecoded
        let deviceTrustProviderTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.DeviceTrustProviderType.self, forKey: .deviceTrustProviderType)
        deviceTrustProviderType = deviceTrustProviderTypeDecoded
        let oidcOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.CreateVerifiedAccessTrustProviderOidcOptions.self, forKey: .oidcOptions)
        oidcOptions = oidcOptionsDecoded
        let deviceOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.CreateVerifiedAccessTrustProviderDeviceOptions.self, forKey: .deviceOptions)
        deviceOptions = deviceOptionsDecoded
        let policyReferenceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyReferenceName)
        policyReferenceName = policyReferenceNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[EC2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [EC2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
