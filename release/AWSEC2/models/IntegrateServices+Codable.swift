// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.IntegrateServices: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case athenaIntegrations = "AthenaIntegration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let athenaIntegrations = athenaIntegrations {
            if !athenaIntegrations.isEmpty {
                for (index0, athenaintegration0) in athenaIntegrations.enumerated() {
                    var athenaIntegrationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AthenaIntegration.\(index0.advanced(by: 1))"))
                    try athenaIntegrationsContainer0.encode(athenaintegration0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.athenaIntegrations) {
            struct KeyVal0{struct item{}}
            let athenaIntegrationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .athenaIntegrations)
            if let athenaIntegrationsWrappedContainer = athenaIntegrationsWrappedContainer {
                let athenaIntegrationsContainer = try athenaIntegrationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.AthenaIntegration].self, forKey: .member)
                var athenaIntegrationsBuffer:[Ec2ClientTypes.AthenaIntegration]? = nil
                if let athenaIntegrationsContainer = athenaIntegrationsContainer {
                    athenaIntegrationsBuffer = [Ec2ClientTypes.AthenaIntegration]()
                    for structureContainer0 in athenaIntegrationsContainer {
                        athenaIntegrationsBuffer?.append(structureContainer0)
                    }
                }
                athenaIntegrations = athenaIntegrationsBuffer
            } else {
                athenaIntegrations = []
            }
        } else {
            athenaIntegrations = nil
        }
    }
}
