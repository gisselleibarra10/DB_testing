// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeFastSnapshotRestoresOutputResponseBody: Swift.Equatable {
    let fastSnapshotRestores: [Ec2ClientTypes.DescribeFastSnapshotRestoreSuccessItem]?
    let nextToken: Swift.String?
}

extension DescribeFastSnapshotRestoresOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fastSnapshotRestores = "fastSnapshotRestoreSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.fastSnapshotRestores) {
            struct KeyVal0{struct item{}}
            let fastSnapshotRestoresWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .fastSnapshotRestores)
            if let fastSnapshotRestoresWrappedContainer = fastSnapshotRestoresWrappedContainer {
                let fastSnapshotRestoresContainer = try fastSnapshotRestoresWrappedContainer.decodeIfPresent([Ec2ClientTypes.DescribeFastSnapshotRestoreSuccessItem].self, forKey: .member)
                var fastSnapshotRestoresBuffer:[Ec2ClientTypes.DescribeFastSnapshotRestoreSuccessItem]? = nil
                if let fastSnapshotRestoresContainer = fastSnapshotRestoresContainer {
                    fastSnapshotRestoresBuffer = [Ec2ClientTypes.DescribeFastSnapshotRestoreSuccessItem]()
                    for structureContainer0 in fastSnapshotRestoresContainer {
                        fastSnapshotRestoresBuffer?.append(structureContainer0)
                    }
                }
                fastSnapshotRestores = fastSnapshotRestoresBuffer
            } else {
                fastSnapshotRestores = []
            }
        } else {
            fastSnapshotRestores = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
