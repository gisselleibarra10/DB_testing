// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateInstanceExportTaskInputBody: Swift.Equatable {
    let description: Swift.String?
    let exportToS3Task: EC2ClientTypes.ExportToS3TaskSpecification?
    let instanceId: Swift.String?
    let targetEnvironment: EC2ClientTypes.ExportEnvironment?
    let tagSpecifications: [EC2ClientTypes.TagSpecification]?
}

extension CreateInstanceExportTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "description"
        case exportToS3Task = "exportToS3"
        case instanceId = "instanceId"
        case tagSpecifications = "TagSpecification"
        case targetEnvironment = "targetEnvironment"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let exportToS3TaskDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ExportToS3TaskSpecification.self, forKey: .exportToS3Task)
        exportToS3Task = exportToS3TaskDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let targetEnvironmentDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ExportEnvironment.self, forKey: .targetEnvironment)
        targetEnvironment = targetEnvironmentDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[EC2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [EC2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
    }
}
