// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportKeyPairInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let keyName: Swift.String?
    let publicKeyMaterial: ClientRuntime.Data?
    let tagSpecifications: [EC2ClientTypes.TagSpecification]?
}

extension ImportKeyPairInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "dryRun"
        case keyName = "keyName"
        case publicKeyMaterial = "publicKeyMaterial"
        case tagSpecifications = "TagSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let keyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyName)
        keyName = keyNameDecoded
        if containerValues.contains(.publicKeyMaterial) {
            do {
                let publicKeyMaterialDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .publicKeyMaterial)
                publicKeyMaterial = publicKeyMaterialDecoded
            } catch {
                publicKeyMaterial = "".data(using: .utf8)
            }
        } else {
            publicKeyMaterial = nil
        }
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[EC2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [EC2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
    }
}
