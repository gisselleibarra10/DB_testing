// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.InstanceSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludeBootVolume = "ExcludeBootVolume"
        case excludeDataVolumeIds = "ExcludeDataVolumeId"
        case instanceId = "InstanceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let excludeBootVolume = excludeBootVolume {
            try container.encode(excludeBootVolume, forKey: ClientRuntime.Key("ExcludeBootVolume"))
        }
        if let excludeDataVolumeIds = excludeDataVolumeIds {
            if !excludeDataVolumeIds.isEmpty {
                for (index0, volumeid0) in excludeDataVolumeIds.enumerated() {
                    var excludeDataVolumeIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludeDataVolumeId.\(index0.advanced(by: 1))"))
                    try excludeDataVolumeIdsContainer0.encode(volumeid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var excludeDataVolumeIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludeDataVolumeId"))
                try excludeDataVolumeIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let excludeBootVolumeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .excludeBootVolume)
        excludeBootVolume = excludeBootVolumeDecoded
        if containerValues.contains(.excludeDataVolumeIds) {
            struct KeyVal0{struct VolumeId{}}
            let excludeDataVolumeIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VolumeId>.CodingKeys.self, forKey: .excludeDataVolumeIds)
            if let excludeDataVolumeIdsWrappedContainer = excludeDataVolumeIdsWrappedContainer {
                let excludeDataVolumeIdsContainer = try excludeDataVolumeIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var excludeDataVolumeIdsBuffer:[Swift.String]? = nil
                if let excludeDataVolumeIdsContainer = excludeDataVolumeIdsContainer {
                    excludeDataVolumeIdsBuffer = [Swift.String]()
                    for stringContainer0 in excludeDataVolumeIdsContainer {
                        excludeDataVolumeIdsBuffer?.append(stringContainer0)
                    }
                }
                excludeDataVolumeIds = excludeDataVolumeIdsBuffer
            } else {
                excludeDataVolumeIds = []
            }
        } else {
            excludeDataVolumeIds = nil
        }
    }
}
