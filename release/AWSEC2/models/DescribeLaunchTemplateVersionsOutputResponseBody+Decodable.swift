// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeLaunchTemplateVersionsOutputResponseBody: Swift.Equatable {
    let launchTemplateVersions: [Ec2ClientTypes.LaunchTemplateVersion]?
    let nextToken: Swift.String?
}

extension DescribeLaunchTemplateVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case launchTemplateVersions = "launchTemplateVersionSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.launchTemplateVersions) {
            struct KeyVal0{struct item{}}
            let launchTemplateVersionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .launchTemplateVersions)
            if let launchTemplateVersionsWrappedContainer = launchTemplateVersionsWrappedContainer {
                let launchTemplateVersionsContainer = try launchTemplateVersionsWrappedContainer.decodeIfPresent([Ec2ClientTypes.LaunchTemplateVersion].self, forKey: .member)
                var launchTemplateVersionsBuffer:[Ec2ClientTypes.LaunchTemplateVersion]? = nil
                if let launchTemplateVersionsContainer = launchTemplateVersionsContainer {
                    launchTemplateVersionsBuffer = [Ec2ClientTypes.LaunchTemplateVersion]()
                    for structureContainer0 in launchTemplateVersionsContainer {
                        launchTemplateVersionsBuffer?.append(structureContainer0)
                    }
                }
                launchTemplateVersions = launchTemplateVersionsBuffer
            } else {
                launchTemplateVersions = []
            }
        } else {
            launchTemplateVersions = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
