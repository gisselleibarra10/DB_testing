// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyVpcEndpointInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let vpcEndpointId: Swift.String?
    let resetPolicy: Swift.Bool?
    let policyDocument: Swift.String?
    let addRouteTableIds: [Swift.String]?
    let removeRouteTableIds: [Swift.String]?
    let addSubnetIds: [Swift.String]?
    let removeSubnetIds: [Swift.String]?
    let addSecurityGroupIds: [Swift.String]?
    let removeSecurityGroupIds: [Swift.String]?
    let ipAddressType: EC2ClientTypes.IpAddressType?
    let dnsOptions: EC2ClientTypes.DnsOptionsSpecification?
    let privateDnsEnabled: Swift.Bool?
}

extension ModifyVpcEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addRouteTableIds = "AddRouteTableId"
        case addSecurityGroupIds = "AddSecurityGroupId"
        case addSubnetIds = "AddSubnetId"
        case dnsOptions = "DnsOptions"
        case dryRun = "DryRun"
        case ipAddressType = "IpAddressType"
        case policyDocument = "PolicyDocument"
        case privateDnsEnabled = "PrivateDnsEnabled"
        case removeRouteTableIds = "RemoveRouteTableId"
        case removeSecurityGroupIds = "RemoveSecurityGroupId"
        case removeSubnetIds = "RemoveSubnetId"
        case resetPolicy = "ResetPolicy"
        case vpcEndpointId = "VpcEndpointId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let resetPolicyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .resetPolicy)
        resetPolicy = resetPolicyDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        if containerValues.contains(.addRouteTableIds) {
            struct KeyVal0{struct item{}}
            let addRouteTableIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .addRouteTableIds)
            if let addRouteTableIdsWrappedContainer = addRouteTableIdsWrappedContainer {
                let addRouteTableIdsContainer = try addRouteTableIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var addRouteTableIdsBuffer:[Swift.String]? = nil
                if let addRouteTableIdsContainer = addRouteTableIdsContainer {
                    addRouteTableIdsBuffer = [Swift.String]()
                    for stringContainer0 in addRouteTableIdsContainer {
                        addRouteTableIdsBuffer?.append(stringContainer0)
                    }
                }
                addRouteTableIds = addRouteTableIdsBuffer
            } else {
                addRouteTableIds = []
            }
        } else {
            addRouteTableIds = nil
        }
        if containerValues.contains(.removeRouteTableIds) {
            struct KeyVal0{struct item{}}
            let removeRouteTableIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .removeRouteTableIds)
            if let removeRouteTableIdsWrappedContainer = removeRouteTableIdsWrappedContainer {
                let removeRouteTableIdsContainer = try removeRouteTableIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var removeRouteTableIdsBuffer:[Swift.String]? = nil
                if let removeRouteTableIdsContainer = removeRouteTableIdsContainer {
                    removeRouteTableIdsBuffer = [Swift.String]()
                    for stringContainer0 in removeRouteTableIdsContainer {
                        removeRouteTableIdsBuffer?.append(stringContainer0)
                    }
                }
                removeRouteTableIds = removeRouteTableIdsBuffer
            } else {
                removeRouteTableIds = []
            }
        } else {
            removeRouteTableIds = nil
        }
        if containerValues.contains(.addSubnetIds) {
            struct KeyVal0{struct item{}}
            let addSubnetIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .addSubnetIds)
            if let addSubnetIdsWrappedContainer = addSubnetIdsWrappedContainer {
                let addSubnetIdsContainer = try addSubnetIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var addSubnetIdsBuffer:[Swift.String]? = nil
                if let addSubnetIdsContainer = addSubnetIdsContainer {
                    addSubnetIdsBuffer = [Swift.String]()
                    for stringContainer0 in addSubnetIdsContainer {
                        addSubnetIdsBuffer?.append(stringContainer0)
                    }
                }
                addSubnetIds = addSubnetIdsBuffer
            } else {
                addSubnetIds = []
            }
        } else {
            addSubnetIds = nil
        }
        if containerValues.contains(.removeSubnetIds) {
            struct KeyVal0{struct item{}}
            let removeSubnetIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .removeSubnetIds)
            if let removeSubnetIdsWrappedContainer = removeSubnetIdsWrappedContainer {
                let removeSubnetIdsContainer = try removeSubnetIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var removeSubnetIdsBuffer:[Swift.String]? = nil
                if let removeSubnetIdsContainer = removeSubnetIdsContainer {
                    removeSubnetIdsBuffer = [Swift.String]()
                    for stringContainer0 in removeSubnetIdsContainer {
                        removeSubnetIdsBuffer?.append(stringContainer0)
                    }
                }
                removeSubnetIds = removeSubnetIdsBuffer
            } else {
                removeSubnetIds = []
            }
        } else {
            removeSubnetIds = nil
        }
        if containerValues.contains(.addSecurityGroupIds) {
            struct KeyVal0{struct item{}}
            let addSecurityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .addSecurityGroupIds)
            if let addSecurityGroupIdsWrappedContainer = addSecurityGroupIdsWrappedContainer {
                let addSecurityGroupIdsContainer = try addSecurityGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var addSecurityGroupIdsBuffer:[Swift.String]? = nil
                if let addSecurityGroupIdsContainer = addSecurityGroupIdsContainer {
                    addSecurityGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in addSecurityGroupIdsContainer {
                        addSecurityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                addSecurityGroupIds = addSecurityGroupIdsBuffer
            } else {
                addSecurityGroupIds = []
            }
        } else {
            addSecurityGroupIds = nil
        }
        if containerValues.contains(.removeSecurityGroupIds) {
            struct KeyVal0{struct item{}}
            let removeSecurityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .removeSecurityGroupIds)
            if let removeSecurityGroupIdsWrappedContainer = removeSecurityGroupIdsWrappedContainer {
                let removeSecurityGroupIdsContainer = try removeSecurityGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var removeSecurityGroupIdsBuffer:[Swift.String]? = nil
                if let removeSecurityGroupIdsContainer = removeSecurityGroupIdsContainer {
                    removeSecurityGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in removeSecurityGroupIdsContainer {
                        removeSecurityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                removeSecurityGroupIds = removeSecurityGroupIdsBuffer
            } else {
                removeSecurityGroupIds = []
            }
        } else {
            removeSecurityGroupIds = nil
        }
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let dnsOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.DnsOptionsSpecification.self, forKey: .dnsOptions)
        dnsOptions = dnsOptionsDecoded
        let privateDnsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .privateDnsEnabled)
        privateDnsEnabled = privateDnsEnabledDecoded
    }
}
