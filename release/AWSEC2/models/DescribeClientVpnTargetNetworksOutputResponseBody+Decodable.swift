// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClientVpnTargetNetworksOutputResponseBody: Swift.Equatable {
    let clientVpnTargetNetworks: [EC2ClientTypes.TargetNetwork]?
    let nextToken: Swift.String?
}

extension DescribeClientVpnTargetNetworksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientVpnTargetNetworks = "clientVpnTargetNetworks"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.clientVpnTargetNetworks) {
            struct KeyVal0{struct item{}}
            let clientVpnTargetNetworksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .clientVpnTargetNetworks)
            if let clientVpnTargetNetworksWrappedContainer = clientVpnTargetNetworksWrappedContainer {
                let clientVpnTargetNetworksContainer = try clientVpnTargetNetworksWrappedContainer.decodeIfPresent([EC2ClientTypes.TargetNetwork].self, forKey: .member)
                var clientVpnTargetNetworksBuffer:[EC2ClientTypes.TargetNetwork]? = nil
                if let clientVpnTargetNetworksContainer = clientVpnTargetNetworksContainer {
                    clientVpnTargetNetworksBuffer = [EC2ClientTypes.TargetNetwork]()
                    for structureContainer0 in clientVpnTargetNetworksContainer {
                        clientVpnTargetNetworksBuffer?.append(structureContainer0)
                    }
                }
                clientVpnTargetNetworks = clientVpnTargetNetworksBuffer
            } else {
                clientVpnTargetNetworks = []
            }
        } else {
            clientVpnTargetNetworks = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
