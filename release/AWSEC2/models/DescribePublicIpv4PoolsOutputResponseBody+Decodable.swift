// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribePublicIpv4PoolsOutputResponseBody: Swift.Equatable {
    let publicIpv4Pools: [Ec2ClientTypes.PublicIpv4Pool]?
    let nextToken: Swift.String?
}

extension DescribePublicIpv4PoolsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case publicIpv4Pools = "publicIpv4PoolSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.publicIpv4Pools) {
            struct KeyVal0{struct item{}}
            let publicIpv4PoolsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .publicIpv4Pools)
            if let publicIpv4PoolsWrappedContainer = publicIpv4PoolsWrappedContainer {
                let publicIpv4PoolsContainer = try publicIpv4PoolsWrappedContainer.decodeIfPresent([Ec2ClientTypes.PublicIpv4Pool].self, forKey: .member)
                var publicIpv4PoolsBuffer:[Ec2ClientTypes.PublicIpv4Pool]? = nil
                if let publicIpv4PoolsContainer = publicIpv4PoolsContainer {
                    publicIpv4PoolsBuffer = [Ec2ClientTypes.PublicIpv4Pool]()
                    for structureContainer0 in publicIpv4PoolsContainer {
                        publicIpv4PoolsBuffer?.append(structureContainer0)
                    }
                }
                publicIpv4Pools = publicIpv4PoolsBuffer
            } else {
                publicIpv4Pools = []
            }
        } else {
            publicIpv4Pools = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
