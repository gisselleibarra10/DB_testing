// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    public enum NetworkInterfaceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case apiGatewayManaged
        case awsCodestarConnectionsManaged
        case branch
        case efa
        case gatewayLoadBalancer
        case gatewayLoadBalancerEndpoint
        case globalAcceleratorManaged
        case interface
        case iotRulesManaged
        case lambda
        case loadBalancer
        case natgateway
        case networkLoadBalancer
        case quicksight
        case transitGateway
        case trunk
        case vpcEndpoint
        case sdkUnknown(Swift.String)

        public static var allCases: [NetworkInterfaceType] {
            return [
                .apiGatewayManaged,
                .awsCodestarConnectionsManaged,
                .branch,
                .efa,
                .gatewayLoadBalancer,
                .gatewayLoadBalancerEndpoint,
                .globalAcceleratorManaged,
                .interface,
                .iotRulesManaged,
                .lambda,
                .loadBalancer,
                .natgateway,
                .networkLoadBalancer,
                .quicksight,
                .transitGateway,
                .trunk,
                .vpcEndpoint,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .apiGatewayManaged: return "api_gateway_managed"
            case .awsCodestarConnectionsManaged: return "aws_codestar_connections_managed"
            case .branch: return "branch"
            case .efa: return "efa"
            case .gatewayLoadBalancer: return "gateway_load_balancer"
            case .gatewayLoadBalancerEndpoint: return "gateway_load_balancer_endpoint"
            case .globalAcceleratorManaged: return "global_accelerator_managed"
            case .interface: return "interface"
            case .iotRulesManaged: return "iot_rules_managed"
            case .lambda: return "lambda"
            case .loadBalancer: return "load_balancer"
            case .natgateway: return "natGateway"
            case .networkLoadBalancer: return "network_load_balancer"
            case .quicksight: return "quicksight"
            case .transitGateway: return "transit_gateway"
            case .trunk: return "trunk"
            case .vpcEndpoint: return "vpc_endpoint"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NetworkInterfaceType(rawValue: rawValue) ?? NetworkInterfaceType.sdkUnknown(rawValue)
        }
    }
}
