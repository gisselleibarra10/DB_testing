// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// Describes a stale rule in a security group.
    public struct StaleIpPermission: Swift.Equatable {
        /// The start of the port range for the TCP and UDP protocols, or an ICMP type number. A value of -1 indicates all ICMP types.
        public var fromPort: Swift.Int?
        /// The IP protocol name (for tcp, udp, and icmp) or number (see [Protocol Numbers)](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        public var ipProtocol: Swift.String?
        /// The IP ranges. Not applicable for stale security group rules.
        public var ipRanges: [Swift.String]?
        /// The prefix list IDs. Not applicable for stale security group rules.
        public var prefixListIds: [Swift.String]?
        /// The end of the port range for the TCP and UDP protocols, or an ICMP type number. A value of -1 indicates all ICMP types.
        public var toPort: Swift.Int?
        /// The security group pairs. Returns the ID of the referenced security group and VPC, and the ID and status of the VPC peering connection.
        public var userIdGroupPairs: [Ec2ClientTypes.UserIdGroupPair]?

        public init (
            fromPort: Swift.Int? = nil,
            ipProtocol: Swift.String? = nil,
            ipRanges: [Swift.String]? = nil,
            prefixListIds: [Swift.String]? = nil,
            toPort: Swift.Int? = nil,
            userIdGroupPairs: [Ec2ClientTypes.UserIdGroupPair]? = nil
        )
        {
            self.fromPort = fromPort
            self.ipProtocol = ipProtocol
            self.ipRanges = ipRanges
            self.prefixListIds = prefixListIds
            self.toPort = toPort
            self.userIdGroupPairs = userIdGroupPairs
        }
    }

}
