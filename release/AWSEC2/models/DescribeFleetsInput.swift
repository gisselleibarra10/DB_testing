// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeFleetsInput: Swift.Equatable {
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// The filters.
    ///
    /// * activity-status - The progress of the EC2 Fleet ( error | pending-fulfillment | pending-termination | fulfilled).
    ///
    /// * excess-capacity-termination-policy - Indicates whether to terminate running instances if the target capacity is decreased below the current EC2 Fleet size (true | false).
    ///
    /// * fleet-state - The state of the EC2 Fleet (submitted | active | deleted | failed | deleted-running | deleted-terminating | modifying).
    ///
    /// * replace-unhealthy-instances - Indicates whether EC2 Fleet should replace unhealthy instances (true | false).
    ///
    /// * type - The type of request (instant | request | maintain).
    public var filters: [EC2ClientTypes.Filter]?
    /// The IDs of the EC2 Fleets. If a fleet is of type instant, you must specify the fleet ID, otherwise it does not appear in the response.
    public var fleetIds: [Swift.String]?
    /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
    public var maxResults: Swift.Int?
    /// The token for the next set of results.
    public var nextToken: Swift.String?

    public init (
        dryRun: Swift.Bool? = nil,
        filters: [EC2ClientTypes.Filter]? = nil,
        fleetIds: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dryRun = dryRun
        self.filters = filters
        self.fleetIds = fleetIds
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}
