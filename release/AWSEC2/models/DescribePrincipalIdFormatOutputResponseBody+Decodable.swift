// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribePrincipalIdFormatOutputResponseBody: Swift.Equatable {
    let principals: [EC2ClientTypes.PrincipalIdFormat]?
    let nextToken: Swift.String?
}

extension DescribePrincipalIdFormatOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case principals = "principalSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.principals) {
            struct KeyVal0{struct item{}}
            let principalsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .principals)
            if let principalsWrappedContainer = principalsWrappedContainer {
                let principalsContainer = try principalsWrappedContainer.decodeIfPresent([EC2ClientTypes.PrincipalIdFormat].self, forKey: .member)
                var principalsBuffer:[EC2ClientTypes.PrincipalIdFormat]? = nil
                if let principalsContainer = principalsContainer {
                    principalsBuffer = [EC2ClientTypes.PrincipalIdFormat]()
                    for structureContainer0 in principalsContainer {
                        principalsBuffer?.append(structureContainer0)
                    }
                }
                principals = principalsBuffer
            } else {
                principals = []
            }
        } else {
            principals = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
