// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.ResourceStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceTypes = "resourceTypeSet"
        case resources = "resourceSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceTypes = resourceTypes {
            if !resourceTypes.isEmpty {
                for (index0, string0) in resourceTypes.enumerated() {
                    var resourceTypesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTypeSet.\(index0.advanced(by: 1))"))
                    try resourceTypesContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let resources = resources {
            if !resources.isEmpty {
                for (index0, string0) in resources.enumerated() {
                    var resourcesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceSet.\(index0.advanced(by: 1))"))
                    try resourcesContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.resources) {
            struct KeyVal0{struct item{}}
            let resourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .resources)
            if let resourcesWrappedContainer = resourcesWrappedContainer {
                let resourcesContainer = try resourcesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourcesBuffer:[Swift.String]? = nil
                if let resourcesContainer = resourcesContainer {
                    resourcesBuffer = [Swift.String]()
                    for stringContainer0 in resourcesContainer {
                        resourcesBuffer?.append(stringContainer0)
                    }
                }
                resources = resourcesBuffer
            } else {
                resources = []
            }
        } else {
            resources = nil
        }
        if containerValues.contains(.resourceTypes) {
            struct KeyVal0{struct item{}}
            let resourceTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .resourceTypes)
            if let resourceTypesWrappedContainer = resourceTypesWrappedContainer {
                let resourceTypesContainer = try resourceTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourceTypesBuffer:[Swift.String]? = nil
                if let resourceTypesContainer = resourceTypesContainer {
                    resourceTypesBuffer = [Swift.String]()
                    for stringContainer0 in resourceTypesContainer {
                        resourceTypesBuffer?.append(stringContainer0)
                    }
                }
                resourceTypes = resourceTypesBuffer
            } else {
                resourceTypes = []
            }
        } else {
            resourceTypes = nil
        }
    }
}
