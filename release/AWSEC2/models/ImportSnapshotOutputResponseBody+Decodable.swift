// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportSnapshotOutputResponseBody: Swift.Equatable {
    let description: Swift.String?
    let importTaskId: Swift.String?
    let snapshotTaskDetail: EC2ClientTypes.SnapshotTaskDetail?
    let tags: [EC2ClientTypes.Tag]?
}

extension ImportSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "description"
        case importTaskId = "importTaskId"
        case snapshotTaskDetail = "snapshotTaskDetail"
        case tags = "tagSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let importTaskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importTaskId)
        importTaskId = importTaskIdDecoded
        let snapshotTaskDetailDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.SnapshotTaskDetail.self, forKey: .snapshotTaskDetail)
        snapshotTaskDetail = snapshotTaskDetailDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
