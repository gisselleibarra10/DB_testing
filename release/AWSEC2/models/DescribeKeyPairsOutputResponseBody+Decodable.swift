// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeKeyPairsOutputResponseBody: Swift.Equatable {
    let keyPairs: [EC2ClientTypes.KeyPairInfo]?
}

extension DescribeKeyPairsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairs = "keySet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.keyPairs) {
            struct KeyVal0{struct item{}}
            let keyPairsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .keyPairs)
            if let keyPairsWrappedContainer = keyPairsWrappedContainer {
                let keyPairsContainer = try keyPairsWrappedContainer.decodeIfPresent([EC2ClientTypes.KeyPairInfo].self, forKey: .member)
                var keyPairsBuffer:[EC2ClientTypes.KeyPairInfo]? = nil
                if let keyPairsContainer = keyPairsContainer {
                    keyPairsBuffer = [EC2ClientTypes.KeyPairInfo]()
                    for structureContainer0 in keyPairsContainer {
                        keyPairsBuffer?.append(structureContainer0)
                    }
                }
                keyPairs = keyPairsBuffer
            } else {
                keyPairs = []
            }
        } else {
            keyPairs = nil
        }
    }
}
