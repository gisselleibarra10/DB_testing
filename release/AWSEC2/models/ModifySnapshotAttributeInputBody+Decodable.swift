// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifySnapshotAttributeInputBody: Swift.Equatable {
    let attribute: Ec2ClientTypes.SnapshotAttributeName?
    let createVolumePermission: Ec2ClientTypes.CreateVolumePermissionModifications?
    let groupNames: [Swift.String]?
    let operationType: Ec2ClientTypes.OperationType?
    let snapshotId: Swift.String?
    let userIds: [Swift.String]?
    let dryRun: Swift.Bool?
}

extension ModifySnapshotAttributeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attribute = "Attribute"
        case createVolumePermission = "CreateVolumePermission"
        case dryRun = "dryRun"
        case groupNames = "UserGroup"
        case operationType = "OperationType"
        case snapshotId = "SnapshotId"
        case userIds = "UserId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.SnapshotAttributeName.self, forKey: .attribute)
        attribute = attributeDecoded
        let createVolumePermissionDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.CreateVolumePermissionModifications.self, forKey: .createVolumePermission)
        createVolumePermission = createVolumePermissionDecoded
        if containerValues.contains(.groupNames) {
            struct KeyVal0{struct GroupName{}}
            let groupNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GroupName>.CodingKeys.self, forKey: .groupNames)
            if let groupNamesWrappedContainer = groupNamesWrappedContainer {
                let groupNamesContainer = try groupNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var groupNamesBuffer:[Swift.String]? = nil
                if let groupNamesContainer = groupNamesContainer {
                    groupNamesBuffer = [Swift.String]()
                    for stringContainer0 in groupNamesContainer {
                        groupNamesBuffer?.append(stringContainer0)
                    }
                }
                groupNames = groupNamesBuffer
            } else {
                groupNames = []
            }
        } else {
            groupNames = nil
        }
        let operationTypeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.OperationType.self, forKey: .operationType)
        operationType = operationTypeDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        if containerValues.contains(.userIds) {
            struct KeyVal0{struct UserId{}}
            let userIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.UserId>.CodingKeys.self, forKey: .userIds)
            if let userIdsWrappedContainer = userIdsWrappedContainer {
                let userIdsContainer = try userIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userIdsBuffer:[Swift.String]? = nil
                if let userIdsContainer = userIdsContainer {
                    userIdsBuffer = [Swift.String]()
                    for stringContainer0 in userIdsContainer {
                        userIdsBuffer?.append(stringContainer0)
                    }
                }
                userIds = userIdsBuffer
            } else {
                userIds = []
            }
        } else {
            userIds = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
