// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeFpgaImagesOutputResponseBody: Swift.Equatable {
    let fpgaImages: [EC2ClientTypes.FpgaImage]?
    let nextToken: Swift.String?
}

extension DescribeFpgaImagesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fpgaImages = "fpgaImageSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.fpgaImages) {
            struct KeyVal0{struct item{}}
            let fpgaImagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .fpgaImages)
            if let fpgaImagesWrappedContainer = fpgaImagesWrappedContainer {
                let fpgaImagesContainer = try fpgaImagesWrappedContainer.decodeIfPresent([EC2ClientTypes.FpgaImage].self, forKey: .member)
                var fpgaImagesBuffer:[EC2ClientTypes.FpgaImage]? = nil
                if let fpgaImagesContainer = fpgaImagesContainer {
                    fpgaImagesBuffer = [EC2ClientTypes.FpgaImage]()
                    for structureContainer0 in fpgaImagesContainer {
                        fpgaImagesBuffer?.append(structureContainer0)
                    }
                }
                fpgaImages = fpgaImagesBuffer
            } else {
                fpgaImages = []
            }
        } else {
            fpgaImages = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
