// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportImageInputBody: Swift.Equatable {
    let architecture: Swift.String?
    let clientData: EC2ClientTypes.ClientData?
    let clientToken: Swift.String?
    let description: Swift.String?
    let diskContainers: [EC2ClientTypes.ImageDiskContainer]?
    let dryRun: Swift.Bool?
    let encrypted: Swift.Bool?
    let hypervisor: Swift.String?
    let kmsKeyId: Swift.String?
    let licenseType: Swift.String?
    let platform: Swift.String?
    let roleName: Swift.String?
    let licenseSpecifications: [EC2ClientTypes.ImportImageLicenseConfigurationRequest]?
    let tagSpecifications: [EC2ClientTypes.TagSpecification]?
    let usageOperation: Swift.String?
    let bootMode: EC2ClientTypes.BootModeValues?
}

extension ImportImageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case architecture = "Architecture"
        case bootMode = "BootMode"
        case clientData = "ClientData"
        case clientToken = "ClientToken"
        case description = "Description"
        case diskContainers = "DiskContainer"
        case dryRun = "DryRun"
        case encrypted = "Encrypted"
        case hypervisor = "Hypervisor"
        case kmsKeyId = "KmsKeyId"
        case licenseSpecifications = "LicenseSpecifications"
        case licenseType = "LicenseType"
        case platform = "Platform"
        case roleName = "RoleName"
        case tagSpecifications = "TagSpecification"
        case usageOperation = "UsageOperation"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let architectureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .architecture)
        architecture = architectureDecoded
        let clientDataDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ClientData.self, forKey: .clientData)
        clientData = clientDataDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.diskContainers) {
            struct KeyVal0{struct item{}}
            let diskContainersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .diskContainers)
            if let diskContainersWrappedContainer = diskContainersWrappedContainer {
                let diskContainersContainer = try diskContainersWrappedContainer.decodeIfPresent([EC2ClientTypes.ImageDiskContainer].self, forKey: .member)
                var diskContainersBuffer:[EC2ClientTypes.ImageDiskContainer]? = nil
                if let diskContainersContainer = diskContainersContainer {
                    diskContainersBuffer = [EC2ClientTypes.ImageDiskContainer]()
                    for structureContainer0 in diskContainersContainer {
                        diskContainersBuffer?.append(structureContainer0)
                    }
                }
                diskContainers = diskContainersBuffer
            } else {
                diskContainers = []
            }
        } else {
            diskContainers = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let hypervisorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hypervisor)
        hypervisor = hypervisorDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let licenseTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseType)
        licenseType = licenseTypeDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleName)
        roleName = roleNameDecoded
        if containerValues.contains(.licenseSpecifications) {
            struct KeyVal0{struct item{}}
            let licenseSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .licenseSpecifications)
            if let licenseSpecificationsWrappedContainer = licenseSpecificationsWrappedContainer {
                let licenseSpecificationsContainer = try licenseSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.ImportImageLicenseConfigurationRequest].self, forKey: .member)
                var licenseSpecificationsBuffer:[EC2ClientTypes.ImportImageLicenseConfigurationRequest]? = nil
                if let licenseSpecificationsContainer = licenseSpecificationsContainer {
                    licenseSpecificationsBuffer = [EC2ClientTypes.ImportImageLicenseConfigurationRequest]()
                    for structureContainer0 in licenseSpecificationsContainer {
                        licenseSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                licenseSpecifications = licenseSpecificationsBuffer
            } else {
                licenseSpecifications = []
            }
        } else {
            licenseSpecifications = nil
        }
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[EC2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [EC2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let usageOperationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usageOperation)
        usageOperation = usageOperationDecoded
        let bootModeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.BootModeValues.self, forKey: .bootMode)
        bootMode = bootModeDecoded
    }
}
