// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateNatGatewayInput: Swift.Equatable {
    /// [Public NAT gateways only] The allocation ID of an Elastic IP address to associate with the NAT gateway. You cannot specify an Elastic IP address with a private NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it.
    public var allocationId: Swift.String?
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see [How to ensure idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html). Constraint: Maximum 64 ASCII characters.
    public var clientToken: Swift.String?
    /// Indicates whether the NAT gateway supports public or private connectivity. The default is public connectivity.
    public var connectivityType: Ec2ClientTypes.ConnectivityType?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// The subnet in which to create the NAT gateway.
    /// This member is required.
    public var subnetId: Swift.String?
    /// The tags to assign to the NAT gateway.
    public var tagSpecifications: [Ec2ClientTypes.TagSpecification]?

    public init (
        allocationId: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        connectivityType: Ec2ClientTypes.ConnectivityType? = nil,
        dryRun: Swift.Bool? = nil,
        subnetId: Swift.String? = nil,
        tagSpecifications: [Ec2ClientTypes.TagSpecification]? = nil
    )
    {
        self.allocationId = allocationId
        self.clientToken = clientToken
        self.connectivityType = connectivityType
        self.dryRun = dryRun
        self.subnetId = subnetId
        self.tagSpecifications = tagSpecifications
    }
}
