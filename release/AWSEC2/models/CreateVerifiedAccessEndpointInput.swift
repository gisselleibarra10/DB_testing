// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateVerifiedAccessEndpointInput: Swift.Equatable {
    /// The DNS name for users to reach your application.
    /// This member is required.
    public var applicationDomain: Swift.String?
    /// The Amazon Web Services network component Verified Access attaches to.
    /// This member is required.
    public var attachmentType: EC2ClientTypes.VerifiedAccessEndpointAttachmentType?
    /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see [Ensuring Idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    public var clientToken: Swift.String?
    /// A description for the Amazon Web Services Verified Access endpoint.
    public var description: Swift.String?
    /// The ARN of the public TLS/SSL certificate in Amazon Web Services Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application.
    /// This member is required.
    public var domainCertificateArn: Swift.String?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// A custom identifier that gets prepended to a DNS name that is generated for the endpoint.
    /// This member is required.
    public var endpointDomainPrefix: Swift.String?
    /// The type of Amazon Web Services Verified Access endpoint to create.
    /// This member is required.
    public var endpointType: EC2ClientTypes.VerifiedAccessEndpointType?
    /// The load balancer details if creating the Amazon Web Services Verified Access endpoint as load-balancertype.
    public var loadBalancerOptions: EC2ClientTypes.CreateVerifiedAccessEndpointLoadBalancerOptions?
    /// The network interface details if creating the Amazon Web Services Verified Access endpoint as network-interfacetype.
    public var networkInterfaceOptions: EC2ClientTypes.CreateVerifiedAccessEndpointEniOptions?
    /// The Amazon Web Services Verified Access policy document.
    public var policyDocument: Swift.String?
    /// The Amazon EC2 security groups to associate with the Amazon Web Services Verified Access endpoint.
    public var securityGroupIds: [Swift.String]?
    /// The tags to assign to the Amazon Web Services Verified Access endpoint.
    public var tagSpecifications: [EC2ClientTypes.TagSpecification]?
    /// The ID of the Verified Access group to associate the endpoint with.
    /// This member is required.
    public var verifiedAccessGroupId: Swift.String?

    public init (
        applicationDomain: Swift.String? = nil,
        attachmentType: EC2ClientTypes.VerifiedAccessEndpointAttachmentType? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        domainCertificateArn: Swift.String? = nil,
        dryRun: Swift.Bool? = nil,
        endpointDomainPrefix: Swift.String? = nil,
        endpointType: EC2ClientTypes.VerifiedAccessEndpointType? = nil,
        loadBalancerOptions: EC2ClientTypes.CreateVerifiedAccessEndpointLoadBalancerOptions? = nil,
        networkInterfaceOptions: EC2ClientTypes.CreateVerifiedAccessEndpointEniOptions? = nil,
        policyDocument: Swift.String? = nil,
        securityGroupIds: [Swift.String]? = nil,
        tagSpecifications: [EC2ClientTypes.TagSpecification]? = nil,
        verifiedAccessGroupId: Swift.String? = nil
    )
    {
        self.applicationDomain = applicationDomain
        self.attachmentType = attachmentType
        self.clientToken = clientToken
        self.description = description
        self.domainCertificateArn = domainCertificateArn
        self.dryRun = dryRun
        self.endpointDomainPrefix = endpointDomainPrefix
        self.endpointType = endpointType
        self.loadBalancerOptions = loadBalancerOptions
        self.networkInterfaceOptions = networkInterfaceOptions
        self.policyDocument = policyDocument
        self.securityGroupIds = securityGroupIds
        self.tagSpecifications = tagSpecifications
        self.verifiedAccessGroupId = verifiedAccessGroupId
    }
}
