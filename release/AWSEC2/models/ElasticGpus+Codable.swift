// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.ElasticGpus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "availabilityZone"
        case elasticGpuHealth = "elasticGpuHealth"
        case elasticGpuId = "elasticGpuId"
        case elasticGpuState = "elasticGpuState"
        case elasticGpuType = "elasticGpuType"
        case instanceId = "instanceId"
        case tags = "tagSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let elasticGpuHealth = elasticGpuHealth {
            try container.encode(elasticGpuHealth, forKey: ClientRuntime.Key("ElasticGpuHealth"))
        }
        if let elasticGpuId = elasticGpuId {
            try container.encode(elasticGpuId, forKey: ClientRuntime.Key("ElasticGpuId"))
        }
        if let elasticGpuState = elasticGpuState {
            try container.encode(elasticGpuState, forKey: ClientRuntime.Key("ElasticGpuState"))
        }
        if let elasticGpuType = elasticGpuType {
            try container.encode(elasticGpuType, forKey: ClientRuntime.Key("ElasticGpuType"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elasticGpuIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticGpuId)
        elasticGpuId = elasticGpuIdDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let elasticGpuTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticGpuType)
        elasticGpuType = elasticGpuTypeDecoded
        let elasticGpuHealthDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ElasticGpuHealth.self, forKey: .elasticGpuHealth)
        elasticGpuHealth = elasticGpuHealthDecoded
        let elasticGpuStateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ElasticGpuState.self, forKey: .elasticGpuState)
        elasticGpuState = elasticGpuStateDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
