// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.DisableFastSnapshotRestoreErrorItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fastSnapshotRestoreStateErrors = "fastSnapshotRestoreStateErrorSet"
        case snapshotId = "snapshotId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let fastSnapshotRestoreStateErrors = fastSnapshotRestoreStateErrors {
            if !fastSnapshotRestoreStateErrors.isEmpty {
                for (index0, disablefastsnapshotrestorestateerroritem0) in fastSnapshotRestoreStateErrors.enumerated() {
                    var fastSnapshotRestoreStateErrorsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("FastSnapshotRestoreStateErrorSet.\(index0.advanced(by: 1))"))
                    try fastSnapshotRestoreStateErrorsContainer0.encode(disablefastsnapshotrestorestateerroritem0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var fastSnapshotRestoreStateErrorsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("FastSnapshotRestoreStateErrorSet"))
                try fastSnapshotRestoreStateErrorsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let snapshotId = snapshotId {
            try container.encode(snapshotId, forKey: ClientRuntime.Key("SnapshotId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        if containerValues.contains(.fastSnapshotRestoreStateErrors) {
            struct KeyVal0{struct item{}}
            let fastSnapshotRestoreStateErrorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .fastSnapshotRestoreStateErrors)
            if let fastSnapshotRestoreStateErrorsWrappedContainer = fastSnapshotRestoreStateErrorsWrappedContainer {
                let fastSnapshotRestoreStateErrorsContainer = try fastSnapshotRestoreStateErrorsWrappedContainer.decodeIfPresent([EC2ClientTypes.DisableFastSnapshotRestoreStateErrorItem].self, forKey: .member)
                var fastSnapshotRestoreStateErrorsBuffer:[EC2ClientTypes.DisableFastSnapshotRestoreStateErrorItem]? = nil
                if let fastSnapshotRestoreStateErrorsContainer = fastSnapshotRestoreStateErrorsContainer {
                    fastSnapshotRestoreStateErrorsBuffer = [EC2ClientTypes.DisableFastSnapshotRestoreStateErrorItem]()
                    for structureContainer0 in fastSnapshotRestoreStateErrorsContainer {
                        fastSnapshotRestoreStateErrorsBuffer?.append(structureContainer0)
                    }
                }
                fastSnapshotRestoreStateErrors = fastSnapshotRestoreStateErrorsBuffer
            } else {
                fastSnapshotRestoreStateErrors = []
            }
        } else {
            fastSnapshotRestoreStateErrors = nil
        }
    }
}
