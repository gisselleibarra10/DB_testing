// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModifyVpcEndpointServiceConfigurationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let acceptanceRequired = acceptanceRequired {
            try container.encode(acceptanceRequired, forKey: ClientRuntime.Key("AcceptanceRequired"))
        }
        if let addGatewayLoadBalancerArns = addGatewayLoadBalancerArns {
            if !addGatewayLoadBalancerArns.isEmpty {
                for (index0, string0) in addGatewayLoadBalancerArns.enumerated() {
                    var addGatewayLoadBalancerArnsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddGatewayLoadBalancerArn.\(index0.advanced(by: 1))"))
                    try addGatewayLoadBalancerArnsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let addNetworkLoadBalancerArns = addNetworkLoadBalancerArns {
            if !addNetworkLoadBalancerArns.isEmpty {
                for (index0, string0) in addNetworkLoadBalancerArns.enumerated() {
                    var addNetworkLoadBalancerArnsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddNetworkLoadBalancerArn.\(index0.advanced(by: 1))"))
                    try addNetworkLoadBalancerArnsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let addSupportedIpAddressTypes = addSupportedIpAddressTypes {
            if !addSupportedIpAddressTypes.isEmpty {
                for (index0, string0) in addSupportedIpAddressTypes.enumerated() {
                    var addSupportedIpAddressTypesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddSupportedIpAddressType.\(index0.advanced(by: 1))"))
                    try addSupportedIpAddressTypesContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let privateDnsName = privateDnsName {
            try container.encode(privateDnsName, forKey: ClientRuntime.Key("PrivateDnsName"))
        }
        if let removeGatewayLoadBalancerArns = removeGatewayLoadBalancerArns {
            if !removeGatewayLoadBalancerArns.isEmpty {
                for (index0, string0) in removeGatewayLoadBalancerArns.enumerated() {
                    var removeGatewayLoadBalancerArnsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveGatewayLoadBalancerArn.\(index0.advanced(by: 1))"))
                    try removeGatewayLoadBalancerArnsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let removeNetworkLoadBalancerArns = removeNetworkLoadBalancerArns {
            if !removeNetworkLoadBalancerArns.isEmpty {
                for (index0, string0) in removeNetworkLoadBalancerArns.enumerated() {
                    var removeNetworkLoadBalancerArnsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveNetworkLoadBalancerArn.\(index0.advanced(by: 1))"))
                    try removeNetworkLoadBalancerArnsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let removePrivateDnsName = removePrivateDnsName {
            try container.encode(removePrivateDnsName, forKey: ClientRuntime.Key("RemovePrivateDnsName"))
        }
        if let removeSupportedIpAddressTypes = removeSupportedIpAddressTypes {
            if !removeSupportedIpAddressTypes.isEmpty {
                for (index0, string0) in removeSupportedIpAddressTypes.enumerated() {
                    var removeSupportedIpAddressTypesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveSupportedIpAddressType.\(index0.advanced(by: 1))"))
                    try removeSupportedIpAddressTypesContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let serviceId = serviceId {
            try container.encode(serviceId, forKey: ClientRuntime.Key("ServiceId"))
        }
        try container.encode("ModifyVpcEndpointServiceConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
