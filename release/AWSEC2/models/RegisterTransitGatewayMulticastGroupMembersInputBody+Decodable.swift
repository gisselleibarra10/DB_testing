// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterTransitGatewayMulticastGroupMembersInputBody: Swift.Equatable {
    let transitGatewayMulticastDomainId: Swift.String?
    let groupIpAddress: Swift.String?
    let networkInterfaceIds: [Swift.String]?
    let dryRun: Swift.Bool?
}

extension RegisterTransitGatewayMulticastGroupMembersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case groupIpAddress = "GroupIpAddress"
        case networkInterfaceIds = "NetworkInterfaceIds"
        case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transitGatewayMulticastDomainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayMulticastDomainId)
        transitGatewayMulticastDomainId = transitGatewayMulticastDomainIdDecoded
        let groupIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupIpAddress)
        groupIpAddress = groupIpAddressDecoded
        if containerValues.contains(.networkInterfaceIds) {
            struct KeyVal0{struct item{}}
            let networkInterfaceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .networkInterfaceIds)
            if let networkInterfaceIdsWrappedContainer = networkInterfaceIdsWrappedContainer {
                let networkInterfaceIdsContainer = try networkInterfaceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var networkInterfaceIdsBuffer:[Swift.String]? = nil
                if let networkInterfaceIdsContainer = networkInterfaceIdsContainer {
                    networkInterfaceIdsBuffer = [Swift.String]()
                    for stringContainer0 in networkInterfaceIdsContainer {
                        networkInterfaceIdsBuffer?.append(stringContainer0)
                    }
                }
                networkInterfaceIds = networkInterfaceIdsBuffer
            } else {
                networkInterfaceIds = []
            }
        } else {
            networkInterfaceIds = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
