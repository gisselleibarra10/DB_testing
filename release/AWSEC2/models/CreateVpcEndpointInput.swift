// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Contains the parameters for CreateVpcEndpoint.
public struct CreateVpcEndpointInput: Swift.Equatable {
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see [How to ensure idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
    public var clientToken: Swift.String?
    /// The DNS options for the endpoint.
    public var dnsOptions: Ec2ClientTypes.DnsOptionsSpecification?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// The IP address type for the endpoint.
    public var ipAddressType: Ec2ClientTypes.IpAddressType?
    /// (Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.
    public var policyDocument: Swift.String?
    /// (Interface endpoint) Indicates whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, kinesis.us-east-1.amazonaws.com), which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC endpoint service. To use a private hosted zone, you must set the following VPC attributes to true: enableDnsHostnames and enableDnsSupport. Use [ModifyVpcAttribute] to set the VPC attributes. Default: true
    public var privateDnsEnabled: Swift.Bool?
    /// (Gateway endpoint) One or more route table IDs.
    public var routeTableIds: [Swift.String]?
    /// (Interface endpoint) The ID of one or more security groups to associate with the endpoint network interface.
    public var securityGroupIds: [Swift.String]?
    /// The service name. To get a list of available services, use the [DescribeVpcEndpointServices] request, or get the name from the service provider.
    /// This member is required.
    public var serviceName: Swift.String?
    /// (Interface and Gateway Load Balancer endpoints) The ID of one or more subnets in which to create an endpoint network interface. For a Gateway Load Balancer endpoint, you can specify one subnet only.
    public var subnetIds: [Swift.String]?
    /// The tags to associate with the endpoint.
    public var tagSpecifications: [Ec2ClientTypes.TagSpecification]?
    /// The type of endpoint. Default: Gateway
    public var vpcEndpointType: Ec2ClientTypes.VpcEndpointType?
    /// The ID of the VPC in which the endpoint will be used.
    /// This member is required.
    public var vpcId: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        dnsOptions: Ec2ClientTypes.DnsOptionsSpecification? = nil,
        dryRun: Swift.Bool? = nil,
        ipAddressType: Ec2ClientTypes.IpAddressType? = nil,
        policyDocument: Swift.String? = nil,
        privateDnsEnabled: Swift.Bool? = nil,
        routeTableIds: [Swift.String]? = nil,
        securityGroupIds: [Swift.String]? = nil,
        serviceName: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil,
        tagSpecifications: [Ec2ClientTypes.TagSpecification]? = nil,
        vpcEndpointType: Ec2ClientTypes.VpcEndpointType? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.dnsOptions = dnsOptions
        self.dryRun = dryRun
        self.ipAddressType = ipAddressType
        self.policyDocument = policyDocument
        self.privateDnsEnabled = privateDnsEnabled
        self.routeTableIds = routeTableIds
        self.securityGroupIds = securityGroupIds
        self.serviceName = serviceName
        self.subnetIds = subnetIds
        self.tagSpecifications = tagSpecifications
        self.vpcEndpointType = vpcEndpointType
        self.vpcId = vpcId
    }
}
