// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribePrefixListsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let prefixLists: [EC2ClientTypes.PrefixList]?
}

extension DescribePrefixListsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case prefixLists = "prefixListSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.prefixLists) {
            struct KeyVal0{struct item{}}
            let prefixListsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .prefixLists)
            if let prefixListsWrappedContainer = prefixListsWrappedContainer {
                let prefixListsContainer = try prefixListsWrappedContainer.decodeIfPresent([EC2ClientTypes.PrefixList].self, forKey: .member)
                var prefixListsBuffer:[EC2ClientTypes.PrefixList]? = nil
                if let prefixListsContainer = prefixListsContainer {
                    prefixListsBuffer = [EC2ClientTypes.PrefixList]()
                    for structureContainer0 in prefixListsContainer {
                        prefixListsBuffer?.append(structureContainer0)
                    }
                }
                prefixLists = prefixListsBuffer
            } else {
                prefixLists = []
            }
        } else {
            prefixLists = nil
        }
    }
}
