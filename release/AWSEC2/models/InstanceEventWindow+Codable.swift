// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.InstanceEventWindow: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationTarget = "associationTarget"
        case cronExpression = "cronExpression"
        case instanceEventWindowId = "instanceEventWindowId"
        case name = "name"
        case state = "state"
        case tags = "tagSet"
        case timeRanges = "timeRangeSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let associationTarget = associationTarget {
            try container.encode(associationTarget, forKey: ClientRuntime.Key("AssociationTarget"))
        }
        if let cronExpression = cronExpression {
            try container.encode(cronExpression, forKey: ClientRuntime.Key("CronExpression"))
        }
        if let instanceEventWindowId = instanceEventWindowId {
            try container.encode(instanceEventWindowId, forKey: ClientRuntime.Key("InstanceEventWindowId"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let timeRanges = timeRanges {
            if !timeRanges.isEmpty {
                for (index0, instanceeventwindowtimerange0) in timeRanges.enumerated() {
                    var timeRangesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TimeRangeSet.\(index0.advanced(by: 1))"))
                    try timeRangesContainer0.encode(instanceeventwindowtimerange0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var timeRangesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TimeRangeSet"))
                try timeRangesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceEventWindowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceEventWindowId)
        instanceEventWindowId = instanceEventWindowIdDecoded
        if containerValues.contains(.timeRanges) {
            struct KeyVal0{struct item{}}
            let timeRangesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .timeRanges)
            if let timeRangesWrappedContainer = timeRangesWrappedContainer {
                let timeRangesContainer = try timeRangesWrappedContainer.decodeIfPresent([EC2ClientTypes.InstanceEventWindowTimeRange].self, forKey: .member)
                var timeRangesBuffer:[EC2ClientTypes.InstanceEventWindowTimeRange]? = nil
                if let timeRangesContainer = timeRangesContainer {
                    timeRangesBuffer = [EC2ClientTypes.InstanceEventWindowTimeRange]()
                    for structureContainer0 in timeRangesContainer {
                        timeRangesBuffer?.append(structureContainer0)
                    }
                }
                timeRanges = timeRangesBuffer
            } else {
                timeRanges = []
            }
        } else {
            timeRanges = nil
        }
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let cronExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cronExpression)
        cronExpression = cronExpressionDecoded
        let associationTargetDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.InstanceEventWindowAssociationTarget.self, forKey: .associationTarget)
        associationTarget = associationTargetDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.InstanceEventWindowState.self, forKey: .state)
        state = stateDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
