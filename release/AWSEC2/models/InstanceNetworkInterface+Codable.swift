// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.InstanceNetworkInterface: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case association = "association"
        case attachment = "attachment"
        case description = "description"
        case groups = "groupSet"
        case interfaceType = "interfaceType"
        case ipv4Prefixes = "ipv4PrefixSet"
        case ipv6Addresses = "ipv6AddressesSet"
        case ipv6Prefixes = "ipv6PrefixSet"
        case macAddress = "macAddress"
        case networkInterfaceId = "networkInterfaceId"
        case ownerId = "ownerId"
        case privateDnsName = "privateDnsName"
        case privateIpAddress = "privateIpAddress"
        case privateIpAddresses = "privateIpAddressesSet"
        case sourceDestCheck = "sourceDestCheck"
        case status = "status"
        case subnetId = "subnetId"
        case vpcId = "vpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let association = association {
            try container.encode(association, forKey: ClientRuntime.Key("Association"))
        }
        if let attachment = attachment {
            try container.encode(attachment, forKey: ClientRuntime.Key("Attachment"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let groups = groups {
            if !groups.isEmpty {
                for (index0, groupidentifier0) in groups.enumerated() {
                    var groupsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("GroupSet.\(index0.advanced(by: 1))"))
                    try groupsContainer0.encode(groupidentifier0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let interfaceType = interfaceType {
            try container.encode(interfaceType, forKey: ClientRuntime.Key("InterfaceType"))
        }
        if let ipv4Prefixes = ipv4Prefixes {
            if !ipv4Prefixes.isEmpty {
                for (index0, instanceipv4prefix0) in ipv4Prefixes.enumerated() {
                    var ipv4PrefixesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Ipv4PrefixSet.\(index0.advanced(by: 1))"))
                    try ipv4PrefixesContainer0.encode(instanceipv4prefix0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let ipv6Addresses = ipv6Addresses {
            if !ipv6Addresses.isEmpty {
                for (index0, instanceipv6address0) in ipv6Addresses.enumerated() {
                    var ipv6AddressesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Ipv6AddressesSet.\(index0.advanced(by: 1))"))
                    try ipv6AddressesContainer0.encode(instanceipv6address0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let ipv6Prefixes = ipv6Prefixes {
            if !ipv6Prefixes.isEmpty {
                for (index0, instanceipv6prefix0) in ipv6Prefixes.enumerated() {
                    var ipv6PrefixesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Ipv6PrefixSet.\(index0.advanced(by: 1))"))
                    try ipv6PrefixesContainer0.encode(instanceipv6prefix0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let macAddress = macAddress {
            try container.encode(macAddress, forKey: ClientRuntime.Key("MacAddress"))
        }
        if let networkInterfaceId = networkInterfaceId {
            try container.encode(networkInterfaceId, forKey: ClientRuntime.Key("NetworkInterfaceId"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: ClientRuntime.Key("OwnerId"))
        }
        if let privateDnsName = privateDnsName {
            try container.encode(privateDnsName, forKey: ClientRuntime.Key("PrivateDnsName"))
        }
        if let privateIpAddress = privateIpAddress {
            try container.encode(privateIpAddress, forKey: ClientRuntime.Key("PrivateIpAddress"))
        }
        if let privateIpAddresses = privateIpAddresses {
            if !privateIpAddresses.isEmpty {
                for (index0, instanceprivateipaddress0) in privateIpAddresses.enumerated() {
                    var privateIpAddressesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PrivateIpAddressesSet.\(index0.advanced(by: 1))"))
                    try privateIpAddressesContainer0.encode(instanceprivateipaddress0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let sourceDestCheck = sourceDestCheck {
            try container.encode(sourceDestCheck, forKey: ClientRuntime.Key("SourceDestCheck"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let subnetId = subnetId {
            try container.encode(subnetId, forKey: ClientRuntime.Key("SubnetId"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.InstanceNetworkInterfaceAssociation.self, forKey: .association)
        association = associationDecoded
        let attachmentDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.InstanceNetworkInterfaceAttachment.self, forKey: .attachment)
        attachment = attachmentDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.groups) {
            struct KeyVal0{struct item{}}
            let groupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .groups)
            if let groupsWrappedContainer = groupsWrappedContainer {
                let groupsContainer = try groupsWrappedContainer.decodeIfPresent([Ec2ClientTypes.GroupIdentifier].self, forKey: .member)
                var groupsBuffer:[Ec2ClientTypes.GroupIdentifier]? = nil
                if let groupsContainer = groupsContainer {
                    groupsBuffer = [Ec2ClientTypes.GroupIdentifier]()
                    for structureContainer0 in groupsContainer {
                        groupsBuffer?.append(structureContainer0)
                    }
                }
                groups = groupsBuffer
            } else {
                groups = []
            }
        } else {
            groups = nil
        }
        if containerValues.contains(.ipv6Addresses) {
            struct KeyVal0{struct item{}}
            let ipv6AddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .ipv6Addresses)
            if let ipv6AddressesWrappedContainer = ipv6AddressesWrappedContainer {
                let ipv6AddressesContainer = try ipv6AddressesWrappedContainer.decodeIfPresent([Ec2ClientTypes.InstanceIpv6Address].self, forKey: .member)
                var ipv6AddressesBuffer:[Ec2ClientTypes.InstanceIpv6Address]? = nil
                if let ipv6AddressesContainer = ipv6AddressesContainer {
                    ipv6AddressesBuffer = [Ec2ClientTypes.InstanceIpv6Address]()
                    for structureContainer0 in ipv6AddressesContainer {
                        ipv6AddressesBuffer?.append(structureContainer0)
                    }
                }
                ipv6Addresses = ipv6AddressesBuffer
            } else {
                ipv6Addresses = []
            }
        } else {
            ipv6Addresses = nil
        }
        let macAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .macAddress)
        macAddress = macAddressDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let privateDnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateDnsName)
        privateDnsName = privateDnsNameDecoded
        let privateIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateIpAddress)
        privateIpAddress = privateIpAddressDecoded
        if containerValues.contains(.privateIpAddresses) {
            struct KeyVal0{struct item{}}
            let privateIpAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .privateIpAddresses)
            if let privateIpAddressesWrappedContainer = privateIpAddressesWrappedContainer {
                let privateIpAddressesContainer = try privateIpAddressesWrappedContainer.decodeIfPresent([Ec2ClientTypes.InstancePrivateIpAddress].self, forKey: .member)
                var privateIpAddressesBuffer:[Ec2ClientTypes.InstancePrivateIpAddress]? = nil
                if let privateIpAddressesContainer = privateIpAddressesContainer {
                    privateIpAddressesBuffer = [Ec2ClientTypes.InstancePrivateIpAddress]()
                    for structureContainer0 in privateIpAddressesContainer {
                        privateIpAddressesBuffer?.append(structureContainer0)
                    }
                }
                privateIpAddresses = privateIpAddressesBuffer
            } else {
                privateIpAddresses = []
            }
        } else {
            privateIpAddresses = nil
        }
        let sourceDestCheckDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sourceDestCheck)
        sourceDestCheck = sourceDestCheckDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.NetworkInterfaceStatus.self, forKey: .status)
        status = statusDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let interfaceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .interfaceType)
        interfaceType = interfaceTypeDecoded
        if containerValues.contains(.ipv4Prefixes) {
            struct KeyVal0{struct item{}}
            let ipv4PrefixesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .ipv4Prefixes)
            if let ipv4PrefixesWrappedContainer = ipv4PrefixesWrappedContainer {
                let ipv4PrefixesContainer = try ipv4PrefixesWrappedContainer.decodeIfPresent([Ec2ClientTypes.InstanceIpv4Prefix].self, forKey: .member)
                var ipv4PrefixesBuffer:[Ec2ClientTypes.InstanceIpv4Prefix]? = nil
                if let ipv4PrefixesContainer = ipv4PrefixesContainer {
                    ipv4PrefixesBuffer = [Ec2ClientTypes.InstanceIpv4Prefix]()
                    for structureContainer0 in ipv4PrefixesContainer {
                        ipv4PrefixesBuffer?.append(structureContainer0)
                    }
                }
                ipv4Prefixes = ipv4PrefixesBuffer
            } else {
                ipv4Prefixes = []
            }
        } else {
            ipv4Prefixes = nil
        }
        if containerValues.contains(.ipv6Prefixes) {
            struct KeyVal0{struct item{}}
            let ipv6PrefixesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .ipv6Prefixes)
            if let ipv6PrefixesWrappedContainer = ipv6PrefixesWrappedContainer {
                let ipv6PrefixesContainer = try ipv6PrefixesWrappedContainer.decodeIfPresent([Ec2ClientTypes.InstanceIpv6Prefix].self, forKey: .member)
                var ipv6PrefixesBuffer:[Ec2ClientTypes.InstanceIpv6Prefix]? = nil
                if let ipv6PrefixesContainer = ipv6PrefixesContainer {
                    ipv6PrefixesBuffer = [Ec2ClientTypes.InstanceIpv6Prefix]()
                    for structureContainer0 in ipv6PrefixesContainer {
                        ipv6PrefixesBuffer?.append(structureContainer0)
                    }
                }
                ipv6Prefixes = ipv6PrefixesBuffer
            } else {
                ipv6Prefixes = []
            }
        } else {
            ipv6Prefixes = nil
        }
    }
}
