// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyReservedInstancesInputBody: Swift.Equatable {
    let reservedInstancesIds: [Swift.String]?
    let clientToken: Swift.String?
    let targetConfigurations: [EC2ClientTypes.ReservedInstancesConfiguration]?
}

extension ModifyReservedInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "clientToken"
        case reservedInstancesIds = "ReservedInstancesId"
        case targetConfigurations = "ReservedInstancesConfigurationSetItemType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.reservedInstancesIds) {
            struct KeyVal0{struct ReservedInstancesId{}}
            let reservedInstancesIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedInstancesId>.CodingKeys.self, forKey: .reservedInstancesIds)
            if let reservedInstancesIdsWrappedContainer = reservedInstancesIdsWrappedContainer {
                let reservedInstancesIdsContainer = try reservedInstancesIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var reservedInstancesIdsBuffer:[Swift.String]? = nil
                if let reservedInstancesIdsContainer = reservedInstancesIdsContainer {
                    reservedInstancesIdsBuffer = [Swift.String]()
                    for stringContainer0 in reservedInstancesIdsContainer {
                        reservedInstancesIdsBuffer?.append(stringContainer0)
                    }
                }
                reservedInstancesIds = reservedInstancesIdsBuffer
            } else {
                reservedInstancesIds = []
            }
        } else {
            reservedInstancesIds = nil
        }
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        if containerValues.contains(.targetConfigurations) {
            struct KeyVal0{struct item{}}
            let targetConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .targetConfigurations)
            if let targetConfigurationsWrappedContainer = targetConfigurationsWrappedContainer {
                let targetConfigurationsContainer = try targetConfigurationsWrappedContainer.decodeIfPresent([EC2ClientTypes.ReservedInstancesConfiguration].self, forKey: .member)
                var targetConfigurationsBuffer:[EC2ClientTypes.ReservedInstancesConfiguration]? = nil
                if let targetConfigurationsContainer = targetConfigurationsContainer {
                    targetConfigurationsBuffer = [EC2ClientTypes.ReservedInstancesConfiguration]()
                    for structureContainer0 in targetConfigurationsContainer {
                        targetConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                targetConfigurations = targetConfigurationsBuffer
            } else {
                targetConfigurations = []
            }
        } else {
            targetConfigurations = nil
        }
    }
}
