// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DisableFastSnapshotRestoresInputBody: Swift.Equatable {
    let availabilityZones: [Swift.String]?
    let sourceSnapshotIds: [Swift.String]?
    let dryRun: Swift.Bool?
}

extension DisableFastSnapshotRestoresInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZone"
        case dryRun = "DryRun"
        case sourceSnapshotIds = "SourceSnapshotId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.availabilityZones) {
            struct KeyVal0{struct AvailabilityZone{}}
            let availabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AvailabilityZone>.CodingKeys.self, forKey: .availabilityZones)
            if let availabilityZonesWrappedContainer = availabilityZonesWrappedContainer {
                let availabilityZonesContainer = try availabilityZonesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var availabilityZonesBuffer:[Swift.String]? = nil
                if let availabilityZonesContainer = availabilityZonesContainer {
                    availabilityZonesBuffer = [Swift.String]()
                    for stringContainer0 in availabilityZonesContainer {
                        availabilityZonesBuffer?.append(stringContainer0)
                    }
                }
                availabilityZones = availabilityZonesBuffer
            } else {
                availabilityZones = []
            }
        } else {
            availabilityZones = nil
        }
        if containerValues.contains(.sourceSnapshotIds) {
            struct KeyVal0{struct SnapshotId{}}
            let sourceSnapshotIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SnapshotId>.CodingKeys.self, forKey: .sourceSnapshotIds)
            if let sourceSnapshotIdsWrappedContainer = sourceSnapshotIdsWrappedContainer {
                let sourceSnapshotIdsContainer = try sourceSnapshotIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var sourceSnapshotIdsBuffer:[Swift.String]? = nil
                if let sourceSnapshotIdsContainer = sourceSnapshotIdsContainer {
                    sourceSnapshotIdsBuffer = [Swift.String]()
                    for stringContainer0 in sourceSnapshotIdsContainer {
                        sourceSnapshotIdsBuffer?.append(stringContainer0)
                    }
                }
                sourceSnapshotIds = sourceSnapshotIdsBuffer
            } else {
                sourceSnapshotIds = []
            }
        } else {
            sourceSnapshotIds = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
