// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModifyVpcEndpointInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let addRouteTableIds = addRouteTableIds {
            if !addRouteTableIds.isEmpty {
                for (index0, routetableid0) in addRouteTableIds.enumerated() {
                    var addRouteTableIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddRouteTableId.\(index0.advanced(by: 1))"))
                    try addRouteTableIdsContainer0.encode(routetableid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var addRouteTableIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddRouteTableId"))
                try addRouteTableIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let addSecurityGroupIds = addSecurityGroupIds {
            if !addSecurityGroupIds.isEmpty {
                for (index0, securitygroupid0) in addSecurityGroupIds.enumerated() {
                    var addSecurityGroupIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddSecurityGroupId.\(index0.advanced(by: 1))"))
                    try addSecurityGroupIdsContainer0.encode(securitygroupid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var addSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddSecurityGroupId"))
                try addSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let addSubnetIds = addSubnetIds {
            if !addSubnetIds.isEmpty {
                for (index0, subnetid0) in addSubnetIds.enumerated() {
                    var addSubnetIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddSubnetId.\(index0.advanced(by: 1))"))
                    try addSubnetIdsContainer0.encode(subnetid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var addSubnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddSubnetId"))
                try addSubnetIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dnsOptions = dnsOptions {
            try container.encode(dnsOptions, forKey: ClientRuntime.Key("DnsOptions"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let policyDocument = policyDocument {
            try container.encode(policyDocument, forKey: ClientRuntime.Key("PolicyDocument"))
        }
        if let privateDnsEnabled = privateDnsEnabled {
            try container.encode(privateDnsEnabled, forKey: ClientRuntime.Key("PrivateDnsEnabled"))
        }
        if let removeRouteTableIds = removeRouteTableIds {
            if !removeRouteTableIds.isEmpty {
                for (index0, routetableid0) in removeRouteTableIds.enumerated() {
                    var removeRouteTableIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveRouteTableId.\(index0.advanced(by: 1))"))
                    try removeRouteTableIdsContainer0.encode(routetableid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var removeRouteTableIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveRouteTableId"))
                try removeRouteTableIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let removeSecurityGroupIds = removeSecurityGroupIds {
            if !removeSecurityGroupIds.isEmpty {
                for (index0, securitygroupid0) in removeSecurityGroupIds.enumerated() {
                    var removeSecurityGroupIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveSecurityGroupId.\(index0.advanced(by: 1))"))
                    try removeSecurityGroupIdsContainer0.encode(securitygroupid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var removeSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveSecurityGroupId"))
                try removeSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let removeSubnetIds = removeSubnetIds {
            if !removeSubnetIds.isEmpty {
                for (index0, subnetid0) in removeSubnetIds.enumerated() {
                    var removeSubnetIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveSubnetId.\(index0.advanced(by: 1))"))
                    try removeSubnetIdsContainer0.encode(subnetid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var removeSubnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveSubnetId"))
                try removeSubnetIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resetPolicy = resetPolicy {
            try container.encode(resetPolicy, forKey: ClientRuntime.Key("ResetPolicy"))
        }
        if let vpcEndpointId = vpcEndpointId {
            try container.encode(vpcEndpointId, forKey: ClientRuntime.Key("VpcEndpointId"))
        }
        try container.encode("ModifyVpcEndpoint", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
