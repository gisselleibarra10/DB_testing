// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.VgwTelemetry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptedRouteCount = "acceptedRouteCount"
        case certificateArn = "certificateArn"
        case lastStatusChange = "lastStatusChange"
        case outsideIpAddress = "outsideIpAddress"
        case status = "status"
        case statusMessage = "statusMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let acceptedRouteCount = acceptedRouteCount {
            try container.encode(acceptedRouteCount, forKey: ClientRuntime.Key("AcceptedRouteCount"))
        }
        if let certificateArn = certificateArn {
            try container.encode(certificateArn, forKey: ClientRuntime.Key("CertificateArn"))
        }
        if let lastStatusChange = lastStatusChange {
            try container.encode(ClientRuntime.TimestampWrapper(lastStatusChange, format: .dateTime), forKey: ClientRuntime.Key("LastStatusChange"))
        }
        if let outsideIpAddress = outsideIpAddress {
            try container.encode(outsideIpAddress, forKey: ClientRuntime.Key("OutsideIpAddress"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: ClientRuntime.Key("StatusMessage"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acceptedRouteCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .acceptedRouteCount)
        acceptedRouteCount = acceptedRouteCountDecoded
        let lastStatusChangeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastStatusChange)
        var lastStatusChangeBuffer:ClientRuntime.Date? = nil
        if let lastStatusChangeDecoded = lastStatusChangeDecoded {
            lastStatusChangeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastStatusChangeDecoded, format: .dateTime)
        }
        lastStatusChange = lastStatusChangeBuffer
        let outsideIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outsideIpAddress)
        outsideIpAddress = outsideIpAddressDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.TelemetryStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
    }
}
