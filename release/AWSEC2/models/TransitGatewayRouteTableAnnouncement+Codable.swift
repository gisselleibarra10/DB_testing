// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.TransitGatewayRouteTableAnnouncement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case announcementDirection = "announcementDirection"
        case coreNetworkId = "coreNetworkId"
        case creationTime = "creationTime"
        case peerCoreNetworkId = "peerCoreNetworkId"
        case peerTransitGatewayId = "peerTransitGatewayId"
        case peeringAttachmentId = "peeringAttachmentId"
        case state = "state"
        case tags = "tagSet"
        case transitGatewayId = "transitGatewayId"
        case transitGatewayRouteTableAnnouncementId = "transitGatewayRouteTableAnnouncementId"
        case transitGatewayRouteTableId = "transitGatewayRouteTableId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let announcementDirection = announcementDirection {
            try container.encode(announcementDirection, forKey: ClientRuntime.Key("AnnouncementDirection"))
        }
        if let coreNetworkId = coreNetworkId {
            try container.encode(coreNetworkId, forKey: ClientRuntime.Key("CoreNetworkId"))
        }
        if let creationTime = creationTime {
            try container.encode(ClientRuntime.TimestampWrapper(creationTime, format: .dateTime), forKey: ClientRuntime.Key("CreationTime"))
        }
        if let peerCoreNetworkId = peerCoreNetworkId {
            try container.encode(peerCoreNetworkId, forKey: ClientRuntime.Key("PeerCoreNetworkId"))
        }
        if let peerTransitGatewayId = peerTransitGatewayId {
            try container.encode(peerTransitGatewayId, forKey: ClientRuntime.Key("PeerTransitGatewayId"))
        }
        if let peeringAttachmentId = peeringAttachmentId {
            try container.encode(peeringAttachmentId, forKey: ClientRuntime.Key("PeeringAttachmentId"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let transitGatewayId = transitGatewayId {
            try container.encode(transitGatewayId, forKey: ClientRuntime.Key("TransitGatewayId"))
        }
        if let transitGatewayRouteTableAnnouncementId = transitGatewayRouteTableAnnouncementId {
            try container.encode(transitGatewayRouteTableAnnouncementId, forKey: ClientRuntime.Key("TransitGatewayRouteTableAnnouncementId"))
        }
        if let transitGatewayRouteTableId = transitGatewayRouteTableId {
            try container.encode(transitGatewayRouteTableId, forKey: ClientRuntime.Key("TransitGatewayRouteTableId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transitGatewayRouteTableAnnouncementIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayRouteTableAnnouncementId)
        transitGatewayRouteTableAnnouncementId = transitGatewayRouteTableAnnouncementIdDecoded
        let transitGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayId)
        transitGatewayId = transitGatewayIdDecoded
        let coreNetworkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .coreNetworkId)
        coreNetworkId = coreNetworkIdDecoded
        let peerTransitGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerTransitGatewayId)
        peerTransitGatewayId = peerTransitGatewayIdDecoded
        let peerCoreNetworkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerCoreNetworkId)
        peerCoreNetworkId = peerCoreNetworkIdDecoded
        let peeringAttachmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peeringAttachmentId)
        peeringAttachmentId = peeringAttachmentIdDecoded
        let announcementDirectionDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.TransitGatewayRouteTableAnnouncementDirection.self, forKey: .announcementDirection)
        announcementDirection = announcementDirectionDecoded
        let transitGatewayRouteTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayRouteTableId)
        transitGatewayRouteTableId = transitGatewayRouteTableIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.TransitGatewayRouteTableAnnouncementState.self, forKey: .state)
        state = stateDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTime)
        var creationTimeBuffer:ClientRuntime.Date? = nil
        if let creationTimeDecoded = creationTimeDecoded {
            creationTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(creationTimeDecoded, format: .dateTime)
        }
        creationTime = creationTimeBuffer
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
