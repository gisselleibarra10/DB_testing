// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeleteQueuedReservedInstancesInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let reservedInstancesIds: [Swift.String]?
}

extension DeleteQueuedReservedInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case reservedInstancesIds = "ReservedInstancesId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.reservedInstancesIds) {
            struct KeyVal0{struct item{}}
            let reservedInstancesIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .reservedInstancesIds)
            if let reservedInstancesIdsWrappedContainer = reservedInstancesIdsWrappedContainer {
                let reservedInstancesIdsContainer = try reservedInstancesIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var reservedInstancesIdsBuffer:[Swift.String]? = nil
                if let reservedInstancesIdsContainer = reservedInstancesIdsContainer {
                    reservedInstancesIdsBuffer = [Swift.String]()
                    for stringContainer0 in reservedInstancesIdsContainer {
                        reservedInstancesIdsBuffer?.append(stringContainer0)
                    }
                }
                reservedInstancesIds = reservedInstancesIdsBuffer
            } else {
                reservedInstancesIds = []
            }
        } else {
            reservedInstancesIds = nil
        }
    }
}
