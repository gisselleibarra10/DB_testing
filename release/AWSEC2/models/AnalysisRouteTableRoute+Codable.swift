// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.AnalysisRouteTableRoute: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationCidr = "destinationCidr"
        case destinationPrefixListId = "destinationPrefixListId"
        case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
        case gatewayId = "gatewayId"
        case instanceId = "instanceId"
        case natGatewayId = "natGatewayId"
        case networkInterfaceId = "networkInterfaceId"
        case origin = "origin"
        case state = "state"
        case transitGatewayId = "transitGatewayId"
        case vpcPeeringConnectionId = "vpcPeeringConnectionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let destinationCidr = destinationCidr {
            try container.encode(destinationCidr, forKey: ClientRuntime.Key("DestinationCidr"))
        }
        if let destinationPrefixListId = destinationPrefixListId {
            try container.encode(destinationPrefixListId, forKey: ClientRuntime.Key("DestinationPrefixListId"))
        }
        if let egressOnlyInternetGatewayId = egressOnlyInternetGatewayId {
            try container.encode(egressOnlyInternetGatewayId, forKey: ClientRuntime.Key("EgressOnlyInternetGatewayId"))
        }
        if let gatewayId = gatewayId {
            try container.encode(gatewayId, forKey: ClientRuntime.Key("GatewayId"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let natGatewayId = natGatewayId {
            try container.encode(natGatewayId, forKey: ClientRuntime.Key("NatGatewayId"))
        }
        if let networkInterfaceId = networkInterfaceId {
            try container.encode(networkInterfaceId, forKey: ClientRuntime.Key("NetworkInterfaceId"))
        }
        if let origin = origin {
            try container.encode(origin, forKey: ClientRuntime.Key("Origin"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let transitGatewayId = transitGatewayId {
            try container.encode(transitGatewayId, forKey: ClientRuntime.Key("TransitGatewayId"))
        }
        if let vpcPeeringConnectionId = vpcPeeringConnectionId {
            try container.encode(vpcPeeringConnectionId, forKey: ClientRuntime.Key("VpcPeeringConnectionId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationCidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationCidr)
        destinationCidr = destinationCidrDecoded
        let destinationPrefixListIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationPrefixListId)
        destinationPrefixListId = destinationPrefixListIdDecoded
        let egressOnlyInternetGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .egressOnlyInternetGatewayId)
        egressOnlyInternetGatewayId = egressOnlyInternetGatewayIdDecoded
        let gatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayId)
        gatewayId = gatewayIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let natGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .natGatewayId)
        natGatewayId = natGatewayIdDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let originDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .origin)
        origin = originDecoded
        let transitGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayId)
        transitGatewayId = transitGatewayIdDecoded
        let vpcPeeringConnectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcPeeringConnectionId)
        vpcPeeringConnectionId = vpcPeeringConnectionIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
    }
}
