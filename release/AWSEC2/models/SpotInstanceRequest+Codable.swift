// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.SpotInstanceRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actualBlockHourlyPrice = "actualBlockHourlyPrice"
        case availabilityZoneGroup = "availabilityZoneGroup"
        case blockDurationMinutes = "blockDurationMinutes"
        case createTime = "createTime"
        case fault = "fault"
        case instanceId = "instanceId"
        case instanceInterruptionBehavior = "instanceInterruptionBehavior"
        case launchGroup = "launchGroup"
        case launchSpecification = "launchSpecification"
        case launchedAvailabilityZone = "launchedAvailabilityZone"
        case productDescription = "productDescription"
        case spotInstanceRequestId = "spotInstanceRequestId"
        case spotPrice = "spotPrice"
        case state = "state"
        case status = "status"
        case tags = "tagSet"
        case type = "type"
        case validFrom = "validFrom"
        case validUntil = "validUntil"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actualBlockHourlyPrice = actualBlockHourlyPrice {
            try container.encode(actualBlockHourlyPrice, forKey: ClientRuntime.Key("ActualBlockHourlyPrice"))
        }
        if let availabilityZoneGroup = availabilityZoneGroup {
            try container.encode(availabilityZoneGroup, forKey: ClientRuntime.Key("AvailabilityZoneGroup"))
        }
        if let blockDurationMinutes = blockDurationMinutes {
            try container.encode(blockDurationMinutes, forKey: ClientRuntime.Key("BlockDurationMinutes"))
        }
        if let createTime = createTime {
            try container.encodeTimestamp(createTime, format: .dateTime, forKey: ClientRuntime.Key("CreateTime"))
        }
        if let fault = fault {
            try container.encode(fault, forKey: ClientRuntime.Key("Fault"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let instanceInterruptionBehavior = instanceInterruptionBehavior {
            try container.encode(instanceInterruptionBehavior, forKey: ClientRuntime.Key("InstanceInterruptionBehavior"))
        }
        if let launchGroup = launchGroup {
            try container.encode(launchGroup, forKey: ClientRuntime.Key("LaunchGroup"))
        }
        if let launchSpecification = launchSpecification {
            try container.encode(launchSpecification, forKey: ClientRuntime.Key("LaunchSpecification"))
        }
        if let launchedAvailabilityZone = launchedAvailabilityZone {
            try container.encode(launchedAvailabilityZone, forKey: ClientRuntime.Key("LaunchedAvailabilityZone"))
        }
        if let productDescription = productDescription {
            try container.encode(productDescription, forKey: ClientRuntime.Key("ProductDescription"))
        }
        if let spotInstanceRequestId = spotInstanceRequestId {
            try container.encode(spotInstanceRequestId, forKey: ClientRuntime.Key("SpotInstanceRequestId"))
        }
        if let spotPrice = spotPrice {
            try container.encode(spotPrice, forKey: ClientRuntime.Key("SpotPrice"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let validFrom = validFrom {
            try container.encodeTimestamp(validFrom, format: .dateTime, forKey: ClientRuntime.Key("ValidFrom"))
        }
        if let validUntil = validUntil {
            try container.encodeTimestamp(validUntil, format: .dateTime, forKey: ClientRuntime.Key("ValidUntil"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actualBlockHourlyPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actualBlockHourlyPrice)
        actualBlockHourlyPrice = actualBlockHourlyPriceDecoded
        let availabilityZoneGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZoneGroup)
        availabilityZoneGroup = availabilityZoneGroupDecoded
        let blockDurationMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blockDurationMinutes)
        blockDurationMinutes = blockDurationMinutesDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .createTime)
        createTime = createTimeDecoded
        let faultDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.SpotInstanceStateFault.self, forKey: .fault)
        fault = faultDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let launchGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchGroup)
        launchGroup = launchGroupDecoded
        let launchSpecificationDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.LaunchSpecification.self, forKey: .launchSpecification)
        launchSpecification = launchSpecificationDecoded
        let launchedAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchedAvailabilityZone)
        launchedAvailabilityZone = launchedAvailabilityZoneDecoded
        let productDescriptionDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.RIProductDescription.self, forKey: .productDescription)
        productDescription = productDescriptionDecoded
        let spotInstanceRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spotInstanceRequestId)
        spotInstanceRequestId = spotInstanceRequestIdDecoded
        let spotPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spotPrice)
        spotPrice = spotPriceDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.SpotInstanceState.self, forKey: .state)
        state = stateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.SpotInstanceStatus.self, forKey: .status)
        status = statusDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let typeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.SpotInstanceType.self, forKey: .type)
        type = typeDecoded
        let validFromDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .validFrom)
        validFrom = validFromDecoded
        let validUntilDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .validUntil)
        validUntil = validUntilDecoded
        let instanceInterruptionBehaviorDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.InstanceInterruptionBehavior.self, forKey: .instanceInterruptionBehavior)
        instanceInterruptionBehavior = instanceInterruptionBehaviorDecoded
    }
}
