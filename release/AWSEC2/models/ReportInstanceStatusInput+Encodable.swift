// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReportInstanceStatusInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("EndTime"))
        }
        if let instances = instances {
            if !instances.isEmpty {
                for (index0, instanceid0) in instances.enumerated() {
                    var instancesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceId.\(index0.advanced(by: 1))"))
                    try instancesContainer0.encode(instanceid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var instancesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceId"))
                try instancesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let reasonCodes = reasonCodes {
            if !reasonCodes.isEmpty {
                for (index0, reportinstancereasoncodes0) in reasonCodes.enumerated() {
                    var reasonCodesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReasonCode.\(index0.advanced(by: 1))"))
                    try reasonCodesContainer0.encode(reportinstancereasoncodes0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var reasonCodesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReasonCode"))
                try reasonCodesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        try container.encode("ReportInstanceStatus", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
