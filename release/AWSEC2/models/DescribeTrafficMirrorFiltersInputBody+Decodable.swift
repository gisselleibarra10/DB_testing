// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTrafficMirrorFiltersInputBody: Swift.Equatable {
    let trafficMirrorFilterIds: [Swift.String]?
    let dryRun: Swift.Bool?
    let filters: [EC2ClientTypes.Filter]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeTrafficMirrorFiltersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case filters = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case trafficMirrorFilterIds = "TrafficMirrorFilterId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.trafficMirrorFilterIds) {
            struct KeyVal0{struct item{}}
            let trafficMirrorFilterIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .trafficMirrorFilterIds)
            if let trafficMirrorFilterIdsWrappedContainer = trafficMirrorFilterIdsWrappedContainer {
                let trafficMirrorFilterIdsContainer = try trafficMirrorFilterIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var trafficMirrorFilterIdsBuffer:[Swift.String]? = nil
                if let trafficMirrorFilterIdsContainer = trafficMirrorFilterIdsContainer {
                    trafficMirrorFilterIdsBuffer = [Swift.String]()
                    for stringContainer0 in trafficMirrorFilterIdsContainer {
                        trafficMirrorFilterIdsBuffer?.append(stringContainer0)
                    }
                }
                trafficMirrorFilterIds = trafficMirrorFilterIdsBuffer
            } else {
                trafficMirrorFilterIds = []
            }
        } else {
            trafficMirrorFilterIds = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.filters) {
            struct KeyVal0{struct Filter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Filter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([EC2ClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[EC2ClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [EC2ClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
