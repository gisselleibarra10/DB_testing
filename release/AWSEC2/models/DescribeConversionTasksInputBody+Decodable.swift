// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeConversionTasksInputBody: Swift.Equatable {
    let conversionTaskIds: [Swift.String]?
    let dryRun: Swift.Bool?
}

extension DescribeConversionTasksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conversionTaskIds = "conversionTaskId"
        case dryRun = "dryRun"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.conversionTaskIds) {
            struct KeyVal0{struct item{}}
            let conversionTaskIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .conversionTaskIds)
            if let conversionTaskIdsWrappedContainer = conversionTaskIdsWrappedContainer {
                let conversionTaskIdsContainer = try conversionTaskIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var conversionTaskIdsBuffer:[Swift.String]? = nil
                if let conversionTaskIdsContainer = conversionTaskIdsContainer {
                    conversionTaskIdsBuffer = [Swift.String]()
                    for stringContainer0 in conversionTaskIdsContainer {
                        conversionTaskIdsBuffer?.append(stringContainer0)
                    }
                }
                conversionTaskIds = conversionTaskIdsBuffer
            } else {
                conversionTaskIds = []
            }
        } else {
            conversionTaskIds = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
