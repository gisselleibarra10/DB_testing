// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.TrafficMirrorFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "description"
        case egressFilterRules = "egressFilterRuleSet"
        case ingressFilterRules = "ingressFilterRuleSet"
        case networkServices = "networkServiceSet"
        case tags = "tagSet"
        case trafficMirrorFilterId = "trafficMirrorFilterId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let egressFilterRules = egressFilterRules {
            if !egressFilterRules.isEmpty {
                for (index0, trafficmirrorfilterrule0) in egressFilterRules.enumerated() {
                    var egressFilterRulesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EgressFilterRuleSet.\(index0.advanced(by: 1))"))
                    try egressFilterRulesContainer0.encode(trafficmirrorfilterrule0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let ingressFilterRules = ingressFilterRules {
            if !ingressFilterRules.isEmpty {
                for (index0, trafficmirrorfilterrule0) in ingressFilterRules.enumerated() {
                    var ingressFilterRulesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IngressFilterRuleSet.\(index0.advanced(by: 1))"))
                    try ingressFilterRulesContainer0.encode(trafficmirrorfilterrule0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let networkServices = networkServices {
            if !networkServices.isEmpty {
                for (index0, trafficmirrornetworkservice0) in networkServices.enumerated() {
                    var networkServicesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NetworkServiceSet.\(index0.advanced(by: 1))"))
                    try networkServicesContainer0.encode(trafficmirrornetworkservice0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let trafficMirrorFilterId = trafficMirrorFilterId {
            try container.encode(trafficMirrorFilterId, forKey: ClientRuntime.Key("TrafficMirrorFilterId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficMirrorFilterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficMirrorFilterId)
        trafficMirrorFilterId = trafficMirrorFilterIdDecoded
        if containerValues.contains(.ingressFilterRules) {
            struct KeyVal0{struct item{}}
            let ingressFilterRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .ingressFilterRules)
            if let ingressFilterRulesWrappedContainer = ingressFilterRulesWrappedContainer {
                let ingressFilterRulesContainer = try ingressFilterRulesWrappedContainer.decodeIfPresent([Ec2ClientTypes.TrafficMirrorFilterRule].self, forKey: .member)
                var ingressFilterRulesBuffer:[Ec2ClientTypes.TrafficMirrorFilterRule]? = nil
                if let ingressFilterRulesContainer = ingressFilterRulesContainer {
                    ingressFilterRulesBuffer = [Ec2ClientTypes.TrafficMirrorFilterRule]()
                    for structureContainer0 in ingressFilterRulesContainer {
                        ingressFilterRulesBuffer?.append(structureContainer0)
                    }
                }
                ingressFilterRules = ingressFilterRulesBuffer
            } else {
                ingressFilterRules = []
            }
        } else {
            ingressFilterRules = nil
        }
        if containerValues.contains(.egressFilterRules) {
            struct KeyVal0{struct item{}}
            let egressFilterRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .egressFilterRules)
            if let egressFilterRulesWrappedContainer = egressFilterRulesWrappedContainer {
                let egressFilterRulesContainer = try egressFilterRulesWrappedContainer.decodeIfPresent([Ec2ClientTypes.TrafficMirrorFilterRule].self, forKey: .member)
                var egressFilterRulesBuffer:[Ec2ClientTypes.TrafficMirrorFilterRule]? = nil
                if let egressFilterRulesContainer = egressFilterRulesContainer {
                    egressFilterRulesBuffer = [Ec2ClientTypes.TrafficMirrorFilterRule]()
                    for structureContainer0 in egressFilterRulesContainer {
                        egressFilterRulesBuffer?.append(structureContainer0)
                    }
                }
                egressFilterRules = egressFilterRulesBuffer
            } else {
                egressFilterRules = []
            }
        } else {
            egressFilterRules = nil
        }
        if containerValues.contains(.networkServices) {
            struct KeyVal0{struct item{}}
            let networkServicesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .networkServices)
            if let networkServicesWrappedContainer = networkServicesWrappedContainer {
                let networkServicesContainer = try networkServicesWrappedContainer.decodeIfPresent([Ec2ClientTypes.TrafficMirrorNetworkService].self, forKey: .member)
                var networkServicesBuffer:[Ec2ClientTypes.TrafficMirrorNetworkService]? = nil
                if let networkServicesContainer = networkServicesContainer {
                    networkServicesBuffer = [Ec2ClientTypes.TrafficMirrorNetworkService]()
                    for enumContainer0 in networkServicesContainer {
                        networkServicesBuffer?.append(enumContainer0)
                    }
                }
                networkServices = networkServicesBuffer
            } else {
                networkServices = []
            }
        } else {
            networkServices = nil
        }
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
