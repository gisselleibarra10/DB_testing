// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.DeregisterInstanceTagAttributeRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeAllTagsOfInstance = "IncludeAllTagsOfInstance"
        case instanceTagKeys = "InstanceTagKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let includeAllTagsOfInstance = includeAllTagsOfInstance {
            try container.encode(includeAllTagsOfInstance, forKey: ClientRuntime.Key("IncludeAllTagsOfInstance"))
        }
        if let instanceTagKeys = instanceTagKeys {
            if !instanceTagKeys.isEmpty {
                for (index0, string0) in instanceTagKeys.enumerated() {
                    var instanceTagKeysContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceTagKey.\(index0.advanced(by: 1))"))
                    try instanceTagKeysContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let includeAllTagsOfInstanceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeAllTagsOfInstance)
        includeAllTagsOfInstance = includeAllTagsOfInstanceDecoded
        if containerValues.contains(.instanceTagKeys) {
            struct KeyVal0{struct item{}}
            let instanceTagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .instanceTagKeys)
            if let instanceTagKeysWrappedContainer = instanceTagKeysWrappedContainer {
                let instanceTagKeysContainer = try instanceTagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var instanceTagKeysBuffer:[Swift.String]? = nil
                if let instanceTagKeysContainer = instanceTagKeysContainer {
                    instanceTagKeysBuffer = [Swift.String]()
                    for stringContainer0 in instanceTagKeysContainer {
                        instanceTagKeysBuffer?.append(stringContainer0)
                    }
                }
                instanceTagKeys = instanceTagKeysBuffer
            } else {
                instanceTagKeys = []
            }
        } else {
            instanceTagKeys = nil
        }
    }
}
