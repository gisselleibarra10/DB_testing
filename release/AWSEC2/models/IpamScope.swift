// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// In IPAM, a scope is the highest-level container within IPAM. An IPAM contains two default scopes. Each scope represents the IP space for a single network. The private scope is intended for all private IP address space. The public scope is intended for all public IP address space. Scopes enable you to reuse IP addresses across multiple unconnected networks without causing IP address overlap or conflict. For more information, see [How IPAM works](https://docs.aws.amazon.com/vpc/latest/ipam/how-it-works-ipam.html) in the Amazon VPC IPAM User Guide.
    public struct IpamScope: Swift.Equatable {
        /// The description of the scope.
        public var description: Swift.String?
        /// The ARN of the IPAM.
        public var ipamArn: Swift.String?
        /// The Amazon Web Services Region of the IPAM scope.
        public var ipamRegion: Swift.String?
        /// The ARN of the scope.
        public var ipamScopeArn: Swift.String?
        /// The ID of the scope.
        public var ipamScopeId: Swift.String?
        /// The type of the scope.
        public var ipamScopeType: Ec2ClientTypes.IpamScopeType?
        /// Defines if the scope is the default scope or not.
        public var isDefault: Swift.Bool?
        /// The Amazon Web Services account ID of the owner of the scope.
        public var ownerId: Swift.String?
        /// The number of pools in the scope.
        public var poolCount: Swift.Int?
        /// The state of the IPAM scope.
        public var state: Ec2ClientTypes.IpamScopeState?
        /// The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
        public var tags: [Ec2ClientTypes.Tag]?

        public init (
            description: Swift.String? = nil,
            ipamArn: Swift.String? = nil,
            ipamRegion: Swift.String? = nil,
            ipamScopeArn: Swift.String? = nil,
            ipamScopeId: Swift.String? = nil,
            ipamScopeType: Ec2ClientTypes.IpamScopeType? = nil,
            isDefault: Swift.Bool? = nil,
            ownerId: Swift.String? = nil,
            poolCount: Swift.Int? = nil,
            state: Ec2ClientTypes.IpamScopeState? = nil,
            tags: [Ec2ClientTypes.Tag]? = nil
        )
        {
            self.description = description
            self.ipamArn = ipamArn
            self.ipamRegion = ipamRegion
            self.ipamScopeArn = ipamScopeArn
            self.ipamScopeId = ipamScopeId
            self.ipamScopeType = ipamScopeType
            self.isDefault = isDefault
            self.ownerId = ownerId
            self.poolCount = poolCount
            self.state = state
            self.tags = tags
        }
    }

}
