// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.Subscription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "destination"
        case metric = "metric"
        case period = "period"
        case source = "source"
        case statistic = "statistic"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let destination = destination {
            try container.encode(destination, forKey: ClientRuntime.Key("Destination"))
        }
        if let metric = metric {
            try container.encode(metric, forKey: ClientRuntime.Key("Metric"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let statistic = statistic {
            try container.encode(statistic, forKey: ClientRuntime.Key("Statistic"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let metricDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.MetricType.self, forKey: .metric)
        metric = metricDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.StatisticType.self, forKey: .statistic)
        statistic = statisticDecoded
        let periodDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.PeriodType.self, forKey: .period)
        period = periodDecoded
    }
}
