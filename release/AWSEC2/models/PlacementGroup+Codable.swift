// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.PlacementGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupArn = "groupArn"
        case groupId = "groupId"
        case groupName = "groupName"
        case partitionCount = "partitionCount"
        case spreadLevel = "spreadLevel"
        case state = "state"
        case strategy = "strategy"
        case tags = "tagSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupArn = groupArn {
            try container.encode(groupArn, forKey: ClientRuntime.Key("GroupArn"))
        }
        if let groupId = groupId {
            try container.encode(groupId, forKey: ClientRuntime.Key("GroupId"))
        }
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let partitionCount = partitionCount {
            try container.encode(partitionCount, forKey: ClientRuntime.Key("PartitionCount"))
        }
        if let spreadLevel = spreadLevel {
            try container.encode(spreadLevel, forKey: ClientRuntime.Key("SpreadLevel"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let strategy = strategy {
            try container.encode(strategy, forKey: ClientRuntime.Key("Strategy"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.PlacementGroupState.self, forKey: .state)
        state = stateDecoded
        let strategyDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.PlacementStrategy.self, forKey: .strategy)
        strategy = strategyDecoded
        let partitionCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .partitionCount)
        partitionCount = partitionCountDecoded
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let groupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupArn)
        groupArn = groupArnDecoded
        let spreadLevelDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.SpreadLevel.self, forKey: .spreadLevel)
        spreadLevel = spreadLevelDecoded
    }
}
