// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.InstanceStatusEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "code"
        case description = "description"
        case instanceEventId = "instanceEventId"
        case notAfter = "notAfter"
        case notBefore = "notBefore"
        case notBeforeDeadline = "notBeforeDeadline"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let code = code {
            try container.encode(code, forKey: ClientRuntime.Key("Code"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let instanceEventId = instanceEventId {
            try container.encode(instanceEventId, forKey: ClientRuntime.Key("InstanceEventId"))
        }
        if let notAfter = notAfter {
            try container.encode(ClientRuntime.TimestampWrapper(notAfter, format: .dateTime), forKey: ClientRuntime.Key("NotAfter"))
        }
        if let notBefore = notBefore {
            try container.encode(ClientRuntime.TimestampWrapper(notBefore, format: .dateTime), forKey: ClientRuntime.Key("NotBefore"))
        }
        if let notBeforeDeadline = notBeforeDeadline {
            try container.encode(ClientRuntime.TimestampWrapper(notBeforeDeadline, format: .dateTime), forKey: ClientRuntime.Key("NotBeforeDeadline"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceEventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceEventId)
        instanceEventId = instanceEventIdDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.EventCode.self, forKey: .code)
        code = codeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let notAfterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notAfter)
        var notAfterBuffer:ClientRuntime.Date? = nil
        if let notAfterDecoded = notAfterDecoded {
            notAfterBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(notAfterDecoded, format: .dateTime)
        }
        notAfter = notAfterBuffer
        let notBeforeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notBefore)
        var notBeforeBuffer:ClientRuntime.Date? = nil
        if let notBeforeDecoded = notBeforeDecoded {
            notBeforeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(notBeforeDecoded, format: .dateTime)
        }
        notBefore = notBeforeBuffer
        let notBeforeDeadlineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notBeforeDeadline)
        var notBeforeDeadlineBuffer:ClientRuntime.Date? = nil
        if let notBeforeDeadlineDecoded = notBeforeDeadlineDecoded {
            notBeforeDeadlineBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(notBeforeDeadlineDecoded, format: .dateTime)
        }
        notBeforeDeadline = notBeforeDeadlineBuffer
    }
}
