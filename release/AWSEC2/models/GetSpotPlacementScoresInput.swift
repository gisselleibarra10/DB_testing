// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetSpotPlacementScoresInput: Swift.Equatable {
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes. If you specify InstanceRequirementsWithMetadata, you can't specify InstanceTypes.
    public var instanceRequirementsWithMetadata: Ec2ClientTypes.InstanceRequirementsWithMetadataRequest?
    /// The instance types. We recommend that you specify at least three instance types. If you specify one or two instance types, or specify variations of a single instance type (for example, an m3.xlarge with and without instance storage), the returned placement score will always be low. If you specify InstanceTypes, you can't specify InstanceRequirementsWithMetadata.
    public var instanceTypes: [Swift.String]?
    /// The maximum number of results to return in a single call. Specify a value between 1 and  1000. The default value is 1000. To retrieve the remaining results, make another call with  the returned NextToken value.
    public var maxResults: Swift.Int?
    /// The token for the next set of results.
    public var nextToken: Swift.String?
    /// The Regions used to narrow down the list of Regions to be scored. Enter the Region code, for example, us-east-1.
    public var regionNames: [Swift.String]?
    /// Specify true so that the response returns a list of scored Availability Zones. Otherwise, the response returns a list of scored Regions. A list of scored Availability Zones is useful if you want to launch all of your Spot capacity into a single Availability Zone.
    public var singleAvailabilityZone: Swift.Bool?
    /// The target capacity.
    /// This member is required.
    public var targetCapacity: Swift.Int?
    /// The unit for the target capacity. Default: units (translates to number of instances)
    public var targetCapacityUnitType: Ec2ClientTypes.TargetCapacityUnitType?

    public init (
        dryRun: Swift.Bool? = nil,
        instanceRequirementsWithMetadata: Ec2ClientTypes.InstanceRequirementsWithMetadataRequest? = nil,
        instanceTypes: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        regionNames: [Swift.String]? = nil,
        singleAvailabilityZone: Swift.Bool? = nil,
        targetCapacity: Swift.Int? = nil,
        targetCapacityUnitType: Ec2ClientTypes.TargetCapacityUnitType? = nil
    )
    {
        self.dryRun = dryRun
        self.instanceRequirementsWithMetadata = instanceRequirementsWithMetadata
        self.instanceTypes = instanceTypes
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.regionNames = regionNames
        self.singleAvailabilityZone = singleAvailabilityZone
        self.targetCapacity = targetCapacity
        self.targetCapacityUnitType = targetCapacityUnitType
    }
}
