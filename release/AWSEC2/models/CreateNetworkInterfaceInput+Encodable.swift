// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateNetworkInterfaceInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: ClientRuntime.Key("ClientToken"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let groups = groups {
            if !groups.isEmpty {
                for (index0, securitygroupid0) in groups.enumerated() {
                    var groupsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroupId.\(index0.advanced(by: 1))"))
                    try groupsContainer0.encode(securitygroupid0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let interfaceType = interfaceType {
            try container.encode(interfaceType, forKey: ClientRuntime.Key("InterfaceType"))
        }
        if let ipv4PrefixCount = ipv4PrefixCount {
            try container.encode(ipv4PrefixCount, forKey: ClientRuntime.Key("Ipv4PrefixCount"))
        }
        if let ipv4Prefixes = ipv4Prefixes {
            if !ipv4Prefixes.isEmpty {
                for (index0, ipv4prefixspecificationrequest0) in ipv4Prefixes.enumerated() {
                    var ipv4PrefixesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Ipv4Prefix.\(index0.advanced(by: 1))"))
                    try ipv4PrefixesContainer0.encode(ipv4prefixspecificationrequest0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let ipv6AddressCount = ipv6AddressCount {
            try container.encode(ipv6AddressCount, forKey: ClientRuntime.Key("Ipv6AddressCount"))
        }
        if let ipv6Addresses = ipv6Addresses {
            if !ipv6Addresses.isEmpty {
                for (index0, instanceipv6address0) in ipv6Addresses.enumerated() {
                    var ipv6AddressesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Ipv6Addresses.\(index0.advanced(by: 1))"))
                    try ipv6AddressesContainer0.encode(instanceipv6address0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let ipv6PrefixCount = ipv6PrefixCount {
            try container.encode(ipv6PrefixCount, forKey: ClientRuntime.Key("Ipv6PrefixCount"))
        }
        if let ipv6Prefixes = ipv6Prefixes {
            if !ipv6Prefixes.isEmpty {
                for (index0, ipv6prefixspecificationrequest0) in ipv6Prefixes.enumerated() {
                    var ipv6PrefixesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Ipv6Prefix.\(index0.advanced(by: 1))"))
                    try ipv6PrefixesContainer0.encode(ipv6prefixspecificationrequest0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let privateIpAddress = privateIpAddress {
            try container.encode(privateIpAddress, forKey: ClientRuntime.Key("PrivateIpAddress"))
        }
        if let privateIpAddresses = privateIpAddresses {
            if !privateIpAddresses.isEmpty {
                for (index0, privateipaddressspecification0) in privateIpAddresses.enumerated() {
                    var privateIpAddressesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PrivateIpAddresses.\(index0.advanced(by: 1))"))
                    try privateIpAddressesContainer0.encode(privateipaddressspecification0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount {
            try container.encode(secondaryPrivateIpAddressCount, forKey: ClientRuntime.Key("SecondaryPrivateIpAddressCount"))
        }
        if let subnetId = subnetId {
            try container.encode(subnetId, forKey: ClientRuntime.Key("SubnetId"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        try container.encode("CreateNetworkInterface", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
