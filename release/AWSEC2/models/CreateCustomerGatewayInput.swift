// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Contains the parameters for CreateCustomerGateway.
public struct CreateCustomerGatewayInput: Swift.Equatable {
    /// For devices that support BGP, the customer gateway's BGP ASN. Default: 65000
    /// This member is required.
    public var bgpAsn: Swift.Int?
    /// The Amazon Resource Name (ARN) for the customer gateway certificate.
    public var certificateArn: Swift.String?
    /// A name for the customer gateway device. Length Constraints: Up to 255 characters.
    public var deviceName: Swift.String?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// IPv4 address for the customer gateway device's outside interface. The address must be static.
    public var ipAddress: Swift.String?
    /// This member has been deprecated. The Internet-routable IP address for the customer gateway's outside interface. The address must be static.
    public var publicIp: Swift.String?
    /// The tags to apply to the customer gateway.
    public var tagSpecifications: [EC2ClientTypes.TagSpecification]?
    /// The type of VPN connection that this customer gateway supports (ipsec.1).
    /// This member is required.
    public var type: EC2ClientTypes.GatewayType?

    public init (
        bgpAsn: Swift.Int? = nil,
        certificateArn: Swift.String? = nil,
        deviceName: Swift.String? = nil,
        dryRun: Swift.Bool? = nil,
        ipAddress: Swift.String? = nil,
        publicIp: Swift.String? = nil,
        tagSpecifications: [EC2ClientTypes.TagSpecification]? = nil,
        type: EC2ClientTypes.GatewayType? = nil
    )
    {
        self.bgpAsn = bgpAsn
        self.certificateArn = certificateArn
        self.deviceName = deviceName
        self.dryRun = dryRun
        self.ipAddress = ipAddress
        self.publicIp = publicIp
        self.tagSpecifications = tagSpecifications
        self.type = type
    }
}
