// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateVpcInput: Swift.Equatable {
    /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.
    public var amazonProvidedIpv6CidrBlock: Swift.Bool?
    /// The IPv4 network range for the VPC, in CIDR notation. For example, 10.0.0.0/16. We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
    public var cidrBlock: Swift.String?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// The tenancy options for instances launched into the VPC. For default, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For dedicated, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of dedicated or host into a dedicated tenancy VPC. Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default
    public var instanceTenancy: Ec2ClientTypes.Tenancy?
    /// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. For more information, see [What is IPAM?](https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html) in the Amazon VPC IPAM User Guide.
    public var ipv4IpamPoolId: Swift.String?
    /// The netmask length of the IPv4 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see [What is IPAM?](https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html) in the Amazon VPC IPAM User Guide.
    public var ipv4NetmaskLength: Swift.Int?
    /// The IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool in the request. To let Amazon choose the IPv6 CIDR block for you, omit this parameter.
    public var ipv6CidrBlock: Swift.String?
    /// The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the address to this location. You must set AmazonProvidedIpv6CidrBlock to true to use this parameter.
    public var ipv6CidrBlockNetworkBorderGroup: Swift.String?
    /// The ID of an IPv6 IPAM pool which will be used to allocate this VPC an IPv6 CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across Amazon Web Services Regions and accounts throughout your Amazon Web Services Organization. For more information, see [What is IPAM?](https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html) in the Amazon VPC IPAM User Guide.
    public var ipv6IpamPoolId: Swift.String?
    /// The netmask length of the IPv6 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see [What is IPAM?](https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html) in the Amazon VPC IPAM User Guide.
    public var ipv6NetmaskLength: Swift.Int?
    /// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
    public var ipv6Pool: Swift.String?
    /// The tags to assign to the VPC.
    public var tagSpecifications: [Ec2ClientTypes.TagSpecification]?

    public init (
        amazonProvidedIpv6CidrBlock: Swift.Bool? = nil,
        cidrBlock: Swift.String? = nil,
        dryRun: Swift.Bool? = nil,
        instanceTenancy: Ec2ClientTypes.Tenancy? = nil,
        ipv4IpamPoolId: Swift.String? = nil,
        ipv4NetmaskLength: Swift.Int? = nil,
        ipv6CidrBlock: Swift.String? = nil,
        ipv6CidrBlockNetworkBorderGroup: Swift.String? = nil,
        ipv6IpamPoolId: Swift.String? = nil,
        ipv6NetmaskLength: Swift.Int? = nil,
        ipv6Pool: Swift.String? = nil,
        tagSpecifications: [Ec2ClientTypes.TagSpecification]? = nil
    )
    {
        self.amazonProvidedIpv6CidrBlock = amazonProvidedIpv6CidrBlock
        self.cidrBlock = cidrBlock
        self.dryRun = dryRun
        self.instanceTenancy = instanceTenancy
        self.ipv4IpamPoolId = ipv4IpamPoolId
        self.ipv4NetmaskLength = ipv4NetmaskLength
        self.ipv6CidrBlock = ipv6CidrBlock
        self.ipv6CidrBlockNetworkBorderGroup = ipv6CidrBlockNetworkBorderGroup
        self.ipv6IpamPoolId = ipv6IpamPoolId
        self.ipv6NetmaskLength = ipv6NetmaskLength
        self.ipv6Pool = ipv6Pool
        self.tagSpecifications = tagSpecifications
    }
}
