// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.ExportToS3Task: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerFormat = "containerFormat"
        case diskImageFormat = "diskImageFormat"
        case s3Bucket = "s3Bucket"
        case s3Key = "s3Key"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let containerFormat = containerFormat {
            try container.encode(containerFormat, forKey: ClientRuntime.Key("ContainerFormat"))
        }
        if let diskImageFormat = diskImageFormat {
            try container.encode(diskImageFormat, forKey: ClientRuntime.Key("DiskImageFormat"))
        }
        if let s3Bucket = s3Bucket {
            try container.encode(s3Bucket, forKey: ClientRuntime.Key("S3Bucket"))
        }
        if let s3Key = s3Key {
            try container.encode(s3Key, forKey: ClientRuntime.Key("S3Key"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerFormatDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.ContainerFormat.self, forKey: .containerFormat)
        containerFormat = containerFormatDecoded
        let diskImageFormatDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.DiskImageFormat.self, forKey: .diskImageFormat)
        diskImageFormat = diskImageFormatDecoded
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3KeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Key)
        s3Key = s3KeyDecoded
    }
}
