// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNatGatewaysOutputResponseBody: Swift.Equatable {
    let natGateways: [Ec2ClientTypes.NatGateway]?
    let nextToken: Swift.String?
}

extension DescribeNatGatewaysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case natGateways = "natGatewaySet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.natGateways) {
            struct KeyVal0{struct item{}}
            let natGatewaysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .natGateways)
            if let natGatewaysWrappedContainer = natGatewaysWrappedContainer {
                let natGatewaysContainer = try natGatewaysWrappedContainer.decodeIfPresent([Ec2ClientTypes.NatGateway].self, forKey: .member)
                var natGatewaysBuffer:[Ec2ClientTypes.NatGateway]? = nil
                if let natGatewaysContainer = natGatewaysContainer {
                    natGatewaysBuffer = [Ec2ClientTypes.NatGateway]()
                    for structureContainer0 in natGatewaysContainer {
                        natGatewaysBuffer?.append(structureContainer0)
                    }
                }
                natGateways = natGatewaysBuffer
            } else {
                natGateways = []
            }
        } else {
            natGateways = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
