// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.PlacementGroupInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case supportedStrategies = "supportedStrategies"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let supportedStrategies = supportedStrategies {
            if !supportedStrategies.isEmpty {
                for (index0, placementgroupstrategy0) in supportedStrategies.enumerated() {
                    var supportedStrategiesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedStrategies.\(index0.advanced(by: 1))"))
                    try supportedStrategiesContainer0.encode(placementgroupstrategy0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.supportedStrategies) {
            struct KeyVal0{struct item{}}
            let supportedStrategiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .supportedStrategies)
            if let supportedStrategiesWrappedContainer = supportedStrategiesWrappedContainer {
                let supportedStrategiesContainer = try supportedStrategiesWrappedContainer.decodeIfPresent([Ec2ClientTypes.PlacementGroupStrategy].self, forKey: .member)
                var supportedStrategiesBuffer:[Ec2ClientTypes.PlacementGroupStrategy]? = nil
                if let supportedStrategiesContainer = supportedStrategiesContainer {
                    supportedStrategiesBuffer = [Ec2ClientTypes.PlacementGroupStrategy]()
                    for enumContainer0 in supportedStrategiesContainer {
                        supportedStrategiesBuffer?.append(enumContainer0)
                    }
                }
                supportedStrategies = supportedStrategiesBuffer
            } else {
                supportedStrategies = []
            }
        } else {
            supportedStrategies = nil
        }
    }
}
