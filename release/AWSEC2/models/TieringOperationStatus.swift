// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    public enum TieringOperationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case archivalCompleted
        case archivalFailed
        case archivalInProgress
        case permanentRestoreCompleted
        case permanentRestoreFailed
        case permanentRestoreInProgress
        case temporaryRestoreCompleted
        case temporaryRestoreFailed
        case temporaryRestoreInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [TieringOperationStatus] {
            return [
                .archivalCompleted,
                .archivalFailed,
                .archivalInProgress,
                .permanentRestoreCompleted,
                .permanentRestoreFailed,
                .permanentRestoreInProgress,
                .temporaryRestoreCompleted,
                .temporaryRestoreFailed,
                .temporaryRestoreInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .archivalCompleted: return "archival-completed"
            case .archivalFailed: return "archival-failed"
            case .archivalInProgress: return "archival-in-progress"
            case .permanentRestoreCompleted: return "permanent-restore-completed"
            case .permanentRestoreFailed: return "permanent-restore-failed"
            case .permanentRestoreInProgress: return "permanent-restore-in-progress"
            case .temporaryRestoreCompleted: return "temporary-restore-completed"
            case .temporaryRestoreFailed: return "temporary-restore-failed"
            case .temporaryRestoreInProgress: return "temporary-restore-in-progress"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TieringOperationStatus(rawValue: rawValue) ?? TieringOperationStatus.sdkUnknown(rawValue)
        }
    }
}
