// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RegisterImageInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let architecture = architecture {
            try container.encode(architecture, forKey: ClientRuntime.Key("Architecture"))
        }
        if let billingProducts = billingProducts {
            if !billingProducts.isEmpty {
                for (index0, string0) in billingProducts.enumerated() {
                    var billingProductsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BillingProduct.\(index0.advanced(by: 1))"))
                    try billingProductsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var billingProductsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BillingProduct"))
                try billingProductsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let blockDeviceMappings = blockDeviceMappings {
            if !blockDeviceMappings.isEmpty {
                for (index0, blockdevicemapping0) in blockDeviceMappings.enumerated() {
                    var blockDeviceMappingsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BlockDeviceMapping.\(index0.advanced(by: 1))"))
                    try blockDeviceMappingsContainer0.encode(blockdevicemapping0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var blockDeviceMappingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BlockDeviceMapping"))
                try blockDeviceMappingsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let bootMode = bootMode {
            try container.encode(bootMode, forKey: ClientRuntime.Key("BootMode"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let enaSupport = enaSupport {
            try container.encode(enaSupport, forKey: ClientRuntime.Key("EnaSupport"))
        }
        if let imageLocation = imageLocation {
            try container.encode(imageLocation, forKey: ClientRuntime.Key("ImageLocation"))
        }
        if let imdsSupport = imdsSupport {
            try container.encode(imdsSupport, forKey: ClientRuntime.Key("ImdsSupport"))
        }
        if let kernelId = kernelId {
            try container.encode(kernelId, forKey: ClientRuntime.Key("KernelId"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let ramdiskId = ramdiskId {
            try container.encode(ramdiskId, forKey: ClientRuntime.Key("RamdiskId"))
        }
        if let rootDeviceName = rootDeviceName {
            try container.encode(rootDeviceName, forKey: ClientRuntime.Key("RootDeviceName"))
        }
        if let sriovNetSupport = sriovNetSupport {
            try container.encode(sriovNetSupport, forKey: ClientRuntime.Key("SriovNetSupport"))
        }
        if let tpmSupport = tpmSupport {
            try container.encode(tpmSupport, forKey: ClientRuntime.Key("TpmSupport"))
        }
        if let uefiData = uefiData {
            try container.encode(uefiData, forKey: ClientRuntime.Key("UefiData"))
        }
        if let virtualizationType = virtualizationType {
            try container.encode(virtualizationType, forKey: ClientRuntime.Key("VirtualizationType"))
        }
        try container.encode("RegisterImage", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
