// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateStoreImageTaskInputBody: Swift.Equatable {
    let imageId: Swift.String?
    let bucket: Swift.String?
    let s3ObjectTags: [Ec2ClientTypes.S3ObjectTag]?
    let dryRun: Swift.Bool?
}

extension CreateStoreImageTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case dryRun = "DryRun"
        case imageId = "ImageId"
        case s3ObjectTags = "S3ObjectTag"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        if containerValues.contains(.s3ObjectTags) {
            struct KeyVal0{struct item{}}
            let s3ObjectTagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .s3ObjectTags)
            if let s3ObjectTagsWrappedContainer = s3ObjectTagsWrappedContainer {
                let s3ObjectTagsContainer = try s3ObjectTagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.S3ObjectTag].self, forKey: .member)
                var s3ObjectTagsBuffer:[Ec2ClientTypes.S3ObjectTag]? = nil
                if let s3ObjectTagsContainer = s3ObjectTagsContainer {
                    s3ObjectTagsBuffer = [Ec2ClientTypes.S3ObjectTag]()
                    for structureContainer0 in s3ObjectTagsContainer {
                        s3ObjectTagsBuffer?.append(structureContainer0)
                    }
                }
                s3ObjectTags = s3ObjectTagsBuffer
            } else {
                s3ObjectTags = []
            }
        } else {
            s3ObjectTags = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
