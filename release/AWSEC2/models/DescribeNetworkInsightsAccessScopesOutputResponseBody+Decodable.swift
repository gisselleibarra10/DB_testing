// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNetworkInsightsAccessScopesOutputResponseBody: Swift.Equatable {
    let networkInsightsAccessScopes: [Ec2ClientTypes.NetworkInsightsAccessScope]?
    let nextToken: Swift.String?
}

extension DescribeNetworkInsightsAccessScopesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case networkInsightsAccessScopes = "networkInsightsAccessScopeSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.networkInsightsAccessScopes) {
            struct KeyVal0{struct item{}}
            let networkInsightsAccessScopesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .networkInsightsAccessScopes)
            if let networkInsightsAccessScopesWrappedContainer = networkInsightsAccessScopesWrappedContainer {
                let networkInsightsAccessScopesContainer = try networkInsightsAccessScopesWrappedContainer.decodeIfPresent([Ec2ClientTypes.NetworkInsightsAccessScope].self, forKey: .member)
                var networkInsightsAccessScopesBuffer:[Ec2ClientTypes.NetworkInsightsAccessScope]? = nil
                if let networkInsightsAccessScopesContainer = networkInsightsAccessScopesContainer {
                    networkInsightsAccessScopesBuffer = [Ec2ClientTypes.NetworkInsightsAccessScope]()
                    for structureContainer0 in networkInsightsAccessScopesContainer {
                        networkInsightsAccessScopesBuffer?.append(structureContainer0)
                    }
                }
                networkInsightsAccessScopes = networkInsightsAccessScopesBuffer
            } else {
                networkInsightsAccessScopes = []
            }
        } else {
            networkInsightsAccessScopes = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
