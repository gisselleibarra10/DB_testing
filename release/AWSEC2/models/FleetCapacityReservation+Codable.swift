// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.FleetCapacityReservation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "availabilityZone"
        case availabilityZoneId = "availabilityZoneId"
        case capacityReservationId = "capacityReservationId"
        case createDate = "createDate"
        case ebsOptimized = "ebsOptimized"
        case fulfilledCapacity = "fulfilledCapacity"
        case instancePlatform = "instancePlatform"
        case instanceType = "instanceType"
        case priority = "priority"
        case totalInstanceCount = "totalInstanceCount"
        case weight = "weight"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let availabilityZoneId = availabilityZoneId {
            try container.encode(availabilityZoneId, forKey: ClientRuntime.Key("AvailabilityZoneId"))
        }
        if let capacityReservationId = capacityReservationId {
            try container.encode(capacityReservationId, forKey: ClientRuntime.Key("CapacityReservationId"))
        }
        if let createDate = createDate {
            try container.encode(ClientRuntime.TimestampWrapper(createDate, format: .dateTime), forKey: ClientRuntime.Key("CreateDate"))
        }
        if let ebsOptimized = ebsOptimized {
            try container.encode(ebsOptimized, forKey: ClientRuntime.Key("EbsOptimized"))
        }
        if let fulfilledCapacity = fulfilledCapacity {
            try container.encode(fulfilledCapacity, forKey: ClientRuntime.Key("FulfilledCapacity"))
        }
        if let instancePlatform = instancePlatform {
            try container.encode(instancePlatform, forKey: ClientRuntime.Key("InstancePlatform"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let priority = priority {
            try container.encode(priority, forKey: ClientRuntime.Key("Priority"))
        }
        if let totalInstanceCount = totalInstanceCount {
            try container.encode(totalInstanceCount, forKey: ClientRuntime.Key("TotalInstanceCount"))
        }
        if let weight = weight {
            try container.encode(weight, forKey: ClientRuntime.Key("Weight"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let capacityReservationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .capacityReservationId)
        capacityReservationId = capacityReservationIdDecoded
        let availabilityZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZoneId)
        availabilityZoneId = availabilityZoneIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instancePlatformDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.CapacityReservationInstancePlatform.self, forKey: .instancePlatform)
        instancePlatform = instancePlatformDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let totalInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalInstanceCount)
        totalInstanceCount = totalInstanceCountDecoded
        let fulfilledCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fulfilledCapacity)
        fulfilledCapacity = fulfilledCapacityDecoded
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        let weightDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .weight)
        weight = weightDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
    }
}
