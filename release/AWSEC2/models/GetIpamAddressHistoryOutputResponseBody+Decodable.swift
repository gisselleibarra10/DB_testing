// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetIpamAddressHistoryOutputResponseBody: Swift.Equatable {
    let historyRecords: [EC2ClientTypes.IpamAddressHistoryRecord]?
    let nextToken: Swift.String?
}

extension GetIpamAddressHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case historyRecords = "historyRecordSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.historyRecords) {
            struct KeyVal0{struct item{}}
            let historyRecordsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .historyRecords)
            if let historyRecordsWrappedContainer = historyRecordsWrappedContainer {
                let historyRecordsContainer = try historyRecordsWrappedContainer.decodeIfPresent([EC2ClientTypes.IpamAddressHistoryRecord].self, forKey: .member)
                var historyRecordsBuffer:[EC2ClientTypes.IpamAddressHistoryRecord]? = nil
                if let historyRecordsContainer = historyRecordsContainer {
                    historyRecordsBuffer = [EC2ClientTypes.IpamAddressHistoryRecord]()
                    for structureContainer0 in historyRecordsContainer {
                        historyRecordsBuffer?.append(structureContainer0)
                    }
                }
                historyRecords = historyRecordsBuffer
            } else {
                historyRecords = []
            }
        } else {
            historyRecords = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
