// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateIpamPoolInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let addressFamily = addressFamily {
            try container.encode(addressFamily, forKey: ClientRuntime.Key("AddressFamily"))
        }
        if let allocationDefaultNetmaskLength = allocationDefaultNetmaskLength {
            try container.encode(allocationDefaultNetmaskLength, forKey: ClientRuntime.Key("AllocationDefaultNetmaskLength"))
        }
        if let allocationMaxNetmaskLength = allocationMaxNetmaskLength {
            try container.encode(allocationMaxNetmaskLength, forKey: ClientRuntime.Key("AllocationMaxNetmaskLength"))
        }
        if let allocationMinNetmaskLength = allocationMinNetmaskLength {
            try container.encode(allocationMinNetmaskLength, forKey: ClientRuntime.Key("AllocationMinNetmaskLength"))
        }
        if let allocationResourceTags = allocationResourceTags {
            if !allocationResourceTags.isEmpty {
                for (index0, requestipamresourcetag0) in allocationResourceTags.enumerated() {
                    var allocationResourceTagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AllocationResourceTag.\(index0.advanced(by: 1))"))
                    try allocationResourceTagsContainer0.encode(requestipamresourcetag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let autoImport = autoImport {
            try container.encode(autoImport, forKey: ClientRuntime.Key("AutoImport"))
        }
        if let awsService = awsService {
            try container.encode(awsService, forKey: ClientRuntime.Key("AwsService"))
        }
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: ClientRuntime.Key("ClientToken"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let ipamScopeId = ipamScopeId {
            try container.encode(ipamScopeId, forKey: ClientRuntime.Key("IpamScopeId"))
        }
        if let locale = locale {
            try container.encode(locale, forKey: ClientRuntime.Key("Locale"))
        }
        if let publiclyAdvertisable = publiclyAdvertisable {
            try container.encode(publiclyAdvertisable, forKey: ClientRuntime.Key("PubliclyAdvertisable"))
        }
        if let sourceIpamPoolId = sourceIpamPoolId {
            try container.encode(sourceIpamPoolId, forKey: ClientRuntime.Key("SourceIpamPoolId"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        try container.encode("CreateIpamPool", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
