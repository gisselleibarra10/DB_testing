// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateVpnConnectionInputBody: Swift.Equatable {
    let customerGatewayId: Swift.String?
    let type: Swift.String?
    let vpnGatewayId: Swift.String?
    let transitGatewayId: Swift.String?
    let dryRun: Swift.Bool?
    let options: Ec2ClientTypes.VpnConnectionOptionsSpecification?
    let tagSpecifications: [Ec2ClientTypes.TagSpecification]?
}

extension CreateVpnConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerGatewayId = "CustomerGatewayId"
        case dryRun = "dryRun"
        case options = "options"
        case tagSpecifications = "TagSpecification"
        case transitGatewayId = "TransitGatewayId"
        case type = "Type"
        case vpnGatewayId = "VpnGatewayId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customerGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerGatewayId)
        customerGatewayId = customerGatewayIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let vpnGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpnGatewayId)
        vpnGatewayId = vpnGatewayIdDecoded
        let transitGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayId)
        transitGatewayId = transitGatewayIdDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.VpnConnectionOptionsSpecification.self, forKey: .options)
        options = optionsDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[Ec2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [Ec2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
    }
}
