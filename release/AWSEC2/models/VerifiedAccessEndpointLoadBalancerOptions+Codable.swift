// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.VerifiedAccessEndpointLoadBalancerOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerArn = "loadBalancerArn"
        case port = "port"
        case `protocol` = "protocol"
        case subnetIds = "subnetIdSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let loadBalancerArn = loadBalancerArn {
            try container.encode(loadBalancerArn, forKey: ClientRuntime.Key("LoadBalancerArn"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: ClientRuntime.Key("Protocol"))
        }
        if let subnetIds = subnetIds {
            if !subnetIds.isEmpty {
                for (index0, subnetid0) in subnetIds.enumerated() {
                    var subnetIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetIdSet.\(index0.advanced(by: 1))"))
                    try subnetIdsContainer0.encode(subnetid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var subnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetIdSet"))
                try subnetIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protocolDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.VerifiedAccessEndpointProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let loadBalancerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerArn)
        loadBalancerArn = loadBalancerArnDecoded
        if containerValues.contains(.subnetIds) {
            struct KeyVal0{struct item{}}
            let subnetIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .subnetIds)
            if let subnetIdsWrappedContainer = subnetIdsWrappedContainer {
                let subnetIdsContainer = try subnetIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var subnetIdsBuffer:[Swift.String]? = nil
                if let subnetIdsContainer = subnetIdsContainer {
                    subnetIdsBuffer = [Swift.String]()
                    for stringContainer0 in subnetIdsContainer {
                        subnetIdsBuffer?.append(stringContainer0)
                    }
                }
                subnetIds = subnetIdsBuffer
            } else {
                subnetIds = []
            }
        } else {
            subnetIds = nil
        }
    }
}
