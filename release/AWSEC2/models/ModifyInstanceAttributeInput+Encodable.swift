// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModifyInstanceAttributeInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attribute = attribute {
            try container.encode(attribute, forKey: ClientRuntime.Key("Attribute"))
        }
        if let blockDeviceMappings = blockDeviceMappings {
            if !blockDeviceMappings.isEmpty {
                for (index0, instanceblockdevicemappingspecification0) in blockDeviceMappings.enumerated() {
                    var blockDeviceMappingsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BlockDeviceMapping.\(index0.advanced(by: 1))"))
                    try blockDeviceMappingsContainer0.encode(instanceblockdevicemappingspecification0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let disableApiStop = disableApiStop {
            try container.encode(disableApiStop, forKey: ClientRuntime.Key("DisableApiStop"))
        }
        if let disableApiTermination = disableApiTermination {
            try container.encode(disableApiTermination, forKey: ClientRuntime.Key("DisableApiTermination"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let ebsOptimized = ebsOptimized {
            try container.encode(ebsOptimized, forKey: ClientRuntime.Key("EbsOptimized"))
        }
        if let enaSupport = enaSupport {
            try container.encode(enaSupport, forKey: ClientRuntime.Key("EnaSupport"))
        }
        if let groups = groups {
            if !groups.isEmpty {
                for (index0, securitygroupid0) in groups.enumerated() {
                    var groupsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("GroupId.\(index0.advanced(by: 1))"))
                    try groupsContainer0.encode(securitygroupid0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior {
            try container.encode(instanceInitiatedShutdownBehavior, forKey: ClientRuntime.Key("InstanceInitiatedShutdownBehavior"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let kernel = kernel {
            try container.encode(kernel, forKey: ClientRuntime.Key("Kernel"))
        }
        if let ramdisk = ramdisk {
            try container.encode(ramdisk, forKey: ClientRuntime.Key("Ramdisk"))
        }
        if let sourceDestCheck = sourceDestCheck {
            try container.encode(sourceDestCheck, forKey: ClientRuntime.Key("SourceDestCheck"))
        }
        if let sriovNetSupport = sriovNetSupport {
            try container.encode(sriovNetSupport, forKey: ClientRuntime.Key("SriovNetSupport"))
        }
        if let userData = userData {
            try container.encode(userData, forKey: ClientRuntime.Key("UserData"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
        try container.encode("ModifyInstanceAttribute", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
