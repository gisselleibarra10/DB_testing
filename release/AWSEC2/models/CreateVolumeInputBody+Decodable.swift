// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateVolumeInputBody: Swift.Equatable {
    let availabilityZone: Swift.String?
    let encrypted: Swift.Bool?
    let iops: Swift.Int?
    let kmsKeyId: Swift.String?
    let outpostArn: Swift.String?
    let size: Swift.Int?
    let snapshotId: Swift.String?
    let volumeType: EC2ClientTypes.VolumeType?
    let dryRun: Swift.Bool?
    let tagSpecifications: [EC2ClientTypes.TagSpecification]?
    let multiAttachEnabled: Swift.Bool?
    let throughput: Swift.Int?
    let clientToken: Swift.String?
}

extension CreateVolumeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case clientToken = "ClientToken"
        case dryRun = "dryRun"
        case encrypted = "encrypted"
        case iops = "Iops"
        case kmsKeyId = "KmsKeyId"
        case multiAttachEnabled = "MultiAttachEnabled"
        case outpostArn = "OutpostArn"
        case size = "Size"
        case snapshotId = "SnapshotId"
        case tagSpecifications = "TagSpecification"
        case throughput = "Throughput"
        case volumeType = "VolumeType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let iopsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .iops)
        iops = iopsDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let outpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outpostArn)
        outpostArn = outpostArnDecoded
        let sizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let volumeTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.VolumeType.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[EC2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [EC2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let multiAttachEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .multiAttachEnabled)
        multiAttachEnabled = multiAttachEnabledDecoded
        let throughputDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughput)
        throughput = throughputDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
