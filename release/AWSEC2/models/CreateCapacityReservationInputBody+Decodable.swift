// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateCapacityReservationInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let instanceType: Swift.String?
    let instancePlatform: EC2ClientTypes.CapacityReservationInstancePlatform?
    let availabilityZone: Swift.String?
    let availabilityZoneId: Swift.String?
    let tenancy: EC2ClientTypes.CapacityReservationTenancy?
    let instanceCount: Swift.Int?
    let ebsOptimized: Swift.Bool?
    let ephemeralStorage: Swift.Bool?
    let endDate: ClientRuntime.Date?
    let endDateType: EC2ClientTypes.EndDateType?
    let instanceMatchCriteria: EC2ClientTypes.InstanceMatchCriteria?
    let tagSpecifications: [EC2ClientTypes.TagSpecification]?
    let dryRun: Swift.Bool?
    let outpostArn: Swift.String?
    let placementGroupArn: Swift.String?
}

extension CreateCapacityReservationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case availabilityZoneId = "AvailabilityZoneId"
        case clientToken = "ClientToken"
        case dryRun = "DryRun"
        case ebsOptimized = "EbsOptimized"
        case endDate = "EndDate"
        case endDateType = "EndDateType"
        case ephemeralStorage = "EphemeralStorage"
        case instanceCount = "InstanceCount"
        case instanceMatchCriteria = "InstanceMatchCriteria"
        case instancePlatform = "InstancePlatform"
        case instanceType = "InstanceType"
        case outpostArn = "OutpostArn"
        case placementGroupArn = "PlacementGroupArn"
        case tagSpecifications = "TagSpecifications"
        case tenancy = "Tenancy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instancePlatformDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.CapacityReservationInstancePlatform.self, forKey: .instancePlatform)
        instancePlatform = instancePlatformDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let availabilityZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZoneId)
        availabilityZoneId = availabilityZoneIdDecoded
        let tenancyDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.CapacityReservationTenancy.self, forKey: .tenancy)
        tenancy = tenancyDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
        let ephemeralStorageDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ephemeralStorage)
        ephemeralStorage = ephemeralStorageDecoded
        let endDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endDate)
        endDate = endDateDecoded
        let endDateTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.EndDateType.self, forKey: .endDateType)
        endDateType = endDateTypeDecoded
        let instanceMatchCriteriaDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.InstanceMatchCriteria.self, forKey: .instanceMatchCriteria)
        instanceMatchCriteria = instanceMatchCriteriaDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[EC2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [EC2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let outpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outpostArn)
        outpostArn = outpostArnDecoded
        let placementGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementGroupArn)
        placementGroupArn = placementGroupArnDecoded
    }
}
