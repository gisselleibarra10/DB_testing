// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateVpcEndpointServiceConfigurationInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let acceptanceRequired: Swift.Bool?
    let privateDnsName: Swift.String?
    let networkLoadBalancerArns: [Swift.String]?
    let gatewayLoadBalancerArns: [Swift.String]?
    let supportedIpAddressTypes: [Swift.String]?
    let clientToken: Swift.String?
    let tagSpecifications: [EC2ClientTypes.TagSpecification]?
}

extension CreateVpcEndpointServiceConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptanceRequired = "AcceptanceRequired"
        case clientToken = "ClientToken"
        case dryRun = "DryRun"
        case gatewayLoadBalancerArns = "GatewayLoadBalancerArn"
        case networkLoadBalancerArns = "NetworkLoadBalancerArn"
        case privateDnsName = "PrivateDnsName"
        case supportedIpAddressTypes = "SupportedIpAddressType"
        case tagSpecifications = "TagSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let acceptanceRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .acceptanceRequired)
        acceptanceRequired = acceptanceRequiredDecoded
        let privateDnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateDnsName)
        privateDnsName = privateDnsNameDecoded
        if containerValues.contains(.networkLoadBalancerArns) {
            struct KeyVal0{struct item{}}
            let networkLoadBalancerArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .networkLoadBalancerArns)
            if let networkLoadBalancerArnsWrappedContainer = networkLoadBalancerArnsWrappedContainer {
                let networkLoadBalancerArnsContainer = try networkLoadBalancerArnsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var networkLoadBalancerArnsBuffer:[Swift.String]? = nil
                if let networkLoadBalancerArnsContainer = networkLoadBalancerArnsContainer {
                    networkLoadBalancerArnsBuffer = [Swift.String]()
                    for stringContainer0 in networkLoadBalancerArnsContainer {
                        networkLoadBalancerArnsBuffer?.append(stringContainer0)
                    }
                }
                networkLoadBalancerArns = networkLoadBalancerArnsBuffer
            } else {
                networkLoadBalancerArns = []
            }
        } else {
            networkLoadBalancerArns = nil
        }
        if containerValues.contains(.gatewayLoadBalancerArns) {
            struct KeyVal0{struct item{}}
            let gatewayLoadBalancerArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .gatewayLoadBalancerArns)
            if let gatewayLoadBalancerArnsWrappedContainer = gatewayLoadBalancerArnsWrappedContainer {
                let gatewayLoadBalancerArnsContainer = try gatewayLoadBalancerArnsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var gatewayLoadBalancerArnsBuffer:[Swift.String]? = nil
                if let gatewayLoadBalancerArnsContainer = gatewayLoadBalancerArnsContainer {
                    gatewayLoadBalancerArnsBuffer = [Swift.String]()
                    for stringContainer0 in gatewayLoadBalancerArnsContainer {
                        gatewayLoadBalancerArnsBuffer?.append(stringContainer0)
                    }
                }
                gatewayLoadBalancerArns = gatewayLoadBalancerArnsBuffer
            } else {
                gatewayLoadBalancerArns = []
            }
        } else {
            gatewayLoadBalancerArns = nil
        }
        if containerValues.contains(.supportedIpAddressTypes) {
            struct KeyVal0{struct item{}}
            let supportedIpAddressTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .supportedIpAddressTypes)
            if let supportedIpAddressTypesWrappedContainer = supportedIpAddressTypesWrappedContainer {
                let supportedIpAddressTypesContainer = try supportedIpAddressTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var supportedIpAddressTypesBuffer:[Swift.String]? = nil
                if let supportedIpAddressTypesContainer = supportedIpAddressTypesContainer {
                    supportedIpAddressTypesBuffer = [Swift.String]()
                    for stringContainer0 in supportedIpAddressTypesContainer {
                        supportedIpAddressTypesBuffer?.append(stringContainer0)
                    }
                }
                supportedIpAddressTypes = supportedIpAddressTypesBuffer
            } else {
                supportedIpAddressTypes = []
            }
        } else {
            supportedIpAddressTypes = nil
        }
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[EC2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [EC2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
    }
}
