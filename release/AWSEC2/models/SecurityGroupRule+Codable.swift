// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.SecurityGroupRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrIpv4 = "cidrIpv4"
        case cidrIpv6 = "cidrIpv6"
        case description = "description"
        case fromPort = "fromPort"
        case groupId = "groupId"
        case groupOwnerId = "groupOwnerId"
        case ipProtocol = "ipProtocol"
        case isEgress = "isEgress"
        case prefixListId = "prefixListId"
        case referencedGroupInfo = "referencedGroupInfo"
        case securityGroupRuleId = "securityGroupRuleId"
        case tags = "tagSet"
        case toPort = "toPort"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidrIpv4 = cidrIpv4 {
            try container.encode(cidrIpv4, forKey: ClientRuntime.Key("CidrIpv4"))
        }
        if let cidrIpv6 = cidrIpv6 {
            try container.encode(cidrIpv6, forKey: ClientRuntime.Key("CidrIpv6"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let fromPort = fromPort {
            try container.encode(fromPort, forKey: ClientRuntime.Key("FromPort"))
        }
        if let groupId = groupId {
            try container.encode(groupId, forKey: ClientRuntime.Key("GroupId"))
        }
        if let groupOwnerId = groupOwnerId {
            try container.encode(groupOwnerId, forKey: ClientRuntime.Key("GroupOwnerId"))
        }
        if let ipProtocol = ipProtocol {
            try container.encode(ipProtocol, forKey: ClientRuntime.Key("IpProtocol"))
        }
        if let isEgress = isEgress {
            try container.encode(isEgress, forKey: ClientRuntime.Key("IsEgress"))
        }
        if let prefixListId = prefixListId {
            try container.encode(prefixListId, forKey: ClientRuntime.Key("PrefixListId"))
        }
        if let referencedGroupInfo = referencedGroupInfo {
            try container.encode(referencedGroupInfo, forKey: ClientRuntime.Key("ReferencedGroupInfo"))
        }
        if let securityGroupRuleId = securityGroupRuleId {
            try container.encode(securityGroupRuleId, forKey: ClientRuntime.Key("SecurityGroupRuleId"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let toPort = toPort {
            try container.encode(toPort, forKey: ClientRuntime.Key("ToPort"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityGroupRuleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityGroupRuleId)
        securityGroupRuleId = securityGroupRuleIdDecoded
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let groupOwnerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupOwnerId)
        groupOwnerId = groupOwnerIdDecoded
        let isEgressDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isEgress)
        isEgress = isEgressDecoded
        let ipProtocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipProtocol)
        ipProtocol = ipProtocolDecoded
        let fromPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fromPort)
        fromPort = fromPortDecoded
        let toPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .toPort)
        toPort = toPortDecoded
        let cidrIpv4Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidrIpv4)
        cidrIpv4 = cidrIpv4Decoded
        let cidrIpv6Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidrIpv6)
        cidrIpv6 = cidrIpv6Decoded
        let prefixListIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefixListId)
        prefixListId = prefixListIdDecoded
        let referencedGroupInfoDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ReferencedSecurityGroup.self, forKey: .referencedGroupInfo)
        referencedGroupInfo = referencedGroupInfoDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
