// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ExportTransitGatewayRoutesInputBody: Swift.Equatable {
    let transitGatewayRouteTableId: Swift.String?
    let filters: [EC2ClientTypes.Filter]?
    let s3Bucket: Swift.String?
    let dryRun: Swift.Bool?
}

extension ExportTransitGatewayRoutesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case filters = "Filter"
        case s3Bucket = "S3Bucket"
        case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transitGatewayRouteTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayRouteTableId)
        transitGatewayRouteTableId = transitGatewayRouteTableIdDecoded
        if containerValues.contains(.filters) {
            struct KeyVal0{struct Filter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Filter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([EC2ClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[EC2ClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [EC2ClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
