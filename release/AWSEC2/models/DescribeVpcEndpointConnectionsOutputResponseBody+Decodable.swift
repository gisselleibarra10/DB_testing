// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVpcEndpointConnectionsOutputResponseBody: Swift.Equatable {
    let vpcEndpointConnections: [EC2ClientTypes.VpcEndpointConnection]?
    let nextToken: Swift.String?
}

extension DescribeVpcEndpointConnectionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case vpcEndpointConnections = "vpcEndpointConnectionSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.vpcEndpointConnections) {
            struct KeyVal0{struct item{}}
            let vpcEndpointConnectionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .vpcEndpointConnections)
            if let vpcEndpointConnectionsWrappedContainer = vpcEndpointConnectionsWrappedContainer {
                let vpcEndpointConnectionsContainer = try vpcEndpointConnectionsWrappedContainer.decodeIfPresent([EC2ClientTypes.VpcEndpointConnection].self, forKey: .member)
                var vpcEndpointConnectionsBuffer:[EC2ClientTypes.VpcEndpointConnection]? = nil
                if let vpcEndpointConnectionsContainer = vpcEndpointConnectionsContainer {
                    vpcEndpointConnectionsBuffer = [EC2ClientTypes.VpcEndpointConnection]()
                    for structureContainer0 in vpcEndpointConnectionsContainer {
                        vpcEndpointConnectionsBuffer?.append(structureContainer0)
                    }
                }
                vpcEndpointConnections = vpcEndpointConnectionsBuffer
            } else {
                vpcEndpointConnections = []
            }
        } else {
            vpcEndpointConnections = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
