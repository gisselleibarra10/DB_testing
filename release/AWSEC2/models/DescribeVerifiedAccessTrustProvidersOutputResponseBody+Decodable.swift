// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVerifiedAccessTrustProvidersOutputResponseBody: Swift.Equatable {
    let verifiedAccessTrustProviders: [EC2ClientTypes.VerifiedAccessTrustProvider]?
    let nextToken: Swift.String?
}

extension DescribeVerifiedAccessTrustProvidersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case verifiedAccessTrustProviders = "verifiedAccessTrustProviderSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.verifiedAccessTrustProviders) {
            struct KeyVal0{struct item{}}
            let verifiedAccessTrustProvidersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .verifiedAccessTrustProviders)
            if let verifiedAccessTrustProvidersWrappedContainer = verifiedAccessTrustProvidersWrappedContainer {
                let verifiedAccessTrustProvidersContainer = try verifiedAccessTrustProvidersWrappedContainer.decodeIfPresent([EC2ClientTypes.VerifiedAccessTrustProvider].self, forKey: .member)
                var verifiedAccessTrustProvidersBuffer:[EC2ClientTypes.VerifiedAccessTrustProvider]? = nil
                if let verifiedAccessTrustProvidersContainer = verifiedAccessTrustProvidersContainer {
                    verifiedAccessTrustProvidersBuffer = [EC2ClientTypes.VerifiedAccessTrustProvider]()
                    for structureContainer0 in verifiedAccessTrustProvidersContainer {
                        verifiedAccessTrustProvidersBuffer?.append(structureContainer0)
                    }
                }
                verifiedAccessTrustProviders = verifiedAccessTrustProvidersBuffer
            } else {
                verifiedAccessTrustProviders = []
            }
        } else {
            verifiedAccessTrustProviders = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
