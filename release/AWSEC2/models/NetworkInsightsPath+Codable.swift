// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.NetworkInsightsPath: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDate = "createdDate"
        case destination = "destination"
        case destinationIp = "destinationIp"
        case destinationPort = "destinationPort"
        case networkInsightsPathArn = "networkInsightsPathArn"
        case networkInsightsPathId = "networkInsightsPathId"
        case `protocol` = "protocol"
        case source = "source"
        case sourceIp = "sourceIp"
        case tags = "tagSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createdDate = createdDate {
            try container.encode(ClientRuntime.TimestampWrapper(createdDate, format: .dateTime), forKey: ClientRuntime.Key("CreatedDate"))
        }
        if let destination = destination {
            try container.encode(destination, forKey: ClientRuntime.Key("Destination"))
        }
        if let destinationIp = destinationIp {
            try container.encode(destinationIp, forKey: ClientRuntime.Key("DestinationIp"))
        }
        if let destinationPort = destinationPort {
            try container.encode(destinationPort, forKey: ClientRuntime.Key("DestinationPort"))
        }
        if let networkInsightsPathArn = networkInsightsPathArn {
            try container.encode(networkInsightsPathArn, forKey: ClientRuntime.Key("NetworkInsightsPathArn"))
        }
        if let networkInsightsPathId = networkInsightsPathId {
            try container.encode(networkInsightsPathId, forKey: ClientRuntime.Key("NetworkInsightsPathId"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: ClientRuntime.Key("Protocol"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let sourceIp = sourceIp {
            try container.encode(sourceIp, forKey: ClientRuntime.Key("SourceIp"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkInsightsPathIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInsightsPathId)
        networkInsightsPathId = networkInsightsPathIdDecoded
        let networkInsightsPathArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInsightsPathArn)
        networkInsightsPathArn = networkInsightsPathArnDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdDate)
        var createdDateBuffer:ClientRuntime.Date? = nil
        if let createdDateDecoded = createdDateDecoded {
            createdDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createdDateDecoded, format: .dateTime)
        }
        createdDate = createdDateBuffer
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let sourceIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceIp)
        sourceIp = sourceIpDecoded
        let destinationIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationIp)
        destinationIp = destinationIpDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.ModelProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let destinationPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .destinationPort)
        destinationPort = destinationPortDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
