// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTransitGatewaysOutputResponseBody: Swift.Equatable {
    let transitGateways: [Ec2ClientTypes.TransitGateway]?
    let nextToken: Swift.String?
}

extension DescribeTransitGatewaysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case transitGateways = "transitGatewaySet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.transitGateways) {
            struct KeyVal0{struct item{}}
            let transitGatewaysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .transitGateways)
            if let transitGatewaysWrappedContainer = transitGatewaysWrappedContainer {
                let transitGatewaysContainer = try transitGatewaysWrappedContainer.decodeIfPresent([Ec2ClientTypes.TransitGateway].self, forKey: .member)
                var transitGatewaysBuffer:[Ec2ClientTypes.TransitGateway]? = nil
                if let transitGatewaysContainer = transitGatewaysContainer {
                    transitGatewaysBuffer = [Ec2ClientTypes.TransitGateway]()
                    for structureContainer0 in transitGatewaysContainer {
                        transitGatewaysBuffer?.append(structureContainer0)
                    }
                }
                transitGateways = transitGatewaysBuffer
            } else {
                transitGateways = []
            }
        } else {
            transitGateways = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
