// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetVpnConnectionDeviceTypesOutputResponseBody: Swift.Equatable {
    let vpnConnectionDeviceTypes: [EC2ClientTypes.VpnConnectionDeviceType]?
    let nextToken: Swift.String?
}

extension GetVpnConnectionDeviceTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case vpnConnectionDeviceTypes = "vpnConnectionDeviceTypeSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.vpnConnectionDeviceTypes) {
            struct KeyVal0{struct item{}}
            let vpnConnectionDeviceTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .vpnConnectionDeviceTypes)
            if let vpnConnectionDeviceTypesWrappedContainer = vpnConnectionDeviceTypesWrappedContainer {
                let vpnConnectionDeviceTypesContainer = try vpnConnectionDeviceTypesWrappedContainer.decodeIfPresent([EC2ClientTypes.VpnConnectionDeviceType].self, forKey: .member)
                var vpnConnectionDeviceTypesBuffer:[EC2ClientTypes.VpnConnectionDeviceType]? = nil
                if let vpnConnectionDeviceTypesContainer = vpnConnectionDeviceTypesContainer {
                    vpnConnectionDeviceTypesBuffer = [EC2ClientTypes.VpnConnectionDeviceType]()
                    for structureContainer0 in vpnConnectionDeviceTypesContainer {
                        vpnConnectionDeviceTypesBuffer?.append(structureContainer0)
                    }
                }
                vpnConnectionDeviceTypes = vpnConnectionDeviceTypesBuffer
            } else {
                vpnConnectionDeviceTypes = []
            }
        } else {
            vpnConnectionDeviceTypes = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
