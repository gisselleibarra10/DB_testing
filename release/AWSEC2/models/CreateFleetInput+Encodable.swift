// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateFleetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: ClientRuntime.Key("ClientToken"))
        }
        if let context = context {
            try container.encode(context, forKey: ClientRuntime.Key("Context"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let excessCapacityTerminationPolicy = excessCapacityTerminationPolicy {
            try container.encode(excessCapacityTerminationPolicy, forKey: ClientRuntime.Key("ExcessCapacityTerminationPolicy"))
        }
        if let launchTemplateConfigs = launchTemplateConfigs {
            if !launchTemplateConfigs.isEmpty {
                for (index0, fleetlaunchtemplateconfigrequest0) in launchTemplateConfigs.enumerated() {
                    var launchTemplateConfigsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LaunchTemplateConfigs.\(index0.advanced(by: 1))"))
                    try launchTemplateConfigsContainer0.encode(fleetlaunchtemplateconfigrequest0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var launchTemplateConfigsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LaunchTemplateConfigs"))
                try launchTemplateConfigsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let onDemandOptions = onDemandOptions {
            try container.encode(onDemandOptions, forKey: ClientRuntime.Key("OnDemandOptions"))
        }
        if let replaceUnhealthyInstances = replaceUnhealthyInstances {
            try container.encode(replaceUnhealthyInstances, forKey: ClientRuntime.Key("ReplaceUnhealthyInstances"))
        }
        if let spotOptions = spotOptions {
            try container.encode(spotOptions, forKey: ClientRuntime.Key("SpotOptions"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagSpecificationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification"))
                try tagSpecificationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetCapacitySpecification = targetCapacitySpecification {
            try container.encode(targetCapacitySpecification, forKey: ClientRuntime.Key("TargetCapacitySpecification"))
        }
        if let terminateInstancesWithExpiration = terminateInstancesWithExpiration {
            try container.encode(terminateInstancesWithExpiration, forKey: ClientRuntime.Key("TerminateInstancesWithExpiration"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let validFrom = validFrom {
            try container.encodeTimestamp(validFrom, format: .dateTime, forKey: ClientRuntime.Key("ValidFrom"))
        }
        if let validUntil = validUntil {
            try container.encodeTimestamp(validUntil, format: .dateTime, forKey: ClientRuntime.Key("ValidUntil"))
        }
        try container.encode("CreateFleet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
