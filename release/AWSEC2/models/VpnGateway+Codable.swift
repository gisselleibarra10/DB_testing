// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.VpnGateway: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amazonSideAsn = "amazonSideAsn"
        case availabilityZone = "availabilityZone"
        case state = "state"
        case tags = "tagSet"
        case type = "type"
        case vpcAttachments = "attachments"
        case vpnGatewayId = "vpnGatewayId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let amazonSideAsn = amazonSideAsn {
            try container.encode(amazonSideAsn, forKey: ClientRuntime.Key("AmazonSideAsn"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let vpcAttachments = vpcAttachments {
            if !vpcAttachments.isEmpty {
                for (index0, vpcattachment0) in vpcAttachments.enumerated() {
                    var vpcAttachmentsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Attachments.\(index0.advanced(by: 1))"))
                    try vpcAttachmentsContainer0.encode(vpcattachment0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let vpnGatewayId = vpnGatewayId {
            try container.encode(vpnGatewayId, forKey: ClientRuntime.Key("VpnGatewayId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.VpnState.self, forKey: .state)
        state = stateDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.GatewayType.self, forKey: .type)
        type = typeDecoded
        if containerValues.contains(.vpcAttachments) {
            struct KeyVal0{struct item{}}
            let vpcAttachmentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .vpcAttachments)
            if let vpcAttachmentsWrappedContainer = vpcAttachmentsWrappedContainer {
                let vpcAttachmentsContainer = try vpcAttachmentsWrappedContainer.decodeIfPresent([Ec2ClientTypes.VpcAttachment].self, forKey: .member)
                var vpcAttachmentsBuffer:[Ec2ClientTypes.VpcAttachment]? = nil
                if let vpcAttachmentsContainer = vpcAttachmentsContainer {
                    vpcAttachmentsBuffer = [Ec2ClientTypes.VpcAttachment]()
                    for structureContainer0 in vpcAttachmentsContainer {
                        vpcAttachmentsBuffer?.append(structureContainer0)
                    }
                }
                vpcAttachments = vpcAttachmentsBuffer
            } else {
                vpcAttachments = []
            }
        } else {
            vpcAttachments = nil
        }
        let vpnGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpnGatewayId)
        vpnGatewayId = vpnGatewayIdDecoded
        let amazonSideAsnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amazonSideAsn)
        amazonSideAsn = amazonSideAsnDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
