// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.TransitGatewayMulticastDomainAssociations: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "resourceId"
        case resourceOwnerId = "resourceOwnerId"
        case resourceType = "resourceType"
        case subnets = "subnets"
        case transitGatewayAttachmentId = "transitGatewayAttachmentId"
        case transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceId = resourceId {
            try container.encode(resourceId, forKey: ClientRuntime.Key("ResourceId"))
        }
        if let resourceOwnerId = resourceOwnerId {
            try container.encode(resourceOwnerId, forKey: ClientRuntime.Key("ResourceOwnerId"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let subnets = subnets {
            if !subnets.isEmpty {
                for (index0, subnetassociation0) in subnets.enumerated() {
                    var subnetsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Subnets.\(index0.advanced(by: 1))"))
                    try subnetsContainer0.encode(subnetassociation0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let transitGatewayAttachmentId = transitGatewayAttachmentId {
            try container.encode(transitGatewayAttachmentId, forKey: ClientRuntime.Key("TransitGatewayAttachmentId"))
        }
        if let transitGatewayMulticastDomainId = transitGatewayMulticastDomainId {
            try container.encode(transitGatewayMulticastDomainId, forKey: ClientRuntime.Key("TransitGatewayMulticastDomainId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transitGatewayMulticastDomainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayMulticastDomainId)
        transitGatewayMulticastDomainId = transitGatewayMulticastDomainIdDecoded
        let transitGatewayAttachmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayAttachmentId)
        transitGatewayAttachmentId = transitGatewayAttachmentIdDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.TransitGatewayAttachmentResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceOwnerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwnerId)
        resourceOwnerId = resourceOwnerIdDecoded
        if containerValues.contains(.subnets) {
            struct KeyVal0{struct item{}}
            let subnetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .subnets)
            if let subnetsWrappedContainer = subnetsWrappedContainer {
                let subnetsContainer = try subnetsWrappedContainer.decodeIfPresent([Ec2ClientTypes.SubnetAssociation].self, forKey: .member)
                var subnetsBuffer:[Ec2ClientTypes.SubnetAssociation]? = nil
                if let subnetsContainer = subnetsContainer {
                    subnetsBuffer = [Ec2ClientTypes.SubnetAssociation]()
                    for structureContainer0 in subnetsContainer {
                        subnetsBuffer?.append(structureContainer0)
                    }
                }
                subnets = subnetsBuffer
            } else {
                subnets = []
            }
        } else {
            subnets = nil
        }
    }
}
