// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.TrafficMirrorSession: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "description"
        case networkInterfaceId = "networkInterfaceId"
        case ownerId = "ownerId"
        case packetLength = "packetLength"
        case sessionNumber = "sessionNumber"
        case tags = "tagSet"
        case trafficMirrorFilterId = "trafficMirrorFilterId"
        case trafficMirrorSessionId = "trafficMirrorSessionId"
        case trafficMirrorTargetId = "trafficMirrorTargetId"
        case virtualNetworkId = "virtualNetworkId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let networkInterfaceId = networkInterfaceId {
            try container.encode(networkInterfaceId, forKey: ClientRuntime.Key("NetworkInterfaceId"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: ClientRuntime.Key("OwnerId"))
        }
        if let packetLength = packetLength {
            try container.encode(packetLength, forKey: ClientRuntime.Key("PacketLength"))
        }
        if let sessionNumber = sessionNumber {
            try container.encode(sessionNumber, forKey: ClientRuntime.Key("SessionNumber"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let trafficMirrorFilterId = trafficMirrorFilterId {
            try container.encode(trafficMirrorFilterId, forKey: ClientRuntime.Key("TrafficMirrorFilterId"))
        }
        if let trafficMirrorSessionId = trafficMirrorSessionId {
            try container.encode(trafficMirrorSessionId, forKey: ClientRuntime.Key("TrafficMirrorSessionId"))
        }
        if let trafficMirrorTargetId = trafficMirrorTargetId {
            try container.encode(trafficMirrorTargetId, forKey: ClientRuntime.Key("TrafficMirrorTargetId"))
        }
        if let virtualNetworkId = virtualNetworkId {
            try container.encode(virtualNetworkId, forKey: ClientRuntime.Key("VirtualNetworkId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficMirrorSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficMirrorSessionId)
        trafficMirrorSessionId = trafficMirrorSessionIdDecoded
        let trafficMirrorTargetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficMirrorTargetId)
        trafficMirrorTargetId = trafficMirrorTargetIdDecoded
        let trafficMirrorFilterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficMirrorFilterId)
        trafficMirrorFilterId = trafficMirrorFilterIdDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let packetLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .packetLength)
        packetLength = packetLengthDecoded
        let sessionNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionNumber)
        sessionNumber = sessionNumberDecoded
        let virtualNetworkIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .virtualNetworkId)
        virtualNetworkId = virtualNetworkIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
