// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVolumeStatusOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let volumeStatuses: [EC2ClientTypes.VolumeStatusItem]?
}

extension DescribeVolumeStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case volumeStatuses = "volumeStatusSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.volumeStatuses) {
            struct KeyVal0{struct item{}}
            let volumeStatusesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .volumeStatuses)
            if let volumeStatusesWrappedContainer = volumeStatusesWrappedContainer {
                let volumeStatusesContainer = try volumeStatusesWrappedContainer.decodeIfPresent([EC2ClientTypes.VolumeStatusItem].self, forKey: .member)
                var volumeStatusesBuffer:[EC2ClientTypes.VolumeStatusItem]? = nil
                if let volumeStatusesContainer = volumeStatusesContainer {
                    volumeStatusesBuffer = [EC2ClientTypes.VolumeStatusItem]()
                    for structureContainer0 in volumeStatusesContainer {
                        volumeStatusesBuffer?.append(structureContainer0)
                    }
                }
                volumeStatuses = volumeStatusesBuffer
            } else {
                volumeStatuses = []
            }
        } else {
            volumeStatuses = nil
        }
    }
}
