// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.DescribeFastSnapshotRestoreSuccessItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "availabilityZone"
        case disabledTime = "disabledTime"
        case disablingTime = "disablingTime"
        case enabledTime = "enabledTime"
        case enablingTime = "enablingTime"
        case optimizingTime = "optimizingTime"
        case ownerAlias = "ownerAlias"
        case ownerId = "ownerId"
        case snapshotId = "snapshotId"
        case state = "state"
        case stateTransitionReason = "stateTransitionReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let disabledTime = disabledTime {
            try container.encode(ClientRuntime.TimestampWrapper(disabledTime, format: .dateTime), forKey: ClientRuntime.Key("DisabledTime"))
        }
        if let disablingTime = disablingTime {
            try container.encode(ClientRuntime.TimestampWrapper(disablingTime, format: .dateTime), forKey: ClientRuntime.Key("DisablingTime"))
        }
        if let enabledTime = enabledTime {
            try container.encode(ClientRuntime.TimestampWrapper(enabledTime, format: .dateTime), forKey: ClientRuntime.Key("EnabledTime"))
        }
        if let enablingTime = enablingTime {
            try container.encode(ClientRuntime.TimestampWrapper(enablingTime, format: .dateTime), forKey: ClientRuntime.Key("EnablingTime"))
        }
        if let optimizingTime = optimizingTime {
            try container.encode(ClientRuntime.TimestampWrapper(optimizingTime, format: .dateTime), forKey: ClientRuntime.Key("OptimizingTime"))
        }
        if let ownerAlias = ownerAlias {
            try container.encode(ownerAlias, forKey: ClientRuntime.Key("OwnerAlias"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: ClientRuntime.Key("OwnerId"))
        }
        if let snapshotId = snapshotId {
            try container.encode(snapshotId, forKey: ClientRuntime.Key("SnapshotId"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let stateTransitionReason = stateTransitionReason {
            try container.encode(stateTransitionReason, forKey: ClientRuntime.Key("StateTransitionReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.FastSnapshotRestoreStateCode.self, forKey: .state)
        state = stateDecoded
        let stateTransitionReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateTransitionReason)
        stateTransitionReason = stateTransitionReasonDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let ownerAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAlias)
        ownerAlias = ownerAliasDecoded
        let enablingTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .enablingTime)
        var enablingTimeBuffer:ClientRuntime.Date? = nil
        if let enablingTimeDecoded = enablingTimeDecoded {
            enablingTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(enablingTimeDecoded, format: .dateTime)
        }
        enablingTime = enablingTimeBuffer
        let optimizingTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optimizingTime)
        var optimizingTimeBuffer:ClientRuntime.Date? = nil
        if let optimizingTimeDecoded = optimizingTimeDecoded {
            optimizingTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(optimizingTimeDecoded, format: .dateTime)
        }
        optimizingTime = optimizingTimeBuffer
        let enabledTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .enabledTime)
        var enabledTimeBuffer:ClientRuntime.Date? = nil
        if let enabledTimeDecoded = enabledTimeDecoded {
            enabledTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(enabledTimeDecoded, format: .dateTime)
        }
        enabledTime = enabledTimeBuffer
        let disablingTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .disablingTime)
        var disablingTimeBuffer:ClientRuntime.Date? = nil
        if let disablingTimeDecoded = disablingTimeDecoded {
            disablingTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(disablingTimeDecoded, format: .dateTime)
        }
        disablingTime = disablingTimeBuffer
        let disabledTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .disabledTime)
        var disabledTimeBuffer:ClientRuntime.Date? = nil
        if let disabledTimeDecoded = disabledTimeDecoded {
            disabledTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(disabledTimeDecoded, format: .dateTime)
        }
        disabledTime = disabledTimeBuffer
    }
}
