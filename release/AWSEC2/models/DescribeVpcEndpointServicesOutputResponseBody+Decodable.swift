// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVpcEndpointServicesOutputResponseBody: Swift.Equatable {
    let serviceNames: [Swift.String]?
    let serviceDetails: [Ec2ClientTypes.ServiceDetail]?
    let nextToken: Swift.String?
}

extension DescribeVpcEndpointServicesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case serviceDetails = "serviceDetailSet"
        case serviceNames = "serviceNameSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.serviceNames) {
            struct KeyVal0{struct item{}}
            let serviceNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .serviceNames)
            if let serviceNamesWrappedContainer = serviceNamesWrappedContainer {
                let serviceNamesContainer = try serviceNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var serviceNamesBuffer:[Swift.String]? = nil
                if let serviceNamesContainer = serviceNamesContainer {
                    serviceNamesBuffer = [Swift.String]()
                    for stringContainer0 in serviceNamesContainer {
                        serviceNamesBuffer?.append(stringContainer0)
                    }
                }
                serviceNames = serviceNamesBuffer
            } else {
                serviceNames = []
            }
        } else {
            serviceNames = nil
        }
        if containerValues.contains(.serviceDetails) {
            struct KeyVal0{struct item{}}
            let serviceDetailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .serviceDetails)
            if let serviceDetailsWrappedContainer = serviceDetailsWrappedContainer {
                let serviceDetailsContainer = try serviceDetailsWrappedContainer.decodeIfPresent([Ec2ClientTypes.ServiceDetail].self, forKey: .member)
                var serviceDetailsBuffer:[Ec2ClientTypes.ServiceDetail]? = nil
                if let serviceDetailsContainer = serviceDetailsContainer {
                    serviceDetailsBuffer = [Ec2ClientTypes.ServiceDetail]()
                    for structureContainer0 in serviceDetailsContainer {
                        serviceDetailsBuffer?.append(structureContainer0)
                    }
                }
                serviceDetails = serviceDetailsBuffer
            } else {
                serviceDetails = []
            }
        } else {
            serviceDetails = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
