// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.AccessScopeAnalysisFinding: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case findingComponents = "findingComponentSet"
        case findingId = "findingId"
        case networkInsightsAccessScopeAnalysisId = "networkInsightsAccessScopeAnalysisId"
        case networkInsightsAccessScopeId = "networkInsightsAccessScopeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let findingComponents = findingComponents {
            if !findingComponents.isEmpty {
                for (index0, pathcomponent0) in findingComponents.enumerated() {
                    var findingComponentsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("FindingComponentSet.\(index0.advanced(by: 1))"))
                    try findingComponentsContainer0.encode(pathcomponent0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let findingId = findingId {
            try container.encode(findingId, forKey: ClientRuntime.Key("FindingId"))
        }
        if let networkInsightsAccessScopeAnalysisId = networkInsightsAccessScopeAnalysisId {
            try container.encode(networkInsightsAccessScopeAnalysisId, forKey: ClientRuntime.Key("NetworkInsightsAccessScopeAnalysisId"))
        }
        if let networkInsightsAccessScopeId = networkInsightsAccessScopeId {
            try container.encode(networkInsightsAccessScopeId, forKey: ClientRuntime.Key("NetworkInsightsAccessScopeId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkInsightsAccessScopeAnalysisIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInsightsAccessScopeAnalysisId)
        networkInsightsAccessScopeAnalysisId = networkInsightsAccessScopeAnalysisIdDecoded
        let networkInsightsAccessScopeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInsightsAccessScopeId)
        networkInsightsAccessScopeId = networkInsightsAccessScopeIdDecoded
        let findingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .findingId)
        findingId = findingIdDecoded
        if containerValues.contains(.findingComponents) {
            struct KeyVal0{struct item{}}
            let findingComponentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .findingComponents)
            if let findingComponentsWrappedContainer = findingComponentsWrappedContainer {
                let findingComponentsContainer = try findingComponentsWrappedContainer.decodeIfPresent([Ec2ClientTypes.PathComponent].self, forKey: .member)
                var findingComponentsBuffer:[Ec2ClientTypes.PathComponent]? = nil
                if let findingComponentsContainer = findingComponentsContainer {
                    findingComponentsBuffer = [Ec2ClientTypes.PathComponent]()
                    for structureContainer0 in findingComponentsContainer {
                        findingComponentsBuffer?.append(structureContainer0)
                    }
                }
                findingComponents = findingComponentsBuffer
            } else {
                findingComponents = []
            }
        } else {
            findingComponents = nil
        }
    }
}
