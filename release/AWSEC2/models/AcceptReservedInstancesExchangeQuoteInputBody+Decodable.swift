// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AcceptReservedInstancesExchangeQuoteInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let reservedInstanceIds: [Swift.String]?
    let targetConfigurations: [Ec2ClientTypes.TargetConfigurationRequest]?
}

extension AcceptReservedInstancesExchangeQuoteInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case reservedInstanceIds = "ReservedInstanceId"
        case targetConfigurations = "TargetConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.reservedInstanceIds) {
            struct KeyVal0{struct ReservedInstanceId{}}
            let reservedInstanceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedInstanceId>.CodingKeys.self, forKey: .reservedInstanceIds)
            if let reservedInstanceIdsWrappedContainer = reservedInstanceIdsWrappedContainer {
                let reservedInstanceIdsContainer = try reservedInstanceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var reservedInstanceIdsBuffer:[Swift.String]? = nil
                if let reservedInstanceIdsContainer = reservedInstanceIdsContainer {
                    reservedInstanceIdsBuffer = [Swift.String]()
                    for stringContainer0 in reservedInstanceIdsContainer {
                        reservedInstanceIdsBuffer?.append(stringContainer0)
                    }
                }
                reservedInstanceIds = reservedInstanceIdsBuffer
            } else {
                reservedInstanceIds = []
            }
        } else {
            reservedInstanceIds = nil
        }
        if containerValues.contains(.targetConfigurations) {
            struct KeyVal0{struct TargetConfigurationRequest{}}
            let targetConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TargetConfigurationRequest>.CodingKeys.self, forKey: .targetConfigurations)
            if let targetConfigurationsWrappedContainer = targetConfigurationsWrappedContainer {
                let targetConfigurationsContainer = try targetConfigurationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TargetConfigurationRequest].self, forKey: .member)
                var targetConfigurationsBuffer:[Ec2ClientTypes.TargetConfigurationRequest]? = nil
                if let targetConfigurationsContainer = targetConfigurationsContainer {
                    targetConfigurationsBuffer = [Ec2ClientTypes.TargetConfigurationRequest]()
                    for structureContainer0 in targetConfigurationsContainer {
                        targetConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                targetConfigurations = targetConfigurationsBuffer
            } else {
                targetConfigurations = []
            }
        } else {
            targetConfigurations = nil
        }
    }
}
