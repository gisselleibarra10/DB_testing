// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.NetworkInsightsAccessScope: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDate = "createdDate"
        case networkInsightsAccessScopeArn = "networkInsightsAccessScopeArn"
        case networkInsightsAccessScopeId = "networkInsightsAccessScopeId"
        case tags = "tagSet"
        case updatedDate = "updatedDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createdDate = createdDate {
            try container.encodeTimestamp(createdDate, format: .dateTime, forKey: ClientRuntime.Key("CreatedDate"))
        }
        if let networkInsightsAccessScopeArn = networkInsightsAccessScopeArn {
            try container.encode(networkInsightsAccessScopeArn, forKey: ClientRuntime.Key("NetworkInsightsAccessScopeArn"))
        }
        if let networkInsightsAccessScopeId = networkInsightsAccessScopeId {
            try container.encode(networkInsightsAccessScopeId, forKey: ClientRuntime.Key("NetworkInsightsAccessScopeId"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let updatedDate = updatedDate {
            try container.encodeTimestamp(updatedDate, format: .dateTime, forKey: ClientRuntime.Key("UpdatedDate"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkInsightsAccessScopeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInsightsAccessScopeId)
        networkInsightsAccessScopeId = networkInsightsAccessScopeIdDecoded
        let networkInsightsAccessScopeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInsightsAccessScopeArn)
        networkInsightsAccessScopeArn = networkInsightsAccessScopeArnDecoded
        let createdDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .createdDate)
        createdDate = createdDateDecoded
        let updatedDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .updatedDate)
        updatedDate = updatedDateDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
