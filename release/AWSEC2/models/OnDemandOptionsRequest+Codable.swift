// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.OnDemandOptionsRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationStrategy = "AllocationStrategy"
        case capacityReservationOptions = "CapacityReservationOptions"
        case maxTotalPrice = "MaxTotalPrice"
        case minTargetCapacity = "MinTargetCapacity"
        case singleAvailabilityZone = "SingleAvailabilityZone"
        case singleInstanceType = "SingleInstanceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocationStrategy = allocationStrategy {
            try container.encode(allocationStrategy, forKey: ClientRuntime.Key("AllocationStrategy"))
        }
        if let capacityReservationOptions = capacityReservationOptions {
            try container.encode(capacityReservationOptions, forKey: ClientRuntime.Key("CapacityReservationOptions"))
        }
        if let maxTotalPrice = maxTotalPrice {
            try container.encode(maxTotalPrice, forKey: ClientRuntime.Key("MaxTotalPrice"))
        }
        if let minTargetCapacity = minTargetCapacity {
            try container.encode(minTargetCapacity, forKey: ClientRuntime.Key("MinTargetCapacity"))
        }
        if let singleAvailabilityZone = singleAvailabilityZone {
            try container.encode(singleAvailabilityZone, forKey: ClientRuntime.Key("SingleAvailabilityZone"))
        }
        if let singleInstanceType = singleInstanceType {
            try container.encode(singleInstanceType, forKey: ClientRuntime.Key("SingleInstanceType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allocationStrategyDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.FleetOnDemandAllocationStrategy.self, forKey: .allocationStrategy)
        allocationStrategy = allocationStrategyDecoded
        let capacityReservationOptionsDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.CapacityReservationOptionsRequest.self, forKey: .capacityReservationOptions)
        capacityReservationOptions = capacityReservationOptionsDecoded
        let singleInstanceTypeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .singleInstanceType)
        singleInstanceType = singleInstanceTypeDecoded
        let singleAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .singleAvailabilityZone)
        singleAvailabilityZone = singleAvailabilityZoneDecoded
        let minTargetCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minTargetCapacity)
        minTargetCapacity = minTargetCapacityDecoded
        let maxTotalPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxTotalPrice)
        maxTotalPrice = maxTotalPriceDecoded
    }
}
