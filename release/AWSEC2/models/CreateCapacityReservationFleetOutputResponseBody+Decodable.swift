// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateCapacityReservationFleetOutputResponseBody: Swift.Equatable {
    let capacityReservationFleetId: Swift.String?
    let state: EC2ClientTypes.CapacityReservationFleetState?
    let totalTargetCapacity: Swift.Int?
    let totalFulfilledCapacity: Swift.Double?
    let instanceMatchCriteria: EC2ClientTypes.FleetInstanceMatchCriteria?
    let allocationStrategy: Swift.String?
    let createTime: ClientRuntime.Date?
    let endDate: ClientRuntime.Date?
    let tenancy: EC2ClientTypes.FleetCapacityReservationTenancy?
    let fleetCapacityReservations: [EC2ClientTypes.FleetCapacityReservation]?
    let tags: [EC2ClientTypes.Tag]?
}

extension CreateCapacityReservationFleetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationStrategy = "allocationStrategy"
        case capacityReservationFleetId = "capacityReservationFleetId"
        case createTime = "createTime"
        case endDate = "endDate"
        case fleetCapacityReservations = "fleetCapacityReservationSet"
        case instanceMatchCriteria = "instanceMatchCriteria"
        case state = "state"
        case tags = "tagSet"
        case tenancy = "tenancy"
        case totalFulfilledCapacity = "totalFulfilledCapacity"
        case totalTargetCapacity = "totalTargetCapacity"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let capacityReservationFleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .capacityReservationFleetId)
        capacityReservationFleetId = capacityReservationFleetIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.CapacityReservationFleetState.self, forKey: .state)
        state = stateDecoded
        let totalTargetCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalTargetCapacity)
        totalTargetCapacity = totalTargetCapacityDecoded
        let totalFulfilledCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .totalFulfilledCapacity)
        totalFulfilledCapacity = totalFulfilledCapacityDecoded
        let instanceMatchCriteriaDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.FleetInstanceMatchCriteria.self, forKey: .instanceMatchCriteria)
        instanceMatchCriteria = instanceMatchCriteriaDecoded
        let allocationStrategyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allocationStrategy)
        allocationStrategy = allocationStrategyDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .createTime)
        createTime = createTimeDecoded
        let endDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endDate)
        endDate = endDateDecoded
        let tenancyDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.FleetCapacityReservationTenancy.self, forKey: .tenancy)
        tenancy = tenancyDecoded
        if containerValues.contains(.fleetCapacityReservations) {
            struct KeyVal0{struct item{}}
            let fleetCapacityReservationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .fleetCapacityReservations)
            if let fleetCapacityReservationsWrappedContainer = fleetCapacityReservationsWrappedContainer {
                let fleetCapacityReservationsContainer = try fleetCapacityReservationsWrappedContainer.decodeIfPresent([EC2ClientTypes.FleetCapacityReservation].self, forKey: .member)
                var fleetCapacityReservationsBuffer:[EC2ClientTypes.FleetCapacityReservation]? = nil
                if let fleetCapacityReservationsContainer = fleetCapacityReservationsContainer {
                    fleetCapacityReservationsBuffer = [EC2ClientTypes.FleetCapacityReservation]()
                    for structureContainer0 in fleetCapacityReservationsContainer {
                        fleetCapacityReservationsBuffer?.append(structureContainer0)
                    }
                }
                fleetCapacityReservations = fleetCapacityReservationsBuffer
            } else {
                fleetCapacityReservations = []
            }
        } else {
            fleetCapacityReservations = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
