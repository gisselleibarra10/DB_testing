// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes {
    /// The options for Spot Instances.
    public struct LaunchTemplateSpotMarketOptions: Swift.Equatable {
        /// The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
        public var blockDurationMinutes: Swift.Int?
        /// The behavior when a Spot Instance is interrupted.
        public var instanceInterruptionBehavior: Ec2ClientTypes.InstanceInterruptionBehavior?
        /// The maximum hourly price you're willing to pay for the Spot Instances. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price. If you specify a maximum price, your Spot Instances will be interrupted more frequently than if you do not specify this parameter.
        public var maxPrice: Swift.String?
        /// The Spot Instance request type.
        public var spotInstanceType: Ec2ClientTypes.SpotInstanceType?
        /// The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached.
        public var validUntil: ClientRuntime.Date?

        public init (
            blockDurationMinutes: Swift.Int? = nil,
            instanceInterruptionBehavior: Ec2ClientTypes.InstanceInterruptionBehavior? = nil,
            maxPrice: Swift.String? = nil,
            spotInstanceType: Ec2ClientTypes.SpotInstanceType? = nil,
            validUntil: ClientRuntime.Date? = nil
        )
        {
            self.blockDurationMinutes = blockDurationMinutes
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.maxPrice = maxPrice
            self.spotInstanceType = spotInstanceType
            self.validUntil = validUntil
        }
    }

}
