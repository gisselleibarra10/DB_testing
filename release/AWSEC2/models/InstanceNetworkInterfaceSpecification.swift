// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// Describes a network interface.
    public struct InstanceNetworkInterfaceSpecification: Swift.Equatable {
        /// Indicates whether to assign a carrier IP address to the network interface. You can only assign a carrier IP address to a network interface that is in a subnet in a Wavelength Zone. For more information about carrier IP addresses, see [Carrier IP address](https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#provider-owned-ip) in the Amazon Web Services Wavelength Developer Guide.
        public var associateCarrierIpAddress: Swift.Bool?
        /// Indicates whether to assign a public IPv4 address to an instance you launch in a VPC. The public IP address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is true.
        public var associatePublicIpAddress: Swift.Bool?
        /// If set to true, the interface is deleted when the instance is terminated. You can specify true only if creating a new network interface when launching an instance.
        public var deleteOnTermination: Swift.Bool?
        /// The description of the network interface. Applies only if creating a network interface when launching an instance.
        public var description: Swift.String?
        /// The position of the network interface in the attachment order. A primary network interface has a device index of 0. If you specify a network interface when launching an instance, you must specify the device index.
        public var deviceIndex: Swift.Int?
        /// The IDs of the security groups for the network interface. Applies only if creating a network interface when launching an instance.
        public var groups: [Swift.String]?
        /// The type of network interface. Valid values: interface | efa
        public var interfaceType: Swift.String?
        /// The number of IPv4 delegated prefixes to be automatically assigned to the network interface. You cannot use this option if you use the Ipv4Prefix option.
        public var ipv4PrefixCount: Swift.Int?
        /// The IPv4 delegated prefixes to be assigned to the network interface. You cannot use this option if you use the Ipv4PrefixCount option.
        public var ipv4Prefixes: [Ec2ClientTypes.Ipv4PrefixSpecificationRequest]?
        /// A number of IPv6 addresses to assign to the network interface. Amazon EC2 chooses the IPv6 addresses from the range of the subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.
        public var ipv6AddressCount: Swift.Int?
        /// The IPv6 addresses to assign to the network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.
        public var ipv6Addresses: [Ec2ClientTypes.InstanceIpv6Address]?
        /// The number of IPv6 delegated prefixes to be automatically assigned to the network interface. You cannot use this option if you use the Ipv6Prefix option.
        public var ipv6PrefixCount: Swift.Int?
        /// The IPv6 delegated prefixes to be assigned to the network interface. You cannot use this option if you use the Ipv6PrefixCount option.
        public var ipv6Prefixes: [Ec2ClientTypes.Ipv6PrefixSpecificationRequest]?
        /// The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0. If you are using [RequestSpotInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html) to create Spot Instances, omit this parameter because you can’t specify the network card index when using this API. To specify the network card index, use [RunInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html).
        public var networkCardIndex: Swift.Int?
        /// The ID of the network interface. If you are creating a Spot Fleet, omit this parameter because you can’t specify a network interface ID in a launch specification.
        public var networkInterfaceId: Swift.String?
        /// The private IPv4 address of the network interface. Applies only if creating a network interface when launching an instance. You cannot specify this option if you're launching more than one instance in a [RunInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) request.
        public var privateIpAddress: Swift.String?
        /// The private IPv4 addresses to assign to the network interface. Only one private IPv4 address can be designated as primary. You cannot specify this option if you're launching more than one instance in a [RunInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) request.
        public var privateIpAddresses: [Ec2ClientTypes.PrivateIpAddressSpecification]?
        /// The number of secondary private IPv4 addresses. You can't specify this option and specify more than one private IP address using the private IP addresses option. You cannot specify this option if you're launching more than one instance in a [RunInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) request.
        public var secondaryPrivateIpAddressCount: Swift.Int?
        /// The ID of the subnet associated with the network interface. Applies only if creating a network interface when launching an instance.
        public var subnetId: Swift.String?

        public init (
            associateCarrierIpAddress: Swift.Bool? = nil,
            associatePublicIpAddress: Swift.Bool? = nil,
            deleteOnTermination: Swift.Bool? = nil,
            description: Swift.String? = nil,
            deviceIndex: Swift.Int? = nil,
            groups: [Swift.String]? = nil,
            interfaceType: Swift.String? = nil,
            ipv4PrefixCount: Swift.Int? = nil,
            ipv4Prefixes: [Ec2ClientTypes.Ipv4PrefixSpecificationRequest]? = nil,
            ipv6AddressCount: Swift.Int? = nil,
            ipv6Addresses: [Ec2ClientTypes.InstanceIpv6Address]? = nil,
            ipv6PrefixCount: Swift.Int? = nil,
            ipv6Prefixes: [Ec2ClientTypes.Ipv6PrefixSpecificationRequest]? = nil,
            networkCardIndex: Swift.Int? = nil,
            networkInterfaceId: Swift.String? = nil,
            privateIpAddress: Swift.String? = nil,
            privateIpAddresses: [Ec2ClientTypes.PrivateIpAddressSpecification]? = nil,
            secondaryPrivateIpAddressCount: Swift.Int? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.associateCarrierIpAddress = associateCarrierIpAddress
            self.associatePublicIpAddress = associatePublicIpAddress
            self.deleteOnTermination = deleteOnTermination
            self.description = description
            self.deviceIndex = deviceIndex
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv4PrefixCount = ipv4PrefixCount
            self.ipv4Prefixes = ipv4Prefixes
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.ipv6PrefixCount = ipv6PrefixCount
            self.ipv6Prefixes = ipv6Prefixes
            self.networkCardIndex = networkCardIndex
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
        }
    }

}
