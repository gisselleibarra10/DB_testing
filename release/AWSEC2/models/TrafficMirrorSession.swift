// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// Describes a Traffic Mirror session.
    public struct TrafficMirrorSession: Swift.Equatable {
        /// The description of the Traffic Mirror session.
        public var description: Swift.String?
        /// The ID of the Traffic Mirror session's network interface.
        public var networkInterfaceId: Swift.String?
        /// The ID of the account that owns the Traffic Mirror session.
        public var ownerId: Swift.String?
        /// The number of bytes in each packet to mirror. These are the bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet
        public var packetLength: Swift.Int?
        /// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets. Valid values are 1-32766.
        public var sessionNumber: Swift.Int?
        /// The tags assigned to the Traffic Mirror session.
        public var tags: [Ec2ClientTypes.Tag]?
        /// The ID of the Traffic Mirror filter.
        public var trafficMirrorFilterId: Swift.String?
        /// The ID for the Traffic Mirror session.
        public var trafficMirrorSessionId: Swift.String?
        /// The ID of the Traffic Mirror target.
        public var trafficMirrorTargetId: Swift.String?
        /// The virtual network ID associated with the Traffic Mirror session.
        public var virtualNetworkId: Swift.Int?

        public init (
            description: Swift.String? = nil,
            networkInterfaceId: Swift.String? = nil,
            ownerId: Swift.String? = nil,
            packetLength: Swift.Int? = nil,
            sessionNumber: Swift.Int? = nil,
            tags: [Ec2ClientTypes.Tag]? = nil,
            trafficMirrorFilterId: Swift.String? = nil,
            trafficMirrorSessionId: Swift.String? = nil,
            trafficMirrorTargetId: Swift.String? = nil,
            virtualNetworkId: Swift.Int? = nil
        )
        {
            self.description = description
            self.networkInterfaceId = networkInterfaceId
            self.ownerId = ownerId
            self.packetLength = packetLength
            self.sessionNumber = sessionNumber
            self.tags = tags
            self.trafficMirrorFilterId = trafficMirrorFilterId
            self.trafficMirrorSessionId = trafficMirrorSessionId
            self.trafficMirrorTargetId = trafficMirrorTargetId
            self.virtualNetworkId = virtualNetworkId
        }
    }

}
