// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EC2ClientTypes {
    public enum ImageAttributeName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case blockdevicemapping
        case bootmode
        case description
        case imdssupport
        case kernel
        case lastlaunchedtime
        case launchpermission
        case productcodes
        case ramdisk
        case sriovnetsupport
        case tpmsupport
        case uefidata
        case sdkUnknown(Swift.String)

        public static var allCases: [ImageAttributeName] {
            return [
                .blockdevicemapping,
                .bootmode,
                .description,
                .imdssupport,
                .kernel,
                .lastlaunchedtime,
                .launchpermission,
                .productcodes,
                .ramdisk,
                .sriovnetsupport,
                .tpmsupport,
                .uefidata,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .blockdevicemapping: return "blockDeviceMapping"
            case .bootmode: return "bootMode"
            case .description: return "description"
            case .imdssupport: return "imdsSupport"
            case .kernel: return "kernel"
            case .lastlaunchedtime: return "lastLaunchedTime"
            case .launchpermission: return "launchPermission"
            case .productcodes: return "productCodes"
            case .ramdisk: return "ramdisk"
            case .sriovnetsupport: return "sriovNetSupport"
            case .tpmsupport: return "tpmSupport"
            case .uefidata: return "uefiData"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ImageAttributeName(rawValue: rawValue) ?? ImageAttributeName.sdkUnknown(rawValue)
        }
    }
}
