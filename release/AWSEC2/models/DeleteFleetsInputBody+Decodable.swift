// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeleteFleetsInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let fleetIds: [Swift.String]?
    let terminateInstances: Swift.Bool?
}

extension DeleteFleetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case fleetIds = "FleetId"
        case terminateInstances = "TerminateInstances"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.fleetIds) {
            struct KeyVal0{struct member{}}
            let fleetIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .fleetIds)
            if let fleetIdsWrappedContainer = fleetIdsWrappedContainer {
                let fleetIdsContainer = try fleetIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var fleetIdsBuffer:[Swift.String]? = nil
                if let fleetIdsContainer = fleetIdsContainer {
                    fleetIdsBuffer = [Swift.String]()
                    for stringContainer0 in fleetIdsContainer {
                        fleetIdsBuffer?.append(stringContainer0)
                    }
                }
                fleetIds = fleetIdsBuffer
            } else {
                fleetIds = []
            }
        } else {
            fleetIds = nil
        }
        let terminateInstancesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .terminateInstances)
        terminateInstances = terminateInstancesDecoded
    }
}
