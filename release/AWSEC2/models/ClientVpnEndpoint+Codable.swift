// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.ClientVpnEndpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedTargetNetworks = "associatedTargetNetwork"
        case authenticationOptions = "authenticationOptions"
        case clientCidrBlock = "clientCidrBlock"
        case clientConnectOptions = "clientConnectOptions"
        case clientLoginBannerOptions = "clientLoginBannerOptions"
        case clientVpnEndpointId = "clientVpnEndpointId"
        case connectionLogOptions = "connectionLogOptions"
        case creationTime = "creationTime"
        case deletionTime = "deletionTime"
        case description = "description"
        case dnsName = "dnsName"
        case dnsServers = "dnsServer"
        case securityGroupIds = "securityGroupIdSet"
        case selfServicePortalUrl = "selfServicePortalUrl"
        case serverCertificateArn = "serverCertificateArn"
        case sessionTimeoutHours = "sessionTimeoutHours"
        case splitTunnel = "splitTunnel"
        case status = "status"
        case tags = "tagSet"
        case transportProtocol = "transportProtocol"
        case vpcId = "vpcId"
        case vpnPort = "vpnPort"
        case vpnProtocol = "vpnProtocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let associatedTargetNetworks = associatedTargetNetworks {
            if !associatedTargetNetworks.isEmpty {
                for (index0, associatedtargetnetwork0) in associatedTargetNetworks.enumerated() {
                    var associatedTargetNetworksContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AssociatedTargetNetwork.\(index0.advanced(by: 1))"))
                    try associatedTargetNetworksContainer0.encode(associatedtargetnetwork0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var associatedTargetNetworksContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AssociatedTargetNetwork"))
                try associatedTargetNetworksContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let authenticationOptions = authenticationOptions {
            if !authenticationOptions.isEmpty {
                for (index0, clientvpnauthentication0) in authenticationOptions.enumerated() {
                    var authenticationOptionsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthenticationOptions.\(index0.advanced(by: 1))"))
                    try authenticationOptionsContainer0.encode(clientvpnauthentication0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var authenticationOptionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthenticationOptions"))
                try authenticationOptionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clientCidrBlock = clientCidrBlock {
            try container.encode(clientCidrBlock, forKey: ClientRuntime.Key("ClientCidrBlock"))
        }
        if let clientConnectOptions = clientConnectOptions {
            try container.encode(clientConnectOptions, forKey: ClientRuntime.Key("ClientConnectOptions"))
        }
        if let clientLoginBannerOptions = clientLoginBannerOptions {
            try container.encode(clientLoginBannerOptions, forKey: ClientRuntime.Key("ClientLoginBannerOptions"))
        }
        if let clientVpnEndpointId = clientVpnEndpointId {
            try container.encode(clientVpnEndpointId, forKey: ClientRuntime.Key("ClientVpnEndpointId"))
        }
        if let connectionLogOptions = connectionLogOptions {
            try container.encode(connectionLogOptions, forKey: ClientRuntime.Key("ConnectionLogOptions"))
        }
        if let creationTime = creationTime {
            try container.encode(creationTime, forKey: ClientRuntime.Key("CreationTime"))
        }
        if let deletionTime = deletionTime {
            try container.encode(deletionTime, forKey: ClientRuntime.Key("DeletionTime"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let dnsName = dnsName {
            try container.encode(dnsName, forKey: ClientRuntime.Key("DnsName"))
        }
        if let dnsServers = dnsServers {
            if !dnsServers.isEmpty {
                for (index0, string0) in dnsServers.enumerated() {
                    var dnsServersContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DnsServer.\(index0.advanced(by: 1))"))
                    try dnsServersContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var dnsServersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DnsServer"))
                try dnsServersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let securityGroupIds = securityGroupIds {
            if !securityGroupIds.isEmpty {
                for (index0, securitygroupid0) in securityGroupIds.enumerated() {
                    var securityGroupIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroupIdSet.\(index0.advanced(by: 1))"))
                    try securityGroupIdsContainer0.encode(securitygroupid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var securityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroupIdSet"))
                try securityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let selfServicePortalUrl = selfServicePortalUrl {
            try container.encode(selfServicePortalUrl, forKey: ClientRuntime.Key("SelfServicePortalUrl"))
        }
        if let serverCertificateArn = serverCertificateArn {
            try container.encode(serverCertificateArn, forKey: ClientRuntime.Key("ServerCertificateArn"))
        }
        if let sessionTimeoutHours = sessionTimeoutHours {
            try container.encode(sessionTimeoutHours, forKey: ClientRuntime.Key("SessionTimeoutHours"))
        }
        if let splitTunnel = splitTunnel {
            try container.encode(splitTunnel, forKey: ClientRuntime.Key("SplitTunnel"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let transportProtocol = transportProtocol {
            try container.encode(transportProtocol, forKey: ClientRuntime.Key("TransportProtocol"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
        if let vpnPort = vpnPort {
            try container.encode(vpnPort, forKey: ClientRuntime.Key("VpnPort"))
        }
        if let vpnProtocol = vpnProtocol {
            try container.encode(vpnProtocol, forKey: ClientRuntime.Key("VpnProtocol"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientVpnEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientVpnEndpointId)
        clientVpnEndpointId = clientVpnEndpointIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ClientVpnEndpointStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let deletionTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deletionTime)
        deletionTime = deletionTimeDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let clientCidrBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientCidrBlock)
        clientCidrBlock = clientCidrBlockDecoded
        if containerValues.contains(.dnsServers) {
            struct KeyVal0{struct item{}}
            let dnsServersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .dnsServers)
            if let dnsServersWrappedContainer = dnsServersWrappedContainer {
                let dnsServersContainer = try dnsServersWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var dnsServersBuffer:[Swift.String]? = nil
                if let dnsServersContainer = dnsServersContainer {
                    dnsServersBuffer = [Swift.String]()
                    for stringContainer0 in dnsServersContainer {
                        dnsServersBuffer?.append(stringContainer0)
                    }
                }
                dnsServers = dnsServersBuffer
            } else {
                dnsServers = []
            }
        } else {
            dnsServers = nil
        }
        let splitTunnelDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .splitTunnel)
        splitTunnel = splitTunnelDecoded
        let vpnProtocolDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.VpnProtocol.self, forKey: .vpnProtocol)
        vpnProtocol = vpnProtocolDecoded
        let transportProtocolDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.TransportProtocol.self, forKey: .transportProtocol)
        transportProtocol = transportProtocolDecoded
        let vpnPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .vpnPort)
        vpnPort = vpnPortDecoded
        if containerValues.contains(.associatedTargetNetworks) {
            struct KeyVal0{struct item{}}
            let associatedTargetNetworksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .associatedTargetNetworks)
            if let associatedTargetNetworksWrappedContainer = associatedTargetNetworksWrappedContainer {
                let associatedTargetNetworksContainer = try associatedTargetNetworksWrappedContainer.decodeIfPresent([EC2ClientTypes.AssociatedTargetNetwork].self, forKey: .member)
                var associatedTargetNetworksBuffer:[EC2ClientTypes.AssociatedTargetNetwork]? = nil
                if let associatedTargetNetworksContainer = associatedTargetNetworksContainer {
                    associatedTargetNetworksBuffer = [EC2ClientTypes.AssociatedTargetNetwork]()
                    for structureContainer0 in associatedTargetNetworksContainer {
                        associatedTargetNetworksBuffer?.append(structureContainer0)
                    }
                }
                associatedTargetNetworks = associatedTargetNetworksBuffer
            } else {
                associatedTargetNetworks = []
            }
        } else {
            associatedTargetNetworks = nil
        }
        let serverCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverCertificateArn)
        serverCertificateArn = serverCertificateArnDecoded
        if containerValues.contains(.authenticationOptions) {
            struct KeyVal0{struct item{}}
            let authenticationOptionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .authenticationOptions)
            if let authenticationOptionsWrappedContainer = authenticationOptionsWrappedContainer {
                let authenticationOptionsContainer = try authenticationOptionsWrappedContainer.decodeIfPresent([EC2ClientTypes.ClientVpnAuthentication].self, forKey: .member)
                var authenticationOptionsBuffer:[EC2ClientTypes.ClientVpnAuthentication]? = nil
                if let authenticationOptionsContainer = authenticationOptionsContainer {
                    authenticationOptionsBuffer = [EC2ClientTypes.ClientVpnAuthentication]()
                    for structureContainer0 in authenticationOptionsContainer {
                        authenticationOptionsBuffer?.append(structureContainer0)
                    }
                }
                authenticationOptions = authenticationOptionsBuffer
            } else {
                authenticationOptions = []
            }
        } else {
            authenticationOptions = nil
        }
        let connectionLogOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ConnectionLogResponseOptions.self, forKey: .connectionLogOptions)
        connectionLogOptions = connectionLogOptionsDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.securityGroupIds) {
            struct KeyVal0{struct item{}}
            let securityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .securityGroupIds)
            if let securityGroupIdsWrappedContainer = securityGroupIdsWrappedContainer {
                let securityGroupIdsContainer = try securityGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var securityGroupIdsBuffer:[Swift.String]? = nil
                if let securityGroupIdsContainer = securityGroupIdsContainer {
                    securityGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in securityGroupIdsContainer {
                        securityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                securityGroupIds = securityGroupIdsBuffer
            } else {
                securityGroupIds = []
            }
        } else {
            securityGroupIds = nil
        }
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let selfServicePortalUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .selfServicePortalUrl)
        selfServicePortalUrl = selfServicePortalUrlDecoded
        let clientConnectOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ClientConnectResponseOptions.self, forKey: .clientConnectOptions)
        clientConnectOptions = clientConnectOptionsDecoded
        let sessionTimeoutHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionTimeoutHours)
        sessionTimeoutHours = sessionTimeoutHoursDecoded
        let clientLoginBannerOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ClientLoginBannerResponseOptions.self, forKey: .clientLoginBannerOptions)
        clientLoginBannerOptions = clientLoginBannerOptionsDecoded
    }
}
