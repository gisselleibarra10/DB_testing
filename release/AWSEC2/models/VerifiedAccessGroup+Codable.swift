// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.VerifiedAccessGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "creationTime"
        case deletionTime = "deletionTime"
        case description = "description"
        case lastUpdatedTime = "lastUpdatedTime"
        case owner = "owner"
        case tags = "tagSet"
        case verifiedAccessGroupArn = "verifiedAccessGroupArn"
        case verifiedAccessGroupId = "verifiedAccessGroupId"
        case verifiedAccessInstanceId = "verifiedAccessInstanceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let creationTime = creationTime {
            try container.encode(creationTime, forKey: ClientRuntime.Key("CreationTime"))
        }
        if let deletionTime = deletionTime {
            try container.encode(deletionTime, forKey: ClientRuntime.Key("DeletionTime"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try container.encode(lastUpdatedTime, forKey: ClientRuntime.Key("LastUpdatedTime"))
        }
        if let owner = owner {
            try container.encode(owner, forKey: ClientRuntime.Key("Owner"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let verifiedAccessGroupArn = verifiedAccessGroupArn {
            try container.encode(verifiedAccessGroupArn, forKey: ClientRuntime.Key("VerifiedAccessGroupArn"))
        }
        if let verifiedAccessGroupId = verifiedAccessGroupId {
            try container.encode(verifiedAccessGroupId, forKey: ClientRuntime.Key("VerifiedAccessGroupId"))
        }
        if let verifiedAccessInstanceId = verifiedAccessInstanceId {
            try container.encode(verifiedAccessInstanceId, forKey: ClientRuntime.Key("VerifiedAccessInstanceId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let verifiedAccessGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verifiedAccessGroupId)
        verifiedAccessGroupId = verifiedAccessGroupIdDecoded
        let verifiedAccessInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verifiedAccessInstanceId)
        verifiedAccessInstanceId = verifiedAccessInstanceIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let verifiedAccessGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verifiedAccessGroupArn)
        verifiedAccessGroupArn = verifiedAccessGroupArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let deletionTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deletionTime)
        deletionTime = deletionTimeDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
