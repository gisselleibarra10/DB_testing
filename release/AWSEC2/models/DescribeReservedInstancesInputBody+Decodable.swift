// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReservedInstancesInputBody: Swift.Equatable {
    let filters: [EC2ClientTypes.Filter]?
    let offeringClass: EC2ClientTypes.OfferingClassType?
    let reservedInstancesIds: [Swift.String]?
    let dryRun: Swift.Bool?
    let offeringType: EC2ClientTypes.OfferingTypeValues?
}

extension DescribeReservedInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "dryRun"
        case filters = "Filter"
        case offeringClass = "OfferingClass"
        case offeringType = "offeringType"
        case reservedInstancesIds = "ReservedInstancesId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.filters) {
            struct KeyVal0{struct Filter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Filter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([EC2ClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[EC2ClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [EC2ClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let offeringClassDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.OfferingClassType.self, forKey: .offeringClass)
        offeringClass = offeringClassDecoded
        if containerValues.contains(.reservedInstancesIds) {
            struct KeyVal0{struct ReservedInstancesId{}}
            let reservedInstancesIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedInstancesId>.CodingKeys.self, forKey: .reservedInstancesIds)
            if let reservedInstancesIdsWrappedContainer = reservedInstancesIdsWrappedContainer {
                let reservedInstancesIdsContainer = try reservedInstancesIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var reservedInstancesIdsBuffer:[Swift.String]? = nil
                if let reservedInstancesIdsContainer = reservedInstancesIdsContainer {
                    reservedInstancesIdsBuffer = [Swift.String]()
                    for stringContainer0 in reservedInstancesIdsContainer {
                        reservedInstancesIdsBuffer?.append(stringContainer0)
                    }
                }
                reservedInstancesIds = reservedInstancesIdsBuffer
            } else {
                reservedInstancesIds = []
            }
        } else {
            reservedInstancesIds = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.OfferingTypeValues.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
    }
}
