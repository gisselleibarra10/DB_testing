// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes {
    /// Describes a VPC peering connection.
    public struct VpcPeeringConnection: Swift.Equatable {
        /// Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.
        public var accepterVpcInfo: Ec2ClientTypes.VpcPeeringConnectionVpcInfo?
        /// The time that an unaccepted VPC peering connection will expire.
        public var expirationTime: ClientRuntime.Date?
        /// Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.
        public var requesterVpcInfo: Ec2ClientTypes.VpcPeeringConnectionVpcInfo?
        /// The status of the VPC peering connection.
        public var status: Ec2ClientTypes.VpcPeeringConnectionStateReason?
        /// Any tags assigned to the resource.
        public var tags: [Ec2ClientTypes.Tag]?
        /// The ID of the VPC peering connection.
        public var vpcPeeringConnectionId: Swift.String?

        public init (
            accepterVpcInfo: Ec2ClientTypes.VpcPeeringConnectionVpcInfo? = nil,
            expirationTime: ClientRuntime.Date? = nil,
            requesterVpcInfo: Ec2ClientTypes.VpcPeeringConnectionVpcInfo? = nil,
            status: Ec2ClientTypes.VpcPeeringConnectionStateReason? = nil,
            tags: [Ec2ClientTypes.Tag]? = nil,
            vpcPeeringConnectionId: Swift.String? = nil
        )
        {
            self.accepterVpcInfo = accepterVpcInfo
            self.expirationTime = expirationTime
            self.requesterVpcInfo = requesterVpcInfo
            self.status = status
            self.tags = tags
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }
    }

}
