// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PurchaseScheduledInstancesInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let dryRun: Swift.Bool?
    let purchaseRequests: [EC2ClientTypes.PurchaseRequest]?
}

extension PurchaseScheduledInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dryRun = "DryRun"
        case purchaseRequests = "PurchaseRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.purchaseRequests) {
            struct KeyVal0{struct PurchaseRequest{}}
            let purchaseRequestsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.PurchaseRequest>.CodingKeys.self, forKey: .purchaseRequests)
            if let purchaseRequestsWrappedContainer = purchaseRequestsWrappedContainer {
                let purchaseRequestsContainer = try purchaseRequestsWrappedContainer.decodeIfPresent([EC2ClientTypes.PurchaseRequest].self, forKey: .member)
                var purchaseRequestsBuffer:[EC2ClientTypes.PurchaseRequest]? = nil
                if let purchaseRequestsContainer = purchaseRequestsContainer {
                    purchaseRequestsBuffer = [EC2ClientTypes.PurchaseRequest]()
                    for structureContainer0 in purchaseRequestsContainer {
                        purchaseRequestsBuffer?.append(structureContainer0)
                    }
                }
                purchaseRequests = purchaseRequestsBuffer
            } else {
                purchaseRequests = []
            }
        } else {
            purchaseRequests = nil
        }
    }
}
