// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.ReservedInstancesListing: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "clientToken"
        case createDate = "createDate"
        case instanceCounts = "instanceCounts"
        case priceSchedules = "priceSchedules"
        case reservedInstancesId = "reservedInstancesId"
        case reservedInstancesListingId = "reservedInstancesListingId"
        case status = "status"
        case statusMessage = "statusMessage"
        case tags = "tagSet"
        case updateDate = "updateDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: ClientRuntime.Key("ClientToken"))
        }
        if let createDate = createDate {
            try container.encodeTimestamp(createDate, format: .dateTime, forKey: ClientRuntime.Key("CreateDate"))
        }
        if let instanceCounts = instanceCounts {
            if !instanceCounts.isEmpty {
                for (index0, instancecount0) in instanceCounts.enumerated() {
                    var instanceCountsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceCounts.\(index0.advanced(by: 1))"))
                    try instanceCountsContainer0.encode(instancecount0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var instanceCountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceCounts"))
                try instanceCountsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let priceSchedules = priceSchedules {
            if !priceSchedules.isEmpty {
                for (index0, priceschedule0) in priceSchedules.enumerated() {
                    var priceSchedulesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PriceSchedules.\(index0.advanced(by: 1))"))
                    try priceSchedulesContainer0.encode(priceschedule0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var priceSchedulesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PriceSchedules"))
                try priceSchedulesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let reservedInstancesId = reservedInstancesId {
            try container.encode(reservedInstancesId, forKey: ClientRuntime.Key("ReservedInstancesId"))
        }
        if let reservedInstancesListingId = reservedInstancesListingId {
            try container.encode(reservedInstancesListingId, forKey: ClientRuntime.Key("ReservedInstancesListingId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: ClientRuntime.Key("StatusMessage"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let updateDate = updateDate {
            try container.encodeTimestamp(updateDate, format: .dateTime, forKey: ClientRuntime.Key("UpdateDate"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let createDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .createDate)
        createDate = createDateDecoded
        if containerValues.contains(.instanceCounts) {
            struct KeyVal0{struct item{}}
            let instanceCountsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .instanceCounts)
            if let instanceCountsWrappedContainer = instanceCountsWrappedContainer {
                let instanceCountsContainer = try instanceCountsWrappedContainer.decodeIfPresent([EC2ClientTypes.InstanceCount].self, forKey: .member)
                var instanceCountsBuffer:[EC2ClientTypes.InstanceCount]? = nil
                if let instanceCountsContainer = instanceCountsContainer {
                    instanceCountsBuffer = [EC2ClientTypes.InstanceCount]()
                    for structureContainer0 in instanceCountsContainer {
                        instanceCountsBuffer?.append(structureContainer0)
                    }
                }
                instanceCounts = instanceCountsBuffer
            } else {
                instanceCounts = []
            }
        } else {
            instanceCounts = nil
        }
        if containerValues.contains(.priceSchedules) {
            struct KeyVal0{struct item{}}
            let priceSchedulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .priceSchedules)
            if let priceSchedulesWrappedContainer = priceSchedulesWrappedContainer {
                let priceSchedulesContainer = try priceSchedulesWrappedContainer.decodeIfPresent([EC2ClientTypes.PriceSchedule].self, forKey: .member)
                var priceSchedulesBuffer:[EC2ClientTypes.PriceSchedule]? = nil
                if let priceSchedulesContainer = priceSchedulesContainer {
                    priceSchedulesBuffer = [EC2ClientTypes.PriceSchedule]()
                    for structureContainer0 in priceSchedulesContainer {
                        priceSchedulesBuffer?.append(structureContainer0)
                    }
                }
                priceSchedules = priceSchedulesBuffer
            } else {
                priceSchedules = []
            }
        } else {
            priceSchedules = nil
        }
        let reservedInstancesIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedInstancesId)
        reservedInstancesId = reservedInstancesIdDecoded
        let reservedInstancesListingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedInstancesListingId)
        reservedInstancesListingId = reservedInstancesListingIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ListingStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let updateDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .updateDate)
        updateDate = updateDateDecoded
    }
}
