// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVolumesOutputResponseBody: Swift.Equatable {
    let volumes: [EC2ClientTypes.Volume]?
    let nextToken: Swift.String?
}

extension DescribeVolumesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case volumes = "volumeSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.volumes) {
            struct KeyVal0{struct item{}}
            let volumesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .volumes)
            if let volumesWrappedContainer = volumesWrappedContainer {
                let volumesContainer = try volumesWrappedContainer.decodeIfPresent([EC2ClientTypes.Volume].self, forKey: .member)
                var volumesBuffer:[EC2ClientTypes.Volume]? = nil
                if let volumesContainer = volumesContainer {
                    volumesBuffer = [EC2ClientTypes.Volume]()
                    for structureContainer0 in volumesContainer {
                        volumesBuffer?.append(structureContainer0)
                    }
                }
                volumes = volumesBuffer
            } else {
                volumes = []
            }
        } else {
            volumes = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
