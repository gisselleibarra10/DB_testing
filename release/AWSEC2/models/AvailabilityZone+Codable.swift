// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.AvailabilityZone: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName = "groupName"
        case messages = "messageSet"
        case networkBorderGroup = "networkBorderGroup"
        case optInStatus = "optInStatus"
        case parentZoneId = "parentZoneId"
        case parentZoneName = "parentZoneName"
        case regionName = "regionName"
        case state = "zoneState"
        case zoneId = "zoneId"
        case zoneName = "zoneName"
        case zoneType = "zoneType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let groupName = groupName {
            try container.encode(groupName, forKey: ClientRuntime.Key("GroupName"))
        }
        if let messages = messages {
            if !messages.isEmpty {
                for (index0, availabilityzonemessage0) in messages.enumerated() {
                    var messagesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MessageSet.\(index0.advanced(by: 1))"))
                    try messagesContainer0.encode(availabilityzonemessage0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var messagesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MessageSet"))
                try messagesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let networkBorderGroup = networkBorderGroup {
            try container.encode(networkBorderGroup, forKey: ClientRuntime.Key("NetworkBorderGroup"))
        }
        if let optInStatus = optInStatus {
            try container.encode(optInStatus, forKey: ClientRuntime.Key("OptInStatus"))
        }
        if let parentZoneId = parentZoneId {
            try container.encode(parentZoneId, forKey: ClientRuntime.Key("ParentZoneId"))
        }
        if let parentZoneName = parentZoneName {
            try container.encode(parentZoneName, forKey: ClientRuntime.Key("ParentZoneName"))
        }
        if let regionName = regionName {
            try container.encode(regionName, forKey: ClientRuntime.Key("RegionName"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("ZoneState"))
        }
        if let zoneId = zoneId {
            try container.encode(zoneId, forKey: ClientRuntime.Key("ZoneId"))
        }
        if let zoneName = zoneName {
            try container.encode(zoneName, forKey: ClientRuntime.Key("ZoneName"))
        }
        if let zoneType = zoneType {
            try container.encode(zoneType, forKey: ClientRuntime.Key("ZoneType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AvailabilityZoneState.self, forKey: .state)
        state = stateDecoded
        let optInStatusDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AvailabilityZoneOptInStatus.self, forKey: .optInStatus)
        optInStatus = optInStatusDecoded
        if containerValues.contains(.messages) {
            struct KeyVal0{struct item{}}
            let messagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .messages)
            if let messagesWrappedContainer = messagesWrappedContainer {
                let messagesContainer = try messagesWrappedContainer.decodeIfPresent([EC2ClientTypes.AvailabilityZoneMessage].self, forKey: .member)
                var messagesBuffer:[EC2ClientTypes.AvailabilityZoneMessage]? = nil
                if let messagesContainer = messagesContainer {
                    messagesBuffer = [EC2ClientTypes.AvailabilityZoneMessage]()
                    for structureContainer0 in messagesContainer {
                        messagesBuffer?.append(structureContainer0)
                    }
                }
                messages = messagesBuffer
            } else {
                messages = []
            }
        } else {
            messages = nil
        }
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let zoneNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .zoneName)
        zoneName = zoneNameDecoded
        let zoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .zoneId)
        zoneId = zoneIdDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let networkBorderGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkBorderGroup)
        networkBorderGroup = networkBorderGroupDecoded
        let zoneTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .zoneType)
        zoneType = zoneTypeDecoded
        let parentZoneNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentZoneName)
        parentZoneName = parentZoneNameDecoded
        let parentZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentZoneId)
        parentZoneId = parentZoneIdDecoded
    }
}
