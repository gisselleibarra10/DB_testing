// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EC2ClientTypes {
    /// Describes a route in a route table.
    public struct Route: Swift.Equatable {
        /// The ID of the carrier gateway.
        public var carrierGatewayId: Swift.String?
        /// The Amazon Resource Name (ARN) of the core network.
        public var coreNetworkArn: Swift.String?
        /// The IPv4 CIDR block used for the destination match.
        public var destinationCidrBlock: Swift.String?
        /// The IPv6 CIDR block used for the destination match.
        public var destinationIpv6CidrBlock: Swift.String?
        /// The prefix of the Amazon Web Service.
        public var destinationPrefixListId: Swift.String?
        /// The ID of the egress-only internet gateway.
        public var egressOnlyInternetGatewayId: Swift.String?
        /// The ID of a gateway attached to your VPC.
        public var gatewayId: Swift.String?
        /// The ID of a NAT instance in your VPC.
        public var instanceId: Swift.String?
        /// The ID of Amazon Web Services account that owns the instance.
        public var instanceOwnerId: Swift.String?
        /// The ID of the local gateway.
        public var localGatewayId: Swift.String?
        /// The ID of a NAT gateway.
        public var natGatewayId: Swift.String?
        /// The ID of the network interface.
        public var networkInterfaceId: Swift.String?
        /// Describes how the route was created.
        ///
        /// * CreateRouteTable - The route was automatically created when the route table was created.
        ///
        /// * CreateRoute - The route was manually added to the route table.
        ///
        /// * EnableVgwRoutePropagation - The route was propagated by route propagation.
        public var origin: EC2ClientTypes.RouteOrigin?
        /// The state of the route. The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).
        public var state: EC2ClientTypes.RouteState?
        /// The ID of a transit gateway.
        public var transitGatewayId: Swift.String?
        /// The ID of a VPC peering connection.
        public var vpcPeeringConnectionId: Swift.String?

        public init (
            carrierGatewayId: Swift.String? = nil,
            coreNetworkArn: Swift.String? = nil,
            destinationCidrBlock: Swift.String? = nil,
            destinationIpv6CidrBlock: Swift.String? = nil,
            destinationPrefixListId: Swift.String? = nil,
            egressOnlyInternetGatewayId: Swift.String? = nil,
            gatewayId: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            instanceOwnerId: Swift.String? = nil,
            localGatewayId: Swift.String? = nil,
            natGatewayId: Swift.String? = nil,
            networkInterfaceId: Swift.String? = nil,
            origin: EC2ClientTypes.RouteOrigin? = nil,
            state: EC2ClientTypes.RouteState? = nil,
            transitGatewayId: Swift.String? = nil,
            vpcPeeringConnectionId: Swift.String? = nil
        )
        {
            self.carrierGatewayId = carrierGatewayId
            self.coreNetworkArn = coreNetworkArn
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.gatewayId = gatewayId
            self.instanceId = instanceId
            self.instanceOwnerId = instanceOwnerId
            self.localGatewayId = localGatewayId
            self.natGatewayId = natGatewayId
            self.networkInterfaceId = networkInterfaceId
            self.origin = origin
            self.state = state
            self.transitGatewayId = transitGatewayId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }
    }

}
