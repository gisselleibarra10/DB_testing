// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyTransitGatewayVpcAttachmentInputBody: Swift.Equatable {
    let transitGatewayAttachmentId: Swift.String?
    let addSubnetIds: [Swift.String]?
    let removeSubnetIds: [Swift.String]?
    let options: Ec2ClientTypes.ModifyTransitGatewayVpcAttachmentRequestOptions?
    let dryRun: Swift.Bool?
}

extension ModifyTransitGatewayVpcAttachmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addSubnetIds = "AddSubnetIds"
        case dryRun = "DryRun"
        case options = "Options"
        case removeSubnetIds = "RemoveSubnetIds"
        case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transitGatewayAttachmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayAttachmentId)
        transitGatewayAttachmentId = transitGatewayAttachmentIdDecoded
        if containerValues.contains(.addSubnetIds) {
            struct KeyVal0{struct item{}}
            let addSubnetIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .addSubnetIds)
            if let addSubnetIdsWrappedContainer = addSubnetIdsWrappedContainer {
                let addSubnetIdsContainer = try addSubnetIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var addSubnetIdsBuffer:[Swift.String]? = nil
                if let addSubnetIdsContainer = addSubnetIdsContainer {
                    addSubnetIdsBuffer = [Swift.String]()
                    for stringContainer0 in addSubnetIdsContainer {
                        addSubnetIdsBuffer?.append(stringContainer0)
                    }
                }
                addSubnetIds = addSubnetIdsBuffer
            } else {
                addSubnetIds = []
            }
        } else {
            addSubnetIds = nil
        }
        if containerValues.contains(.removeSubnetIds) {
            struct KeyVal0{struct item{}}
            let removeSubnetIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .removeSubnetIds)
            if let removeSubnetIdsWrappedContainer = removeSubnetIdsWrappedContainer {
                let removeSubnetIdsContainer = try removeSubnetIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var removeSubnetIdsBuffer:[Swift.String]? = nil
                if let removeSubnetIdsContainer = removeSubnetIdsContainer {
                    removeSubnetIdsBuffer = [Swift.String]()
                    for stringContainer0 in removeSubnetIdsContainer {
                        removeSubnetIdsBuffer?.append(stringContainer0)
                    }
                }
                removeSubnetIds = removeSubnetIdsBuffer
            } else {
                removeSubnetIds = []
            }
        } else {
            removeSubnetIds = nil
        }
        let optionsDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.ModifyTransitGatewayVpcAttachmentRequestOptions.self, forKey: .options)
        options = optionsDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
    }
}
