// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSpotFleetRequestsInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let spotFleetRequestIds: [Swift.String]?
}

extension DescribeSpotFleetRequestsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "dryRun"
        case maxResults = "maxResults"
        case nextToken = "nextToken"
        case spotFleetRequestIds = "spotFleetRequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.spotFleetRequestIds) {
            struct KeyVal0{struct item{}}
            let spotFleetRequestIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .spotFleetRequestIds)
            if let spotFleetRequestIdsWrappedContainer = spotFleetRequestIdsWrappedContainer {
                let spotFleetRequestIdsContainer = try spotFleetRequestIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var spotFleetRequestIdsBuffer:[Swift.String]? = nil
                if let spotFleetRequestIdsContainer = spotFleetRequestIdsContainer {
                    spotFleetRequestIdsBuffer = [Swift.String]()
                    for stringContainer0 in spotFleetRequestIdsContainer {
                        spotFleetRequestIdsBuffer?.append(stringContainer0)
                    }
                }
                spotFleetRequestIds = spotFleetRequestIdsBuffer
            } else {
                spotFleetRequestIds = []
            }
        } else {
            spotFleetRequestIds = nil
        }
    }
}
