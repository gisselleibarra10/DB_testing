// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.AnalysisSecurityGroupRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidr = "cidr"
        case direction = "direction"
        case portRange = "portRange"
        case prefixListId = "prefixListId"
        case `protocol` = "protocol"
        case securityGroupId = "securityGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidr = cidr {
            try container.encode(cidr, forKey: ClientRuntime.Key("Cidr"))
        }
        if let direction = direction {
            try container.encode(direction, forKey: ClientRuntime.Key("Direction"))
        }
        if let portRange = portRange {
            try container.encode(portRange, forKey: ClientRuntime.Key("PortRange"))
        }
        if let prefixListId = prefixListId {
            try container.encode(prefixListId, forKey: ClientRuntime.Key("PrefixListId"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: ClientRuntime.Key("Protocol"))
        }
        if let securityGroupId = securityGroupId {
            try container.encode(securityGroupId, forKey: ClientRuntime.Key("SecurityGroupId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidr)
        cidr = cidrDecoded
        let directionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .direction)
        direction = directionDecoded
        let securityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityGroupId)
        securityGroupId = securityGroupIdDecoded
        let portRangeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.PortRange.self, forKey: .portRange)
        portRange = portRangeDecoded
        let prefixListIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefixListId)
        prefixListId = prefixListIdDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}
