// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.VpcPeeringConnection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accepterVpcInfo = "accepterVpcInfo"
        case expirationTime = "expirationTime"
        case requesterVpcInfo = "requesterVpcInfo"
        case status = "status"
        case tags = "tagSet"
        case vpcPeeringConnectionId = "vpcPeeringConnectionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accepterVpcInfo = accepterVpcInfo {
            try container.encode(accepterVpcInfo, forKey: ClientRuntime.Key("AccepterVpcInfo"))
        }
        if let expirationTime = expirationTime {
            try container.encode(ClientRuntime.TimestampWrapper(expirationTime, format: .dateTime), forKey: ClientRuntime.Key("ExpirationTime"))
        }
        if let requesterVpcInfo = requesterVpcInfo {
            try container.encode(requesterVpcInfo, forKey: ClientRuntime.Key("RequesterVpcInfo"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let vpcPeeringConnectionId = vpcPeeringConnectionId {
            try container.encode(vpcPeeringConnectionId, forKey: ClientRuntime.Key("VpcPeeringConnectionId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accepterVpcInfoDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.VpcPeeringConnectionVpcInfo.self, forKey: .accepterVpcInfo)
        accepterVpcInfo = accepterVpcInfoDecoded
        let expirationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expirationTime)
        var expirationTimeBuffer:ClientRuntime.Date? = nil
        if let expirationTimeDecoded = expirationTimeDecoded {
            expirationTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(expirationTimeDecoded, format: .dateTime)
        }
        expirationTime = expirationTimeBuffer
        let requesterVpcInfoDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.VpcPeeringConnectionVpcInfo.self, forKey: .requesterVpcInfo)
        requesterVpcInfo = requesterVpcInfoDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.VpcPeeringConnectionStateReason.self, forKey: .status)
        status = statusDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let vpcPeeringConnectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcPeeringConnectionId)
        vpcPeeringConnectionId = vpcPeeringConnectionIdDecoded
    }
}
