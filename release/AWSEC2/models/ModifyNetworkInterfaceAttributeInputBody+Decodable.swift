// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyNetworkInterfaceAttributeInputBody: Swift.Equatable {
    let attachment: Ec2ClientTypes.NetworkInterfaceAttachmentChanges?
    let description: Ec2ClientTypes.AttributeValue?
    let dryRun: Swift.Bool?
    let groups: [Swift.String]?
    let networkInterfaceId: Swift.String?
    let sourceDestCheck: Ec2ClientTypes.AttributeBooleanValue?
}

extension ModifyNetworkInterfaceAttributeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachment = "attachment"
        case description = "description"
        case dryRun = "dryRun"
        case groups = "SecurityGroupId"
        case networkInterfaceId = "networkInterfaceId"
        case sourceDestCheck = "sourceDestCheck"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachmentDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.NetworkInterfaceAttachmentChanges.self, forKey: .attachment)
        attachment = attachmentDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AttributeValue.self, forKey: .description)
        description = descriptionDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.groups) {
            struct KeyVal0{struct SecurityGroupId{}}
            let groupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SecurityGroupId>.CodingKeys.self, forKey: .groups)
            if let groupsWrappedContainer = groupsWrappedContainer {
                let groupsContainer = try groupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var groupsBuffer:[Swift.String]? = nil
                if let groupsContainer = groupsContainer {
                    groupsBuffer = [Swift.String]()
                    for stringContainer0 in groupsContainer {
                        groupsBuffer?.append(stringContainer0)
                    }
                }
                groups = groupsBuffer
            } else {
                groups = []
            }
        } else {
            groups = nil
        }
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let sourceDestCheckDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.AttributeBooleanValue.self, forKey: .sourceDestCheck)
        sourceDestCheck = sourceDestCheckDecoded
    }
}
