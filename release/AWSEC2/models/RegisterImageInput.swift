// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Contains the parameters for RegisterImage.
public struct RegisterImageInput: Swift.Equatable {
    /// The architecture of the AMI. Default: For Amazon EBS-backed AMIs, i386. For instance store-backed AMIs, the architecture specified in the manifest file.
    public var architecture: Ec2ClientTypes.ArchitectureValues?
    /// The billing product codes. Your account must be authorized to specify billing product codes. Otherwise, you can use the Amazon Web Services Marketplace to bill for the use of an AMI.
    public var billingProducts: [Swift.String]?
    /// The block device mapping entries. If you specify an Amazon EBS volume using the ID of an Amazon EBS snapshot, you can't specify the encryption state of the volume. If you create an AMI on an Outpost, then all backing snapshots must be on the same Outpost or in the Region of that Outpost. AMIs on an Outpost that include local snapshots can be used to launch instances on the same Outpost only. For more information, [ Amazon EBS local snapshots on Outposts](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#ami) in the Amazon Elastic Compute Cloud User Guide.
    public var blockDeviceMappings: [Ec2ClientTypes.BlockDeviceMapping]?
    /// The boot mode of the AMI. For more information, see [Boot modes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html) in the Amazon Elastic Compute Cloud User Guide.
    public var bootMode: Ec2ClientTypes.BootModeValues?
    /// A description for your AMI.
    public var description: Swift.String?
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// Set to true to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.
    public var enaSupport: Swift.Bool?
    /// The full path to your AMI manifest in Amazon S3 storage. The specified bucket must have the aws-exec-read canned access control list (ACL) to ensure that it can be accessed by Amazon EC2. For more information, see [Canned ACLs](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) in the Amazon S3 Service Developer Guide.
    public var imageLocation: Swift.String?
    /// The ID of the kernel.
    public var kernelId: Swift.String?
    /// A name for your AMI. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)
    /// This member is required.
    public var name: Swift.String?
    /// The ID of the RAM disk.
    public var ramdiskId: Swift.String?
    /// The device name of the root device volume (for example, /dev/sda1).
    public var rootDeviceName: Swift.String?
    /// Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI. There is no way to disable sriovNetSupport at this time. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.
    public var sriovNetSupport: Swift.String?
    /// Set to v2.0 to enable Trusted Platform Module (TPM) support. For more information, see [NitroTPM](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html) in the Amazon Elastic Compute Cloud User Guide.
    public var tpmSupport: Ec2ClientTypes.TpmSupportValues?
    /// Base64 representation of the non-volatile UEFI variable store. To retrieve the UEFI data, use the [GetInstanceUefiData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceUefiData) command. You can inspect and modify the UEFI data by using the [python-uefivars tool](https://github.com/awslabs/python-uefivars) on GitHub. For more information, see [UEFI Secure Boot](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/uefi-secure-boot.html) in the Amazon Elastic Compute Cloud User Guide.
    public var uefiData: Swift.String?
    /// The type of virtualization (hvm | paravirtual). Default: paravirtual
    public var virtualizationType: Swift.String?

    public init (
        architecture: Ec2ClientTypes.ArchitectureValues? = nil,
        billingProducts: [Swift.String]? = nil,
        blockDeviceMappings: [Ec2ClientTypes.BlockDeviceMapping]? = nil,
        bootMode: Ec2ClientTypes.BootModeValues? = nil,
        description: Swift.String? = nil,
        dryRun: Swift.Bool? = nil,
        enaSupport: Swift.Bool? = nil,
        imageLocation: Swift.String? = nil,
        kernelId: Swift.String? = nil,
        name: Swift.String? = nil,
        ramdiskId: Swift.String? = nil,
        rootDeviceName: Swift.String? = nil,
        sriovNetSupport: Swift.String? = nil,
        tpmSupport: Ec2ClientTypes.TpmSupportValues? = nil,
        uefiData: Swift.String? = nil,
        virtualizationType: Swift.String? = nil
    )
    {
        self.architecture = architecture
        self.billingProducts = billingProducts
        self.blockDeviceMappings = blockDeviceMappings
        self.bootMode = bootMode
        self.description = description
        self.dryRun = dryRun
        self.enaSupport = enaSupport
        self.imageLocation = imageLocation
        self.kernelId = kernelId
        self.name = name
        self.ramdiskId = ramdiskId
        self.rootDeviceName = rootDeviceName
        self.sriovNetSupport = sriovNetSupport
        self.tpmSupport = tpmSupport
        self.uefiData = uefiData
        self.virtualizationType = virtualizationType
    }
}
