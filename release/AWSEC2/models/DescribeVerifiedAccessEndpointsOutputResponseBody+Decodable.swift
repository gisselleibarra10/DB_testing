// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVerifiedAccessEndpointsOutputResponseBody: Swift.Equatable {
    let verifiedAccessEndpoints: [EC2ClientTypes.VerifiedAccessEndpoint]?
    let nextToken: Swift.String?
}

extension DescribeVerifiedAccessEndpointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case verifiedAccessEndpoints = "verifiedAccessEndpointSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.verifiedAccessEndpoints) {
            struct KeyVal0{struct item{}}
            let verifiedAccessEndpointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .verifiedAccessEndpoints)
            if let verifiedAccessEndpointsWrappedContainer = verifiedAccessEndpointsWrappedContainer {
                let verifiedAccessEndpointsContainer = try verifiedAccessEndpointsWrappedContainer.decodeIfPresent([EC2ClientTypes.VerifiedAccessEndpoint].self, forKey: .member)
                var verifiedAccessEndpointsBuffer:[EC2ClientTypes.VerifiedAccessEndpoint]? = nil
                if let verifiedAccessEndpointsContainer = verifiedAccessEndpointsContainer {
                    verifiedAccessEndpointsBuffer = [EC2ClientTypes.VerifiedAccessEndpoint]()
                    for structureContainer0 in verifiedAccessEndpointsContainer {
                        verifiedAccessEndpointsBuffer?.append(structureContainer0)
                    }
                }
                verifiedAccessEndpoints = verifiedAccessEndpointsBuffer
            } else {
                verifiedAccessEndpoints = []
            }
        } else {
            verifiedAccessEndpoints = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
