// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTrunkInterfaceAssociationsOutputResponseBody: Swift.Equatable {
    let interfaceAssociations: [EC2ClientTypes.TrunkInterfaceAssociation]?
    let nextToken: Swift.String?
}

extension DescribeTrunkInterfaceAssociationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case interfaceAssociations = "interfaceAssociationSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.interfaceAssociations) {
            struct KeyVal0{struct item{}}
            let interfaceAssociationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .interfaceAssociations)
            if let interfaceAssociationsWrappedContainer = interfaceAssociationsWrappedContainer {
                let interfaceAssociationsContainer = try interfaceAssociationsWrappedContainer.decodeIfPresent([EC2ClientTypes.TrunkInterfaceAssociation].self, forKey: .member)
                var interfaceAssociationsBuffer:[EC2ClientTypes.TrunkInterfaceAssociation]? = nil
                if let interfaceAssociationsContainer = interfaceAssociationsContainer {
                    interfaceAssociationsBuffer = [EC2ClientTypes.TrunkInterfaceAssociation]()
                    for structureContainer0 in interfaceAssociationsContainer {
                        interfaceAssociationsBuffer?.append(structureContainer0)
                    }
                }
                interfaceAssociations = interfaceAssociationsBuffer
            } else {
                interfaceAssociations = []
            }
        } else {
            interfaceAssociations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
