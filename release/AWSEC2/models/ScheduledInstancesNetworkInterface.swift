// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// Describes a network interface for a Scheduled Instance.
    public struct ScheduledInstancesNetworkInterface: Swift.Equatable {
        /// Indicates whether to assign a public IPv4 address to instances launched in a VPC. The public IPv4 address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is true.
        public var associatePublicIpAddress: Swift.Bool?
        /// Indicates whether to delete the interface when the instance is terminated.
        public var deleteOnTermination: Swift.Bool?
        /// The description.
        public var description: Swift.String?
        /// The index of the device for the network interface attachment.
        public var deviceIndex: Swift.Int?
        /// The IDs of the security groups.
        public var groups: [Swift.String]?
        /// The number of IPv6 addresses to assign to the network interface. The IPv6 addresses are automatically selected from the subnet range.
        public var ipv6AddressCount: Swift.Int?
        /// The specific IPv6 addresses from the subnet range.
        public var ipv6Addresses: [Ec2ClientTypes.ScheduledInstancesIpv6Address]?
        /// The ID of the network interface.
        public var networkInterfaceId: Swift.String?
        /// The IPv4 address of the network interface within the subnet.
        public var privateIpAddress: Swift.String?
        /// The private IPv4 addresses.
        public var privateIpAddressConfigs: [Ec2ClientTypes.ScheduledInstancesPrivateIpAddressConfig]?
        /// The number of secondary private IPv4 addresses.
        public var secondaryPrivateIpAddressCount: Swift.Int?
        /// The ID of the subnet.
        public var subnetId: Swift.String?

        public init (
            associatePublicIpAddress: Swift.Bool? = nil,
            deleteOnTermination: Swift.Bool? = nil,
            description: Swift.String? = nil,
            deviceIndex: Swift.Int? = nil,
            groups: [Swift.String]? = nil,
            ipv6AddressCount: Swift.Int? = nil,
            ipv6Addresses: [Ec2ClientTypes.ScheduledInstancesIpv6Address]? = nil,
            networkInterfaceId: Swift.String? = nil,
            privateIpAddress: Swift.String? = nil,
            privateIpAddressConfigs: [Ec2ClientTypes.ScheduledInstancesPrivateIpAddressConfig]? = nil,
            secondaryPrivateIpAddressCount: Swift.Int? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.associatePublicIpAddress = associatePublicIpAddress
            self.deleteOnTermination = deleteOnTermination
            self.description = description
            self.deviceIndex = deviceIndex
            self.groups = groups
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.privateIpAddressConfigs = privateIpAddressConfigs
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
        }
    }

}
