// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateClientVpnEndpointInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticationOptions = authenticationOptions {
            if !authenticationOptions.isEmpty {
                for (index0, clientvpnauthenticationrequest0) in authenticationOptions.enumerated() {
                    var authenticationOptionsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Authentication.\(index0.advanced(by: 1))"))
                    try authenticationOptionsContainer0.encode(clientvpnauthenticationrequest0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let clientCidrBlock = clientCidrBlock {
            try container.encode(clientCidrBlock, forKey: ClientRuntime.Key("ClientCidrBlock"))
        }
        if let clientConnectOptions = clientConnectOptions {
            try container.encode(clientConnectOptions, forKey: ClientRuntime.Key("ClientConnectOptions"))
        }
        if let clientLoginBannerOptions = clientLoginBannerOptions {
            try container.encode(clientLoginBannerOptions, forKey: ClientRuntime.Key("ClientLoginBannerOptions"))
        }
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: ClientRuntime.Key("ClientToken"))
        }
        if let connectionLogOptions = connectionLogOptions {
            try container.encode(connectionLogOptions, forKey: ClientRuntime.Key("ConnectionLogOptions"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let dnsServers = dnsServers {
            if !dnsServers.isEmpty {
                for (index0, string0) in dnsServers.enumerated() {
                    var dnsServersContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DnsServers.\(index0.advanced(by: 1))"))
                    try dnsServersContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let securityGroupIds = securityGroupIds {
            if !securityGroupIds.isEmpty {
                for (index0, securitygroupid0) in securityGroupIds.enumerated() {
                    var securityGroupIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroupId.\(index0.advanced(by: 1))"))
                    try securityGroupIdsContainer0.encode(securitygroupid0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let selfServicePortal = selfServicePortal {
            try container.encode(selfServicePortal, forKey: ClientRuntime.Key("SelfServicePortal"))
        }
        if let serverCertificateArn = serverCertificateArn {
            try container.encode(serverCertificateArn, forKey: ClientRuntime.Key("ServerCertificateArn"))
        }
        if let sessionTimeoutHours = sessionTimeoutHours {
            try container.encode(sessionTimeoutHours, forKey: ClientRuntime.Key("SessionTimeoutHours"))
        }
        if let splitTunnel = splitTunnel {
            try container.encode(splitTunnel, forKey: ClientRuntime.Key("SplitTunnel"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let transportProtocol = transportProtocol {
            try container.encode(transportProtocol, forKey: ClientRuntime.Key("TransportProtocol"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
        if let vpnPort = vpnPort {
            try container.encode(vpnPort, forKey: ClientRuntime.Key("VpnPort"))
        }
        try container.encode("CreateClientVpnEndpoint", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
