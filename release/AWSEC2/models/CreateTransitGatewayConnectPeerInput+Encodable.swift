// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateTransitGatewayConnectPeerInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bgpOptions = bgpOptions {
            try container.encode(bgpOptions, forKey: ClientRuntime.Key("BgpOptions"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let insideCidrBlocks = insideCidrBlocks {
            if !insideCidrBlocks.isEmpty {
                for (index0, string0) in insideCidrBlocks.enumerated() {
                    var insideCidrBlocksContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsideCidrBlocks.\(index0.advanced(by: 1))"))
                    try insideCidrBlocksContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var insideCidrBlocksContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsideCidrBlocks"))
                try insideCidrBlocksContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let peerAddress = peerAddress {
            try container.encode(peerAddress, forKey: ClientRuntime.Key("PeerAddress"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagSpecificationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification"))
                try tagSpecificationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let transitGatewayAddress = transitGatewayAddress {
            try container.encode(transitGatewayAddress, forKey: ClientRuntime.Key("TransitGatewayAddress"))
        }
        if let transitGatewayAttachmentId = transitGatewayAttachmentId {
            try container.encode(transitGatewayAttachmentId, forKey: ClientRuntime.Key("TransitGatewayAttachmentId"))
        }
        try container.encode("CreateTransitGatewayConnectPeer", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
