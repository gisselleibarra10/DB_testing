// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDhcpOptionsOutputResponseBody: Swift.Equatable {
    let dhcpOptions: [Ec2ClientTypes.DhcpOptions]?
    let nextToken: Swift.String?
}

extension DescribeDhcpOptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dhcpOptions = "dhcpOptionsSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.dhcpOptions) {
            struct KeyVal0{struct item{}}
            let dhcpOptionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .dhcpOptions)
            if let dhcpOptionsWrappedContainer = dhcpOptionsWrappedContainer {
                let dhcpOptionsContainer = try dhcpOptionsWrappedContainer.decodeIfPresent([Ec2ClientTypes.DhcpOptions].self, forKey: .member)
                var dhcpOptionsBuffer:[Ec2ClientTypes.DhcpOptions]? = nil
                if let dhcpOptionsContainer = dhcpOptionsContainer {
                    dhcpOptionsBuffer = [Ec2ClientTypes.DhcpOptions]()
                    for structureContainer0 in dhcpOptionsContainer {
                        dhcpOptionsBuffer?.append(structureContainer0)
                    }
                }
                dhcpOptions = dhcpOptionsBuffer
            } else {
                dhcpOptions = []
            }
        } else {
            dhcpOptions = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
