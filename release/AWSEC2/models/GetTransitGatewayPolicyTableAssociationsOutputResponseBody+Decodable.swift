// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetTransitGatewayPolicyTableAssociationsOutputResponseBody: Swift.Equatable {
    let associations: [Ec2ClientTypes.TransitGatewayPolicyTableAssociation]?
    let nextToken: Swift.String?
}

extension GetTransitGatewayPolicyTableAssociationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associations = "associations"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.associations) {
            struct KeyVal0{struct item{}}
            let associationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .associations)
            if let associationsWrappedContainer = associationsWrappedContainer {
                let associationsContainer = try associationsWrappedContainer.decodeIfPresent([Ec2ClientTypes.TransitGatewayPolicyTableAssociation].self, forKey: .member)
                var associationsBuffer:[Ec2ClientTypes.TransitGatewayPolicyTableAssociation]? = nil
                if let associationsContainer = associationsContainer {
                    associationsBuffer = [Ec2ClientTypes.TransitGatewayPolicyTableAssociation]()
                    for structureContainer0 in associationsContainer {
                        associationsBuffer?.append(structureContainer0)
                    }
                }
                associations = associationsBuffer
            } else {
                associations = []
            }
        } else {
            associations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
