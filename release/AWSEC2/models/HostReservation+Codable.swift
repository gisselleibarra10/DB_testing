// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.HostReservation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count = "count"
        case currencyCode = "currencyCode"
        case duration = "duration"
        case end = "end"
        case hostIdSet = "hostIdSet"
        case hostReservationId = "hostReservationId"
        case hourlyPrice = "hourlyPrice"
        case instanceFamily = "instanceFamily"
        case offeringId = "offeringId"
        case paymentOption = "paymentOption"
        case start = "start"
        case state = "state"
        case tags = "tagSet"
        case upfrontPrice = "upfrontPrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let count = count {
            try container.encode(count, forKey: ClientRuntime.Key("Count"))
        }
        if let currencyCode = currencyCode {
            try container.encode(currencyCode, forKey: ClientRuntime.Key("CurrencyCode"))
        }
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let end = end {
            try container.encodeTimestamp(end, format: .dateTime, forKey: ClientRuntime.Key("End"))
        }
        if let hostIdSet = hostIdSet {
            if !hostIdSet.isEmpty {
                for (index0, string0) in hostIdSet.enumerated() {
                    var hostIdSetContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("HostIdSet.\(index0.advanced(by: 1))"))
                    try hostIdSetContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var hostIdSetContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("HostIdSet"))
                try hostIdSetContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let hostReservationId = hostReservationId {
            try container.encode(hostReservationId, forKey: ClientRuntime.Key("HostReservationId"))
        }
        if let hourlyPrice = hourlyPrice {
            try container.encode(hourlyPrice, forKey: ClientRuntime.Key("HourlyPrice"))
        }
        if let instanceFamily = instanceFamily {
            try container.encode(instanceFamily, forKey: ClientRuntime.Key("InstanceFamily"))
        }
        if let offeringId = offeringId {
            try container.encode(offeringId, forKey: ClientRuntime.Key("OfferingId"))
        }
        if let paymentOption = paymentOption {
            try container.encode(paymentOption, forKey: ClientRuntime.Key("PaymentOption"))
        }
        if let start = start {
            try container.encodeTimestamp(start, format: .dateTime, forKey: ClientRuntime.Key("Start"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let upfrontPrice = upfrontPrice {
            try container.encode(upfrontPrice, forKey: ClientRuntime.Key("UpfrontPrice"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count)
        count = countDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.CurrencyCodeValues.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let endDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .end)
        end = endDecoded
        if containerValues.contains(.hostIdSet) {
            struct KeyVal0{struct item{}}
            let hostIdSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .hostIdSet)
            if let hostIdSetWrappedContainer = hostIdSetWrappedContainer {
                let hostIdSetContainer = try hostIdSetWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var hostIdSetBuffer:[Swift.String]? = nil
                if let hostIdSetContainer = hostIdSetContainer {
                    hostIdSetBuffer = [Swift.String]()
                    for stringContainer0 in hostIdSetContainer {
                        hostIdSetBuffer?.append(stringContainer0)
                    }
                }
                hostIdSet = hostIdSetBuffer
            } else {
                hostIdSet = []
            }
        } else {
            hostIdSet = nil
        }
        let hostReservationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostReservationId)
        hostReservationId = hostReservationIdDecoded
        let hourlyPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hourlyPrice)
        hourlyPrice = hourlyPriceDecoded
        let instanceFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceFamily)
        instanceFamily = instanceFamilyDecoded
        let offeringIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringId)
        offeringId = offeringIdDecoded
        let paymentOptionDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.PaymentOption.self, forKey: .paymentOption)
        paymentOption = paymentOptionDecoded
        let startDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .start)
        start = startDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.ReservationState.self, forKey: .state)
        state = stateDecoded
        let upfrontPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .upfrontPrice)
        upfrontPrice = upfrontPriceDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
