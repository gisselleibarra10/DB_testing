// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.LocalGatewayRouteTableVpcAssociation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case localGatewayId = "localGatewayId"
        case localGatewayRouteTableArn = "localGatewayRouteTableArn"
        case localGatewayRouteTableId = "localGatewayRouteTableId"
        case localGatewayRouteTableVpcAssociationId = "localGatewayRouteTableVpcAssociationId"
        case ownerId = "ownerId"
        case state = "state"
        case tags = "tagSet"
        case vpcId = "vpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let localGatewayId = localGatewayId {
            try container.encode(localGatewayId, forKey: ClientRuntime.Key("LocalGatewayId"))
        }
        if let localGatewayRouteTableArn = localGatewayRouteTableArn {
            try container.encode(localGatewayRouteTableArn, forKey: ClientRuntime.Key("LocalGatewayRouteTableArn"))
        }
        if let localGatewayRouteTableId = localGatewayRouteTableId {
            try container.encode(localGatewayRouteTableId, forKey: ClientRuntime.Key("LocalGatewayRouteTableId"))
        }
        if let localGatewayRouteTableVpcAssociationId = localGatewayRouteTableVpcAssociationId {
            try container.encode(localGatewayRouteTableVpcAssociationId, forKey: ClientRuntime.Key("LocalGatewayRouteTableVpcAssociationId"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: ClientRuntime.Key("OwnerId"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let localGatewayRouteTableVpcAssociationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localGatewayRouteTableVpcAssociationId)
        localGatewayRouteTableVpcAssociationId = localGatewayRouteTableVpcAssociationIdDecoded
        let localGatewayRouteTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localGatewayRouteTableId)
        localGatewayRouteTableId = localGatewayRouteTableIdDecoded
        let localGatewayRouteTableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localGatewayRouteTableArn)
        localGatewayRouteTableArn = localGatewayRouteTableArnDecoded
        let localGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localGatewayId)
        localGatewayId = localGatewayIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
