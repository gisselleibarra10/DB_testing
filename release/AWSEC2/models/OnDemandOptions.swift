// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// Describes the configuration of On-Demand Instances in an EC2 Fleet.
    public struct OnDemandOptions: Swift.Equatable {
        /// The strategy that determines the order of the launch template overrides to use in fulfilling On-Demand capacity. lowest-price - EC2 Fleet uses price to determine the order, launching the lowest price first. prioritized - EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. Default: lowest-price
        public var allocationStrategy: Ec2ClientTypes.FleetOnDemandAllocationStrategy?
        /// The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity. Supported only for fleets of type instant.
        public var capacityReservationOptions: Ec2ClientTypes.CapacityReservationOptions?
        /// The maximum amount per hour for On-Demand Instances that you're willing to pay.
        public var maxTotalPrice: Swift.String?
        /// The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances. Supported only for fleets of type instant. At least one of the following must be specified: SingleAvailabilityZone | SingleInstanceType
        public var minTargetCapacity: Swift.Int?
        /// Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported only for fleets of type instant.
        public var singleAvailabilityZone: Swift.Bool?
        /// Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet. Supported only for fleets of type instant.
        public var singleInstanceType: Swift.Bool?

        public init (
            allocationStrategy: Ec2ClientTypes.FleetOnDemandAllocationStrategy? = nil,
            capacityReservationOptions: Ec2ClientTypes.CapacityReservationOptions? = nil,
            maxTotalPrice: Swift.String? = nil,
            minTargetCapacity: Swift.Int? = nil,
            singleAvailabilityZone: Swift.Bool? = nil,
            singleInstanceType: Swift.Bool? = nil
        )
        {
            self.allocationStrategy = allocationStrategy
            self.capacityReservationOptions = capacityReservationOptions
            self.maxTotalPrice = maxTotalPrice
            self.minTargetCapacity = minTargetCapacity
            self.singleAvailabilityZone = singleAvailabilityZone
            self.singleInstanceType = singleInstanceType
        }
    }

}
