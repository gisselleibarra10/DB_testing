// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.SnapshotTierStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case archivalCompleteTime = "archivalCompleteTime"
        case lastTieringOperationStatus = "lastTieringOperationStatus"
        case lastTieringOperationStatusDetail = "lastTieringOperationStatusDetail"
        case lastTieringProgress = "lastTieringProgress"
        case lastTieringStartTime = "lastTieringStartTime"
        case ownerId = "ownerId"
        case restoreExpiryTime = "restoreExpiryTime"
        case snapshotId = "snapshotId"
        case status = "status"
        case storageTier = "storageTier"
        case tags = "tagSet"
        case volumeId = "volumeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let archivalCompleteTime = archivalCompleteTime {
            try container.encode(ClientRuntime.TimestampWrapper(archivalCompleteTime, format: .dateTime), forKey: ClientRuntime.Key("ArchivalCompleteTime"))
        }
        if let lastTieringOperationStatus = lastTieringOperationStatus {
            try container.encode(lastTieringOperationStatus, forKey: ClientRuntime.Key("LastTieringOperationStatus"))
        }
        if let lastTieringOperationStatusDetail = lastTieringOperationStatusDetail {
            try container.encode(lastTieringOperationStatusDetail, forKey: ClientRuntime.Key("LastTieringOperationStatusDetail"))
        }
        if let lastTieringProgress = lastTieringProgress {
            try container.encode(lastTieringProgress, forKey: ClientRuntime.Key("LastTieringProgress"))
        }
        if let lastTieringStartTime = lastTieringStartTime {
            try container.encode(ClientRuntime.TimestampWrapper(lastTieringStartTime, format: .dateTime), forKey: ClientRuntime.Key("LastTieringStartTime"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: ClientRuntime.Key("OwnerId"))
        }
        if let restoreExpiryTime = restoreExpiryTime {
            try container.encode(ClientRuntime.TimestampWrapper(restoreExpiryTime, format: .dateTime), forKey: ClientRuntime.Key("RestoreExpiryTime"))
        }
        if let snapshotId = snapshotId {
            try container.encode(snapshotId, forKey: ClientRuntime.Key("SnapshotId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let storageTier = storageTier {
            try container.encode(storageTier, forKey: ClientRuntime.Key("StorageTier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let volumeId = volumeId {
            try container.encode(volumeId, forKey: ClientRuntime.Key("VolumeId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.SnapshotState.self, forKey: .status)
        status = statusDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let storageTierDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.StorageTier.self, forKey: .storageTier)
        storageTier = storageTierDecoded
        let lastTieringStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastTieringStartTime)
        var lastTieringStartTimeBuffer:ClientRuntime.Date? = nil
        if let lastTieringStartTimeDecoded = lastTieringStartTimeDecoded {
            lastTieringStartTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastTieringStartTimeDecoded, format: .dateTime)
        }
        lastTieringStartTime = lastTieringStartTimeBuffer
        let lastTieringProgressDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastTieringProgress)
        lastTieringProgress = lastTieringProgressDecoded
        let lastTieringOperationStatusDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.TieringOperationStatus.self, forKey: .lastTieringOperationStatus)
        lastTieringOperationStatus = lastTieringOperationStatusDecoded
        let lastTieringOperationStatusDetailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastTieringOperationStatusDetail)
        lastTieringOperationStatusDetail = lastTieringOperationStatusDetailDecoded
        let archivalCompleteTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .archivalCompleteTime)
        var archivalCompleteTimeBuffer:ClientRuntime.Date? = nil
        if let archivalCompleteTimeDecoded = archivalCompleteTimeDecoded {
            archivalCompleteTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(archivalCompleteTimeDecoded, format: .dateTime)
        }
        archivalCompleteTime = archivalCompleteTimeBuffer
        let restoreExpiryTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .restoreExpiryTime)
        var restoreExpiryTimeBuffer:ClientRuntime.Date? = nil
        if let restoreExpiryTimeDecoded = restoreExpiryTimeDecoded {
            restoreExpiryTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(restoreExpiryTimeDecoded, format: .dateTime)
        }
        restoreExpiryTime = restoreExpiryTimeBuffer
    }
}
