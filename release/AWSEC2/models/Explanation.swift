// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// Describes an explanation code for an unreachable path. For more information, see [Reachability Analyzer explanation codes](https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html).
    public struct Explanation: Swift.Equatable {
        /// The network ACL.
        public var acl: Ec2ClientTypes.AnalysisComponent?
        /// The network ACL rule.
        public var aclRule: Ec2ClientTypes.AnalysisAclRule?
        /// The IPv4 address, in CIDR notation.
        public var address: Swift.String?
        /// The IPv4 addresses, in CIDR notation.
        public var addresses: [Swift.String]?
        /// The resource to which the component is attached.
        public var attachedTo: Ec2ClientTypes.AnalysisComponent?
        /// The Availability Zones.
        public var availabilityZones: [Swift.String]?
        /// The CIDR ranges.
        public var cidrs: [Swift.String]?
        /// The listener for a Classic Load Balancer.
        public var classicLoadBalancerListener: Ec2ClientTypes.AnalysisLoadBalancerListener?
        /// The component.
        public var component: Ec2ClientTypes.AnalysisComponent?
        /// The Amazon Web Services account for the component.
        public var componentAccount: Swift.String?
        /// The Region for the component.
        public var componentRegion: Swift.String?
        /// The customer gateway.
        public var customerGateway: Ec2ClientTypes.AnalysisComponent?
        /// The destination.
        public var destination: Ec2ClientTypes.AnalysisComponent?
        /// The destination VPC.
        public var destinationVpc: Ec2ClientTypes.AnalysisComponent?
        /// The direction. The following are the possible values:
        ///
        /// * egress
        ///
        /// * ingress
        public var direction: Swift.String?
        /// The load balancer listener.
        public var elasticLoadBalancerListener: Ec2ClientTypes.AnalysisComponent?
        /// The explanation code.
        public var explanationCode: Swift.String?
        /// The route table.
        public var ingressRouteTable: Ec2ClientTypes.AnalysisComponent?
        /// The internet gateway.
        public var internetGateway: Ec2ClientTypes.AnalysisComponent?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public var loadBalancerArn: Swift.String?
        /// The listener port of the load balancer.
        public var loadBalancerListenerPort: Swift.Int?
        /// The target.
        public var loadBalancerTarget: Ec2ClientTypes.AnalysisLoadBalancerTarget?
        /// The target group.
        public var loadBalancerTargetGroup: Ec2ClientTypes.AnalysisComponent?
        /// The target groups.
        public var loadBalancerTargetGroups: [Ec2ClientTypes.AnalysisComponent]?
        /// The target port.
        public var loadBalancerTargetPort: Swift.Int?
        /// The missing component.
        public var missingComponent: Swift.String?
        /// The NAT gateway.
        public var natGateway: Ec2ClientTypes.AnalysisComponent?
        /// The network interface.
        public var networkInterface: Ec2ClientTypes.AnalysisComponent?
        /// The packet field.
        public var packetField: Swift.String?
        /// The port.
        public var port: Swift.Int?
        /// The port ranges.
        public var portRanges: [Ec2ClientTypes.PortRange]?
        /// The prefix list.
        public var prefixList: Ec2ClientTypes.AnalysisComponent?
        /// The protocols.
        public var protocols: [Swift.String]?
        /// The route table.
        public var routeTable: Ec2ClientTypes.AnalysisComponent?
        /// The route table route.
        public var routeTableRoute: Ec2ClientTypes.AnalysisRouteTableRoute?
        /// The security group.
        public var securityGroup: Ec2ClientTypes.AnalysisComponent?
        /// The security group rule.
        public var securityGroupRule: Ec2ClientTypes.AnalysisSecurityGroupRule?
        /// The security groups.
        public var securityGroups: [Ec2ClientTypes.AnalysisComponent]?
        /// The source VPC.
        public var sourceVpc: Ec2ClientTypes.AnalysisComponent?
        /// The state.
        public var state: Swift.String?
        /// The subnet.
        public var subnet: Ec2ClientTypes.AnalysisComponent?
        /// The route table for the subnet.
        public var subnetRouteTable: Ec2ClientTypes.AnalysisComponent?
        /// The transit gateway.
        public var transitGateway: Ec2ClientTypes.AnalysisComponent?
        /// The transit gateway attachment.
        public var transitGatewayAttachment: Ec2ClientTypes.AnalysisComponent?
        /// The transit gateway route table.
        public var transitGatewayRouteTable: Ec2ClientTypes.AnalysisComponent?
        /// The transit gateway route table route.
        public var transitGatewayRouteTableRoute: Ec2ClientTypes.TransitGatewayRouteTableRoute?
        /// The component VPC.
        public var vpc: Ec2ClientTypes.AnalysisComponent?
        /// The VPC endpoint.
        public var vpcEndpoint: Ec2ClientTypes.AnalysisComponent?
        /// The VPC peering connection.
        public var vpcPeeringConnection: Ec2ClientTypes.AnalysisComponent?
        /// The VPN connection.
        public var vpnConnection: Ec2ClientTypes.AnalysisComponent?
        /// The VPN gateway.
        public var vpnGateway: Ec2ClientTypes.AnalysisComponent?

        public init (
            acl: Ec2ClientTypes.AnalysisComponent? = nil,
            aclRule: Ec2ClientTypes.AnalysisAclRule? = nil,
            address: Swift.String? = nil,
            addresses: [Swift.String]? = nil,
            attachedTo: Ec2ClientTypes.AnalysisComponent? = nil,
            availabilityZones: [Swift.String]? = nil,
            cidrs: [Swift.String]? = nil,
            classicLoadBalancerListener: Ec2ClientTypes.AnalysisLoadBalancerListener? = nil,
            component: Ec2ClientTypes.AnalysisComponent? = nil,
            componentAccount: Swift.String? = nil,
            componentRegion: Swift.String? = nil,
            customerGateway: Ec2ClientTypes.AnalysisComponent? = nil,
            destination: Ec2ClientTypes.AnalysisComponent? = nil,
            destinationVpc: Ec2ClientTypes.AnalysisComponent? = nil,
            direction: Swift.String? = nil,
            elasticLoadBalancerListener: Ec2ClientTypes.AnalysisComponent? = nil,
            explanationCode: Swift.String? = nil,
            ingressRouteTable: Ec2ClientTypes.AnalysisComponent? = nil,
            internetGateway: Ec2ClientTypes.AnalysisComponent? = nil,
            loadBalancerArn: Swift.String? = nil,
            loadBalancerListenerPort: Swift.Int? = nil,
            loadBalancerTarget: Ec2ClientTypes.AnalysisLoadBalancerTarget? = nil,
            loadBalancerTargetGroup: Ec2ClientTypes.AnalysisComponent? = nil,
            loadBalancerTargetGroups: [Ec2ClientTypes.AnalysisComponent]? = nil,
            loadBalancerTargetPort: Swift.Int? = nil,
            missingComponent: Swift.String? = nil,
            natGateway: Ec2ClientTypes.AnalysisComponent? = nil,
            networkInterface: Ec2ClientTypes.AnalysisComponent? = nil,
            packetField: Swift.String? = nil,
            port: Swift.Int? = nil,
            portRanges: [Ec2ClientTypes.PortRange]? = nil,
            prefixList: Ec2ClientTypes.AnalysisComponent? = nil,
            protocols: [Swift.String]? = nil,
            routeTable: Ec2ClientTypes.AnalysisComponent? = nil,
            routeTableRoute: Ec2ClientTypes.AnalysisRouteTableRoute? = nil,
            securityGroup: Ec2ClientTypes.AnalysisComponent? = nil,
            securityGroupRule: Ec2ClientTypes.AnalysisSecurityGroupRule? = nil,
            securityGroups: [Ec2ClientTypes.AnalysisComponent]? = nil,
            sourceVpc: Ec2ClientTypes.AnalysisComponent? = nil,
            state: Swift.String? = nil,
            subnet: Ec2ClientTypes.AnalysisComponent? = nil,
            subnetRouteTable: Ec2ClientTypes.AnalysisComponent? = nil,
            transitGateway: Ec2ClientTypes.AnalysisComponent? = nil,
            transitGatewayAttachment: Ec2ClientTypes.AnalysisComponent? = nil,
            transitGatewayRouteTable: Ec2ClientTypes.AnalysisComponent? = nil,
            transitGatewayRouteTableRoute: Ec2ClientTypes.TransitGatewayRouteTableRoute? = nil,
            vpc: Ec2ClientTypes.AnalysisComponent? = nil,
            vpcEndpoint: Ec2ClientTypes.AnalysisComponent? = nil,
            vpcPeeringConnection: Ec2ClientTypes.AnalysisComponent? = nil,
            vpnConnection: Ec2ClientTypes.AnalysisComponent? = nil,
            vpnGateway: Ec2ClientTypes.AnalysisComponent? = nil
        )
        {
            self.acl = acl
            self.aclRule = aclRule
            self.address = address
            self.addresses = addresses
            self.attachedTo = attachedTo
            self.availabilityZones = availabilityZones
            self.cidrs = cidrs
            self.classicLoadBalancerListener = classicLoadBalancerListener
            self.component = component
            self.componentAccount = componentAccount
            self.componentRegion = componentRegion
            self.customerGateway = customerGateway
            self.destination = destination
            self.destinationVpc = destinationVpc
            self.direction = direction
            self.elasticLoadBalancerListener = elasticLoadBalancerListener
            self.explanationCode = explanationCode
            self.ingressRouteTable = ingressRouteTable
            self.internetGateway = internetGateway
            self.loadBalancerArn = loadBalancerArn
            self.loadBalancerListenerPort = loadBalancerListenerPort
            self.loadBalancerTarget = loadBalancerTarget
            self.loadBalancerTargetGroup = loadBalancerTargetGroup
            self.loadBalancerTargetGroups = loadBalancerTargetGroups
            self.loadBalancerTargetPort = loadBalancerTargetPort
            self.missingComponent = missingComponent
            self.natGateway = natGateway
            self.networkInterface = networkInterface
            self.packetField = packetField
            self.port = port
            self.portRanges = portRanges
            self.prefixList = prefixList
            self.protocols = protocols
            self.routeTable = routeTable
            self.routeTableRoute = routeTableRoute
            self.securityGroup = securityGroup
            self.securityGroupRule = securityGroupRule
            self.securityGroups = securityGroups
            self.sourceVpc = sourceVpc
            self.state = state
            self.subnet = subnet
            self.subnetRouteTable = subnetRouteTable
            self.transitGateway = transitGateway
            self.transitGatewayAttachment = transitGatewayAttachment
            self.transitGatewayRouteTable = transitGatewayRouteTable
            self.transitGatewayRouteTableRoute = transitGatewayRouteTableRoute
            self.vpc = vpc
            self.vpcEndpoint = vpcEndpoint
            self.vpcPeeringConnection = vpcPeeringConnection
            self.vpnConnection = vpnConnection
            self.vpnGateway = vpnGateway
        }
    }

}
