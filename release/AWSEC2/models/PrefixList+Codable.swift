// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.PrefixList: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrs = "cidrSet"
        case prefixListId = "prefixListId"
        case prefixListName = "prefixListName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidrs = cidrs {
            if !cidrs.isEmpty {
                for (index0, string0) in cidrs.enumerated() {
                    var cidrsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CidrSet.\(index0.advanced(by: 1))"))
                    try cidrsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var cidrsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CidrSet"))
                try cidrsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let prefixListId = prefixListId {
            try container.encode(prefixListId, forKey: ClientRuntime.Key("PrefixListId"))
        }
        if let prefixListName = prefixListName {
            try container.encode(prefixListName, forKey: ClientRuntime.Key("PrefixListName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.cidrs) {
            struct KeyVal0{struct item{}}
            let cidrsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .cidrs)
            if let cidrsWrappedContainer = cidrsWrappedContainer {
                let cidrsContainer = try cidrsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var cidrsBuffer:[Swift.String]? = nil
                if let cidrsContainer = cidrsContainer {
                    cidrsBuffer = [Swift.String]()
                    for stringContainer0 in cidrsContainer {
                        cidrsBuffer?.append(stringContainer0)
                    }
                }
                cidrs = cidrsBuffer
            } else {
                cidrs = []
            }
        } else {
            cidrs = nil
        }
        let prefixListIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefixListId)
        prefixListId = prefixListIdDecoded
        let prefixListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefixListName)
        prefixListName = prefixListNameDecoded
    }
}
