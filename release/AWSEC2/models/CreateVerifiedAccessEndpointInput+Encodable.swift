// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateVerifiedAccessEndpointInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationDomain = applicationDomain {
            try container.encode(applicationDomain, forKey: ClientRuntime.Key("ApplicationDomain"))
        }
        if let attachmentType = attachmentType {
            try container.encode(attachmentType, forKey: ClientRuntime.Key("AttachmentType"))
        }
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: ClientRuntime.Key("ClientToken"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let domainCertificateArn = domainCertificateArn {
            try container.encode(domainCertificateArn, forKey: ClientRuntime.Key("DomainCertificateArn"))
        }
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let endpointDomainPrefix = endpointDomainPrefix {
            try container.encode(endpointDomainPrefix, forKey: ClientRuntime.Key("EndpointDomainPrefix"))
        }
        if let endpointType = endpointType {
            try container.encode(endpointType, forKey: ClientRuntime.Key("EndpointType"))
        }
        if let loadBalancerOptions = loadBalancerOptions {
            try container.encode(loadBalancerOptions, forKey: ClientRuntime.Key("LoadBalancerOptions"))
        }
        if let networkInterfaceOptions = networkInterfaceOptions {
            try container.encode(networkInterfaceOptions, forKey: ClientRuntime.Key("NetworkInterfaceOptions"))
        }
        if let policyDocument = policyDocument {
            try container.encode(policyDocument, forKey: ClientRuntime.Key("PolicyDocument"))
        }
        if let securityGroupIds = securityGroupIds {
            if !securityGroupIds.isEmpty {
                for (index0, securitygroupid0) in securityGroupIds.enumerated() {
                    var securityGroupIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroupId.\(index0.advanced(by: 1))"))
                    try securityGroupIdsContainer0.encode(securitygroupid0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var securityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroupId"))
                try securityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var tagSpecificationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSpecification"))
                try tagSpecificationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let verifiedAccessGroupId = verifiedAccessGroupId {
            try container.encode(verifiedAccessGroupId, forKey: ClientRuntime.Key("VerifiedAccessGroupId"))
        }
        try container.encode("CreateVerifiedAccessEndpoint", forKey:ClientRuntime.Key("Action"))
        try container.encode("2016-11-15", forKey:ClientRuntime.Key("Version"))
    }
}
