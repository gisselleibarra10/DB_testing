// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyImageAttributeInputBody: Swift.Equatable {
    let attribute: Swift.String?
    let description: EC2ClientTypes.AttributeValue?
    let imageId: Swift.String?
    let launchPermission: EC2ClientTypes.LaunchPermissionModifications?
    let operationType: EC2ClientTypes.OperationType?
    let productCodes: [Swift.String]?
    let userGroups: [Swift.String]?
    let userIds: [Swift.String]?
    let value: Swift.String?
    let dryRun: Swift.Bool?
    let organizationArns: [Swift.String]?
    let organizationalUnitArns: [Swift.String]?
}

extension ModifyImageAttributeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attribute = "Attribute"
        case description = "Description"
        case dryRun = "dryRun"
        case imageId = "ImageId"
        case launchPermission = "LaunchPermission"
        case operationType = "OperationType"
        case organizationArns = "OrganizationArn"
        case organizationalUnitArns = "OrganizationalUnitArn"
        case productCodes = "ProductCode"
        case userGroups = "UserGroup"
        case userIds = "UserId"
        case value = "Value"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attribute)
        attribute = attributeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AttributeValue.self, forKey: .description)
        description = descriptionDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let launchPermissionDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.LaunchPermissionModifications.self, forKey: .launchPermission)
        launchPermission = launchPermissionDecoded
        let operationTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.OperationType.self, forKey: .operationType)
        operationType = operationTypeDecoded
        if containerValues.contains(.productCodes) {
            struct KeyVal0{struct ProductCode{}}
            let productCodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ProductCode>.CodingKeys.self, forKey: .productCodes)
            if let productCodesWrappedContainer = productCodesWrappedContainer {
                let productCodesContainer = try productCodesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var productCodesBuffer:[Swift.String]? = nil
                if let productCodesContainer = productCodesContainer {
                    productCodesBuffer = [Swift.String]()
                    for stringContainer0 in productCodesContainer {
                        productCodesBuffer?.append(stringContainer0)
                    }
                }
                productCodes = productCodesBuffer
            } else {
                productCodes = []
            }
        } else {
            productCodes = nil
        }
        if containerValues.contains(.userGroups) {
            struct KeyVal0{struct UserGroup{}}
            let userGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.UserGroup>.CodingKeys.self, forKey: .userGroups)
            if let userGroupsWrappedContainer = userGroupsWrappedContainer {
                let userGroupsContainer = try userGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userGroupsBuffer:[Swift.String]? = nil
                if let userGroupsContainer = userGroupsContainer {
                    userGroupsBuffer = [Swift.String]()
                    for stringContainer0 in userGroupsContainer {
                        userGroupsBuffer?.append(stringContainer0)
                    }
                }
                userGroups = userGroupsBuffer
            } else {
                userGroups = []
            }
        } else {
            userGroups = nil
        }
        if containerValues.contains(.userIds) {
            struct KeyVal0{struct UserId{}}
            let userIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.UserId>.CodingKeys.self, forKey: .userIds)
            if let userIdsWrappedContainer = userIdsWrappedContainer {
                let userIdsContainer = try userIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userIdsBuffer:[Swift.String]? = nil
                if let userIdsContainer = userIdsContainer {
                    userIdsBuffer = [Swift.String]()
                    for stringContainer0 in userIdsContainer {
                        userIdsBuffer?.append(stringContainer0)
                    }
                }
                userIds = userIdsBuffer
            } else {
                userIds = []
            }
        } else {
            userIds = nil
        }
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.organizationArns) {
            struct KeyVal0{struct OrganizationArn{}}
            let organizationArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.OrganizationArn>.CodingKeys.self, forKey: .organizationArns)
            if let organizationArnsWrappedContainer = organizationArnsWrappedContainer {
                let organizationArnsContainer = try organizationArnsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var organizationArnsBuffer:[Swift.String]? = nil
                if let organizationArnsContainer = organizationArnsContainer {
                    organizationArnsBuffer = [Swift.String]()
                    for stringContainer0 in organizationArnsContainer {
                        organizationArnsBuffer?.append(stringContainer0)
                    }
                }
                organizationArns = organizationArnsBuffer
            } else {
                organizationArns = []
            }
        } else {
            organizationArns = nil
        }
        if containerValues.contains(.organizationalUnitArns) {
            struct KeyVal0{struct OrganizationalUnitArn{}}
            let organizationalUnitArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.OrganizationalUnitArn>.CodingKeys.self, forKey: .organizationalUnitArns)
            if let organizationalUnitArnsWrappedContainer = organizationalUnitArnsWrappedContainer {
                let organizationalUnitArnsContainer = try organizationalUnitArnsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var organizationalUnitArnsBuffer:[Swift.String]? = nil
                if let organizationalUnitArnsContainer = organizationalUnitArnsContainer {
                    organizationalUnitArnsBuffer = [Swift.String]()
                    for stringContainer0 in organizationalUnitArnsContainer {
                        organizationalUnitArnsBuffer?.append(stringContainer0)
                    }
                }
                organizationalUnitArns = organizationalUnitArnsBuffer
            } else {
                organizationalUnitArns = []
            }
        } else {
            organizationalUnitArns = nil
        }
    }
}
