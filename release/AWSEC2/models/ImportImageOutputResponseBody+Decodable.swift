// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportImageOutputResponseBody: Swift.Equatable {
    let architecture: Swift.String?
    let description: Swift.String?
    let encrypted: Swift.Bool?
    let hypervisor: Swift.String?
    let imageId: Swift.String?
    let importTaskId: Swift.String?
    let kmsKeyId: Swift.String?
    let licenseType: Swift.String?
    let platform: Swift.String?
    let progress: Swift.String?
    let snapshotDetails: [EC2ClientTypes.SnapshotDetail]?
    let status: Swift.String?
    let statusMessage: Swift.String?
    let licenseSpecifications: [EC2ClientTypes.ImportImageLicenseConfigurationResponse]?
    let tags: [EC2ClientTypes.Tag]?
    let usageOperation: Swift.String?
}

extension ImportImageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case architecture = "architecture"
        case description = "description"
        case encrypted = "encrypted"
        case hypervisor = "hypervisor"
        case imageId = "imageId"
        case importTaskId = "importTaskId"
        case kmsKeyId = "kmsKeyId"
        case licenseSpecifications = "licenseSpecifications"
        case licenseType = "licenseType"
        case platform = "platform"
        case progress = "progress"
        case snapshotDetails = "snapshotDetailSet"
        case status = "status"
        case statusMessage = "statusMessage"
        case tags = "tagSet"
        case usageOperation = "usageOperation"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let architectureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .architecture)
        architecture = architectureDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let hypervisorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hypervisor)
        hypervisor = hypervisorDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let importTaskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importTaskId)
        importTaskId = importTaskIdDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let licenseTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseType)
        licenseType = licenseTypeDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let progressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .progress)
        progress = progressDecoded
        if containerValues.contains(.snapshotDetails) {
            struct KeyVal0{struct item{}}
            let snapshotDetailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .snapshotDetails)
            if let snapshotDetailsWrappedContainer = snapshotDetailsWrappedContainer {
                let snapshotDetailsContainer = try snapshotDetailsWrappedContainer.decodeIfPresent([EC2ClientTypes.SnapshotDetail].self, forKey: .member)
                var snapshotDetailsBuffer:[EC2ClientTypes.SnapshotDetail]? = nil
                if let snapshotDetailsContainer = snapshotDetailsContainer {
                    snapshotDetailsBuffer = [EC2ClientTypes.SnapshotDetail]()
                    for structureContainer0 in snapshotDetailsContainer {
                        snapshotDetailsBuffer?.append(structureContainer0)
                    }
                }
                snapshotDetails = snapshotDetailsBuffer
            } else {
                snapshotDetails = []
            }
        } else {
            snapshotDetails = nil
        }
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        if containerValues.contains(.licenseSpecifications) {
            struct KeyVal0{struct item{}}
            let licenseSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .licenseSpecifications)
            if let licenseSpecificationsWrappedContainer = licenseSpecificationsWrappedContainer {
                let licenseSpecificationsContainer = try licenseSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.ImportImageLicenseConfigurationResponse].self, forKey: .member)
                var licenseSpecificationsBuffer:[EC2ClientTypes.ImportImageLicenseConfigurationResponse]? = nil
                if let licenseSpecificationsContainer = licenseSpecificationsContainer {
                    licenseSpecificationsBuffer = [EC2ClientTypes.ImportImageLicenseConfigurationResponse]()
                    for structureContainer0 in licenseSpecificationsContainer {
                        licenseSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                licenseSpecifications = licenseSpecificationsBuffer
            } else {
                licenseSpecifications = []
            }
        } else {
            licenseSpecifications = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([EC2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[EC2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [EC2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let usageOperationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usageOperation)
        usageOperation = usageOperationDecoded
    }
}
