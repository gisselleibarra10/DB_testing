// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EC2ClientTypes {
    /// Describes the launch specification for one or more Spot Instances. If you include On-Demand capacity in your fleet request or want to specify an EFA network device, you can't use SpotFleetLaunchSpecification; you must use [LaunchTemplateConfig](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_LaunchTemplateConfig.html).
    public struct SpotFleetLaunchSpecification: Swift.Equatable {
        /// Deprecated.
        public var addressingType: Swift.String?
        /// One or more block devices that are mapped to the Spot Instances. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
        public var blockDeviceMappings: [EC2ClientTypes.BlockDeviceMapping]?
        /// Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false
        public var ebsOptimized: Swift.Bool?
        /// The IAM instance profile.
        public var iamInstanceProfile: EC2ClientTypes.IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public var imageId: Swift.String?
        /// The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes. If you specify InstanceRequirements, you can't specify InstanceType.
        public var instanceRequirements: EC2ClientTypes.InstanceRequirements?
        /// The instance type.
        public var instanceType: EC2ClientTypes.InstanceType?
        /// The ID of the kernel.
        public var kernelId: Swift.String?
        /// The name of the key pair.
        public var keyName: Swift.String?
        /// Enable or disable monitoring for the instances.
        public var monitoring: EC2ClientTypes.SpotFleetMonitoring?
        /// One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface. SpotFleetLaunchSpecification currently does not support Elastic Fabric Adapter (EFA). To specify an EFA, you must use [LaunchTemplateConfig](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_LaunchTemplateConfig.html).
        public var networkInterfaces: [EC2ClientTypes.InstanceNetworkInterfaceSpecification]?
        /// The placement information.
        public var placement: EC2ClientTypes.SpotPlacement?
        /// The ID of the RAM disk. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, refer to the Amazon Web Services Resource Center and search for the kernel ID.
        public var ramdiskId: Swift.String?
        /// One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
        public var securityGroups: [EC2ClientTypes.GroupIdentifier]?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price. If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.
        public var spotPrice: Swift.String?
        /// The IDs of the subnets in which to launch the instances. To specify multiple subnets, separate them using commas; for example, "subnet-1234abcdeexample1, subnet-0987cdef6example2".
        public var subnetId: Swift.String?
        /// The tags to apply during creation.
        public var tagSpecifications: [EC2ClientTypes.SpotFleetTagSpecification]?
        /// The Base64-encoded user data that instances use when starting up.
        public var userData: Swift.String?
        /// The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms of instances, or a performance characteristic such as vCPUs, memory, or I/O. If the target capacity divided by this value is not a whole number, Amazon EC2 rounds the number of instances to the next whole number. If this value is not specified, the default is 1.
        public var weightedCapacity: Swift.Double?

        public init (
            addressingType: Swift.String? = nil,
            blockDeviceMappings: [EC2ClientTypes.BlockDeviceMapping]? = nil,
            ebsOptimized: Swift.Bool? = nil,
            iamInstanceProfile: EC2ClientTypes.IamInstanceProfileSpecification? = nil,
            imageId: Swift.String? = nil,
            instanceRequirements: EC2ClientTypes.InstanceRequirements? = nil,
            instanceType: EC2ClientTypes.InstanceType? = nil,
            kernelId: Swift.String? = nil,
            keyName: Swift.String? = nil,
            monitoring: EC2ClientTypes.SpotFleetMonitoring? = nil,
            networkInterfaces: [EC2ClientTypes.InstanceNetworkInterfaceSpecification]? = nil,
            placement: EC2ClientTypes.SpotPlacement? = nil,
            ramdiskId: Swift.String? = nil,
            securityGroups: [EC2ClientTypes.GroupIdentifier]? = nil,
            spotPrice: Swift.String? = nil,
            subnetId: Swift.String? = nil,
            tagSpecifications: [EC2ClientTypes.SpotFleetTagSpecification]? = nil,
            userData: Swift.String? = nil,
            weightedCapacity: Swift.Double? = nil
        )
        {
            self.addressingType = addressingType
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceRequirements = instanceRequirements
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
            self.securityGroups = securityGroups
            self.spotPrice = spotPrice
            self.subnetId = subnetId
            self.tagSpecifications = tagSpecifications
            self.userData = userData
            self.weightedCapacity = weightedCapacity
        }
    }

}
