// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.ModifyTransitGatewayOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addTransitGatewayCidrBlocks = "AddTransitGatewayCidrBlocks"
        case amazonSideAsn = "AmazonSideAsn"
        case associationDefaultRouteTableId = "AssociationDefaultRouteTableId"
        case autoAcceptSharedAttachments = "AutoAcceptSharedAttachments"
        case defaultRouteTableAssociation = "DefaultRouteTableAssociation"
        case defaultRouteTablePropagation = "DefaultRouteTablePropagation"
        case dnsSupport = "DnsSupport"
        case propagationDefaultRouteTableId = "PropagationDefaultRouteTableId"
        case removeTransitGatewayCidrBlocks = "RemoveTransitGatewayCidrBlocks"
        case vpnEcmpSupport = "VpnEcmpSupport"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let addTransitGatewayCidrBlocks = addTransitGatewayCidrBlocks {
            if !addTransitGatewayCidrBlocks.isEmpty {
                for (index0, string0) in addTransitGatewayCidrBlocks.enumerated() {
                    var addTransitGatewayCidrBlocksContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddTransitGatewayCidrBlocks.\(index0.advanced(by: 1))"))
                    try addTransitGatewayCidrBlocksContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var addTransitGatewayCidrBlocksContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddTransitGatewayCidrBlocks"))
                try addTransitGatewayCidrBlocksContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let amazonSideAsn = amazonSideAsn {
            try container.encode(amazonSideAsn, forKey: ClientRuntime.Key("AmazonSideAsn"))
        }
        if let associationDefaultRouteTableId = associationDefaultRouteTableId {
            try container.encode(associationDefaultRouteTableId, forKey: ClientRuntime.Key("AssociationDefaultRouteTableId"))
        }
        if let autoAcceptSharedAttachments = autoAcceptSharedAttachments {
            try container.encode(autoAcceptSharedAttachments, forKey: ClientRuntime.Key("AutoAcceptSharedAttachments"))
        }
        if let defaultRouteTableAssociation = defaultRouteTableAssociation {
            try container.encode(defaultRouteTableAssociation, forKey: ClientRuntime.Key("DefaultRouteTableAssociation"))
        }
        if let defaultRouteTablePropagation = defaultRouteTablePropagation {
            try container.encode(defaultRouteTablePropagation, forKey: ClientRuntime.Key("DefaultRouteTablePropagation"))
        }
        if let dnsSupport = dnsSupport {
            try container.encode(dnsSupport, forKey: ClientRuntime.Key("DnsSupport"))
        }
        if let propagationDefaultRouteTableId = propagationDefaultRouteTableId {
            try container.encode(propagationDefaultRouteTableId, forKey: ClientRuntime.Key("PropagationDefaultRouteTableId"))
        }
        if let removeTransitGatewayCidrBlocks = removeTransitGatewayCidrBlocks {
            if !removeTransitGatewayCidrBlocks.isEmpty {
                for (index0, string0) in removeTransitGatewayCidrBlocks.enumerated() {
                    var removeTransitGatewayCidrBlocksContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveTransitGatewayCidrBlocks.\(index0.advanced(by: 1))"))
                    try removeTransitGatewayCidrBlocksContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var removeTransitGatewayCidrBlocksContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveTransitGatewayCidrBlocks"))
                try removeTransitGatewayCidrBlocksContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpnEcmpSupport = vpnEcmpSupport {
            try container.encode(vpnEcmpSupport, forKey: ClientRuntime.Key("VpnEcmpSupport"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.addTransitGatewayCidrBlocks) {
            struct KeyVal0{struct item{}}
            let addTransitGatewayCidrBlocksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .addTransitGatewayCidrBlocks)
            if let addTransitGatewayCidrBlocksWrappedContainer = addTransitGatewayCidrBlocksWrappedContainer {
                let addTransitGatewayCidrBlocksContainer = try addTransitGatewayCidrBlocksWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var addTransitGatewayCidrBlocksBuffer:[Swift.String]? = nil
                if let addTransitGatewayCidrBlocksContainer = addTransitGatewayCidrBlocksContainer {
                    addTransitGatewayCidrBlocksBuffer = [Swift.String]()
                    for stringContainer0 in addTransitGatewayCidrBlocksContainer {
                        addTransitGatewayCidrBlocksBuffer?.append(stringContainer0)
                    }
                }
                addTransitGatewayCidrBlocks = addTransitGatewayCidrBlocksBuffer
            } else {
                addTransitGatewayCidrBlocks = []
            }
        } else {
            addTransitGatewayCidrBlocks = nil
        }
        if containerValues.contains(.removeTransitGatewayCidrBlocks) {
            struct KeyVal0{struct item{}}
            let removeTransitGatewayCidrBlocksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .removeTransitGatewayCidrBlocks)
            if let removeTransitGatewayCidrBlocksWrappedContainer = removeTransitGatewayCidrBlocksWrappedContainer {
                let removeTransitGatewayCidrBlocksContainer = try removeTransitGatewayCidrBlocksWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var removeTransitGatewayCidrBlocksBuffer:[Swift.String]? = nil
                if let removeTransitGatewayCidrBlocksContainer = removeTransitGatewayCidrBlocksContainer {
                    removeTransitGatewayCidrBlocksBuffer = [Swift.String]()
                    for stringContainer0 in removeTransitGatewayCidrBlocksContainer {
                        removeTransitGatewayCidrBlocksBuffer?.append(stringContainer0)
                    }
                }
                removeTransitGatewayCidrBlocks = removeTransitGatewayCidrBlocksBuffer
            } else {
                removeTransitGatewayCidrBlocks = []
            }
        } else {
            removeTransitGatewayCidrBlocks = nil
        }
        let vpnEcmpSupportDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.VpnEcmpSupportValue.self, forKey: .vpnEcmpSupport)
        vpnEcmpSupport = vpnEcmpSupportDecoded
        let dnsSupportDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.DnsSupportValue.self, forKey: .dnsSupport)
        dnsSupport = dnsSupportDecoded
        let autoAcceptSharedAttachmentsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AutoAcceptSharedAttachmentsValue.self, forKey: .autoAcceptSharedAttachments)
        autoAcceptSharedAttachments = autoAcceptSharedAttachmentsDecoded
        let defaultRouteTableAssociationDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.DefaultRouteTableAssociationValue.self, forKey: .defaultRouteTableAssociation)
        defaultRouteTableAssociation = defaultRouteTableAssociationDecoded
        let associationDefaultRouteTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationDefaultRouteTableId)
        associationDefaultRouteTableId = associationDefaultRouteTableIdDecoded
        let defaultRouteTablePropagationDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.DefaultRouteTablePropagationValue.self, forKey: .defaultRouteTablePropagation)
        defaultRouteTablePropagation = defaultRouteTablePropagationDecoded
        let propagationDefaultRouteTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .propagationDefaultRouteTableId)
        propagationDefaultRouteTableId = propagationDefaultRouteTableIdDecoded
        let amazonSideAsnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amazonSideAsn)
        amazonSideAsn = amazonSideAsnDecoded
    }
}
