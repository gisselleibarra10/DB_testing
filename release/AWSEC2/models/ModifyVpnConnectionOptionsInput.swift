// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ModifyVpnConnectionOptionsInput: Swift.Equatable {
    /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    public var dryRun: Swift.Bool?
    /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: 0.0.0.0/0
    public var localIpv4NetworkCidr: Swift.String?
    /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: ::/0
    public var localIpv6NetworkCidr: Swift.String?
    /// The IPv4 CIDR on the Amazon Web Services side of the VPN connection. Default: 0.0.0.0/0
    public var remoteIpv4NetworkCidr: Swift.String?
    /// The IPv6 CIDR on the Amazon Web Services side of the VPN connection. Default: ::/0
    public var remoteIpv6NetworkCidr: Swift.String?
    /// The ID of the Site-to-Site VPN connection.
    /// This member is required.
    public var vpnConnectionId: Swift.String?

    public init (
        dryRun: Swift.Bool? = nil,
        localIpv4NetworkCidr: Swift.String? = nil,
        localIpv6NetworkCidr: Swift.String? = nil,
        remoteIpv4NetworkCidr: Swift.String? = nil,
        remoteIpv6NetworkCidr: Swift.String? = nil,
        vpnConnectionId: Swift.String? = nil
    )
    {
        self.dryRun = dryRun
        self.localIpv4NetworkCidr = localIpv4NetworkCidr
        self.localIpv6NetworkCidr = localIpv6NetworkCidr
        self.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr
        self.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr
        self.vpnConnectionId = vpnConnectionId
    }
}
