// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeleteFlowLogsInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let flowLogIds: [Swift.String]?
}

extension DeleteFlowLogsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case flowLogIds = "FlowLogId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        if containerValues.contains(.flowLogIds) {
            struct KeyVal0{struct item{}}
            let flowLogIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .flowLogIds)
            if let flowLogIdsWrappedContainer = flowLogIdsWrappedContainer {
                let flowLogIdsContainer = try flowLogIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var flowLogIdsBuffer:[Swift.String]? = nil
                if let flowLogIdsContainer = flowLogIdsContainer {
                    flowLogIdsBuffer = [Swift.String]()
                    for stringContainer0 in flowLogIdsContainer {
                        flowLogIdsBuffer?.append(stringContainer0)
                    }
                }
                flowLogIds = flowLogIdsBuffer
            } else {
                flowLogIds = []
            }
        } else {
            flowLogIds = nil
        }
    }
}
