// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.NetworkInterfaceAttachment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachTime = "attachTime"
        case attachmentId = "attachmentId"
        case deleteOnTermination = "deleteOnTermination"
        case deviceIndex = "deviceIndex"
        case enaSrdSpecification = "enaSrdSpecification"
        case instanceId = "instanceId"
        case instanceOwnerId = "instanceOwnerId"
        case networkCardIndex = "networkCardIndex"
        case status = "status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attachTime = attachTime {
            try container.encodeTimestamp(attachTime, format: .dateTime, forKey: ClientRuntime.Key("AttachTime"))
        }
        if let attachmentId = attachmentId {
            try container.encode(attachmentId, forKey: ClientRuntime.Key("AttachmentId"))
        }
        if let deleteOnTermination = deleteOnTermination {
            try container.encode(deleteOnTermination, forKey: ClientRuntime.Key("DeleteOnTermination"))
        }
        if let deviceIndex = deviceIndex {
            try container.encode(deviceIndex, forKey: ClientRuntime.Key("DeviceIndex"))
        }
        if let enaSrdSpecification = enaSrdSpecification {
            try container.encode(enaSrdSpecification, forKey: ClientRuntime.Key("EnaSrdSpecification"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let instanceOwnerId = instanceOwnerId {
            try container.encode(instanceOwnerId, forKey: ClientRuntime.Key("InstanceOwnerId"))
        }
        if let networkCardIndex = networkCardIndex {
            try container.encode(networkCardIndex, forKey: ClientRuntime.Key("NetworkCardIndex"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .attachTime)
        attachTime = attachTimeDecoded
        let attachmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachmentId)
        attachmentId = attachmentIdDecoded
        let deleteOnTerminationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteOnTermination)
        deleteOnTermination = deleteOnTerminationDecoded
        let deviceIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .deviceIndex)
        deviceIndex = deviceIndexDecoded
        let networkCardIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .networkCardIndex)
        networkCardIndex = networkCardIndexDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceOwnerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceOwnerId)
        instanceOwnerId = instanceOwnerIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AttachmentStatus.self, forKey: .status)
        status = statusDecoded
        let enaSrdSpecificationDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.AttachmentEnaSrdSpecification.self, forKey: .enaSrdSpecification)
        enaSrdSpecification = enaSrdSpecificationDecoded
    }
}
