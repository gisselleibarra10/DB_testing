// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeImportSnapshotTasksOutputResponseBody: Swift.Equatable {
    let importSnapshotTasks: [EC2ClientTypes.ImportSnapshotTask]?
    let nextToken: Swift.String?
}

extension DescribeImportSnapshotTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importSnapshotTasks = "importSnapshotTaskSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.importSnapshotTasks) {
            struct KeyVal0{struct item{}}
            let importSnapshotTasksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .importSnapshotTasks)
            if let importSnapshotTasksWrappedContainer = importSnapshotTasksWrappedContainer {
                let importSnapshotTasksContainer = try importSnapshotTasksWrappedContainer.decodeIfPresent([EC2ClientTypes.ImportSnapshotTask].self, forKey: .member)
                var importSnapshotTasksBuffer:[EC2ClientTypes.ImportSnapshotTask]? = nil
                if let importSnapshotTasksContainer = importSnapshotTasksContainer {
                    importSnapshotTasksBuffer = [EC2ClientTypes.ImportSnapshotTask]()
                    for structureContainer0 in importSnapshotTasksContainer {
                        importSnapshotTasksBuffer?.append(structureContainer0)
                    }
                }
                importSnapshotTasks = importSnapshotTasksBuffer
            } else {
                importSnapshotTasks = []
            }
        } else {
            importSnapshotTasks = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
