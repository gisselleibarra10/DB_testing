// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.S3Storage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsAccessKeyId = "AWSAccessKeyId"
        case bucket = "bucket"
        case `prefix` = "prefix"
        case uploadPolicy = "uploadPolicy"
        case uploadPolicySignature = "uploadPolicySignature"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let awsAccessKeyId = awsAccessKeyId {
            try container.encode(awsAccessKeyId, forKey: ClientRuntime.Key("AWSAccessKeyId"))
        }
        if let bucket = bucket {
            try container.encode(bucket, forKey: ClientRuntime.Key("Bucket"))
        }
        if let `prefix` = `prefix` {
            try container.encode(`prefix`, forKey: ClientRuntime.Key("Prefix"))
        }
        if let uploadPolicy = uploadPolicy {
            try container.encode(uploadPolicy.base64EncodedString(), forKey: ClientRuntime.Key("UploadPolicy"))
        }
        if let uploadPolicySignature = uploadPolicySignature {
            try container.encode(uploadPolicySignature, forKey: ClientRuntime.Key("UploadPolicySignature"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let awsAccessKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsAccessKeyId)
        awsAccessKeyId = awsAccessKeyIdDecoded
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        if containerValues.contains(.uploadPolicy) {
            do {
                let uploadPolicyDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .uploadPolicy)
                uploadPolicy = uploadPolicyDecoded
            } catch {
                uploadPolicy = "".data(using: .utf8)
            }
        } else {
            uploadPolicy = nil
        }
        let uploadPolicySignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadPolicySignature)
        uploadPolicySignature = uploadPolicySignatureDecoded
    }
}
