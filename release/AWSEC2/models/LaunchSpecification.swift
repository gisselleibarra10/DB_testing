// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EC2ClientTypes {
    /// Describes the launch specification for an instance.
    public struct LaunchSpecification: Swift.Equatable {
        /// Deprecated.
        public var addressingType: Swift.String?
        /// One or more block device mapping entries.
        public var blockDeviceMappings: [EC2ClientTypes.BlockDeviceMapping]?
        /// Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false
        public var ebsOptimized: Swift.Bool?
        /// The IAM instance profile.
        public var iamInstanceProfile: EC2ClientTypes.IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public var imageId: Swift.String?
        /// The instance type. Only one instance type can be specified.
        public var instanceType: EC2ClientTypes.InstanceType?
        /// The ID of the kernel.
        public var kernelId: Swift.String?
        /// The name of the key pair.
        public var keyName: Swift.String?
        /// Describes the monitoring of an instance.
        public var monitoring: EC2ClientTypes.RunInstancesMonitoringEnabled?
        /// One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
        public var networkInterfaces: [EC2ClientTypes.InstanceNetworkInterfaceSpecification]?
        /// The placement information for the instance.
        public var placement: EC2ClientTypes.SpotPlacement?
        /// The ID of the RAM disk.
        public var ramdiskId: Swift.String?
        /// One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
        public var securityGroups: [EC2ClientTypes.GroupIdentifier]?
        /// The ID of the subnet in which to launch the instance.
        public var subnetId: Swift.String?
        /// The Base64-encoded user data for the instance.
        public var userData: Swift.String?

        public init (
            addressingType: Swift.String? = nil,
            blockDeviceMappings: [EC2ClientTypes.BlockDeviceMapping]? = nil,
            ebsOptimized: Swift.Bool? = nil,
            iamInstanceProfile: EC2ClientTypes.IamInstanceProfileSpecification? = nil,
            imageId: Swift.String? = nil,
            instanceType: EC2ClientTypes.InstanceType? = nil,
            kernelId: Swift.String? = nil,
            keyName: Swift.String? = nil,
            monitoring: EC2ClientTypes.RunInstancesMonitoringEnabled? = nil,
            networkInterfaces: [EC2ClientTypes.InstanceNetworkInterfaceSpecification]? = nil,
            placement: EC2ClientTypes.SpotPlacement? = nil,
            ramdiskId: Swift.String? = nil,
            securityGroups: [EC2ClientTypes.GroupIdentifier]? = nil,
            subnetId: Swift.String? = nil,
            userData: Swift.String? = nil
        )
        {
            self.addressingType = addressingType
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
            self.securityGroups = securityGroups
            self.subnetId = subnetId
            self.userData = userData
        }
    }

}
