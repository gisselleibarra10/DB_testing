// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTrafficMirrorSessionInputBody: Swift.Equatable {
    let networkInterfaceId: Swift.String?
    let trafficMirrorTargetId: Swift.String?
    let trafficMirrorFilterId: Swift.String?
    let packetLength: Swift.Int?
    let sessionNumber: Swift.Int?
    let virtualNetworkId: Swift.Int?
    let description: Swift.String?
    let tagSpecifications: [EC2ClientTypes.TagSpecification]?
    let dryRun: Swift.Bool?
    let clientToken: Swift.String?
}

extension CreateTrafficMirrorSessionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case dryRun = "DryRun"
        case networkInterfaceId = "NetworkInterfaceId"
        case packetLength = "PacketLength"
        case sessionNumber = "SessionNumber"
        case tagSpecifications = "TagSpecification"
        case trafficMirrorFilterId = "TrafficMirrorFilterId"
        case trafficMirrorTargetId = "TrafficMirrorTargetId"
        case virtualNetworkId = "VirtualNetworkId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let trafficMirrorTargetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficMirrorTargetId)
        trafficMirrorTargetId = trafficMirrorTargetIdDecoded
        let trafficMirrorFilterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficMirrorFilterId)
        trafficMirrorFilterId = trafficMirrorFilterIdDecoded
        let packetLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .packetLength)
        packetLength = packetLengthDecoded
        let sessionNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionNumber)
        sessionNumber = sessionNumberDecoded
        let virtualNetworkIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .virtualNetworkId)
        virtualNetworkId = virtualNetworkIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[EC2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [EC2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
