// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeHostReservationOfferingsInput: Swift.Equatable {
    /// The filters.
    ///
    /// * instance-family - The instance family of the offering (for example, m4).
    ///
    /// * payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).
    public var filter: [Ec2ClientTypes.Filter]?
    /// This is the maximum duration of the reservation to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 94608000 for three years.
    public var maxDuration: Swift.Int?
    /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
    public var maxResults: Swift.Int?
    /// This is the minimum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 31536000 for one year.
    public var minDuration: Swift.Int?
    /// The token to use to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// The ID of the reservation offering.
    public var offeringId: Swift.String?

    public init (
        filter: [Ec2ClientTypes.Filter]? = nil,
        maxDuration: Swift.Int? = nil,
        maxResults: Swift.Int? = nil,
        minDuration: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        offeringId: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxDuration = maxDuration
        self.maxResults = maxResults
        self.minDuration = minDuration
        self.nextToken = nextToken
        self.offeringId = offeringId
    }
}
