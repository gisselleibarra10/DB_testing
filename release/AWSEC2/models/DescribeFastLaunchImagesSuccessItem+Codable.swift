// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.DescribeFastLaunchImagesSuccessItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageId = "imageId"
        case launchTemplate = "launchTemplate"
        case maxParallelLaunches = "maxParallelLaunches"
        case ownerId = "ownerId"
        case resourceType = "resourceType"
        case snapshotConfiguration = "snapshotConfiguration"
        case state = "state"
        case stateTransitionReason = "stateTransitionReason"
        case stateTransitionTime = "stateTransitionTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let imageId = imageId {
            try container.encode(imageId, forKey: ClientRuntime.Key("ImageId"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: ClientRuntime.Key("LaunchTemplate"))
        }
        if let maxParallelLaunches = maxParallelLaunches {
            try container.encode(maxParallelLaunches, forKey: ClientRuntime.Key("MaxParallelLaunches"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: ClientRuntime.Key("OwnerId"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let snapshotConfiguration = snapshotConfiguration {
            try container.encode(snapshotConfiguration, forKey: ClientRuntime.Key("SnapshotConfiguration"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let stateTransitionReason = stateTransitionReason {
            try container.encode(stateTransitionReason, forKey: ClientRuntime.Key("StateTransitionReason"))
        }
        if let stateTransitionTime = stateTransitionTime {
            try container.encode(ClientRuntime.TimestampWrapper(stateTransitionTime, format: .dateTime), forKey: ClientRuntime.Key("StateTransitionTime"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.FastLaunchResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let snapshotConfigurationDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.FastLaunchSnapshotConfigurationResponse.self, forKey: .snapshotConfiguration)
        snapshotConfiguration = snapshotConfigurationDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.FastLaunchLaunchTemplateSpecificationResponse.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let maxParallelLaunchesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxParallelLaunches)
        maxParallelLaunches = maxParallelLaunchesDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.FastLaunchStateCode.self, forKey: .state)
        state = stateDecoded
        let stateTransitionReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateTransitionReason)
        stateTransitionReason = stateTransitionReasonDecoded
        let stateTransitionTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateTransitionTime)
        var stateTransitionTimeBuffer:ClientRuntime.Date? = nil
        if let stateTransitionTimeDecoded = stateTransitionTimeDecoded {
            stateTransitionTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(stateTransitionTimeDecoded, format: .dateTime)
        }
        stateTransitionTime = stateTransitionTimeBuffer
    }
}
