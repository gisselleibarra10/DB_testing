// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNetworkInsightsPathsOutputResponseBody: Swift.Equatable {
    let networkInsightsPaths: [EC2ClientTypes.NetworkInsightsPath]?
    let nextToken: Swift.String?
}

extension DescribeNetworkInsightsPathsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case networkInsightsPaths = "networkInsightsPathSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.networkInsightsPaths) {
            struct KeyVal0{struct item{}}
            let networkInsightsPathsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .networkInsightsPaths)
            if let networkInsightsPathsWrappedContainer = networkInsightsPathsWrappedContainer {
                let networkInsightsPathsContainer = try networkInsightsPathsWrappedContainer.decodeIfPresent([EC2ClientTypes.NetworkInsightsPath].self, forKey: .member)
                var networkInsightsPathsBuffer:[EC2ClientTypes.NetworkInsightsPath]? = nil
                if let networkInsightsPathsContainer = networkInsightsPathsContainer {
                    networkInsightsPathsBuffer = [EC2ClientTypes.NetworkInsightsPath]()
                    for structureContainer0 in networkInsightsPathsContainer {
                        networkInsightsPathsBuffer?.append(structureContainer0)
                    }
                }
                networkInsightsPaths = networkInsightsPathsBuffer
            } else {
                networkInsightsPaths = []
            }
        } else {
            networkInsightsPaths = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
