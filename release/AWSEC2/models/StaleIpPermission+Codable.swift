// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.StaleIpPermission: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fromPort = "fromPort"
        case ipProtocol = "ipProtocol"
        case ipRanges = "ipRanges"
        case prefixListIds = "prefixListIds"
        case toPort = "toPort"
        case userIdGroupPairs = "groups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let fromPort = fromPort {
            try container.encode(fromPort, forKey: ClientRuntime.Key("FromPort"))
        }
        if let ipProtocol = ipProtocol {
            try container.encode(ipProtocol, forKey: ClientRuntime.Key("IpProtocol"))
        }
        if let ipRanges = ipRanges {
            if !ipRanges.isEmpty {
                for (index0, string0) in ipRanges.enumerated() {
                    var ipRangesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IpRanges.\(index0.advanced(by: 1))"))
                    try ipRangesContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let prefixListIds = prefixListIds {
            if !prefixListIds.isEmpty {
                for (index0, string0) in prefixListIds.enumerated() {
                    var prefixListIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PrefixListIds.\(index0.advanced(by: 1))"))
                    try prefixListIdsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let toPort = toPort {
            try container.encode(toPort, forKey: ClientRuntime.Key("ToPort"))
        }
        if let userIdGroupPairs = userIdGroupPairs {
            if !userIdGroupPairs.isEmpty {
                for (index0, useridgrouppair0) in userIdGroupPairs.enumerated() {
                    var userIdGroupPairsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Groups.\(index0.advanced(by: 1))"))
                    try userIdGroupPairsContainer0.encode(useridgrouppair0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fromPort)
        fromPort = fromPortDecoded
        let ipProtocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipProtocol)
        ipProtocol = ipProtocolDecoded
        if containerValues.contains(.ipRanges) {
            struct KeyVal0{struct item{}}
            let ipRangesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .ipRanges)
            if let ipRangesWrappedContainer = ipRangesWrappedContainer {
                let ipRangesContainer = try ipRangesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var ipRangesBuffer:[Swift.String]? = nil
                if let ipRangesContainer = ipRangesContainer {
                    ipRangesBuffer = [Swift.String]()
                    for stringContainer0 in ipRangesContainer {
                        ipRangesBuffer?.append(stringContainer0)
                    }
                }
                ipRanges = ipRangesBuffer
            } else {
                ipRanges = []
            }
        } else {
            ipRanges = nil
        }
        if containerValues.contains(.prefixListIds) {
            struct KeyVal0{struct item{}}
            let prefixListIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .prefixListIds)
            if let prefixListIdsWrappedContainer = prefixListIdsWrappedContainer {
                let prefixListIdsContainer = try prefixListIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var prefixListIdsBuffer:[Swift.String]? = nil
                if let prefixListIdsContainer = prefixListIdsContainer {
                    prefixListIdsBuffer = [Swift.String]()
                    for stringContainer0 in prefixListIdsContainer {
                        prefixListIdsBuffer?.append(stringContainer0)
                    }
                }
                prefixListIds = prefixListIdsBuffer
            } else {
                prefixListIds = []
            }
        } else {
            prefixListIds = nil
        }
        let toPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .toPort)
        toPort = toPortDecoded
        if containerValues.contains(.userIdGroupPairs) {
            struct KeyVal0{struct item{}}
            let userIdGroupPairsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .userIdGroupPairs)
            if let userIdGroupPairsWrappedContainer = userIdGroupPairsWrappedContainer {
                let userIdGroupPairsContainer = try userIdGroupPairsWrappedContainer.decodeIfPresent([Ec2ClientTypes.UserIdGroupPair].self, forKey: .member)
                var userIdGroupPairsBuffer:[Ec2ClientTypes.UserIdGroupPair]? = nil
                if let userIdGroupPairsContainer = userIdGroupPairsContainer {
                    userIdGroupPairsBuffer = [Ec2ClientTypes.UserIdGroupPair]()
                    for structureContainer0 in userIdGroupPairsContainer {
                        userIdGroupPairsBuffer?.append(structureContainer0)
                    }
                }
                userIdGroupPairs = userIdGroupPairsBuffer
            } else {
                userIdGroupPairs = []
            }
        } else {
            userIdGroupPairs = nil
        }
    }
}
