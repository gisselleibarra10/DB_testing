// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVpcEndpointsOutputResponseBody: Swift.Equatable {
    let vpcEndpoints: [EC2ClientTypes.VpcEndpoint]?
    let nextToken: Swift.String?
}

extension DescribeVpcEndpointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case vpcEndpoints = "vpcEndpointSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.vpcEndpoints) {
            struct KeyVal0{struct item{}}
            let vpcEndpointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .vpcEndpoints)
            if let vpcEndpointsWrappedContainer = vpcEndpointsWrappedContainer {
                let vpcEndpointsContainer = try vpcEndpointsWrappedContainer.decodeIfPresent([EC2ClientTypes.VpcEndpoint].self, forKey: .member)
                var vpcEndpointsBuffer:[EC2ClientTypes.VpcEndpoint]? = nil
                if let vpcEndpointsContainer = vpcEndpointsContainer {
                    vpcEndpointsBuffer = [EC2ClientTypes.VpcEndpoint]()
                    for structureContainer0 in vpcEndpointsContainer {
                        vpcEndpointsBuffer?.append(structureContainer0)
                    }
                }
                vpcEndpoints = vpcEndpointsBuffer
            } else {
                vpcEndpoints = []
            }
        } else {
            vpcEndpoints = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
