// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFlowLogsInputBody: Swift.Equatable {
    let dryRun: Swift.Bool?
    let clientToken: Swift.String?
    let deliverLogsPermissionArn: Swift.String?
    let deliverCrossAccountRole: Swift.String?
    let logGroupName: Swift.String?
    let resourceIds: [Swift.String]?
    let resourceType: EC2ClientTypes.FlowLogsResourceType?
    let trafficType: EC2ClientTypes.TrafficType?
    let logDestinationType: EC2ClientTypes.LogDestinationType?
    let logDestination: Swift.String?
    let logFormat: Swift.String?
    let tagSpecifications: [EC2ClientTypes.TagSpecification]?
    let maxAggregationInterval: Swift.Int?
    let destinationOptions: EC2ClientTypes.DestinationOptionsRequest?
}

extension CreateFlowLogsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case deliverCrossAccountRole = "DeliverCrossAccountRole"
        case deliverLogsPermissionArn = "DeliverLogsPermissionArn"
        case destinationOptions = "DestinationOptions"
        case dryRun = "DryRun"
        case logDestination = "LogDestination"
        case logDestinationType = "LogDestinationType"
        case logFormat = "LogFormat"
        case logGroupName = "LogGroupName"
        case maxAggregationInterval = "MaxAggregationInterval"
        case resourceIds = "ResourceId"
        case resourceType = "ResourceType"
        case tagSpecifications = "TagSpecification"
        case trafficType = "TrafficType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let deliverLogsPermissionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliverLogsPermissionArn)
        deliverLogsPermissionArn = deliverLogsPermissionArnDecoded
        let deliverCrossAccountRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliverCrossAccountRole)
        deliverCrossAccountRole = deliverCrossAccountRoleDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        if containerValues.contains(.resourceIds) {
            struct KeyVal0{struct item{}}
            let resourceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .resourceIds)
            if let resourceIdsWrappedContainer = resourceIdsWrappedContainer {
                let resourceIdsContainer = try resourceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourceIdsBuffer:[Swift.String]? = nil
                if let resourceIdsContainer = resourceIdsContainer {
                    resourceIdsBuffer = [Swift.String]()
                    for stringContainer0 in resourceIdsContainer {
                        resourceIdsBuffer?.append(stringContainer0)
                    }
                }
                resourceIds = resourceIdsBuffer
            } else {
                resourceIds = []
            }
        } else {
            resourceIds = nil
        }
        let resourceTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.FlowLogsResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let trafficTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.TrafficType.self, forKey: .trafficType)
        trafficType = trafficTypeDecoded
        let logDestinationTypeDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.LogDestinationType.self, forKey: .logDestinationType)
        logDestinationType = logDestinationTypeDecoded
        let logDestinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logDestination)
        logDestination = logDestinationDecoded
        let logFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logFormat)
        logFormat = logFormatDecoded
        if containerValues.contains(.tagSpecifications) {
            struct KeyVal0{struct item{}}
            let tagSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tagSpecifications)
            if let tagSpecificationsWrappedContainer = tagSpecificationsWrappedContainer {
                let tagSpecificationsContainer = try tagSpecificationsWrappedContainer.decodeIfPresent([EC2ClientTypes.TagSpecification].self, forKey: .member)
                var tagSpecificationsBuffer:[EC2ClientTypes.TagSpecification]? = nil
                if let tagSpecificationsContainer = tagSpecificationsContainer {
                    tagSpecificationsBuffer = [EC2ClientTypes.TagSpecification]()
                    for structureContainer0 in tagSpecificationsContainer {
                        tagSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                tagSpecifications = tagSpecificationsBuffer
            } else {
                tagSpecifications = []
            }
        } else {
            tagSpecifications = nil
        }
        let maxAggregationIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxAggregationInterval)
        maxAggregationInterval = maxAggregationIntervalDecoded
        let destinationOptionsDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.DestinationOptionsRequest.self, forKey: .destinationOptions)
        destinationOptions = destinationOptionsDecoded
    }
}
