// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCapacityReservationUsageOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let capacityReservationId: Swift.String?
    let instanceType: Swift.String?
    let totalInstanceCount: Swift.Int?
    let availableInstanceCount: Swift.Int?
    let state: Ec2ClientTypes.CapacityReservationState?
    let instanceUsages: [Ec2ClientTypes.InstanceUsage]?
}

extension GetCapacityReservationUsageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availableInstanceCount = "availableInstanceCount"
        case capacityReservationId = "capacityReservationId"
        case instanceType = "instanceType"
        case instanceUsages = "instanceUsageSet"
        case nextToken = "nextToken"
        case state = "state"
        case totalInstanceCount = "totalInstanceCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let capacityReservationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .capacityReservationId)
        capacityReservationId = capacityReservationIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let totalInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalInstanceCount)
        totalInstanceCount = totalInstanceCountDecoded
        let availableInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .availableInstanceCount)
        availableInstanceCount = availableInstanceCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.CapacityReservationState.self, forKey: .state)
        state = stateDecoded
        if containerValues.contains(.instanceUsages) {
            struct KeyVal0{struct item{}}
            let instanceUsagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .instanceUsages)
            if let instanceUsagesWrappedContainer = instanceUsagesWrappedContainer {
                let instanceUsagesContainer = try instanceUsagesWrappedContainer.decodeIfPresent([Ec2ClientTypes.InstanceUsage].self, forKey: .member)
                var instanceUsagesBuffer:[Ec2ClientTypes.InstanceUsage]? = nil
                if let instanceUsagesContainer = instanceUsagesContainer {
                    instanceUsagesBuffer = [Ec2ClientTypes.InstanceUsage]()
                    for structureContainer0 in instanceUsagesContainer {
                        instanceUsagesBuffer?.append(structureContainer0)
                    }
                }
                instanceUsages = instanceUsagesBuffer
            } else {
                instanceUsages = []
            }
        } else {
            instanceUsages = nil
        }
    }
}
