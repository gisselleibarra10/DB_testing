// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetSpotPlacementScoresOutputResponseBody: Swift.Equatable {
    let spotPlacementScores: [Ec2ClientTypes.SpotPlacementScore]?
    let nextToken: Swift.String?
}

extension GetSpotPlacementScoresOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case spotPlacementScores = "spotPlacementScoreSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.spotPlacementScores) {
            struct KeyVal0{struct item{}}
            let spotPlacementScoresWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .spotPlacementScores)
            if let spotPlacementScoresWrappedContainer = spotPlacementScoresWrappedContainer {
                let spotPlacementScoresContainer = try spotPlacementScoresWrappedContainer.decodeIfPresent([Ec2ClientTypes.SpotPlacementScore].self, forKey: .member)
                var spotPlacementScoresBuffer:[Ec2ClientTypes.SpotPlacementScore]? = nil
                if let spotPlacementScoresContainer = spotPlacementScoresContainer {
                    spotPlacementScoresBuffer = [Ec2ClientTypes.SpotPlacementScore]()
                    for structureContainer0 in spotPlacementScoresContainer {
                        spotPlacementScoresBuffer?.append(structureContainer0)
                    }
                }
                spotPlacementScores = spotPlacementScoresBuffer
            } else {
                spotPlacementScores = []
            }
        } else {
            spotPlacementScores = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
