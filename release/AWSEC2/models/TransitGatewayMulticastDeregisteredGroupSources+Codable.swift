// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.TransitGatewayMulticastDeregisteredGroupSources: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deregisteredNetworkInterfaceIds = "deregisteredNetworkInterfaceIds"
        case groupIpAddress = "groupIpAddress"
        case transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deregisteredNetworkInterfaceIds = deregisteredNetworkInterfaceIds {
            if !deregisteredNetworkInterfaceIds.isEmpty {
                for (index0, string0) in deregisteredNetworkInterfaceIds.enumerated() {
                    var deregisteredNetworkInterfaceIdsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DeregisteredNetworkInterfaceIds.\(index0.advanced(by: 1))"))
                    try deregisteredNetworkInterfaceIdsContainer0.encode(string0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var deregisteredNetworkInterfaceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DeregisteredNetworkInterfaceIds"))
                try deregisteredNetworkInterfaceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let groupIpAddress = groupIpAddress {
            try container.encode(groupIpAddress, forKey: ClientRuntime.Key("GroupIpAddress"))
        }
        if let transitGatewayMulticastDomainId = transitGatewayMulticastDomainId {
            try container.encode(transitGatewayMulticastDomainId, forKey: ClientRuntime.Key("TransitGatewayMulticastDomainId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transitGatewayMulticastDomainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayMulticastDomainId)
        transitGatewayMulticastDomainId = transitGatewayMulticastDomainIdDecoded
        if containerValues.contains(.deregisteredNetworkInterfaceIds) {
            struct KeyVal0{struct item{}}
            let deregisteredNetworkInterfaceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .deregisteredNetworkInterfaceIds)
            if let deregisteredNetworkInterfaceIdsWrappedContainer = deregisteredNetworkInterfaceIdsWrappedContainer {
                let deregisteredNetworkInterfaceIdsContainer = try deregisteredNetworkInterfaceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var deregisteredNetworkInterfaceIdsBuffer:[Swift.String]? = nil
                if let deregisteredNetworkInterfaceIdsContainer = deregisteredNetworkInterfaceIdsContainer {
                    deregisteredNetworkInterfaceIdsBuffer = [Swift.String]()
                    for stringContainer0 in deregisteredNetworkInterfaceIdsContainer {
                        deregisteredNetworkInterfaceIdsBuffer?.append(stringContainer0)
                    }
                }
                deregisteredNetworkInterfaceIds = deregisteredNetworkInterfaceIdsBuffer
            } else {
                deregisteredNetworkInterfaceIds = []
            }
        } else {
            deregisteredNetworkInterfaceIds = nil
        }
        let groupIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupIpAddress)
        groupIpAddress = groupIpAddressDecoded
    }
}
