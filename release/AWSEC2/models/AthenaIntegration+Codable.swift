// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.AthenaIntegration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integrationResultS3DestinationArn = "IntegrationResultS3DestinationArn"
        case partitionEndDate = "PartitionEndDate"
        case partitionLoadFrequency = "PartitionLoadFrequency"
        case partitionStartDate = "PartitionStartDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let integrationResultS3DestinationArn = integrationResultS3DestinationArn {
            try container.encode(integrationResultS3DestinationArn, forKey: ClientRuntime.Key("IntegrationResultS3DestinationArn"))
        }
        if let partitionEndDate = partitionEndDate {
            try container.encodeTimestamp(partitionEndDate, format: .dateTime, forKey: ClientRuntime.Key("PartitionEndDate"))
        }
        if let partitionLoadFrequency = partitionLoadFrequency {
            try container.encode(partitionLoadFrequency, forKey: ClientRuntime.Key("PartitionLoadFrequency"))
        }
        if let partitionStartDate = partitionStartDate {
            try container.encodeTimestamp(partitionStartDate, format: .dateTime, forKey: ClientRuntime.Key("PartitionStartDate"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let integrationResultS3DestinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationResultS3DestinationArn)
        integrationResultS3DestinationArn = integrationResultS3DestinationArnDecoded
        let partitionLoadFrequencyDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.PartitionLoadFrequency.self, forKey: .partitionLoadFrequency)
        partitionLoadFrequency = partitionLoadFrequencyDecoded
        let partitionStartDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .partitionStartDate)
        partitionStartDate = partitionStartDateDecoded
        let partitionEndDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .partitionEndDate)
        partitionEndDate = partitionEndDateDecoded
    }
}
