// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// Describes an import image task.
    public struct ImportImageTask: Swift.Equatable {
        /// The architecture of the virtual machine. Valid values: i386 | x86_64 | arm64
        public var architecture: Swift.String?
        /// The boot mode of the virtual machine.
        public var bootMode: Ec2ClientTypes.BootModeValues?
        /// A description of the import task.
        public var description: Swift.String?
        /// Indicates whether the image is encrypted.
        public var encrypted: Swift.Bool?
        /// The target hypervisor for the import task. Valid values: xen
        public var hypervisor: Swift.String?
        /// The ID of the Amazon Machine Image (AMI) of the imported virtual machine.
        public var imageId: Swift.String?
        /// The ID of the import image task.
        public var importTaskId: Swift.String?
        /// The identifier for the KMS key that was used to create the encrypted image.
        public var kmsKeyId: Swift.String?
        /// The ARNs of the license configurations that are associated with the import image task.
        public var licenseSpecifications: [Ec2ClientTypes.ImportImageLicenseConfigurationResponse]?
        /// The license type of the virtual machine.
        public var licenseType: Swift.String?
        /// The description string for the import image task.
        public var platform: Swift.String?
        /// The percentage of progress of the import image task.
        public var progress: Swift.String?
        /// Information about the snapshots.
        public var snapshotDetails: [Ec2ClientTypes.SnapshotDetail]?
        /// A brief status for the import image task.
        public var status: Swift.String?
        /// A descriptive status message for the import image task.
        public var statusMessage: Swift.String?
        /// The tags for the import image task.
        public var tags: [Ec2ClientTypes.Tag]?
        /// The usage operation value.
        public var usageOperation: Swift.String?

        public init (
            architecture: Swift.String? = nil,
            bootMode: Ec2ClientTypes.BootModeValues? = nil,
            description: Swift.String? = nil,
            encrypted: Swift.Bool? = nil,
            hypervisor: Swift.String? = nil,
            imageId: Swift.String? = nil,
            importTaskId: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            licenseSpecifications: [Ec2ClientTypes.ImportImageLicenseConfigurationResponse]? = nil,
            licenseType: Swift.String? = nil,
            platform: Swift.String? = nil,
            progress: Swift.String? = nil,
            snapshotDetails: [Ec2ClientTypes.SnapshotDetail]? = nil,
            status: Swift.String? = nil,
            statusMessage: Swift.String? = nil,
            tags: [Ec2ClientTypes.Tag]? = nil,
            usageOperation: Swift.String? = nil
        )
        {
            self.architecture = architecture
            self.bootMode = bootMode
            self.description = description
            self.encrypted = encrypted
            self.hypervisor = hypervisor
            self.imageId = imageId
            self.importTaskId = importTaskId
            self.kmsKeyId = kmsKeyId
            self.licenseSpecifications = licenseSpecifications
            self.licenseType = licenseType
            self.platform = platform
            self.progress = progress
            self.snapshotDetails = snapshotDetails
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
            self.usageOperation = usageOperation
        }
    }

}
