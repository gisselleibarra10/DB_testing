// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.ReservedInstances: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "availabilityZone"
        case currencyCode = "currencyCode"
        case duration = "duration"
        case end = "end"
        case fixedPrice = "fixedPrice"
        case instanceCount = "instanceCount"
        case instanceTenancy = "instanceTenancy"
        case instanceType = "instanceType"
        case offeringClass = "offeringClass"
        case offeringType = "offeringType"
        case productDescription = "productDescription"
        case recurringCharges = "recurringCharges"
        case reservedInstancesId = "reservedInstancesId"
        case scope = "scope"
        case start = "start"
        case state = "state"
        case tags = "tagSet"
        case usagePrice = "usagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let currencyCode = currencyCode {
            try container.encode(currencyCode, forKey: ClientRuntime.Key("CurrencyCode"))
        }
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let end = end {
            try container.encode(ClientRuntime.TimestampWrapper(end, format: .dateTime), forKey: ClientRuntime.Key("End"))
        }
        if let fixedPrice = fixedPrice {
            try container.encode(fixedPrice, forKey: ClientRuntime.Key("FixedPrice"))
        }
        if let instanceCount = instanceCount {
            try container.encode(instanceCount, forKey: ClientRuntime.Key("InstanceCount"))
        }
        if let instanceTenancy = instanceTenancy {
            try container.encode(instanceTenancy, forKey: ClientRuntime.Key("InstanceTenancy"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let offeringClass = offeringClass {
            try container.encode(offeringClass, forKey: ClientRuntime.Key("OfferingClass"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: ClientRuntime.Key("OfferingType"))
        }
        if let productDescription = productDescription {
            try container.encode(productDescription, forKey: ClientRuntime.Key("ProductDescription"))
        }
        if let recurringCharges = recurringCharges {
            if !recurringCharges.isEmpty {
                for (index0, recurringcharge0) in recurringCharges.enumerated() {
                    var recurringChargesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecurringCharges.\(index0.advanced(by: 1))"))
                    try recurringChargesContainer0.encode(recurringcharge0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let reservedInstancesId = reservedInstancesId {
            try container.encode(reservedInstancesId, forKey: ClientRuntime.Key("ReservedInstancesId"))
        }
        if let scope = scope {
            try container.encode(scope, forKey: ClientRuntime.Key("Scope"))
        }
        if let start = start {
            try container.encode(ClientRuntime.TimestampWrapper(start, format: .dateTime), forKey: ClientRuntime.Key("Start"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let usagePrice = usagePrice {
            try container.encode(usagePrice, forKey: ClientRuntime.Key("UsagePrice"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let endDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .end)
        var endBuffer:ClientRuntime.Date? = nil
        if let endDecoded = endDecoded {
            endBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endDecoded, format: .dateTime)
        }
        end = endBuffer
        let fixedPriceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let productDescriptionDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.RIProductDescription.self, forKey: .productDescription)
        productDescription = productDescriptionDecoded
        let reservedInstancesIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedInstancesId)
        reservedInstancesId = reservedInstancesIdDecoded
        let startDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .start)
        var startBuffer:ClientRuntime.Date? = nil
        if let startDecoded = startDecoded {
            startBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startDecoded, format: .dateTime)
        }
        start = startBuffer
        let stateDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.ReservedInstanceState.self, forKey: .state)
        state = stateDecoded
        let usagePriceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.CurrencyCodeValues.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let instanceTenancyDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.Tenancy.self, forKey: .instanceTenancy)
        instanceTenancy = instanceTenancyDecoded
        let offeringClassDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.OfferingClassType.self, forKey: .offeringClass)
        offeringClass = offeringClassDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.OfferingTypeValues.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        if containerValues.contains(.recurringCharges) {
            struct KeyVal0{struct item{}}
            let recurringChargesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .recurringCharges)
            if let recurringChargesWrappedContainer = recurringChargesWrappedContainer {
                let recurringChargesContainer = try recurringChargesWrappedContainer.decodeIfPresent([Ec2ClientTypes.RecurringCharge].self, forKey: .member)
                var recurringChargesBuffer:[Ec2ClientTypes.RecurringCharge]? = nil
                if let recurringChargesContainer = recurringChargesContainer {
                    recurringChargesBuffer = [Ec2ClientTypes.RecurringCharge]()
                    for structureContainer0 in recurringChargesContainer {
                        recurringChargesBuffer?.append(structureContainer0)
                    }
                }
                recurringCharges = recurringChargesBuffer
            } else {
                recurringCharges = []
            }
        } else {
            recurringCharges = nil
        }
        let scopeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Ec2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Ec2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Ec2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
