// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.CreateVolumePermissionModifications: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case add = "Add"
        case remove = "Remove"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let add = add {
            if !add.isEmpty {
                for (index0, createvolumepermission0) in add.enumerated() {
                    var addContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Add.\(index0.advanced(by: 1))"))
                    try addContainer0.encode(createvolumepermission0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var addContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Add"))
                try addContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let remove = remove {
            if !remove.isEmpty {
                for (index0, createvolumepermission0) in remove.enumerated() {
                    var removeContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Remove.\(index0.advanced(by: 1))"))
                    try removeContainer0.encode(createvolumepermission0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var removeContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Remove"))
                try removeContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.add) {
            struct KeyVal0{struct item{}}
            let addWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .add)
            if let addWrappedContainer = addWrappedContainer {
                let addContainer = try addWrappedContainer.decodeIfPresent([EC2ClientTypes.CreateVolumePermission].self, forKey: .member)
                var addBuffer:[EC2ClientTypes.CreateVolumePermission]? = nil
                if let addContainer = addContainer {
                    addBuffer = [EC2ClientTypes.CreateVolumePermission]()
                    for structureContainer0 in addContainer {
                        addBuffer?.append(structureContainer0)
                    }
                }
                add = addBuffer
            } else {
                add = []
            }
        } else {
            add = nil
        }
        if containerValues.contains(.remove) {
            struct KeyVal0{struct item{}}
            let removeWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .remove)
            if let removeWrappedContainer = removeWrappedContainer {
                let removeContainer = try removeWrappedContainer.decodeIfPresent([EC2ClientTypes.CreateVolumePermission].self, forKey: .member)
                var removeBuffer:[EC2ClientTypes.CreateVolumePermission]? = nil
                if let removeContainer = removeContainer {
                    removeBuffer = [EC2ClientTypes.CreateVolumePermission]()
                    for structureContainer0 in removeContainer {
                        removeBuffer?.append(structureContainer0)
                    }
                }
                remove = removeBuffer
            } else {
                remove = []
            }
        } else {
            remove = nil
        }
    }
}
