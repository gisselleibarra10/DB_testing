// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReplaceRootVolumeTasksOutputResponseBody: Swift.Equatable {
    let replaceRootVolumeTasks: [Ec2ClientTypes.ReplaceRootVolumeTask]?
    let nextToken: Swift.String?
}

extension DescribeReplaceRootVolumeTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case replaceRootVolumeTasks = "replaceRootVolumeTaskSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.replaceRootVolumeTasks) {
            struct KeyVal0{struct item{}}
            let replaceRootVolumeTasksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .replaceRootVolumeTasks)
            if let replaceRootVolumeTasksWrappedContainer = replaceRootVolumeTasksWrappedContainer {
                let replaceRootVolumeTasksContainer = try replaceRootVolumeTasksWrappedContainer.decodeIfPresent([Ec2ClientTypes.ReplaceRootVolumeTask].self, forKey: .member)
                var replaceRootVolumeTasksBuffer:[Ec2ClientTypes.ReplaceRootVolumeTask]? = nil
                if let replaceRootVolumeTasksContainer = replaceRootVolumeTasksContainer {
                    replaceRootVolumeTasksBuffer = [Ec2ClientTypes.ReplaceRootVolumeTask]()
                    for structureContainer0 in replaceRootVolumeTasksContainer {
                        replaceRootVolumeTasksBuffer?.append(structureContainer0)
                    }
                }
                replaceRootVolumeTasks = replaceRootVolumeTasksBuffer
            } else {
                replaceRootVolumeTasks = []
            }
        } else {
            replaceRootVolumeTasks = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
