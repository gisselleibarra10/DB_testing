// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EC2ClientTypes.InstanceStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "availabilityZone"
        case events = "eventsSet"
        case instanceId = "instanceId"
        case instanceState = "instanceState"
        case instanceStatus = "instanceStatus"
        case outpostArn = "outpostArn"
        case systemStatus = "systemStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let events = events {
            if !events.isEmpty {
                for (index0, instancestatusevent0) in events.enumerated() {
                    var eventsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventsSet.\(index0.advanced(by: 1))"))
                    try eventsContainer0.encode(instancestatusevent0, forKey: ClientRuntime.Key(""))
                }
            }
            else {
                var eventsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventsSet"))
                try eventsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let instanceState = instanceState {
            try container.encode(instanceState, forKey: ClientRuntime.Key("InstanceState"))
        }
        if let instanceStatus = instanceStatus {
            try container.encode(instanceStatus, forKey: ClientRuntime.Key("InstanceStatus"))
        }
        if let outpostArn = outpostArn {
            try container.encode(outpostArn, forKey: ClientRuntime.Key("OutpostArn"))
        }
        if let systemStatus = systemStatus {
            try container.encode(systemStatus, forKey: ClientRuntime.Key("SystemStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let outpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outpostArn)
        outpostArn = outpostArnDecoded
        if containerValues.contains(.events) {
            struct KeyVal0{struct item{}}
            let eventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .events)
            if let eventsWrappedContainer = eventsWrappedContainer {
                let eventsContainer = try eventsWrappedContainer.decodeIfPresent([EC2ClientTypes.InstanceStatusEvent].self, forKey: .member)
                var eventsBuffer:[EC2ClientTypes.InstanceStatusEvent]? = nil
                if let eventsContainer = eventsContainer {
                    eventsBuffer = [EC2ClientTypes.InstanceStatusEvent]()
                    for structureContainer0 in eventsContainer {
                        eventsBuffer?.append(structureContainer0)
                    }
                }
                events = eventsBuffer
            } else {
                events = []
            }
        } else {
            events = nil
        }
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceStateDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.InstanceState.self, forKey: .instanceState)
        instanceState = instanceStateDecoded
        let instanceStatusDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.InstanceStatusSummary.self, forKey: .instanceStatus)
        instanceStatus = instanceStatusDecoded
        let systemStatusDecoded = try containerValues.decodeIfPresent(EC2ClientTypes.InstanceStatusSummary.self, forKey: .systemStatus)
        systemStatus = systemStatusDecoded
    }
}
