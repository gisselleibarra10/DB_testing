// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WafRegionalClientTypes.RegexPatternSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case regexPatternSetId = "RegexPatternSetId"
        case regexPatternStrings = "RegexPatternStrings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let regexPatternSetId = self.regexPatternSetId {
            try encodeContainer.encode(regexPatternSetId, forKey: .regexPatternSetId)
        }
        if let regexPatternStrings = regexPatternStrings {
            var regexPatternStringsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regexPatternStrings)
            for regexpatternstrings0 in regexPatternStrings {
                try regexPatternStringsContainer.encode(regexpatternstrings0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexPatternSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexPatternSetId)
        regexPatternSetId = regexPatternSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let regexPatternStringsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .regexPatternStrings)
        var regexPatternStringsDecoded0:[Swift.String]? = nil
        if let regexPatternStringsContainer = regexPatternStringsContainer {
            regexPatternStringsDecoded0 = [Swift.String]()
            for string0 in regexPatternStringsContainer {
                if let string0 = string0 {
                    regexPatternStringsDecoded0?.append(string0)
                }
            }
        }
        regexPatternStrings = regexPatternStringsDecoded0
    }
}
