// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension WafRegionalClientTypes {
    /// This is AWS WAF Classic documentation. For more information, see [AWS WAF Classic](https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html) in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API and see the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With the latest version, AWS WAF has a single set of endpoints for regional and global use. Specifies the [ByteMatchSet], [IPSet], [SqlInjectionMatchSet], [XssMatchSet], [RegexMatchSet], [GeoMatchSet], and [SizeConstraintSet] objects that you want to add to a Rule and, for each object, indicates whether you want to negate the settings, for example, requests that do NOT originate from the IP address 192.0.2.44.
    public struct Predicate: Swift.Equatable {
        /// A unique identifier for a predicate in a Rule, such as ByteMatchSetId or IPSetId. The ID is returned by the corresponding Create or List command.
        /// This member is required.
        public var dataId: Swift.String?
        /// Set Negated to False if you want AWS WAF to allow, block, or count requests based on the settings in the specified [ByteMatchSet], [IPSet], [SqlInjectionMatchSet], [XssMatchSet], [RegexMatchSet], [GeoMatchSet], or [SizeConstraintSet]. For example, if an IPSet includes the IP address 192.0.2.44, AWS WAF will allow or block requests based on that IP address. Set Negated to True if you want AWS WAF to allow or block a request based on the negation of the settings in the [ByteMatchSet], [IPSet], [SqlInjectionMatchSet], [XssMatchSet], [RegexMatchSet], [GeoMatchSet], or [SizeConstraintSet]. For example, if an IPSet includes the IP address 192.0.2.44, AWS WAF will allow, block, or count requests based on all IP addresses except 192.0.2.44.
        /// This member is required.
        public var negated: Swift.Bool?
        /// The type of predicate in a Rule, such as ByteMatch or IPSet.
        /// This member is required.
        public var type: WafRegionalClientTypes.PredicateType?

        public init (
            dataId: Swift.String? = nil,
            negated: Swift.Bool? = nil,
            type: WafRegionalClientTypes.PredicateType? = nil
        )
        {
            self.dataId = dataId
            self.negated = negated
            self.type = type
        }
    }

}
