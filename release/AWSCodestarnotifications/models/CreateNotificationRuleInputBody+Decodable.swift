// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateNotificationRuleInputBody: Swift.Equatable {
    let name: Swift.String?
    let eventTypeIds: [Swift.String]?
    let resource: Swift.String?
    let targets: [CodestarNotificationsClientTypes.Target]?
    let detailType: CodestarNotificationsClientTypes.DetailType?
    let clientRequestToken: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let status: CodestarNotificationsClientTypes.NotificationRuleStatus?
}

extension CreateNotificationRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case detailType = "DetailType"
        case eventTypeIds = "EventTypeIds"
        case name = "Name"
        case resource = "Resource"
        case status = "Status"
        case tags = "Tags"
        case targets = "Targets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let eventTypeIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .eventTypeIds)
        var eventTypeIdsDecoded0:[Swift.String]? = nil
        if let eventTypeIdsContainer = eventTypeIdsContainer {
            eventTypeIdsDecoded0 = [Swift.String]()
            for string0 in eventTypeIdsContainer {
                if let string0 = string0 {
                    eventTypeIdsDecoded0?.append(string0)
                }
            }
        }
        eventTypeIds = eventTypeIdsDecoded0
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
        let targetsContainer = try containerValues.decodeIfPresent([CodestarNotificationsClientTypes.Target?].self, forKey: .targets)
        var targetsDecoded0:[CodestarNotificationsClientTypes.Target]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [CodestarNotificationsClientTypes.Target]()
            for structure0 in targetsContainer {
                if let structure0 = structure0 {
                    targetsDecoded0?.append(structure0)
                }
            }
        }
        targets = targetsDecoded0
        let detailTypeDecoded = try containerValues.decodeIfPresent(CodestarNotificationsClientTypes.DetailType.self, forKey: .detailType)
        detailType = detailTypeDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(CodestarNotificationsClientTypes.NotificationRuleStatus.self, forKey: .status)
        status = statusDecoded
    }
}
