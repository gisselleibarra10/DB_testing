// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEventTypesOutputResponseBody: Swift.Equatable {
    let eventTypes: [CodestarNotificationsClientTypes.EventTypeSummary]?
    let nextToken: Swift.String?
}

extension ListEventTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventTypes = "EventTypes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventTypesContainer = try containerValues.decodeIfPresent([CodestarNotificationsClientTypes.EventTypeSummary?].self, forKey: .eventTypes)
        var eventTypesDecoded0:[CodestarNotificationsClientTypes.EventTypeSummary]? = nil
        if let eventTypesContainer = eventTypesContainer {
            eventTypesDecoded0 = [CodestarNotificationsClientTypes.EventTypeSummary]()
            for structure0 in eventTypesContainer {
                if let structure0 = structure0 {
                    eventTypesDecoded0?.append(structure0)
                }
            }
        }
        eventTypes = eventTypesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
