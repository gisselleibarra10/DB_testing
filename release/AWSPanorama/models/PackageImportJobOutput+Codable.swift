// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PanoramaClientTypes.PackageImportJobOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case outputS3Location = "OutputS3Location"
        case packageId = "PackageId"
        case packageVersion = "PackageVersion"
        case patchVersion = "PatchVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outputS3Location = self.outputS3Location {
            try encodeContainer.encode(outputS3Location, forKey: .outputS3Location)
        }
        if let packageId = self.packageId {
            try encodeContainer.encode(packageId, forKey: .packageId)
        }
        if let packageVersion = self.packageVersion {
            try encodeContainer.encode(packageVersion, forKey: .packageVersion)
        }
        if let patchVersion = self.patchVersion {
            try encodeContainer.encode(patchVersion, forKey: .patchVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageId)
        packageId = packageIdDecoded
        let packageVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageVersion)
        packageVersion = packageVersionDecoded
        let patchVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .patchVersion)
        patchVersion = patchVersionDecoded
        let outputS3LocationDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.OutPutS3Location.self, forKey: .outputS3Location)
        outputS3Location = outputS3LocationDecoded
    }
}
