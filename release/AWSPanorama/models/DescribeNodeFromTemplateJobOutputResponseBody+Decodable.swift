// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNodeFromTemplateJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let status: PanoramaClientTypes.NodeFromTemplateJobStatus?
    let statusMessage: Swift.String?
    let createdTime: ClientRuntime.Date?
    let lastUpdatedTime: ClientRuntime.Date?
    let outputPackageName: Swift.String?
    let outputPackageVersion: Swift.String?
    let nodeName: Swift.String?
    let nodeDescription: Swift.String?
    let templateType: PanoramaClientTypes.TemplateType?
    let templateParameters: [Swift.String:Swift.String]?
    let jobTags: [PanoramaClientTypes.JobResourceTags]?
}

extension DescribeNodeFromTemplateJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTime = "CreatedTime"
        case jobId = "JobId"
        case jobTags = "JobTags"
        case lastUpdatedTime = "LastUpdatedTime"
        case nodeDescription = "NodeDescription"
        case nodeName = "NodeName"
        case outputPackageName = "OutputPackageName"
        case outputPackageVersion = "OutputPackageVersion"
        case status = "Status"
        case statusMessage = "StatusMessage"
        case templateParameters = "TemplateParameters"
        case templateType = "TemplateType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.NodeFromTemplateJobStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let outputPackageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputPackageName)
        outputPackageName = outputPackageNameDecoded
        let outputPackageVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputPackageVersion)
        outputPackageVersion = outputPackageVersionDecoded
        let nodeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeName)
        nodeName = nodeNameDecoded
        let nodeDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeDescription)
        nodeDescription = nodeDescriptionDecoded
        let templateTypeDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.TemplateType.self, forKey: .templateType)
        templateType = templateTypeDecoded
        let templateParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .templateParameters)
        var templateParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let templateParametersContainer = templateParametersContainer {
            templateParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, templatevalue0) in templateParametersContainer {
                if let templatevalue0 = templatevalue0 {
                    templateParametersDecoded0?[key0] = templatevalue0
                }
            }
        }
        templateParameters = templateParametersDecoded0
        let jobTagsContainer = try containerValues.decodeIfPresent([PanoramaClientTypes.JobResourceTags?].self, forKey: .jobTags)
        var jobTagsDecoded0:[PanoramaClientTypes.JobResourceTags]? = nil
        if let jobTagsContainer = jobTagsContainer {
            jobTagsDecoded0 = [PanoramaClientTypes.JobResourceTags]()
            for structure0 in jobTagsContainer {
                if let structure0 = structure0 {
                    jobTagsDecoded0?.append(structure0)
                }
            }
        }
        jobTags = jobTagsDecoded0
    }
}
