// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PanoramaClientTypes.Device: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case brand = "Brand"
        case createdTime = "CreatedTime"
        case currentSoftware = "CurrentSoftware"
        case description = "Description"
        case deviceAggregatedStatus = "DeviceAggregatedStatus"
        case deviceId = "DeviceId"
        case lastUpdatedTime = "LastUpdatedTime"
        case latestDeviceJob = "LatestDeviceJob"
        case leaseExpirationTime = "LeaseExpirationTime"
        case name = "Name"
        case provisioningStatus = "ProvisioningStatus"
        case tags = "Tags"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let brand = self.brand {
            try encodeContainer.encode(brand.rawValue, forKey: .brand)
        }
        if let createdTime = self.createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let currentSoftware = self.currentSoftware {
            try encodeContainer.encode(currentSoftware, forKey: .currentSoftware)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let deviceAggregatedStatus = self.deviceAggregatedStatus {
            try encodeContainer.encode(deviceAggregatedStatus.rawValue, forKey: .deviceAggregatedStatus)
        }
        if let deviceId = self.deviceId {
            try encodeContainer.encode(deviceId, forKey: .deviceId)
        }
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let latestDeviceJob = self.latestDeviceJob {
            try encodeContainer.encode(latestDeviceJob, forKey: .latestDeviceJob)
        }
        if let leaseExpirationTime = self.leaseExpirationTime {
            try encodeContainer.encode(leaseExpirationTime.timeIntervalSince1970, forKey: .leaseExpirationTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let provisioningStatus = self.provisioningStatus {
            try encodeContainer.encode(provisioningStatus.rawValue, forKey: .provisioningStatus)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceId)
        deviceId = deviceIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let provisioningStatusDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.DeviceStatus.self, forKey: .provisioningStatus)
        provisioningStatus = provisioningStatusDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let leaseExpirationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .leaseExpirationTime)
        leaseExpirationTime = leaseExpirationTimeDecoded
        let brandDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.DeviceBrand.self, forKey: .brand)
        brand = brandDecoded
        let currentSoftwareDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentSoftware)
        currentSoftware = currentSoftwareDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.DeviceType.self, forKey: .type)
        type = typeDecoded
        let latestDeviceJobDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.LatestDeviceJob.self, forKey: .latestDeviceJob)
        latestDeviceJob = latestDeviceJobDecoded
        let deviceAggregatedStatusDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.DeviceAggregatedStatus.self, forKey: .deviceAggregatedStatus)
        deviceAggregatedStatus = deviceAggregatedStatusDecoded
    }
}
