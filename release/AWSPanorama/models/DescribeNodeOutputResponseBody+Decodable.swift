// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNodeOutputResponseBody: Swift.Equatable {
    let nodeId: Swift.String?
    let name: Swift.String?
    let category: PanoramaClientTypes.NodeCategory?
    let ownerAccount: Swift.String?
    let packageName: Swift.String?
    let packageId: Swift.String?
    let packageArn: Swift.String?
    let packageVersion: Swift.String?
    let patchVersion: Swift.String?
    let nodeInterface: PanoramaClientTypes.NodeInterface?
    let assetName: Swift.String?
    let description: Swift.String?
    let createdTime: ClientRuntime.Date?
    let lastUpdatedTime: ClientRuntime.Date?
}

extension DescribeNodeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assetName = "AssetName"
        case category = "Category"
        case createdTime = "CreatedTime"
        case description = "Description"
        case lastUpdatedTime = "LastUpdatedTime"
        case name = "Name"
        case nodeId = "NodeId"
        case nodeInterface = "NodeInterface"
        case ownerAccount = "OwnerAccount"
        case packageArn = "PackageArn"
        case packageId = "PackageId"
        case packageName = "PackageName"
        case packageVersion = "PackageVersion"
        case patchVersion = "PatchVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeId)
        nodeId = nodeIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.NodeCategory.self, forKey: .category)
        category = categoryDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let packageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageName)
        packageName = packageNameDecoded
        let packageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageId)
        packageId = packageIdDecoded
        let packageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageArn)
        packageArn = packageArnDecoded
        let packageVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageVersion)
        packageVersion = packageVersionDecoded
        let patchVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .patchVersion)
        patchVersion = patchVersionDecoded
        let nodeInterfaceDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.NodeInterface.self, forKey: .nodeInterface)
        nodeInterface = nodeInterfaceDecoded
        let assetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assetName)
        assetName = assetNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
    }
}
