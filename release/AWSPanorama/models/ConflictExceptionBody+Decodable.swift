// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let resourceId: Swift.String?
    let resourceType: Swift.String?
    let errorId: Swift.String?
    let errorArguments: [PanoramaClientTypes.ConflictExceptionErrorArgument]?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorArguments = "ErrorArguments"
        case errorId = "ErrorId"
        case message = "Message"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let errorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorId)
        errorId = errorIdDecoded
        let errorArgumentsContainer = try containerValues.decodeIfPresent([PanoramaClientTypes.ConflictExceptionErrorArgument?].self, forKey: .errorArguments)
        var errorArgumentsDecoded0:[PanoramaClientTypes.ConflictExceptionErrorArgument]? = nil
        if let errorArgumentsContainer = errorArgumentsContainer {
            errorArgumentsDecoded0 = [PanoramaClientTypes.ConflictExceptionErrorArgument]()
            for structure0 in errorArgumentsContainer {
                if let structure0 = structure0 {
                    errorArgumentsDecoded0?.append(structure0)
                }
            }
        }
        errorArguments = errorArgumentsDecoded0
    }
}
