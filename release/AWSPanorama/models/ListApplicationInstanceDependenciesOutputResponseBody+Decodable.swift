// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListApplicationInstanceDependenciesOutputResponseBody: Swift.Equatable {
    let packageObjects: [PanoramaClientTypes.PackageObject]?
    let nextToken: Swift.String?
}

extension ListApplicationInstanceDependenciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case packageObjects = "PackageObjects"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageObjectsContainer = try containerValues.decodeIfPresent([PanoramaClientTypes.PackageObject?].self, forKey: .packageObjects)
        var packageObjectsDecoded0:[PanoramaClientTypes.PackageObject]? = nil
        if let packageObjectsContainer = packageObjectsContainer {
            packageObjectsDecoded0 = [PanoramaClientTypes.PackageObject]()
            for structure0 in packageObjectsContainer {
                if let structure0 = structure0 {
                    packageObjectsDecoded0?.append(structure0)
                }
            }
        }
        packageObjects = packageObjectsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
