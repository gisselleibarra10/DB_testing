// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeApplicationInstanceOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let defaultRuntimeContextDevice: Swift.String?
    let defaultRuntimeContextDeviceName: Swift.String?
    let applicationInstanceIdToReplace: Swift.String?
    let runtimeRoleArn: Swift.String?
    let status: PanoramaClientTypes.ApplicationInstanceStatus?
    let healthStatus: PanoramaClientTypes.ApplicationInstanceHealthStatus?
    let statusDescription: Swift.String?
    let createdTime: ClientRuntime.Date?
    let lastUpdatedTime: ClientRuntime.Date?
    let applicationInstanceId: Swift.String?
    let arn: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension DescribeApplicationInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationInstanceId = "ApplicationInstanceId"
        case applicationInstanceIdToReplace = "ApplicationInstanceIdToReplace"
        case arn = "Arn"
        case createdTime = "CreatedTime"
        case defaultRuntimeContextDevice = "DefaultRuntimeContextDevice"
        case defaultRuntimeContextDeviceName = "DefaultRuntimeContextDeviceName"
        case description = "Description"
        case healthStatus = "HealthStatus"
        case lastUpdatedTime = "LastUpdatedTime"
        case name = "Name"
        case runtimeRoleArn = "RuntimeRoleArn"
        case status = "Status"
        case statusDescription = "StatusDescription"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let defaultRuntimeContextDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultRuntimeContextDevice)
        defaultRuntimeContextDevice = defaultRuntimeContextDeviceDecoded
        let defaultRuntimeContextDeviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultRuntimeContextDeviceName)
        defaultRuntimeContextDeviceName = defaultRuntimeContextDeviceNameDecoded
        let applicationInstanceIdToReplaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationInstanceIdToReplace)
        applicationInstanceIdToReplace = applicationInstanceIdToReplaceDecoded
        let runtimeRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runtimeRoleArn)
        runtimeRoleArn = runtimeRoleArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.ApplicationInstanceStatus.self, forKey: .status)
        status = statusDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.ApplicationInstanceHealthStatus.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let statusDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusDescription)
        statusDescription = statusDescriptionDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let applicationInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationInstanceId)
        applicationInstanceId = applicationInstanceIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
