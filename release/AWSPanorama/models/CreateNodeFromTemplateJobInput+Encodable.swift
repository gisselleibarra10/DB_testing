// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateNodeFromTemplateJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobTags = "JobTags"
        case nodeDescription = "NodeDescription"
        case nodeName = "NodeName"
        case outputPackageName = "OutputPackageName"
        case outputPackageVersion = "OutputPackageVersion"
        case templateParameters = "TemplateParameters"
        case templateType = "TemplateType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobTags = jobTags {
            var jobTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobTags)
            for jobtagslist0 in jobTags {
                try jobTagsContainer.encode(jobtagslist0)
            }
        }
        if let nodeDescription = self.nodeDescription {
            try encodeContainer.encode(nodeDescription, forKey: .nodeDescription)
        }
        if let nodeName = self.nodeName {
            try encodeContainer.encode(nodeName, forKey: .nodeName)
        }
        if let outputPackageName = self.outputPackageName {
            try encodeContainer.encode(outputPackageName, forKey: .outputPackageName)
        }
        if let outputPackageVersion = self.outputPackageVersion {
            try encodeContainer.encode(outputPackageVersion, forKey: .outputPackageVersion)
        }
        if let templateParameters = templateParameters {
            var templateParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .templateParameters)
            for (dictKey0, templateparametersmap0) in templateParameters {
                try templateParametersContainer.encode(templateparametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let templateType = self.templateType {
            try encodeContainer.encode(templateType.rawValue, forKey: .templateType)
        }
    }
}
