// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDeviceJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let deviceId: Swift.String?
    let deviceArn: Swift.String?
    let deviceName: Swift.String?
    let deviceType: PanoramaClientTypes.DeviceType?
    let imageVersion: Swift.String?
    let status: PanoramaClientTypes.UpdateProgress?
    let createdTime: ClientRuntime.Date?
}

extension DescribeDeviceJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTime = "CreatedTime"
        case deviceArn = "DeviceArn"
        case deviceId = "DeviceId"
        case deviceName = "DeviceName"
        case deviceType = "DeviceType"
        case imageVersion = "ImageVersion"
        case jobId = "JobId"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let deviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceId)
        deviceId = deviceIdDecoded
        let deviceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceArn)
        deviceArn = deviceArnDecoded
        let deviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceName)
        deviceName = deviceNameDecoded
        let deviceTypeDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.DeviceType.self, forKey: .deviceType)
        deviceType = deviceTypeDecoded
        let imageVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageVersion)
        imageVersion = imageVersionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.UpdateProgress.self, forKey: .status)
        status = statusDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
    }
}
