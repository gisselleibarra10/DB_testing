// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PanoramaClientTypes.NodeInterface: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputs = "Inputs"
        case outputs = "Outputs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputs = inputs {
            var inputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputs)
            for inputportlist0 in inputs {
                try inputsContainer.encode(inputportlist0)
            }
        }
        if let outputs = outputs {
            var outputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputs)
            for outputportlist0 in outputs {
                try outputsContainer.encode(outputportlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputsContainer = try containerValues.decodeIfPresent([PanoramaClientTypes.NodeInputPort?].self, forKey: .inputs)
        var inputsDecoded0:[PanoramaClientTypes.NodeInputPort]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [PanoramaClientTypes.NodeInputPort]()
            for structure0 in inputsContainer {
                if let structure0 = structure0 {
                    inputsDecoded0?.append(structure0)
                }
            }
        }
        inputs = inputsDecoded0
        let outputsContainer = try containerValues.decodeIfPresent([PanoramaClientTypes.NodeOutputPort?].self, forKey: .outputs)
        var outputsDecoded0:[PanoramaClientTypes.NodeOutputPort]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [PanoramaClientTypes.NodeOutputPort]()
            for structure0 in outputsContainer {
                if let structure0 = structure0 {
                    outputsDecoded0?.append(structure0)
                }
            }
        }
        outputs = outputsDecoded0
    }
}
