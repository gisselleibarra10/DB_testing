// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PanoramaClientTypes.ApplicationInstance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationInstanceId = "ApplicationInstanceId"
        case arn = "Arn"
        case createdTime = "CreatedTime"
        case defaultRuntimeContextDevice = "DefaultRuntimeContextDevice"
        case defaultRuntimeContextDeviceName = "DefaultRuntimeContextDeviceName"
        case description = "Description"
        case healthStatus = "HealthStatus"
        case name = "Name"
        case status = "Status"
        case statusDescription = "StatusDescription"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationInstanceId = self.applicationInstanceId {
            try encodeContainer.encode(applicationInstanceId, forKey: .applicationInstanceId)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdTime = self.createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let defaultRuntimeContextDevice = self.defaultRuntimeContextDevice {
            try encodeContainer.encode(defaultRuntimeContextDevice, forKey: .defaultRuntimeContextDevice)
        }
        if let defaultRuntimeContextDeviceName = self.defaultRuntimeContextDeviceName {
            try encodeContainer.encode(defaultRuntimeContextDeviceName, forKey: .defaultRuntimeContextDeviceName)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let healthStatus = self.healthStatus {
            try encodeContainer.encode(healthStatus.rawValue, forKey: .healthStatus)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusDescription = self.statusDescription {
            try encodeContainer.encode(statusDescription, forKey: .statusDescription)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let applicationInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationInstanceId)
        applicationInstanceId = applicationInstanceIdDecoded
        let defaultRuntimeContextDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultRuntimeContextDevice)
        defaultRuntimeContextDevice = defaultRuntimeContextDeviceDecoded
        let defaultRuntimeContextDeviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultRuntimeContextDeviceName)
        defaultRuntimeContextDeviceName = defaultRuntimeContextDeviceNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.ApplicationInstanceStatus.self, forKey: .status)
        status = statusDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.ApplicationInstanceHealthStatus.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let statusDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusDescription)
        statusDescription = statusDescriptionDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
