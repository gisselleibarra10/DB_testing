// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateApplicationInstanceInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let manifestPayload: PanoramaClientTypes.ManifestPayload?
    let manifestOverridesPayload: PanoramaClientTypes.ManifestOverridesPayload?
    let applicationInstanceIdToReplace: Swift.String?
    let runtimeRoleArn: Swift.String?
    let defaultRuntimeContextDevice: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateApplicationInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationInstanceIdToReplace = "ApplicationInstanceIdToReplace"
        case defaultRuntimeContextDevice = "DefaultRuntimeContextDevice"
        case description = "Description"
        case manifestOverridesPayload = "ManifestOverridesPayload"
        case manifestPayload = "ManifestPayload"
        case name = "Name"
        case runtimeRoleArn = "RuntimeRoleArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let manifestPayloadDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.ManifestPayload.self, forKey: .manifestPayload)
        manifestPayload = manifestPayloadDecoded
        let manifestOverridesPayloadDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.ManifestOverridesPayload.self, forKey: .manifestOverridesPayload)
        manifestOverridesPayload = manifestOverridesPayloadDecoded
        let applicationInstanceIdToReplaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationInstanceIdToReplace)
        applicationInstanceIdToReplace = applicationInstanceIdToReplaceDecoded
        let runtimeRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runtimeRoleArn)
        runtimeRoleArn = runtimeRoleArnDecoded
        let defaultRuntimeContextDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultRuntimeContextDevice)
        defaultRuntimeContextDevice = defaultRuntimeContextDeviceDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
