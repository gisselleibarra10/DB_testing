// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDeviceOutputResponseBody: Swift.Equatable {
    let deviceId: Swift.String?
    let name: Swift.String?
    let arn: Swift.String?
    let description: Swift.String?
    let type: PanoramaClientTypes.DeviceType?
    let deviceConnectionStatus: PanoramaClientTypes.DeviceConnectionStatus?
    let createdTime: ClientRuntime.Date?
    let provisioningStatus: PanoramaClientTypes.DeviceStatus?
    let latestSoftware: Swift.String?
    let currentSoftware: Swift.String?
    let serialNumber: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let networkingConfiguration: PanoramaClientTypes.NetworkPayload?
    let currentNetworkingStatus: PanoramaClientTypes.NetworkStatus?
    let leaseExpirationTime: ClientRuntime.Date?
    let alternateSoftwares: [PanoramaClientTypes.AlternateSoftwareMetadata]?
    let latestAlternateSoftware: Swift.String?
    let brand: PanoramaClientTypes.DeviceBrand?
    let latestDeviceJob: PanoramaClientTypes.LatestDeviceJob?
    let deviceAggregatedStatus: PanoramaClientTypes.DeviceAggregatedStatus?
}

extension DescribeDeviceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alternateSoftwares = "AlternateSoftwares"
        case arn = "Arn"
        case brand = "Brand"
        case createdTime = "CreatedTime"
        case currentNetworkingStatus = "CurrentNetworkingStatus"
        case currentSoftware = "CurrentSoftware"
        case description = "Description"
        case deviceAggregatedStatus = "DeviceAggregatedStatus"
        case deviceConnectionStatus = "DeviceConnectionStatus"
        case deviceId = "DeviceId"
        case latestAlternateSoftware = "LatestAlternateSoftware"
        case latestDeviceJob = "LatestDeviceJob"
        case latestSoftware = "LatestSoftware"
        case leaseExpirationTime = "LeaseExpirationTime"
        case name = "Name"
        case networkingConfiguration = "NetworkingConfiguration"
        case provisioningStatus = "ProvisioningStatus"
        case serialNumber = "SerialNumber"
        case tags = "Tags"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceId)
        deviceId = deviceIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.DeviceType.self, forKey: .type)
        type = typeDecoded
        let deviceConnectionStatusDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.DeviceConnectionStatus.self, forKey: .deviceConnectionStatus)
        deviceConnectionStatus = deviceConnectionStatusDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let provisioningStatusDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.DeviceStatus.self, forKey: .provisioningStatus)
        provisioningStatus = provisioningStatusDecoded
        let latestSoftwareDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestSoftware)
        latestSoftware = latestSoftwareDecoded
        let currentSoftwareDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentSoftware)
        currentSoftware = currentSoftwareDecoded
        let serialNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let networkingConfigurationDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.NetworkPayload.self, forKey: .networkingConfiguration)
        networkingConfiguration = networkingConfigurationDecoded
        let currentNetworkingStatusDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.NetworkStatus.self, forKey: .currentNetworkingStatus)
        currentNetworkingStatus = currentNetworkingStatusDecoded
        let leaseExpirationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .leaseExpirationTime)
        leaseExpirationTime = leaseExpirationTimeDecoded
        let alternateSoftwaresContainer = try containerValues.decodeIfPresent([PanoramaClientTypes.AlternateSoftwareMetadata?].self, forKey: .alternateSoftwares)
        var alternateSoftwaresDecoded0:[PanoramaClientTypes.AlternateSoftwareMetadata]? = nil
        if let alternateSoftwaresContainer = alternateSoftwaresContainer {
            alternateSoftwaresDecoded0 = [PanoramaClientTypes.AlternateSoftwareMetadata]()
            for structure0 in alternateSoftwaresContainer {
                if let structure0 = structure0 {
                    alternateSoftwaresDecoded0?.append(structure0)
                }
            }
        }
        alternateSoftwares = alternateSoftwaresDecoded0
        let latestAlternateSoftwareDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestAlternateSoftware)
        latestAlternateSoftware = latestAlternateSoftwareDecoded
        let brandDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.DeviceBrand.self, forKey: .brand)
        brand = brandDecoded
        let latestDeviceJobDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.LatestDeviceJob.self, forKey: .latestDeviceJob)
        latestDeviceJob = latestDeviceJobDecoded
        let deviceAggregatedStatusDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.DeviceAggregatedStatus.self, forKey: .deviceAggregatedStatus)
        deviceAggregatedStatus = deviceAggregatedStatusDecoded
    }
}
