// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateApplicationInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationInstanceIdToReplace = "ApplicationInstanceIdToReplace"
        case defaultRuntimeContextDevice = "DefaultRuntimeContextDevice"
        case description = "Description"
        case manifestOverridesPayload = "ManifestOverridesPayload"
        case manifestPayload = "ManifestPayload"
        case name = "Name"
        case runtimeRoleArn = "RuntimeRoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationInstanceIdToReplace = self.applicationInstanceIdToReplace {
            try encodeContainer.encode(applicationInstanceIdToReplace, forKey: .applicationInstanceIdToReplace)
        }
        if let defaultRuntimeContextDevice = self.defaultRuntimeContextDevice {
            try encodeContainer.encode(defaultRuntimeContextDevice, forKey: .defaultRuntimeContextDevice)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let manifestOverridesPayload = self.manifestOverridesPayload {
            try encodeContainer.encode(manifestOverridesPayload, forKey: .manifestOverridesPayload)
        }
        if let manifestPayload = self.manifestPayload {
            try encodeContainer.encode(manifestPayload, forKey: .manifestPayload)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let runtimeRoleArn = self.runtimeRoleArn {
            try encodeContainer.encode(runtimeRoleArn, forKey: .runtimeRoleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
