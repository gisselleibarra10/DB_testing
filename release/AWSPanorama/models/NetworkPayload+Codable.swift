// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PanoramaClientTypes.NetworkPayload: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ethernet0 = "Ethernet0"
        case ethernet1 = "Ethernet1"
        case ntp = "Ntp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ethernet0 = self.ethernet0 {
            try encodeContainer.encode(ethernet0, forKey: .ethernet0)
        }
        if let ethernet1 = self.ethernet1 {
            try encodeContainer.encode(ethernet1, forKey: .ethernet1)
        }
        if let ntp = self.ntp {
            try encodeContainer.encode(ntp, forKey: .ntp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ethernet0Decoded = try containerValues.decodeIfPresent(PanoramaClientTypes.EthernetPayload.self, forKey: .ethernet0)
        ethernet0 = ethernet0Decoded
        let ethernet1Decoded = try containerValues.decodeIfPresent(PanoramaClientTypes.EthernetPayload.self, forKey: .ethernet1)
        ethernet1 = ethernet1Decoded
        let ntpDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.NtpPayload.self, forKey: .ntp)
        ntp = ntpDecoded
    }
}
