// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribePackageOutputResponseBody: Swift.Equatable {
    let packageId: Swift.String?
    let packageName: Swift.String?
    let arn: Swift.String?
    let storageLocation: PanoramaClientTypes.StorageLocation?
    let readAccessPrincipalArns: [Swift.String]?
    let writeAccessPrincipalArns: [Swift.String]?
    let createdTime: ClientRuntime.Date?
    let tags: [Swift.String:Swift.String]?
}

extension DescribePackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case createdTime = "CreatedTime"
        case packageId = "PackageId"
        case packageName = "PackageName"
        case readAccessPrincipalArns = "ReadAccessPrincipalArns"
        case storageLocation = "StorageLocation"
        case tags = "Tags"
        case writeAccessPrincipalArns = "WriteAccessPrincipalArns"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageId)
        packageId = packageIdDecoded
        let packageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageName)
        packageName = packageNameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let storageLocationDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.StorageLocation.self, forKey: .storageLocation)
        storageLocation = storageLocationDecoded
        let readAccessPrincipalArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .readAccessPrincipalArns)
        var readAccessPrincipalArnsDecoded0:[Swift.String]? = nil
        if let readAccessPrincipalArnsContainer = readAccessPrincipalArnsContainer {
            readAccessPrincipalArnsDecoded0 = [Swift.String]()
            for string0 in readAccessPrincipalArnsContainer {
                if let string0 = string0 {
                    readAccessPrincipalArnsDecoded0?.append(string0)
                }
            }
        }
        readAccessPrincipalArns = readAccessPrincipalArnsDecoded0
        let writeAccessPrincipalArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .writeAccessPrincipalArns)
        var writeAccessPrincipalArnsDecoded0:[Swift.String]? = nil
        if let writeAccessPrincipalArnsContainer = writeAccessPrincipalArnsContainer {
            writeAccessPrincipalArnsDecoded0 = [Swift.String]()
            for string0 in writeAccessPrincipalArnsContainer {
                if let string0 = string0 {
                    writeAccessPrincipalArnsDecoded0?.append(string0)
                }
            }
        }
        writeAccessPrincipalArns = writeAccessPrincipalArnsDecoded0
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
