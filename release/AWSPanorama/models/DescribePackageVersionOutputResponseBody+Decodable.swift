// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribePackageVersionOutputResponseBody: Swift.Equatable {
    let ownerAccount: Swift.String?
    let packageId: Swift.String?
    let packageArn: Swift.String?
    let packageName: Swift.String?
    let packageVersion: Swift.String?
    let patchVersion: Swift.String?
    let isLatestPatch: Swift.Bool
    let status: PanoramaClientTypes.PackageVersionStatus?
    let statusDescription: Swift.String?
    let registeredTime: ClientRuntime.Date?
}

extension DescribePackageVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isLatestPatch = "IsLatestPatch"
        case ownerAccount = "OwnerAccount"
        case packageArn = "PackageArn"
        case packageId = "PackageId"
        case packageName = "PackageName"
        case packageVersion = "PackageVersion"
        case patchVersion = "PatchVersion"
        case registeredTime = "RegisteredTime"
        case status = "Status"
        case statusDescription = "StatusDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let packageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageId)
        packageId = packageIdDecoded
        let packageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageArn)
        packageArn = packageArnDecoded
        let packageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageName)
        packageName = packageNameDecoded
        let packageVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageVersion)
        packageVersion = packageVersionDecoded
        let patchVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .patchVersion)
        patchVersion = patchVersionDecoded
        let isLatestPatchDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isLatestPatch) ?? false
        isLatestPatch = isLatestPatchDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PanoramaClientTypes.PackageVersionStatus.self, forKey: .status)
        status = statusDecoded
        let statusDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusDescription)
        statusDescription = statusDescriptionDecoded
        let registeredTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .registeredTime)
        registeredTime = registeredTimeDecoded
    }
}
