// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPackageImportJobsOutputResponseBody: Swift.Equatable {
    let packageImportJobs: [PanoramaClientTypes.PackageImportJob]?
    let nextToken: Swift.String?
}

extension ListPackageImportJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case packageImportJobs = "PackageImportJobs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageImportJobsContainer = try containerValues.decodeIfPresent([PanoramaClientTypes.PackageImportJob?].self, forKey: .packageImportJobs)
        var packageImportJobsDecoded0:[PanoramaClientTypes.PackageImportJob]? = nil
        if let packageImportJobsContainer = packageImportJobsContainer {
            packageImportJobsDecoded0 = [PanoramaClientTypes.PackageImportJob]()
            for structure0 in packageImportJobsContainer {
                if let structure0 = structure0 {
                    packageImportJobsDecoded0?.append(structure0)
                }
            }
        }
        packageImportJobs = packageImportJobsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
