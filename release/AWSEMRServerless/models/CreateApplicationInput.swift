// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateApplicationInput: Swift.Equatable {
    /// The configuration for an application to automatically start on job submission.
    public var autoStartConfiguration: EmrServerlessClientTypes.AutoStartConfig?
    /// The configuration for an application to automatically stop after a certain amount of time being idle.
    public var autoStopConfiguration: EmrServerlessClientTypes.AutoStopConfig?
    /// The client idempotency token of the application to create. Its value must be unique for each request.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The capacity to initialize when the application is created.
    public var initialCapacity: [Swift.String:EmrServerlessClientTypes.InitialCapacityConfig]?
    /// The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
    public var maximumCapacity: EmrServerlessClientTypes.MaximumAllowedResources?
    /// The name of the application.
    public var name: Swift.String?
    /// The network configuration for customer VPC connectivity.
    public var networkConfiguration: EmrServerlessClientTypes.NetworkConfiguration?
    /// The EMR release version associated with the application.
    /// This member is required.
    public var releaseLabel: Swift.String?
    /// The tags assigned to the application.
    public var tags: [Swift.String:Swift.String]?
    /// The type of application you want to start, such as Spark or Hive.
    /// This member is required.
    public var type: Swift.String?

    public init (
        autoStartConfiguration: EmrServerlessClientTypes.AutoStartConfig? = nil,
        autoStopConfiguration: EmrServerlessClientTypes.AutoStopConfig? = nil,
        clientToken: Swift.String? = nil,
        initialCapacity: [Swift.String:EmrServerlessClientTypes.InitialCapacityConfig]? = nil,
        maximumCapacity: EmrServerlessClientTypes.MaximumAllowedResources? = nil,
        name: Swift.String? = nil,
        networkConfiguration: EmrServerlessClientTypes.NetworkConfiguration? = nil,
        releaseLabel: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        type: Swift.String? = nil
    )
    {
        self.autoStartConfiguration = autoStartConfiguration
        self.autoStopConfiguration = autoStopConfiguration
        self.clientToken = clientToken
        self.initialCapacity = initialCapacity
        self.maximumCapacity = maximumCapacity
        self.name = name
        self.networkConfiguration = networkConfiguration
        self.releaseLabel = releaseLabel
        self.tags = tags
        self.type = type
    }
}
