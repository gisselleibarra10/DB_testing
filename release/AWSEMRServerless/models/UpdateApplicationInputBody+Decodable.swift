// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateApplicationInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let initialCapacity: [Swift.String:EmrServerlessClientTypes.InitialCapacityConfig]?
    let maximumCapacity: EmrServerlessClientTypes.MaximumAllowedResources?
    let autoStartConfiguration: EmrServerlessClientTypes.AutoStartConfig?
    let autoStopConfiguration: EmrServerlessClientTypes.AutoStopConfig?
    let networkConfiguration: EmrServerlessClientTypes.NetworkConfiguration?
}

extension UpdateApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoStartConfiguration
        case autoStopConfiguration
        case clientToken
        case initialCapacity
        case maximumCapacity
        case networkConfiguration
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let initialCapacityContainer = try containerValues.decodeIfPresent([Swift.String: EmrServerlessClientTypes.InitialCapacityConfig?].self, forKey: .initialCapacity)
        var initialCapacityDecoded0: [Swift.String:EmrServerlessClientTypes.InitialCapacityConfig]? = nil
        if let initialCapacityContainer = initialCapacityContainer {
            initialCapacityDecoded0 = [Swift.String:EmrServerlessClientTypes.InitialCapacityConfig]()
            for (key0, initialcapacityconfig0) in initialCapacityContainer {
                if let initialcapacityconfig0 = initialcapacityconfig0 {
                    initialCapacityDecoded0?[key0] = initialcapacityconfig0
                }
            }
        }
        initialCapacity = initialCapacityDecoded0
        let maximumCapacityDecoded = try containerValues.decodeIfPresent(EmrServerlessClientTypes.MaximumAllowedResources.self, forKey: .maximumCapacity)
        maximumCapacity = maximumCapacityDecoded
        let autoStartConfigurationDecoded = try containerValues.decodeIfPresent(EmrServerlessClientTypes.AutoStartConfig.self, forKey: .autoStartConfiguration)
        autoStartConfiguration = autoStartConfigurationDecoded
        let autoStopConfigurationDecoded = try containerValues.decodeIfPresent(EmrServerlessClientTypes.AutoStopConfig.self, forKey: .autoStopConfiguration)
        autoStopConfiguration = autoStopConfigurationDecoded
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(EmrServerlessClientTypes.NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
    }
}
