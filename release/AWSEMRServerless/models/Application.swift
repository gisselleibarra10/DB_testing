// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmrServerlessClientTypes {
    /// Information about an application. EMR Serverless uses applications to run jobs.
    public struct Application: Swift.Equatable {
        /// The ID of the application.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The ARN of the application.
        /// This member is required.
        public var arn: Swift.String?
        /// The configuration for an application to automatically start on job submission.
        public var autoStartConfiguration: EmrServerlessClientTypes.AutoStartConfig?
        /// The configuration for an application to automatically stop after a certain amount of time being idle.
        public var autoStopConfiguration: EmrServerlessClientTypes.AutoStopConfig?
        /// The date and time when the application run was created.
        /// This member is required.
        public var createdAt: ClientRuntime.Date?
        /// The initial capacity of the application.
        public var initialCapacity: [Swift.String:EmrServerlessClientTypes.InitialCapacityConfig]?
        /// The maximum capacity of the application. This is cumulative across all workers at any given point in time during the lifespan of the application is created. No new resources will be created once any one of the defined limits is hit.
        public var maximumCapacity: EmrServerlessClientTypes.MaximumAllowedResources?
        /// The name of the application.
        public var name: Swift.String?
        /// The network configuration for customer VPC connectivity for the application.
        public var networkConfiguration: EmrServerlessClientTypes.NetworkConfiguration?
        /// The EMR release version associated with the application.
        /// This member is required.
        public var releaseLabel: Swift.String?
        /// The state of the application.
        /// This member is required.
        public var state: EmrServerlessClientTypes.ApplicationState?
        /// The state details of the application.
        public var stateDetails: Swift.String?
        /// The tags assigned to the application.
        public var tags: [Swift.String:Swift.String]?
        /// The type of application, such as Spark or Hive.
        /// This member is required.
        public var type: Swift.String?
        /// The date and time when the application run was last updated.
        /// This member is required.
        public var updatedAt: ClientRuntime.Date?

        public init (
            applicationId: Swift.String? = nil,
            arn: Swift.String? = nil,
            autoStartConfiguration: EmrServerlessClientTypes.AutoStartConfig? = nil,
            autoStopConfiguration: EmrServerlessClientTypes.AutoStopConfig? = nil,
            createdAt: ClientRuntime.Date? = nil,
            initialCapacity: [Swift.String:EmrServerlessClientTypes.InitialCapacityConfig]? = nil,
            maximumCapacity: EmrServerlessClientTypes.MaximumAllowedResources? = nil,
            name: Swift.String? = nil,
            networkConfiguration: EmrServerlessClientTypes.NetworkConfiguration? = nil,
            releaseLabel: Swift.String? = nil,
            state: EmrServerlessClientTypes.ApplicationState? = nil,
            stateDetails: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            type: Swift.String? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.applicationId = applicationId
            self.arn = arn
            self.autoStartConfiguration = autoStartConfiguration
            self.autoStopConfiguration = autoStopConfiguration
            self.createdAt = createdAt
            self.initialCapacity = initialCapacity
            self.maximumCapacity = maximumCapacity
            self.name = name
            self.networkConfiguration = networkConfiguration
            self.releaseLabel = releaseLabel
            self.state = state
            self.stateDetails = stateDetails
            self.tags = tags
            self.type = type
            self.updatedAt = updatedAt
        }
    }

}
