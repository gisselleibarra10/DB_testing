// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartJobRunInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let executionRoleArn: Swift.String?
    let jobDriver: EmrServerlessClientTypes.JobDriver?
    let configurationOverrides: EmrServerlessClientTypes.ConfigurationOverrides?
    let tags: [Swift.String:Swift.String]?
    let executionTimeoutMinutes: Swift.Int?
    let name: Swift.String?
}

extension StartJobRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case configurationOverrides
        case executionRoleArn
        case executionTimeoutMinutes
        case jobDriver
        case name
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let jobDriverDecoded = try containerValues.decodeIfPresent(EmrServerlessClientTypes.JobDriver.self, forKey: .jobDriver)
        jobDriver = jobDriverDecoded
        let configurationOverridesDecoded = try containerValues.decodeIfPresent(EmrServerlessClientTypes.ConfigurationOverrides.self, forKey: .configurationOverrides)
        configurationOverrides = configurationOverridesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let executionTimeoutMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .executionTimeoutMinutes)
        executionTimeoutMinutes = executionTimeoutMinutesDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}
