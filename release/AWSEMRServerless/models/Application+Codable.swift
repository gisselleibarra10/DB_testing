// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmrServerlessClientTypes.Application: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId
        case arn
        case autoStartConfiguration
        case autoStopConfiguration
        case createdAt
        case initialCapacity
        case maximumCapacity
        case name
        case networkConfiguration
        case releaseLabel
        case state
        case stateDetails
        case tags
        case type
        case updatedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let autoStartConfiguration = self.autoStartConfiguration {
            try encodeContainer.encode(autoStartConfiguration, forKey: .autoStartConfiguration)
        }
        if let autoStopConfiguration = self.autoStopConfiguration {
            try encodeContainer.encode(autoStopConfiguration, forKey: .autoStopConfiguration)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let initialCapacity = initialCapacity {
            var initialCapacityContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .initialCapacity)
            for (dictKey0, initialcapacityconfigmap0) in initialCapacity {
                try initialCapacityContainer.encode(initialcapacityconfigmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let maximumCapacity = self.maximumCapacity {
            try encodeContainer.encode(maximumCapacity, forKey: .maximumCapacity)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let networkConfiguration = self.networkConfiguration {
            try encodeContainer.encode(networkConfiguration, forKey: .networkConfiguration)
        }
        if let releaseLabel = self.releaseLabel {
            try encodeContainer.encode(releaseLabel, forKey: .releaseLabel)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateDetails = self.stateDetails {
            try encodeContainer.encode(stateDetails, forKey: .stateDetails)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let releaseLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseLabel)
        releaseLabel = releaseLabelDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EmrServerlessClientTypes.ApplicationState.self, forKey: .state)
        state = stateDecoded
        let stateDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateDetails)
        stateDetails = stateDetailsDecoded
        let initialCapacityContainer = try containerValues.decodeIfPresent([Swift.String: EmrServerlessClientTypes.InitialCapacityConfig?].self, forKey: .initialCapacity)
        var initialCapacityDecoded0: [Swift.String:EmrServerlessClientTypes.InitialCapacityConfig]? = nil
        if let initialCapacityContainer = initialCapacityContainer {
            initialCapacityDecoded0 = [Swift.String:EmrServerlessClientTypes.InitialCapacityConfig]()
            for (key0, initialcapacityconfig0) in initialCapacityContainer {
                if let initialcapacityconfig0 = initialcapacityconfig0 {
                    initialCapacityDecoded0?[key0] = initialcapacityconfig0
                }
            }
        }
        initialCapacity = initialCapacityDecoded0
        let maximumCapacityDecoded = try containerValues.decodeIfPresent(EmrServerlessClientTypes.MaximumAllowedResources.self, forKey: .maximumCapacity)
        maximumCapacity = maximumCapacityDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let autoStartConfigurationDecoded = try containerValues.decodeIfPresent(EmrServerlessClientTypes.AutoStartConfig.self, forKey: .autoStartConfiguration)
        autoStartConfiguration = autoStartConfigurationDecoded
        let autoStopConfigurationDecoded = try containerValues.decodeIfPresent(EmrServerlessClientTypes.AutoStopConfig.self, forKey: .autoStopConfiguration)
        autoStopConfiguration = autoStopConfigurationDecoded
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(EmrServerlessClientTypes.NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
    }
}
