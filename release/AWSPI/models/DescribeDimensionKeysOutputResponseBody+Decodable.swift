// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDimensionKeysOutputResponseBody: Swift.Equatable {
    let alignedStartTime: ClientRuntime.Date?
    let alignedEndTime: ClientRuntime.Date?
    let partitionKeys: [PiClientTypes.ResponsePartitionKey]?
    let keys: [PiClientTypes.DimensionKeyDescription]?
    let nextToken: Swift.String?
}

extension DescribeDimensionKeysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alignedEndTime = "AlignedEndTime"
        case alignedStartTime = "AlignedStartTime"
        case keys = "Keys"
        case nextToken = "NextToken"
        case partitionKeys = "PartitionKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alignedStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .alignedStartTime)
        alignedStartTime = alignedStartTimeDecoded
        let alignedEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .alignedEndTime)
        alignedEndTime = alignedEndTimeDecoded
        let partitionKeysContainer = try containerValues.decodeIfPresent([PiClientTypes.ResponsePartitionKey?].self, forKey: .partitionKeys)
        var partitionKeysDecoded0:[PiClientTypes.ResponsePartitionKey]? = nil
        if let partitionKeysContainer = partitionKeysContainer {
            partitionKeysDecoded0 = [PiClientTypes.ResponsePartitionKey]()
            for structure0 in partitionKeysContainer {
                if let structure0 = structure0 {
                    partitionKeysDecoded0?.append(structure0)
                }
            }
        }
        partitionKeys = partitionKeysDecoded0
        let keysContainer = try containerValues.decodeIfPresent([PiClientTypes.DimensionKeyDescription?].self, forKey: .keys)
        var keysDecoded0:[PiClientTypes.DimensionKeyDescription]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [PiClientTypes.DimensionKeyDescription]()
            for structure0 in keysContainer {
                if let structure0 = structure0 {
                    keysDecoded0?.append(structure0)
                }
            }
        }
        keys = keysDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
