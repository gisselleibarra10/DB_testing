// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PiClientTypes.DimensionGroupDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case group = "Group"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensions)
            for dimensiondetaillist0 in dimensions {
                try dimensionsContainer.encode(dimensiondetaillist0)
            }
        }
        if let group = self.group {
            try encodeContainer.encode(group, forKey: .group)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
        let dimensionsContainer = try containerValues.decodeIfPresent([PiClientTypes.DimensionDetail?].self, forKey: .dimensions)
        var dimensionsDecoded0:[PiClientTypes.DimensionDetail]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [PiClientTypes.DimensionDetail]()
            for structure0 in dimensionsContainer {
                if let structure0 = structure0 {
                    dimensionsDecoded0?.append(structure0)
                }
            }
        }
        dimensions = dimensionsDecoded0
    }
}
