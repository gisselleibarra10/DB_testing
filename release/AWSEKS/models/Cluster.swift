// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EksClientTypes {
    /// An object representing an Amazon EKS cluster.
    public struct Cluster: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the cluster.
        public var arn: Swift.String?
        /// The certificate-authority-data for your cluster.
        public var certificateAuthority: EksClientTypes.Certificate?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public var clientRequestToken: Swift.String?
        /// The configuration used to connect to a cluster for registration.
        public var connectorConfig: EksClientTypes.ConnectorConfigResponse?
        /// The Unix epoch timestamp in seconds for when the cluster was created.
        public var createdAt: ClientRuntime.Date?
        /// The encryption configuration for the cluster.
        public var encryptionConfig: [EksClientTypes.EncryptionConfig]?
        /// The endpoint for your Kubernetes API server.
        public var endpoint: Swift.String?
        /// An object representing the health of your local Amazon EKS cluster on an Amazon Web Services Outpost. This object isn't available for clusters on the Amazon Web Services cloud.
        public var health: EksClientTypes.ClusterHealth?
        /// The ID of your local Amazon EKS cluster on an Amazon Web Services Outpost. This property isn't available for an Amazon EKS cluster on the Amazon Web Services cloud.
        public var id: Swift.String?
        /// The identity provider information for the cluster.
        public var identity: EksClientTypes.Identity?
        /// The Kubernetes network configuration for the cluster.
        public var kubernetesNetworkConfig: EksClientTypes.KubernetesNetworkConfigResponse?
        /// The logging configuration for your cluster.
        public var logging: EksClientTypes.Logging?
        /// The name of the cluster.
        public var name: Swift.String?
        /// An object representing the configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. This object isn't available for clusters on the Amazon Web Services cloud.
        public var outpostConfig: EksClientTypes.OutpostConfigResponse?
        /// The platform version of your Amazon EKS cluster. For more information, see [Platform Versions](https://docs.aws.amazon.com/eks/latest/userguide/platform-versions.html) in the Amazon EKS User Guide .
        public var platformVersion: Swift.String?
        /// The VPC configuration used by the cluster control plane. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see [Cluster VPC Considerations](https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html) and [Cluster Security Group Considerations](https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html) in the Amazon EKS User Guide.
        public var resourcesVpcConfig: EksClientTypes.VpcConfigResponse?
        /// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to Amazon Web Services API operations on your behalf.
        public var roleArn: Swift.String?
        /// The current status of the cluster.
        public var status: EksClientTypes.ClusterStatus?
        /// The metadata that you apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Cluster tags do not propagate to any other resources associated with the cluster.
        public var tags: [Swift.String:Swift.String]?
        /// The Kubernetes server version for the cluster.
        public var version: Swift.String?

        public init (
            arn: Swift.String? = nil,
            certificateAuthority: EksClientTypes.Certificate? = nil,
            clientRequestToken: Swift.String? = nil,
            connectorConfig: EksClientTypes.ConnectorConfigResponse? = nil,
            createdAt: ClientRuntime.Date? = nil,
            encryptionConfig: [EksClientTypes.EncryptionConfig]? = nil,
            endpoint: Swift.String? = nil,
            health: EksClientTypes.ClusterHealth? = nil,
            id: Swift.String? = nil,
            identity: EksClientTypes.Identity? = nil,
            kubernetesNetworkConfig: EksClientTypes.KubernetesNetworkConfigResponse? = nil,
            logging: EksClientTypes.Logging? = nil,
            name: Swift.String? = nil,
            outpostConfig: EksClientTypes.OutpostConfigResponse? = nil,
            platformVersion: Swift.String? = nil,
            resourcesVpcConfig: EksClientTypes.VpcConfigResponse? = nil,
            roleArn: Swift.String? = nil,
            status: EksClientTypes.ClusterStatus? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            version: Swift.String? = nil
        )
        {
            self.arn = arn
            self.certificateAuthority = certificateAuthority
            self.clientRequestToken = clientRequestToken
            self.connectorConfig = connectorConfig
            self.createdAt = createdAt
            self.encryptionConfig = encryptionConfig
            self.endpoint = endpoint
            self.health = health
            self.id = id
            self.identity = identity
            self.kubernetesNetworkConfig = kubernetesNetworkConfig
            self.logging = logging
            self.name = name
            self.outpostConfig = outpostConfig
            self.platformVersion = platformVersion
            self.resourcesVpcConfig = resourcesVpcConfig
            self.roleArn = roleArn
            self.status = status
            self.tags = tags
            self.version = version
        }
    }

}
