// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EksClientTypes {
    public enum AddonIssueCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessDenied
        case admissionRequestDenied
        case clusterUnreachable
        case configurationConflict
        case insufficientNumberOfReplicas
        case internalFailure
        case k8sResourceNotFound
        case unsupportedAddonModification
        case sdkUnknown(Swift.String)

        public static var allCases: [AddonIssueCode] {
            return [
                .accessDenied,
                .admissionRequestDenied,
                .clusterUnreachable,
                .configurationConflict,
                .insufficientNumberOfReplicas,
                .internalFailure,
                .k8sResourceNotFound,
                .unsupportedAddonModification,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "AccessDenied"
            case .admissionRequestDenied: return "AdmissionRequestDenied"
            case .clusterUnreachable: return "ClusterUnreachable"
            case .configurationConflict: return "ConfigurationConflict"
            case .insufficientNumberOfReplicas: return "InsufficientNumberOfReplicas"
            case .internalFailure: return "InternalFailure"
            case .k8sResourceNotFound: return "K8sResourceNotFound"
            case .unsupportedAddonModification: return "UnsupportedAddonModification"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AddonIssueCode(rawValue: rawValue) ?? AddonIssueCode.sdkUnknown(rawValue)
        }
    }
}
