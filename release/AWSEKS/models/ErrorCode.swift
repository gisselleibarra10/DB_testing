// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EksClientTypes {
    public enum ErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessDenied
        case admissionRequestDenied
        case clusterUnreachable
        case configurationConflict
        case eniLimitReached
        case insufficientFreeAddresses
        case insufficientNumberOfReplicas
        case ipNotAvailable
        case k8sResourceNotFound
        case nodeCreationFailure
        case operationNotPermitted
        case podEvictionFailure
        case securityGroupNotFound
        case subnetNotFound
        case unknown
        case unsupportedAddonModification
        case vpcIdNotFound
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .accessDenied,
                .admissionRequestDenied,
                .clusterUnreachable,
                .configurationConflict,
                .eniLimitReached,
                .insufficientFreeAddresses,
                .insufficientNumberOfReplicas,
                .ipNotAvailable,
                .k8sResourceNotFound,
                .nodeCreationFailure,
                .operationNotPermitted,
                .podEvictionFailure,
                .securityGroupNotFound,
                .subnetNotFound,
                .unknown,
                .unsupportedAddonModification,
                .vpcIdNotFound,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "AccessDenied"
            case .admissionRequestDenied: return "AdmissionRequestDenied"
            case .clusterUnreachable: return "ClusterUnreachable"
            case .configurationConflict: return "ConfigurationConflict"
            case .eniLimitReached: return "EniLimitReached"
            case .insufficientFreeAddresses: return "InsufficientFreeAddresses"
            case .insufficientNumberOfReplicas: return "InsufficientNumberOfReplicas"
            case .ipNotAvailable: return "IpNotAvailable"
            case .k8sResourceNotFound: return "K8sResourceNotFound"
            case .nodeCreationFailure: return "NodeCreationFailure"
            case .operationNotPermitted: return "OperationNotPermitted"
            case .podEvictionFailure: return "PodEvictionFailure"
            case .securityGroupNotFound: return "SecurityGroupNotFound"
            case .subnetNotFound: return "SubnetNotFound"
            case .unknown: return "Unknown"
            case .unsupportedAddonModification: return "UnsupportedAddonModification"
            case .vpcIdNotFound: return "VpcIdNotFound"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ErrorCode(rawValue: rawValue) ?? ErrorCode.sdkUnknown(rawValue)
        }
    }
}
