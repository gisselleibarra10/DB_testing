// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EksClientTypes {
    public enum UpdateParamType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case addonVersion
        case clusterLogging
        case desiredSize
        case encryptionConfig
        case endpointPrivateAccess
        case endpointPublicAccess
        case identityProviderConfig
        case labelsToAdd
        case labelsToRemove
        case launchTemplateName
        case launchTemplateVersion
        case maxSize
        case maxUnavailable
        case maxUnavailablePercentage
        case minSize
        case platformVersion
        case publicAccessCidrs
        case releaseVersion
        case resolveConflicts
        case serviceAccountRoleArn
        case taintsToAdd
        case taintsToRemove
        case version
        case sdkUnknown(Swift.String)

        public static var allCases: [UpdateParamType] {
            return [
                .addonVersion,
                .clusterLogging,
                .desiredSize,
                .encryptionConfig,
                .endpointPrivateAccess,
                .endpointPublicAccess,
                .identityProviderConfig,
                .labelsToAdd,
                .labelsToRemove,
                .launchTemplateName,
                .launchTemplateVersion,
                .maxSize,
                .maxUnavailable,
                .maxUnavailablePercentage,
                .minSize,
                .platformVersion,
                .publicAccessCidrs,
                .releaseVersion,
                .resolveConflicts,
                .serviceAccountRoleArn,
                .taintsToAdd,
                .taintsToRemove,
                .version,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .addonVersion: return "AddonVersion"
            case .clusterLogging: return "ClusterLogging"
            case .desiredSize: return "DesiredSize"
            case .encryptionConfig: return "EncryptionConfig"
            case .endpointPrivateAccess: return "EndpointPrivateAccess"
            case .endpointPublicAccess: return "EndpointPublicAccess"
            case .identityProviderConfig: return "IdentityProviderConfig"
            case .labelsToAdd: return "LabelsToAdd"
            case .labelsToRemove: return "LabelsToRemove"
            case .launchTemplateName: return "LaunchTemplateName"
            case .launchTemplateVersion: return "LaunchTemplateVersion"
            case .maxSize: return "MaxSize"
            case .maxUnavailable: return "MaxUnavailable"
            case .maxUnavailablePercentage: return "MaxUnavailablePercentage"
            case .minSize: return "MinSize"
            case .platformVersion: return "PlatformVersion"
            case .publicAccessCidrs: return "PublicAccessCidrs"
            case .releaseVersion: return "ReleaseVersion"
            case .resolveConflicts: return "ResolveConflicts"
            case .serviceAccountRoleArn: return "ServiceAccountRoleArn"
            case .taintsToAdd: return "TaintsToAdd"
            case .taintsToRemove: return "TaintsToRemove"
            case .version: return "Version"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UpdateParamType(rawValue: rawValue) ?? UpdateParamType.sdkUnknown(rawValue)
        }
    }
}
