// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateNodegroupVersionInput: Swift.Equatable {
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of the Amazon EKS cluster that is associated with the managed node group to update.
    /// This member is required.
    public var clusterName: Swift.String?
    /// Force the update if the existing node group's pods are unable to be drained due to a pod disruption budget issue. If an update fails because pods could not be drained, you can force the update after it fails to terminate the old node whether or not any pods are running on the node.
    public var force: Swift.Bool
    /// An object representing a node group's launch template specification. You can only update a node group using a launch template if the node group was originally deployed with a launch template.
    public var launchTemplate: EksClientTypes.LaunchTemplateSpecification?
    /// The name of the managed node group to update.
    /// This member is required.
    public var nodegroupName: Swift.String?
    /// The AMI version of the Amazon EKS optimized AMI to use for the update. By default, the latest available AMI version for the node group's Kubernetes version is used. For more information, see [Amazon EKS optimized Amazon Linux 2 AMI versions ](https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html) in the Amazon EKS User Guide. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify releaseVersion, or the node group update will fail. For more information about using launch templates with Amazon EKS, see [Launch template support](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var releaseVersion: Swift.String?
    /// The Kubernetes version to update to. If no version is specified, then the Kubernetes version of the node group does not change. You can specify the Kubernetes version of the cluster to update the node group to the latest AMI version of the cluster's Kubernetes version. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify version, or the node group update will fail. For more information about using launch templates with Amazon EKS, see [Launch template support](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var version: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        force: Swift.Bool = false,
        launchTemplate: EksClientTypes.LaunchTemplateSpecification? = nil,
        nodegroupName: Swift.String? = nil,
        releaseVersion: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.force = force
        self.launchTemplate = launchTemplate
        self.nodegroupName = nodegroupName
        self.releaseVersion = releaseVersion
        self.version = version
    }
}
