// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateClusterInputBody: Swift.Equatable {
    let name: Swift.String?
    let version: Swift.String?
    let roleArn: Swift.String?
    let resourcesVpcConfig: EksClientTypes.VpcConfigRequest?
    let kubernetesNetworkConfig: EksClientTypes.KubernetesNetworkConfigRequest?
    let logging: EksClientTypes.Logging?
    let clientRequestToken: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let encryptionConfig: [EksClientTypes.EncryptionConfig]?
    let outpostConfig: EksClientTypes.OutpostConfigRequest?
}

extension CreateClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case encryptionConfig
        case kubernetesNetworkConfig
        case logging
        case name
        case outpostConfig
        case resourcesVpcConfig
        case roleArn
        case tags
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let resourcesVpcConfigDecoded = try containerValues.decodeIfPresent(EksClientTypes.VpcConfigRequest.self, forKey: .resourcesVpcConfig)
        resourcesVpcConfig = resourcesVpcConfigDecoded
        let kubernetesNetworkConfigDecoded = try containerValues.decodeIfPresent(EksClientTypes.KubernetesNetworkConfigRequest.self, forKey: .kubernetesNetworkConfig)
        kubernetesNetworkConfig = kubernetesNetworkConfigDecoded
        let loggingDecoded = try containerValues.decodeIfPresent(EksClientTypes.Logging.self, forKey: .logging)
        logging = loggingDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let encryptionConfigContainer = try containerValues.decodeIfPresent([EksClientTypes.EncryptionConfig?].self, forKey: .encryptionConfig)
        var encryptionConfigDecoded0:[EksClientTypes.EncryptionConfig]? = nil
        if let encryptionConfigContainer = encryptionConfigContainer {
            encryptionConfigDecoded0 = [EksClientTypes.EncryptionConfig]()
            for structure0 in encryptionConfigContainer {
                if let structure0 = structure0 {
                    encryptionConfigDecoded0?.append(structure0)
                }
            }
        }
        encryptionConfig = encryptionConfigDecoded0
        let outpostConfigDecoded = try containerValues.decodeIfPresent(EksClientTypes.OutpostConfigRequest.self, forKey: .outpostConfig)
        outpostConfig = outpostConfigDecoded
    }
}
