// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EksClientTypes {
    /// An object representing the configuration for an OpenID Connect (OIDC) identity provider.
    public struct OidcIdentityProviderConfig: Swift.Equatable {
        /// This is also known as audience. The ID of the client application that makes authentication requests to the OIDC identity provider.
        public var clientId: Swift.String?
        /// The cluster that the configuration is associated to.
        public var clusterName: Swift.String?
        /// The JSON web token (JWT) claim that the provider uses to return your groups.
        public var groupsClaim: Swift.String?
        /// The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value oidc: creates group names like oidc:engineering and oidc:infra. The prefix can't contain system:
        public var groupsPrefix: Swift.String?
        /// The ARN of the configuration.
        public var identityProviderConfigArn: Swift.String?
        /// The name of the configuration.
        public var identityProviderConfigName: Swift.String?
        /// The URL of the OIDC identity provider that allows the API server to discover public signing keys for verifying tokens.
        public var issuerUrl: Swift.String?
        /// The key-value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value.
        public var requiredClaims: [Swift.String:Swift.String]?
        /// The status of the OIDC identity provider.
        public var status: EksClientTypes.ConfigStatus?
        /// The metadata to apply to the provider configuration to assist with categorization and organization. Each tag consists of a key and an optional value. You define both.
        public var tags: [Swift.String:Swift.String]?
        /// The JSON Web token (JWT) claim that is used as the username.
        public var usernameClaim: Swift.String?
        /// The prefix that is prepended to username claims to prevent clashes with existing names. The prefix can't contain system:
        public var usernamePrefix: Swift.String?

        public init (
            clientId: Swift.String? = nil,
            clusterName: Swift.String? = nil,
            groupsClaim: Swift.String? = nil,
            groupsPrefix: Swift.String? = nil,
            identityProviderConfigArn: Swift.String? = nil,
            identityProviderConfigName: Swift.String? = nil,
            issuerUrl: Swift.String? = nil,
            requiredClaims: [Swift.String:Swift.String]? = nil,
            status: EksClientTypes.ConfigStatus? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            usernameClaim: Swift.String? = nil,
            usernamePrefix: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.clusterName = clusterName
            self.groupsClaim = groupsClaim
            self.groupsPrefix = groupsPrefix
            self.identityProviderConfigArn = identityProviderConfigArn
            self.identityProviderConfigName = identityProviderConfigName
            self.issuerUrl = issuerUrl
            self.requiredClaims = requiredClaims
            self.status = status
            self.tags = tags
            self.usernameClaim = usernameClaim
            self.usernamePrefix = usernamePrefix
        }
    }

}
