// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAddonInputBody: Swift.Equatable {
    let addonName: Swift.String?
    let addonVersion: Swift.String?
    let serviceAccountRoleArn: Swift.String?
    let resolveConflicts: EksClientTypes.ResolveConflicts?
    let clientRequestToken: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateAddonInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addonName
        case addonVersion
        case clientRequestToken
        case resolveConflicts
        case serviceAccountRoleArn
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let addonVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonVersion)
        addonVersion = addonVersionDecoded
        let serviceAccountRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceAccountRoleArn)
        serviceAccountRoleArn = serviceAccountRoleArnDecoded
        let resolveConflictsDecoded = try containerValues.decodeIfPresent(EksClientTypes.ResolveConflicts.self, forKey: .resolveConflicts)
        resolveConflicts = resolveConflictsDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
