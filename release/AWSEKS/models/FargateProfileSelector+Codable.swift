// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EksClientTypes.FargateProfileSelector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labels
        case namespace
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .labels)
            for (dictKey0, fargateprofilelabel0) in labels {
                try labelsContainer.encode(fargateprofilelabel0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let namespace = self.namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let labelsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .labels)
        var labelsDecoded0: [Swift.String:Swift.String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in labelsContainer {
                if let string0 = string0 {
                    labelsDecoded0?[key0] = string0
                }
            }
        }
        labels = labelsDecoded0
    }
}
