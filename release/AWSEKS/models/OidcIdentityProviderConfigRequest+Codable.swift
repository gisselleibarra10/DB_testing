// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EksClientTypes.OidcIdentityProviderConfigRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId
        case groupsClaim
        case groupsPrefix
        case identityProviderConfigName
        case issuerUrl
        case requiredClaims
        case usernameClaim
        case usernamePrefix
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let groupsClaim = self.groupsClaim {
            try encodeContainer.encode(groupsClaim, forKey: .groupsClaim)
        }
        if let groupsPrefix = self.groupsPrefix {
            try encodeContainer.encode(groupsPrefix, forKey: .groupsPrefix)
        }
        if let identityProviderConfigName = self.identityProviderConfigName {
            try encodeContainer.encode(identityProviderConfigName, forKey: .identityProviderConfigName)
        }
        if let issuerUrl = self.issuerUrl {
            try encodeContainer.encode(issuerUrl, forKey: .issuerUrl)
        }
        if let requiredClaims = requiredClaims {
            var requiredClaimsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .requiredClaims)
            for (dictKey0, requiredclaimsmap0) in requiredClaims {
                try requiredClaimsContainer.encode(requiredclaimsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let usernameClaim = self.usernameClaim {
            try encodeContainer.encode(usernameClaim, forKey: .usernameClaim)
        }
        if let usernamePrefix = self.usernamePrefix {
            try encodeContainer.encode(usernamePrefix, forKey: .usernamePrefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityProviderConfigName)
        identityProviderConfigName = identityProviderConfigNameDecoded
        let issuerUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuerUrl)
        issuerUrl = issuerUrlDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let usernameClaimDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usernameClaim)
        usernameClaim = usernameClaimDecoded
        let usernamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usernamePrefix)
        usernamePrefix = usernamePrefixDecoded
        let groupsClaimDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupsClaim)
        groupsClaim = groupsClaimDecoded
        let groupsPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupsPrefix)
        groupsPrefix = groupsPrefixDecoded
        let requiredClaimsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .requiredClaims)
        var requiredClaimsDecoded0: [Swift.String:Swift.String]? = nil
        if let requiredClaimsContainer = requiredClaimsContainer {
            requiredClaimsDecoded0 = [Swift.String:Swift.String]()
            for (key0, requiredclaimsvalue0) in requiredClaimsContainer {
                if let requiredclaimsvalue0 = requiredclaimsvalue0 {
                    requiredClaimsDecoded0?[key0] = requiredclaimsvalue0
                }
            }
        }
        requiredClaims = requiredClaimsDecoded0
    }
}
