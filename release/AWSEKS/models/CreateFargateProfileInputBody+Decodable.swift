// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFargateProfileInputBody: Swift.Equatable {
    let fargateProfileName: Swift.String?
    let podExecutionRoleArn: Swift.String?
    let subnets: [Swift.String]?
    let selectors: [EksClientTypes.FargateProfileSelector]?
    let clientRequestToken: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateFargateProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case fargateProfileName
        case podExecutionRoleArn
        case selectors
        case subnets
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fargateProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fargateProfileName)
        fargateProfileName = fargateProfileNameDecoded
        let podExecutionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .podExecutionRoleArn)
        podExecutionRoleArn = podExecutionRoleArnDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let selectorsContainer = try containerValues.decodeIfPresent([EksClientTypes.FargateProfileSelector?].self, forKey: .selectors)
        var selectorsDecoded0:[EksClientTypes.FargateProfileSelector]? = nil
        if let selectorsContainer = selectorsContainer {
            selectorsDecoded0 = [EksClientTypes.FargateProfileSelector]()
            for structure0 in selectorsContainer {
                if let structure0 = structure0 {
                    selectorsDecoded0?.append(structure0)
                }
            }
        }
        selectors = selectorsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
