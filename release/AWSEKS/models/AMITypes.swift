// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EksClientTypes {
    public enum AMITypes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case al2Arm64
        case al2X8664
        case al2X8664Gpu
        case bottlerocketArm64
        case bottlerocketArm64Nvidia
        case bottlerocketX8664
        case bottlerocketX8664Nvidia
        case custom
        case sdkUnknown(Swift.String)

        public static var allCases: [AMITypes] {
            return [
                .al2Arm64,
                .al2X8664,
                .al2X8664Gpu,
                .bottlerocketArm64,
                .bottlerocketArm64Nvidia,
                .bottlerocketX8664,
                .bottlerocketX8664Nvidia,
                .custom,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .al2Arm64: return "AL2_ARM_64"
            case .al2X8664: return "AL2_x86_64"
            case .al2X8664Gpu: return "AL2_x86_64_GPU"
            case .bottlerocketArm64: return "BOTTLEROCKET_ARM_64"
            case .bottlerocketArm64Nvidia: return "BOTTLEROCKET_ARM_64_NVIDIA"
            case .bottlerocketX8664: return "BOTTLEROCKET_x86_64"
            case .bottlerocketX8664Nvidia: return "BOTTLEROCKET_x86_64_NVIDIA"
            case .custom: return "CUSTOM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AMITypes(rawValue: rawValue) ?? AMITypes.sdkUnknown(rawValue)
        }
    }
}
