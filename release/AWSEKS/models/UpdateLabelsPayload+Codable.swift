// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EksClientTypes.UpdateLabelsPayload: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOrUpdateLabels
        case removeLabels
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOrUpdateLabels = addOrUpdateLabels {
            var addOrUpdateLabelsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .addOrUpdateLabels)
            for (dictKey0, labelsmap0) in addOrUpdateLabels {
                try addOrUpdateLabelsContainer.encode(labelsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let removeLabels = removeLabels {
            var removeLabelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .removeLabels)
            for labelskeylist0 in removeLabels {
                try removeLabelsContainer.encode(labelskeylist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addOrUpdateLabelsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .addOrUpdateLabels)
        var addOrUpdateLabelsDecoded0: [Swift.String:Swift.String]? = nil
        if let addOrUpdateLabelsContainer = addOrUpdateLabelsContainer {
            addOrUpdateLabelsDecoded0 = [Swift.String:Swift.String]()
            for (key0, labelvalue0) in addOrUpdateLabelsContainer {
                if let labelvalue0 = labelvalue0 {
                    addOrUpdateLabelsDecoded0?[key0] = labelvalue0
                }
            }
        }
        addOrUpdateLabels = addOrUpdateLabelsDecoded0
        let removeLabelsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .removeLabels)
        var removeLabelsDecoded0:[Swift.String]? = nil
        if let removeLabelsContainer = removeLabelsContainer {
            removeLabelsDecoded0 = [Swift.String]()
            for string0 in removeLabelsContainer {
                if let string0 = string0 {
                    removeLabelsDecoded0?.append(string0)
                }
            }
        }
        removeLabels = removeLabelsDecoded0
    }
}
