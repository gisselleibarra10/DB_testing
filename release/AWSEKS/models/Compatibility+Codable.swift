// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EksClientTypes.Compatibility: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterVersion
        case defaultVersion
        case platformVersions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterVersion = self.clusterVersion {
            try encodeContainer.encode(clusterVersion, forKey: .clusterVersion)
        }
        if defaultVersion != false {
            try encodeContainer.encode(defaultVersion, forKey: .defaultVersion)
        }
        if let platformVersions = platformVersions {
            var platformVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformVersions)
            for stringlist0 in platformVersions {
                try platformVersionsContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let platformVersionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .platformVersions)
        var platformVersionsDecoded0:[Swift.String]? = nil
        if let platformVersionsContainer = platformVersionsContainer {
            platformVersionsDecoded0 = [Swift.String]()
            for string0 in platformVersionsContainer {
                if let string0 = string0 {
                    platformVersionsDecoded0?.append(string0)
                }
            }
        }
        platformVersions = platformVersionsDecoded0
        let defaultVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .defaultVersion) ?? false
        defaultVersion = defaultVersionDecoded
    }
}
