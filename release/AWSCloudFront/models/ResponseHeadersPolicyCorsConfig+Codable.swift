// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudFrontClientTypes.ResponseHeadersPolicyCorsConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlAllowCredentials = "AccessControlAllowCredentials"
        case accessControlAllowHeaders = "AccessControlAllowHeaders"
        case accessControlAllowMethods = "AccessControlAllowMethods"
        case accessControlAllowOrigins = "AccessControlAllowOrigins"
        case accessControlExposeHeaders = "AccessControlExposeHeaders"
        case accessControlMaxAgeSec = "AccessControlMaxAgeSec"
        case originOverride = "OriginOverride"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://cloudfront.amazonaws.com/doc/2020-05-31/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let accessControlAllowCredentials = accessControlAllowCredentials {
            try container.encode(accessControlAllowCredentials, forKey: ClientRuntime.Key("AccessControlAllowCredentials"))
        }
        if let accessControlAllowHeaders = accessControlAllowHeaders {
            try container.encode(accessControlAllowHeaders, forKey: ClientRuntime.Key("AccessControlAllowHeaders"))
        }
        if let accessControlAllowMethods = accessControlAllowMethods {
            try container.encode(accessControlAllowMethods, forKey: ClientRuntime.Key("AccessControlAllowMethods"))
        }
        if let accessControlAllowOrigins = accessControlAllowOrigins {
            try container.encode(accessControlAllowOrigins, forKey: ClientRuntime.Key("AccessControlAllowOrigins"))
        }
        if let accessControlExposeHeaders = accessControlExposeHeaders {
            try container.encode(accessControlExposeHeaders, forKey: ClientRuntime.Key("AccessControlExposeHeaders"))
        }
        if let accessControlMaxAgeSec = accessControlMaxAgeSec {
            try container.encode(accessControlMaxAgeSec, forKey: ClientRuntime.Key("AccessControlMaxAgeSec"))
        }
        if let originOverride = originOverride {
            try container.encode(originOverride, forKey: ClientRuntime.Key("OriginOverride"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessControlAllowOriginsDecoded = try containerValues.decodeIfPresent(CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowOrigins.self, forKey: .accessControlAllowOrigins)
        accessControlAllowOrigins = accessControlAllowOriginsDecoded
        let accessControlAllowHeadersDecoded = try containerValues.decodeIfPresent(CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowHeaders.self, forKey: .accessControlAllowHeaders)
        accessControlAllowHeaders = accessControlAllowHeadersDecoded
        let accessControlAllowMethodsDecoded = try containerValues.decodeIfPresent(CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowMethods.self, forKey: .accessControlAllowMethods)
        accessControlAllowMethods = accessControlAllowMethodsDecoded
        let accessControlAllowCredentialsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .accessControlAllowCredentials)
        accessControlAllowCredentials = accessControlAllowCredentialsDecoded
        let accessControlExposeHeadersDecoded = try containerValues.decodeIfPresent(CloudFrontClientTypes.ResponseHeadersPolicyAccessControlExposeHeaders.self, forKey: .accessControlExposeHeaders)
        accessControlExposeHeaders = accessControlExposeHeadersDecoded
        let accessControlMaxAgeSecDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .accessControlMaxAgeSec)
        accessControlMaxAgeSec = accessControlMaxAgeSecDecoded
        let originOverrideDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .originOverride)
        originOverride = originOverrideDecoded
    }
}
