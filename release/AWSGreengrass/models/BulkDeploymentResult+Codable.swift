// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GreengrassClientTypes.BulkDeploymentResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case deploymentArn = "DeploymentArn"
        case deploymentId = "DeploymentId"
        case deploymentStatus = "DeploymentStatus"
        case deploymentType = "DeploymentType"
        case errorDetails = "ErrorDetails"
        case errorMessage = "ErrorMessage"
        case groupArn = "GroupArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if let deploymentArn = self.deploymentArn {
            try encodeContainer.encode(deploymentArn, forKey: .deploymentArn)
        }
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let deploymentStatus = self.deploymentStatus {
            try encodeContainer.encode(deploymentStatus, forKey: .deploymentStatus)
        }
        if let deploymentType = self.deploymentType {
            try encodeContainer.encode(deploymentType.rawValue, forKey: .deploymentType)
        }
        if let errorDetails = errorDetails {
            var errorDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .errorDetails)
            for errordetails0 in errorDetails {
                try errorDetailsContainer.encode(errordetails0)
            }
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let groupArn = self.groupArn {
            try encodeContainer.encode(groupArn, forKey: .groupArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let deploymentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentArn)
        deploymentArn = deploymentArnDecoded
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let deploymentStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentStatus)
        deploymentStatus = deploymentStatusDecoded
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(GreengrassClientTypes.DeploymentType.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let errorDetailsContainer = try containerValues.decodeIfPresent([GreengrassClientTypes.ErrorDetail?].self, forKey: .errorDetails)
        var errorDetailsDecoded0:[GreengrassClientTypes.ErrorDetail]? = nil
        if let errorDetailsContainer = errorDetailsContainer {
            errorDetailsDecoded0 = [GreengrassClientTypes.ErrorDetail]()
            for structure0 in errorDetailsContainer {
                if let structure0 = structure0 {
                    errorDetailsDecoded0?.append(structure0)
                }
            }
        }
        errorDetails = errorDetailsDecoded0
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let groupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupArn)
        groupArn = groupArnDecoded
    }
}
