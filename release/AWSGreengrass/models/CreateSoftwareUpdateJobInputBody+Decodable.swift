// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSoftwareUpdateJobInputBody: Swift.Equatable {
    let s3UrlSignerRole: Swift.String?
    let softwareToUpdate: GreengrassClientTypes.SoftwareToUpdate?
    let updateAgentLogLevel: GreengrassClientTypes.UpdateAgentLogLevel?
    let updateTargets: [Swift.String]?
    let updateTargetsArchitecture: GreengrassClientTypes.UpdateTargetsArchitecture?
    let updateTargetsOperatingSystem: GreengrassClientTypes.UpdateTargetsOperatingSystem?
}

extension CreateSoftwareUpdateJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3UrlSignerRole = "S3UrlSignerRole"
        case softwareToUpdate = "SoftwareToUpdate"
        case updateAgentLogLevel = "UpdateAgentLogLevel"
        case updateTargets = "UpdateTargets"
        case updateTargetsArchitecture = "UpdateTargetsArchitecture"
        case updateTargetsOperatingSystem = "UpdateTargetsOperatingSystem"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UrlSignerRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3UrlSignerRole)
        s3UrlSignerRole = s3UrlSignerRoleDecoded
        let softwareToUpdateDecoded = try containerValues.decodeIfPresent(GreengrassClientTypes.SoftwareToUpdate.self, forKey: .softwareToUpdate)
        softwareToUpdate = softwareToUpdateDecoded
        let updateAgentLogLevelDecoded = try containerValues.decodeIfPresent(GreengrassClientTypes.UpdateAgentLogLevel.self, forKey: .updateAgentLogLevel)
        updateAgentLogLevel = updateAgentLogLevelDecoded
        let updateTargetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .updateTargets)
        var updateTargetsDecoded0:[Swift.String]? = nil
        if let updateTargetsContainer = updateTargetsContainer {
            updateTargetsDecoded0 = [Swift.String]()
            for string0 in updateTargetsContainer {
                if let string0 = string0 {
                    updateTargetsDecoded0?.append(string0)
                }
            }
        }
        updateTargets = updateTargetsDecoded0
        let updateTargetsArchitectureDecoded = try containerValues.decodeIfPresent(GreengrassClientTypes.UpdateTargetsArchitecture.self, forKey: .updateTargetsArchitecture)
        updateTargetsArchitecture = updateTargetsArchitectureDecoded
        let updateTargetsOperatingSystemDecoded = try containerValues.decodeIfPresent(GreengrassClientTypes.UpdateTargetsOperatingSystem.self, forKey: .updateTargetsOperatingSystem)
        updateTargetsOperatingSystem = updateTargetsOperatingSystemDecoded
    }
}
