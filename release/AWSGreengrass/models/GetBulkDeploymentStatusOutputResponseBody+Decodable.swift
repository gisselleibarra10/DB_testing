// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetBulkDeploymentStatusOutputResponseBody: Swift.Equatable {
    let bulkDeploymentMetrics: GreengrassClientTypes.BulkDeploymentMetrics?
    let bulkDeploymentStatus: GreengrassClientTypes.BulkDeploymentStatus?
    let createdAt: Swift.String?
    let errorDetails: [GreengrassClientTypes.ErrorDetail]?
    let errorMessage: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension GetBulkDeploymentStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bulkDeploymentMetrics = "BulkDeploymentMetrics"
        case bulkDeploymentStatus = "BulkDeploymentStatus"
        case createdAt = "CreatedAt"
        case errorDetails = "ErrorDetails"
        case errorMessage = "ErrorMessage"
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bulkDeploymentMetricsDecoded = try containerValues.decodeIfPresent(GreengrassClientTypes.BulkDeploymentMetrics.self, forKey: .bulkDeploymentMetrics)
        bulkDeploymentMetrics = bulkDeploymentMetricsDecoded
        let bulkDeploymentStatusDecoded = try containerValues.decodeIfPresent(GreengrassClientTypes.BulkDeploymentStatus.self, forKey: .bulkDeploymentStatus)
        bulkDeploymentStatus = bulkDeploymentStatusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let errorDetailsContainer = try containerValues.decodeIfPresent([GreengrassClientTypes.ErrorDetail?].self, forKey: .errorDetails)
        var errorDetailsDecoded0:[GreengrassClientTypes.ErrorDetail]? = nil
        if let errorDetailsContainer = errorDetailsContainer {
            errorDetailsDecoded0 = [GreengrassClientTypes.ErrorDetail]()
            for structure0 in errorDetailsContainer {
                if let structure0 = structure0 {
                    errorDetailsDecoded0?.append(structure0)
                }
            }
        }
        errorDetails = errorDetailsDecoded0
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
