// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticInferenceClientTypes.AcceleratorType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceleratorTypeName
        case memoryInfo
        case throughputInfo
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceleratorTypeName = self.acceleratorTypeName {
            try encodeContainer.encode(acceleratorTypeName, forKey: .acceleratorTypeName)
        }
        if let memoryInfo = self.memoryInfo {
            try encodeContainer.encode(memoryInfo, forKey: .memoryInfo)
        }
        if let throughputInfo = throughputInfo {
            var throughputInfoContainer = encodeContainer.nestedUnkeyedContainer(forKey: .throughputInfo)
            for throughputinfolist0 in throughputInfo {
                try throughputInfoContainer.encode(throughputinfolist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acceleratorTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .acceleratorTypeName)
        acceleratorTypeName = acceleratorTypeNameDecoded
        let memoryInfoDecoded = try containerValues.decodeIfPresent(ElasticInferenceClientTypes.MemoryInfo.self, forKey: .memoryInfo)
        memoryInfo = memoryInfoDecoded
        let throughputInfoContainer = try containerValues.decodeIfPresent([ElasticInferenceClientTypes.KeyValuePair?].self, forKey: .throughputInfo)
        var throughputInfoDecoded0:[ElasticInferenceClientTypes.KeyValuePair]? = nil
        if let throughputInfoContainer = throughputInfoContainer {
            throughputInfoDecoded0 = [ElasticInferenceClientTypes.KeyValuePair]()
            for structure0 in throughputInfoContainer {
                if let structure0 = structure0 {
                    throughputInfoDecoded0?.append(structure0)
                }
            }
        }
        throughputInfo = throughputInfoDecoded0
    }
}
