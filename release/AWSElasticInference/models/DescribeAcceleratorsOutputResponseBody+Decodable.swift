// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAcceleratorsOutputResponseBody: Swift.Equatable {
    let acceleratorSet: [ElasticInferenceClientTypes.ElasticInferenceAccelerator]?
    let nextToken: Swift.String?
}

extension DescribeAcceleratorsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceleratorSet
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acceleratorSetContainer = try containerValues.decodeIfPresent([ElasticInferenceClientTypes.ElasticInferenceAccelerator?].self, forKey: .acceleratorSet)
        var acceleratorSetDecoded0:[ElasticInferenceClientTypes.ElasticInferenceAccelerator]? = nil
        if let acceleratorSetContainer = acceleratorSetContainer {
            acceleratorSetDecoded0 = [ElasticInferenceClientTypes.ElasticInferenceAccelerator]()
            for structure0 in acceleratorSetContainer {
                if let structure0 = structure0 {
                    acceleratorSetDecoded0?.append(structure0)
                }
            }
        }
        acceleratorSet = acceleratorSetDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
