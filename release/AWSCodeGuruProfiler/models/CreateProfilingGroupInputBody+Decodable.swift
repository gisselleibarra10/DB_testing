// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateProfilingGroupInputBody: Swift.Equatable {
    let profilingGroupName: Swift.String?
    let computePlatform: CodeGuruProfilerClientTypes.ComputePlatform?
    let agentOrchestrationConfig: CodeGuruProfilerClientTypes.AgentOrchestrationConfig?
    let tags: [Swift.String:Swift.String]?
}

extension CreateProfilingGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentOrchestrationConfig
        case computePlatform
        case profilingGroupName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let profilingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .profilingGroupName)
        profilingGroupName = profilingGroupNameDecoded
        let computePlatformDecoded = try containerValues.decodeIfPresent(CodeGuruProfilerClientTypes.ComputePlatform.self, forKey: .computePlatform)
        computePlatform = computePlatformDecoded
        let agentOrchestrationConfigDecoded = try containerValues.decodeIfPresent(CodeGuruProfilerClientTypes.AgentOrchestrationConfig.self, forKey: .agentOrchestrationConfig)
        agentOrchestrationConfig = agentOrchestrationConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
