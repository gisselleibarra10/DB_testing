// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeGuruProfilerClientTypes.Pattern: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case countersToAggregate
        case description
        case id
        case name
        case resolutionSteps
        case targetFrames
        case thresholdPercent
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let countersToAggregate = countersToAggregate {
            var countersToAggregateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .countersToAggregate)
            for strings0 in countersToAggregate {
                try countersToAggregateContainer.encode(strings0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resolutionSteps = self.resolutionSteps {
            try encodeContainer.encode(resolutionSteps, forKey: .resolutionSteps)
        }
        if let targetFrames = targetFrames {
            var targetFramesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetFrames)
            for targetframes0 in targetFrames {
                var targetframes0Container = targetFramesContainer.nestedUnkeyedContainer()
                for targetframe1 in targetframes0 {
                    try targetframes0Container.encode(targetframe1)
                }
            }
        }
        if thresholdPercent != 0.0 {
            try encodeContainer.encode(thresholdPercent, forKey: .thresholdPercent)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let resolutionStepsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resolutionSteps)
        resolutionSteps = resolutionStepsDecoded
        let targetFramesContainer = try containerValues.decodeIfPresent([[Swift.String?]?].self, forKey: .targetFrames)
        var targetFramesDecoded0:[[Swift.String]]? = nil
        if let targetFramesContainer = targetFramesContainer {
            targetFramesDecoded0 = [[Swift.String]]()
            for list0 in targetFramesContainer {
                var list0Decoded0: [Swift.String]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [Swift.String]()
                    for string1 in list0 {
                        if let string1 = string1 {
                            list0Decoded0?.append(string1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    targetFramesDecoded0?.append(list0Decoded0)
                }
            }
        }
        targetFrames = targetFramesDecoded0
        let thresholdPercentDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .thresholdPercent) ?? 0.0
        thresholdPercent = thresholdPercentDecoded
        let countersToAggregateContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .countersToAggregate)
        var countersToAggregateDecoded0:[Swift.String]? = nil
        if let countersToAggregateContainer = countersToAggregateContainer {
            countersToAggregateDecoded0 = [Swift.String]()
            for string0 in countersToAggregateContainer {
                if let string0 = string0 {
                    countersToAggregateDecoded0?.append(string0)
                }
            }
        }
        countersToAggregate = countersToAggregateDecoded0
    }
}
