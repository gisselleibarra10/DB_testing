// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SupportClientTypes.CaseDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caseId
        case categoryCode
        case ccEmailAddresses
        case displayId
        case language
        case recentCommunications
        case serviceCode
        case severityCode
        case status
        case subject
        case submittedBy
        case timeCreated
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let caseId = self.caseId {
            try encodeContainer.encode(caseId, forKey: .caseId)
        }
        if let categoryCode = self.categoryCode {
            try encodeContainer.encode(categoryCode, forKey: .categoryCode)
        }
        if let ccEmailAddresses = ccEmailAddresses {
            var ccEmailAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ccEmailAddresses)
            for ccemailaddresslist0 in ccEmailAddresses {
                try ccEmailAddressesContainer.encode(ccemailaddresslist0)
            }
        }
        if let displayId = self.displayId {
            try encodeContainer.encode(displayId, forKey: .displayId)
        }
        if let language = self.language {
            try encodeContainer.encode(language, forKey: .language)
        }
        if let recentCommunications = self.recentCommunications {
            try encodeContainer.encode(recentCommunications, forKey: .recentCommunications)
        }
        if let serviceCode = self.serviceCode {
            try encodeContainer.encode(serviceCode, forKey: .serviceCode)
        }
        if let severityCode = self.severityCode {
            try encodeContainer.encode(severityCode, forKey: .severityCode)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let subject = self.subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
        if let submittedBy = self.submittedBy {
            try encodeContainer.encode(submittedBy, forKey: .submittedBy)
        }
        if let timeCreated = self.timeCreated {
            try encodeContainer.encode(timeCreated, forKey: .timeCreated)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let caseIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caseId)
        caseId = caseIdDecoded
        let displayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayId)
        displayId = displayIdDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let serviceCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceCode)
        serviceCode = serviceCodeDecoded
        let categoryCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .categoryCode)
        categoryCode = categoryCodeDecoded
        let severityCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .severityCode)
        severityCode = severityCodeDecoded
        let submittedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .submittedBy)
        submittedBy = submittedByDecoded
        let timeCreatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeCreated)
        timeCreated = timeCreatedDecoded
        let recentCommunicationsDecoded = try containerValues.decodeIfPresent(SupportClientTypes.RecentCaseCommunications.self, forKey: .recentCommunications)
        recentCommunications = recentCommunicationsDecoded
        let ccEmailAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ccEmailAddresses)
        var ccEmailAddressesDecoded0:[Swift.String]? = nil
        if let ccEmailAddressesContainer = ccEmailAddressesContainer {
            ccEmailAddressesDecoded0 = [Swift.String]()
            for string0 in ccEmailAddressesContainer {
                if let string0 = string0 {
                    ccEmailAddressesDecoded0?.append(string0)
                }
            }
        }
        ccEmailAddresses = ccEmailAddressesDecoded0
        let languageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .language)
        language = languageDecoded
    }
}
