// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AddCommunicationToCaseInputBody: Swift.Equatable {
    let caseId: Swift.String?
    let communicationBody: Swift.String?
    let ccEmailAddresses: [Swift.String]?
    let attachmentSetId: Swift.String?
}

extension AddCommunicationToCaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachmentSetId
        case caseId
        case ccEmailAddresses
        case communicationBody
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let caseIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caseId)
        caseId = caseIdDecoded
        let communicationBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .communicationBody)
        communicationBody = communicationBodyDecoded
        let ccEmailAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ccEmailAddresses)
        var ccEmailAddressesDecoded0:[Swift.String]? = nil
        if let ccEmailAddressesContainer = ccEmailAddressesContainer {
            ccEmailAddressesDecoded0 = [Swift.String]()
            for string0 in ccEmailAddressesContainer {
                if let string0 = string0 {
                    ccEmailAddressesDecoded0?.append(string0)
                }
            }
        }
        ccEmailAddresses = ccEmailAddressesDecoded0
        let attachmentSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachmentSetId)
        attachmentSetId = attachmentSetIdDecoded
    }
}
