// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeCasesInputBody: Swift.Equatable {
    let caseIdList: [Swift.String]?
    let displayId: Swift.String?
    let afterTime: Swift.String?
    let beforeTime: Swift.String?
    let includeResolvedCases: Swift.Bool
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let language: Swift.String?
    let includeCommunications: Swift.Bool?
}

extension DescribeCasesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case afterTime
        case beforeTime
        case caseIdList
        case displayId
        case includeCommunications
        case includeResolvedCases
        case language
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let caseIdListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .caseIdList)
        var caseIdListDecoded0:[Swift.String]? = nil
        if let caseIdListContainer = caseIdListContainer {
            caseIdListDecoded0 = [Swift.String]()
            for string0 in caseIdListContainer {
                if let string0 = string0 {
                    caseIdListDecoded0?.append(string0)
                }
            }
        }
        caseIdList = caseIdListDecoded0
        let displayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayId)
        displayId = displayIdDecoded
        let afterTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .afterTime)
        afterTime = afterTimeDecoded
        let beforeTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .beforeTime)
        beforeTime = beforeTimeDecoded
        let includeResolvedCasesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeResolvedCases) ?? false
        includeResolvedCases = includeResolvedCasesDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let languageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .language)
        language = languageDecoded
        let includeCommunicationsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeCommunications)
        includeCommunications = includeCommunicationsDecoded
    }
}
