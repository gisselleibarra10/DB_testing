// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ChangeMessageVisibilityBatchInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let entries: [SqsClientTypes.ChangeMessageVisibilityBatchRequestEntry]?
}

extension ChangeMessageVisibilityBatchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entries = "ChangeMessageVisibilityBatchRequestEntry"
        case queueUrl = "QueueUrl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        if containerValues.contains(.entries) {
            let entriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .entries)
            if entriesWrappedContainer != nil {
                let entriesContainer = try containerValues.decodeIfPresent([SqsClientTypes.ChangeMessageVisibilityBatchRequestEntry].self, forKey: .entries)
                var entriesBuffer:[SqsClientTypes.ChangeMessageVisibilityBatchRequestEntry]? = nil
                if let entriesContainer = entriesContainer {
                    entriesBuffer = [SqsClientTypes.ChangeMessageVisibilityBatchRequestEntry]()
                    for structureContainer0 in entriesContainer {
                        entriesBuffer?.append(structureContainer0)
                    }
                }
                entries = entriesBuffer
            } else {
                entries = []
            }
        } else {
            entries = nil
        }
    }
}
