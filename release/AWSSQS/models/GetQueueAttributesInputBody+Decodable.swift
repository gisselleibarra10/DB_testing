// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetQueueAttributesInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let attributeNames: [SqsClientTypes.QueueAttributeName]?
}

extension GetQueueAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeNames = "AttributeName"
        case queueUrl = "QueueUrl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        if containerValues.contains(.attributeNames) {
            let attributeNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .attributeNames)
            if attributeNamesWrappedContainer != nil {
                let attributeNamesContainer = try containerValues.decodeIfPresent([SqsClientTypes.QueueAttributeName].self, forKey: .attributeNames)
                var attributeNamesBuffer:[SqsClientTypes.QueueAttributeName]? = nil
                if let attributeNamesContainer = attributeNamesContainer {
                    attributeNamesBuffer = [SqsClientTypes.QueueAttributeName]()
                    for stringContainer0 in attributeNamesContainer {
                        attributeNamesBuffer?.append(stringContainer0)
                    }
                }
                attributeNames = attributeNamesBuffer
            } else {
                attributeNames = []
            }
        } else {
            attributeNames = nil
        }
    }
}
