// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReceiveMessageInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributeNames = attributeNames {
            if !attributeNames.isEmpty {
                for (index0, queueattributename0) in attributeNames.enumerated() {
                    var attributeNamesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeName.\(index0.advanced(by: 1))"))
                    try attributeNamesContainer0.encode(queueattributename0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if maxNumberOfMessages != 0 {
            try container.encode(maxNumberOfMessages, forKey: ClientRuntime.Key("MaxNumberOfMessages"))
        }
        if let messageAttributeNames = messageAttributeNames {
            if !messageAttributeNames.isEmpty {
                for (index0, messageattributename0) in messageAttributeNames.enumerated() {
                    var messageAttributeNamesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MessageAttributeName.\(index0.advanced(by: 1))"))
                    try messageAttributeNamesContainer0.encode(messageattributename0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        if let receiveRequestAttemptId = receiveRequestAttemptId {
            try container.encode(receiveRequestAttemptId, forKey: ClientRuntime.Key("ReceiveRequestAttemptId"))
        }
        if visibilityTimeout != 0 {
            try container.encode(visibilityTimeout, forKey: ClientRuntime.Key("VisibilityTimeout"))
        }
        if waitTimeSeconds != 0 {
            try container.encode(waitTimeSeconds, forKey: ClientRuntime.Key("WaitTimeSeconds"))
        }
        try container.encode("ReceiveMessage", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}
