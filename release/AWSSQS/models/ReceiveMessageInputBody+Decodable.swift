// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ReceiveMessageInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let attributeNames: [SqsClientTypes.QueueAttributeName]?
    let messageAttributeNames: [Swift.String]?
    let maxNumberOfMessages: Swift.Int
    let visibilityTimeout: Swift.Int
    let waitTimeSeconds: Swift.Int
    let receiveRequestAttemptId: Swift.String?
}

extension ReceiveMessageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeNames = "AttributeName"
        case maxNumberOfMessages = "MaxNumberOfMessages"
        case messageAttributeNames = "MessageAttributeName"
        case queueUrl = "QueueUrl"
        case receiveRequestAttemptId = "ReceiveRequestAttemptId"
        case visibilityTimeout = "VisibilityTimeout"
        case waitTimeSeconds = "WaitTimeSeconds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        if containerValues.contains(.attributeNames) {
            let attributeNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .attributeNames)
            if attributeNamesWrappedContainer != nil {
                let attributeNamesContainer = try containerValues.decodeIfPresent([SqsClientTypes.QueueAttributeName].self, forKey: .attributeNames)
                var attributeNamesBuffer:[SqsClientTypes.QueueAttributeName]? = nil
                if let attributeNamesContainer = attributeNamesContainer {
                    attributeNamesBuffer = [SqsClientTypes.QueueAttributeName]()
                    for stringContainer0 in attributeNamesContainer {
                        attributeNamesBuffer?.append(stringContainer0)
                    }
                }
                attributeNames = attributeNamesBuffer
            } else {
                attributeNames = []
            }
        } else {
            attributeNames = nil
        }
        if containerValues.contains(.messageAttributeNames) {
            let messageAttributeNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .messageAttributeNames)
            if messageAttributeNamesWrappedContainer != nil {
                let messageAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .messageAttributeNames)
                var messageAttributeNamesBuffer:[Swift.String]? = nil
                if let messageAttributeNamesContainer = messageAttributeNamesContainer {
                    messageAttributeNamesBuffer = [Swift.String]()
                    for stringContainer0 in messageAttributeNamesContainer {
                        messageAttributeNamesBuffer?.append(stringContainer0)
                    }
                }
                messageAttributeNames = messageAttributeNamesBuffer
            } else {
                messageAttributeNames = []
            }
        } else {
            messageAttributeNames = nil
        }
        let maxNumberOfMessagesDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxNumberOfMessages)
        maxNumberOfMessages = maxNumberOfMessagesDecoded
        let visibilityTimeoutDecoded = try containerValues.decode(Swift.Int.self, forKey: .visibilityTimeout)
        visibilityTimeout = visibilityTimeoutDecoded
        let waitTimeSecondsDecoded = try containerValues.decode(Swift.Int.self, forKey: .waitTimeSeconds)
        waitTimeSeconds = waitTimeSecondsDecoded
        let receiveRequestAttemptIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .receiveRequestAttemptId)
        receiveRequestAttemptId = receiveRequestAttemptIdDecoded
    }
}
