// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SqsClientTypes.SendMessageBatchRequestEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delaySeconds = "DelaySeconds"
        case id = "Id"
        case messageAttributes = "MessageAttribute"
        case messageBody = "MessageBody"
        case messageDeduplicationId = "MessageDeduplicationId"
        case messageGroupId = "MessageGroupId"
        case messageSystemAttributes = "MessageSystemAttribute"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if delaySeconds != 0 {
            try container.encode(delaySeconds, forKey: ClientRuntime.Key("DelaySeconds"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let messageAttributes = messageAttributes {
            if !messageAttributes.isEmpty {
                for (index0, element0) in messageAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let stringKey0 = element0.key
                    let messageattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MessageAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Name"))
                    try keyContainer0.encode(stringKey0, forKey: ClientRuntime.Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                    try valueContainer0.encode(messageattributevalueValue0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let messageBody = messageBody {
            try container.encode(messageBody, forKey: ClientRuntime.Key("MessageBody"))
        }
        if let messageDeduplicationId = messageDeduplicationId {
            try container.encode(messageDeduplicationId, forKey: ClientRuntime.Key("MessageDeduplicationId"))
        }
        if let messageGroupId = messageGroupId {
            try container.encode(messageGroupId, forKey: ClientRuntime.Key("MessageGroupId"))
        }
        if let messageSystemAttributes = messageSystemAttributes {
            if !messageSystemAttributes.isEmpty {
                for (index0, element0) in messageSystemAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let messagesystemattributenameforsendsKey0 = element0.key
                    let messagesystemattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MessageSystemAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Name"))
                    try keyContainer0.encode(messagesystemattributenameforsendsKey0, forKey: ClientRuntime.Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                    try valueContainer0.encode(messagesystemattributevalueValue0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let messageBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
        let delaySecondsDecoded = try containerValues.decode(Swift.Int.self, forKey: .delaySeconds)
        delaySeconds = delaySecondsDecoded
        if containerValues.contains(.messageAttributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let messageAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SqsClientTypes.MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .messageAttributes)
            if messageAttributesWrappedContainer != nil {
                let messageAttributesContainer = try containerValues.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SqsClientTypes.MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>].self, forKey: .messageAttributes)
                var messageAttributesBuffer: [Swift.String:SqsClientTypes.MessageAttributeValue]? = nil
                if let messageAttributesContainer = messageAttributesContainer {
                    messageAttributesBuffer = [Swift.String:SqsClientTypes.MessageAttributeValue]()
                    for structureContainer0 in messageAttributesContainer {
                        messageAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                messageAttributes = messageAttributesBuffer
            } else {
                messageAttributes = [:]
            }
        } else {
            messageAttributes = nil
        }
        if containerValues.contains(.messageSystemAttributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let messageSystemAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SqsClientTypes.MessageSystemAttributeValue, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .messageSystemAttributes)
            if messageSystemAttributesWrappedContainer != nil {
                let messageSystemAttributesContainer = try containerValues.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SqsClientTypes.MessageSystemAttributeValue, KeyVal0.Name, KeyVal0.Value>].self, forKey: .messageSystemAttributes)
                var messageSystemAttributesBuffer: [Swift.String:SqsClientTypes.MessageSystemAttributeValue]? = nil
                if let messageSystemAttributesContainer = messageSystemAttributesContainer {
                    messageSystemAttributesBuffer = [Swift.String:SqsClientTypes.MessageSystemAttributeValue]()
                    for structureContainer0 in messageSystemAttributesContainer {
                        messageSystemAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                messageSystemAttributes = messageSystemAttributesBuffer
            } else {
                messageSystemAttributes = [:]
            }
        } else {
            messageSystemAttributes = nil
        }
        let messageDeduplicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageDeduplicationId)
        messageDeduplicationId = messageDeduplicationIdDecoded
        let messageGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageGroupId)
        messageGroupId = messageGroupIdDecoded
    }
}
