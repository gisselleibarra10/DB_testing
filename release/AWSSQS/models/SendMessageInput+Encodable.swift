// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SendMessageInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if delaySeconds != 0 {
            try container.encode(delaySeconds, forKey: ClientRuntime.Key("DelaySeconds"))
        }
        if let messageAttributes = messageAttributes {
            if !messageAttributes.isEmpty {
                for (index0, element0) in messageAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let stringKey0 = element0.key
                    let messageattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MessageAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Name"))
                    try keyContainer0.encode(stringKey0, forKey: ClientRuntime.Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                    try valueContainer0.encode(messageattributevalueValue0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let messageBody = messageBody {
            try container.encode(messageBody, forKey: ClientRuntime.Key("MessageBody"))
        }
        if let messageDeduplicationId = messageDeduplicationId {
            try container.encode(messageDeduplicationId, forKey: ClientRuntime.Key("MessageDeduplicationId"))
        }
        if let messageGroupId = messageGroupId {
            try container.encode(messageGroupId, forKey: ClientRuntime.Key("MessageGroupId"))
        }
        if let messageSystemAttributes = messageSystemAttributes {
            if !messageSystemAttributes.isEmpty {
                for (index0, element0) in messageSystemAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let messagesystemattributenameforsendsKey0 = element0.key
                    let messagesystemattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MessageSystemAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Name"))
                    try keyContainer0.encode(messagesystemattributenameforsendsKey0, forKey: ClientRuntime.Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                    try valueContainer0.encode(messagesystemattributevalueValue0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: ClientRuntime.Key("QueueUrl"))
        }
        try container.encode("SendMessage", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-11-05", forKey:ClientRuntime.Key("Version"))
    }
}
