// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AddPermissionInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let label: Swift.String?
    let aWSAccountIds: [Swift.String]?
    let actions: [Swift.String]?
}

extension AddPermissionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aWSAccountIds = "AWSAccountId"
        case actions = "ActionName"
        case label = "Label"
        case queueUrl = "QueueUrl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        if containerValues.contains(.aWSAccountIds) {
            let aWSAccountIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .aWSAccountIds)
            if aWSAccountIdsWrappedContainer != nil {
                let aWSAccountIdsContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .aWSAccountIds)
                var aWSAccountIdsBuffer:[Swift.String]? = nil
                if let aWSAccountIdsContainer = aWSAccountIdsContainer {
                    aWSAccountIdsBuffer = [Swift.String]()
                    for stringContainer0 in aWSAccountIdsContainer {
                        aWSAccountIdsBuffer?.append(stringContainer0)
                    }
                }
                aWSAccountIds = aWSAccountIdsBuffer
            } else {
                aWSAccountIds = []
            }
        } else {
            aWSAccountIds = nil
        }
        if containerValues.contains(.actions) {
            let actionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .actions)
            if actionsWrappedContainer != nil {
                let actionsContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .actions)
                var actionsBuffer:[Swift.String]? = nil
                if let actionsContainer = actionsContainer {
                    actionsBuffer = [Swift.String]()
                    for stringContainer0 in actionsContainer {
                        actionsBuffer?.append(stringContainer0)
                    }
                }
                actions = actionsBuffer
            } else {
                actions = []
            }
        } else {
            actions = nil
        }
    }
}
