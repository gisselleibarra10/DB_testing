// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ReceiveMessageOutputResponseBody: Swift.Equatable {
    let messages: [SqsClientTypes.Message]?
}

extension ReceiveMessageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messages = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ReceiveMessageResult"))
        if containerValues.contains(.messages) {
            let messagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .messages)
            if messagesWrappedContainer != nil {
                let messagesContainer = try containerValues.decodeIfPresent([SqsClientTypes.Message].self, forKey: .messages)
                var messagesBuffer:[SqsClientTypes.Message]? = nil
                if let messagesContainer = messagesContainer {
                    messagesBuffer = [SqsClientTypes.Message]()
                    for structureContainer0 in messagesContainer {
                        messagesBuffer?.append(structureContainer0)
                    }
                }
                messages = messagesBuffer
            } else {
                messages = []
            }
        } else {
            messages = nil
        }
    }
}
