// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TagQueueInputBody: Swift.Equatable {
    let queueUrl: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension TagQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueUrl = "QueueUrl"
        case tags = "Tag"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Key{}; struct Value{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.String, KeyVal0.Key, KeyVal0.Value>.CodingKeys.self, forKey: .tags)
            if tagsWrappedContainer != nil {
                let tagsContainer = try containerValues.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.String, KeyVal0.Key, KeyVal0.Value>].self, forKey: .tags)
                var tagsBuffer: [Swift.String:Swift.String]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Swift.String:Swift.String]()
                    for stringContainer0 in tagsContainer {
                        tagsBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                tags = tagsBuffer
            } else {
                tags = [:]
            }
        } else {
            tags = nil
        }
    }
}
