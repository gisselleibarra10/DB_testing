// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListQueuesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let queueUrls: [Swift.String]?
}

extension ListQueuesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case queueUrls = "QueueUrl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListQueuesResult"))
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.queueUrls) {
            let queueUrlsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .queueUrls)
            if queueUrlsWrappedContainer != nil {
                let queueUrlsContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .queueUrls)
                var queueUrlsBuffer:[Swift.String]? = nil
                if let queueUrlsContainer = queueUrlsContainer {
                    queueUrlsBuffer = [Swift.String]()
                    for stringContainer0 in queueUrlsContainer {
                        queueUrlsBuffer?.append(stringContainer0)
                    }
                }
                queueUrls = queueUrlsBuffer
            } else {
                queueUrls = []
            }
        } else {
            queueUrls = nil
        }
    }
}
