// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutMetricsClientTypes.TimeSeries: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensionList = "DimensionList"
        case metricValueList = "MetricValueList"
        case timeSeriesId = "TimeSeriesId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensionList = dimensionList {
            var dimensionListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensionList)
            for dimensionnamevaluelist0 in dimensionList {
                try dimensionListContainer.encode(dimensionnamevaluelist0)
            }
        }
        if let metricValueList = metricValueList {
            var metricValueListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricValueList)
            for metricvaluelist0 in metricValueList {
                try metricValueListContainer.encode(metricvaluelist0)
            }
        }
        if let timeSeriesId = self.timeSeriesId {
            try encodeContainer.encode(timeSeriesId, forKey: .timeSeriesId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeSeriesIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeSeriesId)
        timeSeriesId = timeSeriesIdDecoded
        let dimensionListContainer = try containerValues.decodeIfPresent([LookoutMetricsClientTypes.DimensionNameValue?].self, forKey: .dimensionList)
        var dimensionListDecoded0:[LookoutMetricsClientTypes.DimensionNameValue]? = nil
        if let dimensionListContainer = dimensionListContainer {
            dimensionListDecoded0 = [LookoutMetricsClientTypes.DimensionNameValue]()
            for structure0 in dimensionListContainer {
                if let structure0 = structure0 {
                    dimensionListDecoded0?.append(structure0)
                }
            }
        }
        dimensionList = dimensionListDecoded0
        let metricValueListContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .metricValueList)
        var metricValueListDecoded0:[Swift.Double]? = nil
        if let metricValueListContainer = metricValueListContainer {
            metricValueListDecoded0 = [Swift.Double]()
            for double0 in metricValueListContainer {
                if let double0 = double0 {
                    metricValueListDecoded0?.append(double0)
                }
            }
        }
        metricValueList = metricValueListDecoded0
    }
}
