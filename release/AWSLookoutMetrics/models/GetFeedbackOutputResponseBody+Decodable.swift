// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetFeedbackOutputResponseBody: Swift.Equatable {
    let anomalyGroupTimeSeriesFeedback: [LookoutMetricsClientTypes.TimeSeriesFeedback]?
    let nextToken: Swift.String?
}

extension GetFeedbackOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyGroupTimeSeriesFeedback = "AnomalyGroupTimeSeriesFeedback"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anomalyGroupTimeSeriesFeedbackContainer = try containerValues.decodeIfPresent([LookoutMetricsClientTypes.TimeSeriesFeedback?].self, forKey: .anomalyGroupTimeSeriesFeedback)
        var anomalyGroupTimeSeriesFeedbackDecoded0:[LookoutMetricsClientTypes.TimeSeriesFeedback]? = nil
        if let anomalyGroupTimeSeriesFeedbackContainer = anomalyGroupTimeSeriesFeedbackContainer {
            anomalyGroupTimeSeriesFeedbackDecoded0 = [LookoutMetricsClientTypes.TimeSeriesFeedback]()
            for structure0 in anomalyGroupTimeSeriesFeedbackContainer {
                if let structure0 = structure0 {
                    anomalyGroupTimeSeriesFeedbackDecoded0?.append(structure0)
                }
            }
        }
        anomalyGroupTimeSeriesFeedback = anomalyGroupTimeSeriesFeedbackDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
