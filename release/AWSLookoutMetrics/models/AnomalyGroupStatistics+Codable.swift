// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutMetricsClientTypes.AnomalyGroupStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationStartDate = "EvaluationStartDate"
        case itemizedMetricStatsList = "ItemizedMetricStatsList"
        case totalCount = "TotalCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluationStartDate = self.evaluationStartDate {
            try encodeContainer.encode(evaluationStartDate, forKey: .evaluationStartDate)
        }
        if let itemizedMetricStatsList = itemizedMetricStatsList {
            var itemizedMetricStatsListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .itemizedMetricStatsList)
            for itemizedmetricstatslist0 in itemizedMetricStatsList {
                try itemizedMetricStatsListContainer.encode(itemizedmetricstatslist0)
            }
        }
        if totalCount != 0 {
            try encodeContainer.encode(totalCount, forKey: .totalCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationStartDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationStartDate)
        evaluationStartDate = evaluationStartDateDecoded
        let totalCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalCount) ?? 0
        totalCount = totalCountDecoded
        let itemizedMetricStatsListContainer = try containerValues.decodeIfPresent([LookoutMetricsClientTypes.ItemizedMetricStats?].self, forKey: .itemizedMetricStatsList)
        var itemizedMetricStatsListDecoded0:[LookoutMetricsClientTypes.ItemizedMetricStats]? = nil
        if let itemizedMetricStatsListContainer = itemizedMetricStatsListContainer {
            itemizedMetricStatsListDecoded0 = [LookoutMetricsClientTypes.ItemizedMetricStats]()
            for structure0 in itemizedMetricStatsListContainer {
                if let structure0 = structure0 {
                    itemizedMetricStatsListDecoded0?.append(structure0)
                }
            }
        }
        itemizedMetricStatsList = itemizedMetricStatsListDecoded0
    }
}
