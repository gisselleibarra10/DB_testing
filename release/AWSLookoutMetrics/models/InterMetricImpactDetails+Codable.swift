// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutMetricsClientTypes.InterMetricImpactDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyGroupId = "AnomalyGroupId"
        case contributionPercentage = "ContributionPercentage"
        case metricName = "MetricName"
        case relationshipType = "RelationshipType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anomalyGroupId = self.anomalyGroupId {
            try encodeContainer.encode(anomalyGroupId, forKey: .anomalyGroupId)
        }
        if let contributionPercentage = self.contributionPercentage {
            try encodeContainer.encode(contributionPercentage, forKey: .contributionPercentage)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let relationshipType = self.relationshipType {
            try encodeContainer.encode(relationshipType.rawValue, forKey: .relationshipType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let anomalyGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .anomalyGroupId)
        anomalyGroupId = anomalyGroupIdDecoded
        let relationshipTypeDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.RelationshipType.self, forKey: .relationshipType)
        relationshipType = relationshipTypeDecoded
        let contributionPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .contributionPercentage)
        contributionPercentage = contributionPercentageDecoded
    }
}
