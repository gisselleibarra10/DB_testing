// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutMetricsClientTypes.AlertFilters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensionFilterList = "DimensionFilterList"
        case metricList = "MetricList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensionFilterList = dimensionFilterList {
            var dimensionFilterListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensionFilterList)
            for dimensionfilterlist0 in dimensionFilterList {
                try dimensionFilterListContainer.encode(dimensionfilterlist0)
            }
        }
        if let metricList = metricList {
            var metricListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricList)
            for metricnamelist0 in metricList {
                try metricListContainer.encode(metricnamelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .metricList)
        var metricListDecoded0:[Swift.String]? = nil
        if let metricListContainer = metricListContainer {
            metricListDecoded0 = [Swift.String]()
            for string0 in metricListContainer {
                if let string0 = string0 {
                    metricListDecoded0?.append(string0)
                }
            }
        }
        metricList = metricListDecoded0
        let dimensionFilterListContainer = try containerValues.decodeIfPresent([LookoutMetricsClientTypes.DimensionFilter?].self, forKey: .dimensionFilterList)
        var dimensionFilterListDecoded0:[LookoutMetricsClientTypes.DimensionFilter]? = nil
        if let dimensionFilterListContainer = dimensionFilterListContainer {
            dimensionFilterListDecoded0 = [LookoutMetricsClientTypes.DimensionFilter]()
            for structure0 in dimensionFilterListContainer {
                if let structure0 = structure0 {
                    dimensionFilterListDecoded0?.append(structure0)
                }
            }
        }
        dimensionFilterList = dimensionFilterListDecoded0
    }
}
