// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutMetricsClientTypes.DetectedCsvFormatDescriptor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case charset = "Charset"
        case containsHeader = "ContainsHeader"
        case delimiter = "Delimiter"
        case fileCompression = "FileCompression"
        case headerList = "HeaderList"
        case quoteSymbol = "QuoteSymbol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let charset = self.charset {
            try encodeContainer.encode(charset, forKey: .charset)
        }
        if let containsHeader = self.containsHeader {
            try encodeContainer.encode(containsHeader, forKey: .containsHeader)
        }
        if let delimiter = self.delimiter {
            try encodeContainer.encode(delimiter, forKey: .delimiter)
        }
        if let fileCompression = self.fileCompression {
            try encodeContainer.encode(fileCompression, forKey: .fileCompression)
        }
        if let headerList = self.headerList {
            try encodeContainer.encode(headerList, forKey: .headerList)
        }
        if let quoteSymbol = self.quoteSymbol {
            try encodeContainer.encode(quoteSymbol, forKey: .quoteSymbol)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileCompressionDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.DetectedField.self, forKey: .fileCompression)
        fileCompression = fileCompressionDecoded
        let charsetDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.DetectedField.self, forKey: .charset)
        charset = charsetDecoded
        let containsHeaderDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.DetectedField.self, forKey: .containsHeader)
        containsHeader = containsHeaderDecoded
        let delimiterDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.DetectedField.self, forKey: .delimiter)
        delimiter = delimiterDecoded
        let headerListDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.DetectedField.self, forKey: .headerList)
        headerList = headerListDecoded
        let quoteSymbolDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.DetectedField.self, forKey: .quoteSymbol)
        quoteSymbol = quoteSymbolDecoded
    }
}
