// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutMetricsClientTypes.DataQualityMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricDescription = "MetricDescription"
        case metricType = "MetricType"
        case metricValue = "MetricValue"
        case relatedColumnName = "RelatedColumnName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricDescription = self.metricDescription {
            try encodeContainer.encode(metricDescription, forKey: .metricDescription)
        }
        if let metricType = self.metricType {
            try encodeContainer.encode(metricType.rawValue, forKey: .metricType)
        }
        if let metricValue = self.metricValue {
            try encodeContainer.encode(metricValue, forKey: .metricValue)
        }
        if let relatedColumnName = self.relatedColumnName {
            try encodeContainer.encode(relatedColumnName, forKey: .relatedColumnName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricTypeDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.DataQualityMetricType.self, forKey: .metricType)
        metricType = metricTypeDecoded
        let metricDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricDescription)
        metricDescription = metricDescriptionDecoded
        let relatedColumnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relatedColumnName)
        relatedColumnName = relatedColumnNameDecoded
        let metricValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .metricValue)
        metricValue = metricValueDecoded
    }
}
