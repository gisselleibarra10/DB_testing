// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutMetricsClientTypes.DimensionFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensionName = "DimensionName"
        case dimensionValueList = "DimensionValueList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensionName = self.dimensionName {
            try encodeContainer.encode(dimensionName, forKey: .dimensionName)
        }
        if let dimensionValueList = dimensionValueList {
            var dimensionValueListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensionValueList)
            for dimensionvaluelist0 in dimensionValueList {
                try dimensionValueListContainer.encode(dimensionvaluelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dimensionName)
        dimensionName = dimensionNameDecoded
        let dimensionValueListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dimensionValueList)
        var dimensionValueListDecoded0:[Swift.String]? = nil
        if let dimensionValueListContainer = dimensionValueListContainer {
            dimensionValueListDecoded0 = [Swift.String]()
            for string0 in dimensionValueListContainer {
                if let string0 = string0 {
                    dimensionValueListDecoded0?.append(string0)
                }
            }
        }
        dimensionValueList = dimensionValueListDecoded0
    }
}
