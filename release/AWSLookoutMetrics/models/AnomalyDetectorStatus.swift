// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension LookoutMetricsClientTypes {
    public enum AnomalyDetectorStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activating
        case active
        case backTestActivating
        case backTestActive
        case backTestComplete
        case deactivated
        case deactivating
        case deleting
        case failed
        case inactive
        case learning
        case sdkUnknown(Swift.String)

        public static var allCases: [AnomalyDetectorStatus] {
            return [
                .activating,
                .active,
                .backTestActivating,
                .backTestActive,
                .backTestComplete,
                .deactivated,
                .deactivating,
                .deleting,
                .failed,
                .inactive,
                .learning,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activating: return "ACTIVATING"
            case .active: return "ACTIVE"
            case .backTestActivating: return "BACK_TEST_ACTIVATING"
            case .backTestActive: return "BACK_TEST_ACTIVE"
            case .backTestComplete: return "BACK_TEST_COMPLETE"
            case .deactivated: return "DEACTIVATED"
            case .deactivating: return "DEACTIVATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .inactive: return "INACTIVE"
            case .learning: return "LEARNING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AnomalyDetectorStatus(rawValue: rawValue) ?? AnomalyDetectorStatus.sdkUnknown(rawValue)
        }
    }
}
