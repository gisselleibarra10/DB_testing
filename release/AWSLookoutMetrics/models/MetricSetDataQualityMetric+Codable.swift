// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutMetricsClientTypes.MetricSetDataQualityMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataQualityMetricList = "DataQualityMetricList"
        case metricSetArn = "MetricSetArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataQualityMetricList = dataQualityMetricList {
            var dataQualityMetricListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataQualityMetricList)
            for dataqualitymetriclist0 in dataQualityMetricList {
                try dataQualityMetricListContainer.encode(dataqualitymetriclist0)
            }
        }
        if let metricSetArn = self.metricSetArn {
            try encodeContainer.encode(metricSetArn, forKey: .metricSetArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricSetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricSetArn)
        metricSetArn = metricSetArnDecoded
        let dataQualityMetricListContainer = try containerValues.decodeIfPresent([LookoutMetricsClientTypes.DataQualityMetric?].self, forKey: .dataQualityMetricList)
        var dataQualityMetricListDecoded0:[LookoutMetricsClientTypes.DataQualityMetric]? = nil
        if let dataQualityMetricListContainer = dataQualityMetricListContainer {
            dataQualityMetricListDecoded0 = [LookoutMetricsClientTypes.DataQualityMetric]()
            for structure0 in dataQualityMetricListContainer {
                if let structure0 = structure0 {
                    dataQualityMetricListDecoded0?.append(structure0)
                }
            }
        }
        dataQualityMetricList = dataQualityMetricListDecoded0
    }
}
