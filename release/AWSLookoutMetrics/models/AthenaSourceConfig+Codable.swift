// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutMetricsClientTypes.AthenaSourceConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backTestConfiguration = "BackTestConfiguration"
        case dataCatalog = "DataCatalog"
        case databaseName = "DatabaseName"
        case roleArn = "RoleArn"
        case s3ResultsPath = "S3ResultsPath"
        case tableName = "TableName"
        case workGroupName = "WorkGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backTestConfiguration = self.backTestConfiguration {
            try encodeContainer.encode(backTestConfiguration, forKey: .backTestConfiguration)
        }
        if let dataCatalog = self.dataCatalog {
            try encodeContainer.encode(dataCatalog, forKey: .dataCatalog)
        }
        if let databaseName = self.databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let s3ResultsPath = self.s3ResultsPath {
            try encodeContainer.encode(s3ResultsPath, forKey: .s3ResultsPath)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let workGroupName = self.workGroupName {
            try encodeContainer.encode(workGroupName, forKey: .workGroupName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let dataCatalogDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataCatalog)
        dataCatalog = dataCatalogDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let workGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workGroupName)
        workGroupName = workGroupNameDecoded
        let s3ResultsPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3ResultsPath)
        s3ResultsPath = s3ResultsPathDecoded
        let backTestConfigurationDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.BackTestConfiguration.self, forKey: .backTestConfiguration)
        backTestConfiguration = backTestConfigurationDecoded
    }
}
