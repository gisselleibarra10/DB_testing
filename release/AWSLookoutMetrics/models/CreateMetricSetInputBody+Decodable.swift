// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateMetricSetInputBody: Swift.Equatable {
    let anomalyDetectorArn: Swift.String?
    let metricSetName: Swift.String?
    let metricSetDescription: Swift.String?
    let metricList: [LookoutMetricsClientTypes.Metric]?
    let offset: Swift.Int?
    let timestampColumn: LookoutMetricsClientTypes.TimestampColumn?
    let dimensionList: [Swift.String]?
    let metricSetFrequency: LookoutMetricsClientTypes.Frequency?
    let metricSource: LookoutMetricsClientTypes.MetricSource?
    let timezone: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let dimensionFilterList: [LookoutMetricsClientTypes.MetricSetDimensionFilter]?
}

extension CreateMetricSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectorArn = "AnomalyDetectorArn"
        case dimensionFilterList = "DimensionFilterList"
        case dimensionList = "DimensionList"
        case metricList = "MetricList"
        case metricSetDescription = "MetricSetDescription"
        case metricSetFrequency = "MetricSetFrequency"
        case metricSetName = "MetricSetName"
        case metricSource = "MetricSource"
        case offset = "Offset"
        case tags = "Tags"
        case timestampColumn = "TimestampColumn"
        case timezone = "Timezone"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anomalyDetectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .anomalyDetectorArn)
        anomalyDetectorArn = anomalyDetectorArnDecoded
        let metricSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricSetName)
        metricSetName = metricSetNameDecoded
        let metricSetDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricSetDescription)
        metricSetDescription = metricSetDescriptionDecoded
        let metricListContainer = try containerValues.decodeIfPresent([LookoutMetricsClientTypes.Metric?].self, forKey: .metricList)
        var metricListDecoded0:[LookoutMetricsClientTypes.Metric]? = nil
        if let metricListContainer = metricListContainer {
            metricListDecoded0 = [LookoutMetricsClientTypes.Metric]()
            for structure0 in metricListContainer {
                if let structure0 = structure0 {
                    metricListDecoded0?.append(structure0)
                }
            }
        }
        metricList = metricListDecoded0
        let offsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .offset)
        offset = offsetDecoded
        let timestampColumnDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.TimestampColumn.self, forKey: .timestampColumn)
        timestampColumn = timestampColumnDecoded
        let dimensionListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dimensionList)
        var dimensionListDecoded0:[Swift.String]? = nil
        if let dimensionListContainer = dimensionListContainer {
            dimensionListDecoded0 = [Swift.String]()
            for string0 in dimensionListContainer {
                if let string0 = string0 {
                    dimensionListDecoded0?.append(string0)
                }
            }
        }
        dimensionList = dimensionListDecoded0
        let metricSetFrequencyDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.Frequency.self, forKey: .metricSetFrequency)
        metricSetFrequency = metricSetFrequencyDecoded
        let metricSourceDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.MetricSource.self, forKey: .metricSource)
        metricSource = metricSourceDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let dimensionFilterListContainer = try containerValues.decodeIfPresent([LookoutMetricsClientTypes.MetricSetDimensionFilter?].self, forKey: .dimensionFilterList)
        var dimensionFilterListDecoded0:[LookoutMetricsClientTypes.MetricSetDimensionFilter]? = nil
        if let dimensionFilterListContainer = dimensionFilterListContainer {
            dimensionFilterListDecoded0 = [LookoutMetricsClientTypes.MetricSetDimensionFilter]()
            for structure0 in dimensionFilterListContainer {
                if let structure0 = structure0 {
                    dimensionFilterListDecoded0?.append(structure0)
                }
            }
        }
        dimensionFilterList = dimensionFilterListDecoded0
    }
}
