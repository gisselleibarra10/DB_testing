// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAnomalyGroupTimeSeriesOutputResponseBody: Swift.Equatable {
    let anomalyGroupId: Swift.String?
    let metricName: Swift.String?
    let timestampList: [Swift.String]?
    let nextToken: Swift.String?
    let timeSeriesList: [LookoutMetricsClientTypes.TimeSeries]?
}

extension ListAnomalyGroupTimeSeriesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyGroupId = "AnomalyGroupId"
        case metricName = "MetricName"
        case nextToken = "NextToken"
        case timeSeriesList = "TimeSeriesList"
        case timestampList = "TimestampList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anomalyGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .anomalyGroupId)
        anomalyGroupId = anomalyGroupIdDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let timestampListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .timestampList)
        var timestampListDecoded0:[Swift.String]? = nil
        if let timestampListContainer = timestampListContainer {
            timestampListDecoded0 = [Swift.String]()
            for string0 in timestampListContainer {
                if let string0 = string0 {
                    timestampListDecoded0?.append(string0)
                }
            }
        }
        timestampList = timestampListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let timeSeriesListContainer = try containerValues.decodeIfPresent([LookoutMetricsClientTypes.TimeSeries?].self, forKey: .timeSeriesList)
        var timeSeriesListDecoded0:[LookoutMetricsClientTypes.TimeSeries]? = nil
        if let timeSeriesListContainer = timeSeriesListContainer {
            timeSeriesListDecoded0 = [LookoutMetricsClientTypes.TimeSeries]()
            for structure0 in timeSeriesListContainer {
                if let structure0 = structure0 {
                    timeSeriesListDecoded0?.append(structure0)
                }
            }
        }
        timeSeriesList = timeSeriesListDecoded0
    }
}
