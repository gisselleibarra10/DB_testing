// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutMetricsClientTypes.AttributeValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case b = "B"
        case bS = "BS"
        case n = "N"
        case nS = "NS"
        case s = "S"
        case sS = "SS"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let b = self.b {
            try encodeContainer.encode(b, forKey: .b)
        }
        if let bS = bS {
            var bSContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bS)
            for binarylistattributevalue0 in bS {
                try bSContainer.encode(binarylistattributevalue0)
            }
        }
        if let n = self.n {
            try encodeContainer.encode(n, forKey: .n)
        }
        if let nS = nS {
            var nSContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nS)
            for numberlistattributevalue0 in nS {
                try nSContainer.encode(numberlistattributevalue0)
            }
        }
        if let s = self.s {
            try encodeContainer.encode(s, forKey: .s)
        }
        if let sS = sS {
            var sSContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sS)
            for stringlistattributevalue0 in sS {
                try sSContainer.encode(stringlistattributevalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s)
        s = sDecoded
        let nDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .n)
        n = nDecoded
        let bDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .b)
        b = bDecoded
        let sSContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sS)
        var sSDecoded0:[Swift.String]? = nil
        if let sSContainer = sSContainer {
            sSDecoded0 = [Swift.String]()
            for string0 in sSContainer {
                if let string0 = string0 {
                    sSDecoded0?.append(string0)
                }
            }
        }
        sS = sSDecoded0
        let nSContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .nS)
        var nSDecoded0:[Swift.String]? = nil
        if let nSContainer = nSContainer {
            nSDecoded0 = [Swift.String]()
            for string0 in nSContainer {
                if let string0 = string0 {
                    nSDecoded0?.append(string0)
                }
            }
        }
        nS = nSDecoded0
        let bSContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .bS)
        var bSDecoded0:[Swift.String]? = nil
        if let bSContainer = bSContainer {
            bSDecoded0 = [Swift.String]()
            for string0 in bSContainer {
                if let string0 = string0 {
                    bSDecoded0?.append(string0)
                }
            }
        }
        bS = bSDecoded0
    }
}
