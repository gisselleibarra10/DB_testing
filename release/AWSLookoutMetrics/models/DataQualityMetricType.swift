// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension LookoutMetricsClientTypes {
    public enum DataQualityMetricType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case backtestInferenceDataEndTimeStamp
        case backtestInferenceDataStartTimeStamp
        case backtestTrainingDataEndTimeStamp
        case backtestTrainingDataStartTimeStamp
        case columnCompleteness
        case dimensionUniqueness
        case invalidRowsCompliance
        case rowsPartialCompliance
        case rowsProcessed
        case timeSeriesCount
        case sdkUnknown(Swift.String)

        public static var allCases: [DataQualityMetricType] {
            return [
                .backtestInferenceDataEndTimeStamp,
                .backtestInferenceDataStartTimeStamp,
                .backtestTrainingDataEndTimeStamp,
                .backtestTrainingDataStartTimeStamp,
                .columnCompleteness,
                .dimensionUniqueness,
                .invalidRowsCompliance,
                .rowsPartialCompliance,
                .rowsProcessed,
                .timeSeriesCount,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .backtestInferenceDataEndTimeStamp: return "BACKTEST_INFERENCE_DATA_END_TIME_STAMP"
            case .backtestInferenceDataStartTimeStamp: return "BACKTEST_INFERENCE_DATA_START_TIME_STAMP"
            case .backtestTrainingDataEndTimeStamp: return "BACKTEST_TRAINING_DATA_END_TIME_STAMP"
            case .backtestTrainingDataStartTimeStamp: return "BACKTEST_TRAINING_DATA_START_TIME_STAMP"
            case .columnCompleteness: return "COLUMN_COMPLETENESS"
            case .dimensionUniqueness: return "DIMENSION_UNIQUENESS"
            case .invalidRowsCompliance: return "INVALID_ROWS_COMPLIANCE"
            case .rowsPartialCompliance: return "ROWS_PARTIAL_COMPLIANCE"
            case .rowsProcessed: return "ROWS_PROCESSED"
            case .timeSeriesCount: return "TIME_SERIES_COUNT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataQualityMetricType(rawValue: rawValue) ?? DataQualityMetricType.sdkUnknown(rawValue)
        }
    }
}
