// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutMetricsClientTypes.AnomalyGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyGroupId = "AnomalyGroupId"
        case anomalyGroupScore = "AnomalyGroupScore"
        case endTime = "EndTime"
        case metricLevelImpactList = "MetricLevelImpactList"
        case primaryMetricName = "PrimaryMetricName"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anomalyGroupId = self.anomalyGroupId {
            try encodeContainer.encode(anomalyGroupId, forKey: .anomalyGroupId)
        }
        if let anomalyGroupScore = self.anomalyGroupScore {
            try encodeContainer.encode(anomalyGroupScore, forKey: .anomalyGroupScore)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let metricLevelImpactList = metricLevelImpactList {
            var metricLevelImpactListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricLevelImpactList)
            for metriclevelimpactlist0 in metricLevelImpactList {
                try metricLevelImpactListContainer.encode(metriclevelimpactlist0)
            }
        }
        if let primaryMetricName = self.primaryMetricName {
            try encodeContainer.encode(primaryMetricName, forKey: .primaryMetricName)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        endTime = endTimeDecoded
        let anomalyGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .anomalyGroupId)
        anomalyGroupId = anomalyGroupIdDecoded
        let anomalyGroupScoreDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .anomalyGroupScore)
        anomalyGroupScore = anomalyGroupScoreDecoded
        let primaryMetricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .primaryMetricName)
        primaryMetricName = primaryMetricNameDecoded
        let metricLevelImpactListContainer = try containerValues.decodeIfPresent([LookoutMetricsClientTypes.MetricLevelImpact?].self, forKey: .metricLevelImpactList)
        var metricLevelImpactListDecoded0:[LookoutMetricsClientTypes.MetricLevelImpact]? = nil
        if let metricLevelImpactListContainer = metricLevelImpactListContainer {
            metricLevelImpactListDecoded0 = [LookoutMetricsClientTypes.MetricLevelImpact]()
            for structure0 in metricLevelImpactListContainer {
                if let structure0 = structure0 {
                    metricLevelImpactListDecoded0?.append(structure0)
                }
            }
        }
        metricLevelImpactList = metricLevelImpactListDecoded0
    }
}
