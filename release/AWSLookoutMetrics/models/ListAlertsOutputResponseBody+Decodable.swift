// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAlertsOutputResponseBody: Swift.Equatable {
    let alertSummaryList: [LookoutMetricsClientTypes.AlertSummary]?
    let nextToken: Swift.String?
}

extension ListAlertsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alertSummaryList = "AlertSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alertSummaryListContainer = try containerValues.decodeIfPresent([LookoutMetricsClientTypes.AlertSummary?].self, forKey: .alertSummaryList)
        var alertSummaryListDecoded0:[LookoutMetricsClientTypes.AlertSummary]? = nil
        if let alertSummaryListContainer = alertSummaryListContainer {
            alertSummaryListDecoded0 = [LookoutMetricsClientTypes.AlertSummary]()
            for structure0 in alertSummaryListContainer {
                if let structure0 = structure0 {
                    alertSummaryListDecoded0?.append(structure0)
                }
            }
        }
        alertSummaryList = alertSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
