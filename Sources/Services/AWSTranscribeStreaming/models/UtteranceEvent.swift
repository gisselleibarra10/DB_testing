// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension TranscribeStreamingClientTypes {
    /// Contains set of transcription results from one or more audio segments, along with additional information about the parameters included in your request. For example, channel definitions, partial result stabilization, sentiment, and issue detection.
    public struct UtteranceEvent: Swift.Equatable {
        /// The time, in milliseconds, from the beginning of the audio stream to the start of the UtteranceEvent.
        public var beginOffsetMillis: Swift.Int?
        /// The time, in milliseconds, from the beginning of the audio stream to the start of the UtteranceEvent.
        public var endOffsetMillis: Swift.Int?
        /// Contains entities identified as personally identifiable information (PII) in your transcription output.
        public var entities: [TranscribeStreamingClientTypes.CallAnalyticsEntity]?
        /// Indicates whether the segment in the UtteranceEvent is complete (FALSE) or partial (TRUE).
        public var isPartial: Swift.Bool
        /// Provides the issue that was detected in the specified segment.
        public var issuesDetected: [TranscribeStreamingClientTypes.IssueDetected]?
        /// Contains words, phrases, or punctuation marks that are associated with the specified UtteranceEvent.
        public var items: [TranscribeStreamingClientTypes.CallAnalyticsItem]?
        /// Provides the role of the speaker for each audio channel, either CUSTOMER or AGENT.
        public var participantRole: TranscribeStreamingClientTypes.ParticipantRole?
        /// Provides the sentiment that was detected in the specified segment.
        public var sentiment: TranscribeStreamingClientTypes.Sentiment?
        /// Contains transcribed text.
        public var transcript: Swift.String?
        /// The unique identifier that is associated with the specified UtteranceEvent.
        public var utteranceId: Swift.String?

        public init (
            beginOffsetMillis: Swift.Int? = nil,
            endOffsetMillis: Swift.Int? = nil,
            entities: [TranscribeStreamingClientTypes.CallAnalyticsEntity]? = nil,
            isPartial: Swift.Bool = false,
            issuesDetected: [TranscribeStreamingClientTypes.IssueDetected]? = nil,
            items: [TranscribeStreamingClientTypes.CallAnalyticsItem]? = nil,
            participantRole: TranscribeStreamingClientTypes.ParticipantRole? = nil,
            sentiment: TranscribeStreamingClientTypes.Sentiment? = nil,
            transcript: Swift.String? = nil,
            utteranceId: Swift.String? = nil
        )
        {
            self.beginOffsetMillis = beginOffsetMillis
            self.endOffsetMillis = endOffsetMillis
            self.entities = entities
            self.isPartial = isPartial
            self.issuesDetected = issuesDetected
            self.items = items
            self.participantRole = participantRole
            self.sentiment = sentiment
            self.transcript = transcript
            self.utteranceId = utteranceId
        }
    }

}
