// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TranscribeStreamingClientTypes.PointsOfInterest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timestampRanges = "TimestampRanges"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let timestampRanges = timestampRanges {
            var timestampRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .timestampRanges)
            for timestamprange0 in timestampRanges {
                try timestampRangesContainer.encode(timestamprange0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampRangesContainer = try containerValues.decodeIfPresent([TranscribeStreamingClientTypes.TimestampRange?].self, forKey: .timestampRanges)
        var timestampRangesDecoded0:[TranscribeStreamingClientTypes.TimestampRange]? = nil
        if let timestampRangesContainer = timestampRangesContainer {
            timestampRangesDecoded0 = [TranscribeStreamingClientTypes.TimestampRange]()
            for structure0 in timestampRangesContainer {
                if let structure0 = structure0 {
                    timestampRangesDecoded0?.append(structure0)
                }
            }
        }
        timestampRanges = timestampRangesDecoded0
    }
}
