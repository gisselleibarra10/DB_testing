// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TranscribeStreamingClientTypes.UtteranceEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case beginOffsetMillis = "BeginOffsetMillis"
        case endOffsetMillis = "EndOffsetMillis"
        case entities = "Entities"
        case isPartial = "IsPartial"
        case issuesDetected = "IssuesDetected"
        case items = "Items"
        case participantRole = "ParticipantRole"
        case sentiment = "Sentiment"
        case transcript = "Transcript"
        case utteranceId = "UtteranceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let beginOffsetMillis = self.beginOffsetMillis {
            try encodeContainer.encode(beginOffsetMillis, forKey: .beginOffsetMillis)
        }
        if let endOffsetMillis = self.endOffsetMillis {
            try encodeContainer.encode(endOffsetMillis, forKey: .endOffsetMillis)
        }
        if let entities = entities {
            var entitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entities)
            for callanalyticsentity0 in entities {
                try entitiesContainer.encode(callanalyticsentity0)
            }
        }
        if isPartial != false {
            try encodeContainer.encode(isPartial, forKey: .isPartial)
        }
        if let issuesDetected = issuesDetected {
            var issuesDetectedContainer = encodeContainer.nestedUnkeyedContainer(forKey: .issuesDetected)
            for issuedetected0 in issuesDetected {
                try issuesDetectedContainer.encode(issuedetected0)
            }
        }
        if let items = items {
            var itemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .items)
            for callanalyticsitem0 in items {
                try itemsContainer.encode(callanalyticsitem0)
            }
        }
        if let participantRole = self.participantRole {
            try encodeContainer.encode(participantRole.rawValue, forKey: .participantRole)
        }
        if let sentiment = self.sentiment {
            try encodeContainer.encode(sentiment.rawValue, forKey: .sentiment)
        }
        if let transcript = self.transcript {
            try encodeContainer.encode(transcript, forKey: .transcript)
        }
        if let utteranceId = self.utteranceId {
            try encodeContainer.encode(utteranceId, forKey: .utteranceId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let utteranceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .utteranceId)
        utteranceId = utteranceIdDecoded
        let isPartialDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isPartial) ?? false
        isPartial = isPartialDecoded
        let participantRoleDecoded = try containerValues.decodeIfPresent(TranscribeStreamingClientTypes.ParticipantRole.self, forKey: .participantRole)
        participantRole = participantRoleDecoded
        let beginOffsetMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .beginOffsetMillis)
        beginOffsetMillis = beginOffsetMillisDecoded
        let endOffsetMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endOffsetMillis)
        endOffsetMillis = endOffsetMillisDecoded
        let transcriptDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transcript)
        transcript = transcriptDecoded
        let itemsContainer = try containerValues.decodeIfPresent([TranscribeStreamingClientTypes.CallAnalyticsItem?].self, forKey: .items)
        var itemsDecoded0:[TranscribeStreamingClientTypes.CallAnalyticsItem]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [TranscribeStreamingClientTypes.CallAnalyticsItem]()
            for structure0 in itemsContainer {
                if let structure0 = structure0 {
                    itemsDecoded0?.append(structure0)
                }
            }
        }
        items = itemsDecoded0
        let entitiesContainer = try containerValues.decodeIfPresent([TranscribeStreamingClientTypes.CallAnalyticsEntity?].self, forKey: .entities)
        var entitiesDecoded0:[TranscribeStreamingClientTypes.CallAnalyticsEntity]? = nil
        if let entitiesContainer = entitiesContainer {
            entitiesDecoded0 = [TranscribeStreamingClientTypes.CallAnalyticsEntity]()
            for structure0 in entitiesContainer {
                if let structure0 = structure0 {
                    entitiesDecoded0?.append(structure0)
                }
            }
        }
        entities = entitiesDecoded0
        let sentimentDecoded = try containerValues.decodeIfPresent(TranscribeStreamingClientTypes.Sentiment.self, forKey: .sentiment)
        sentiment = sentimentDecoded
        let issuesDetectedContainer = try containerValues.decodeIfPresent([TranscribeStreamingClientTypes.IssueDetected?].self, forKey: .issuesDetected)
        var issuesDetectedDecoded0:[TranscribeStreamingClientTypes.IssueDetected]? = nil
        if let issuesDetectedContainer = issuesDetectedContainer {
            issuesDetectedDecoded0 = [TranscribeStreamingClientTypes.IssueDetected]()
            for structure0 in issuesDetectedContainer {
                if let structure0 = structure0 {
                    issuesDetectedDecoded0?.append(structure0)
                }
            }
        }
        issuesDetected = issuesDetectedDecoded0
    }
}
