// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct StartStreamTranscriptionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartStreamTranscriptionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartStreamTranscriptionInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<StartStreamTranscriptionOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            guard let messageEncoder = encoder.messageEncoder else {
                fatalError()
            }
            let messageSigner = context.getMessageSigner()

            if let audioStream = input.operationInput.audioStream {
                for try await audioStream in audioStream {
                    let message = try audioStream.marshall(encoder: encoder)
                    let signedMessage = try messageSigner.sign(message: message)
                    let encodedMessage = try messageEncoder.encode(message: signedMessage)
                    input.builder.withBody(HttpBody.data(encodedMessage))
                }
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let audioStreamdata = "{}".data(using: .utf8)!
                    let audioStreambody = ClientRuntime.HttpBody.data(audioStreamdata)
                }
            }
        } catch let err {
            throw SdkError<StartStreamTranscriptionOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartStreamTranscriptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartStreamTranscriptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension TranscribeStreamingClientTypes.AudioStream: MessageMarshaller {
    public func marshall(encoder: RequestEncoder) throws -> ClientRuntime.Message {
        var headers = Headers()
        var payload = Data()

        switch self {
        case .audioevent(let data):
            headers.add(name: ":event-type", value: "AudioEvent")
            headers.add(name: ":content-type", value: "application/octet-stream")
            if let audioChunk = data.audioChunk {
                payload = audioChunk
            }
        case .configurationevent(let data):
            headers.add(name: ":event-type", value: "ConfigurationEvent")
            headers.add(name: ":content-type", value: "application/json")
            payload = try encoder.encode(data)
        case .sdkUnknown(_):
            fatalError()
        }
        return Message(headers: headers, payload: payload)
    }
}
