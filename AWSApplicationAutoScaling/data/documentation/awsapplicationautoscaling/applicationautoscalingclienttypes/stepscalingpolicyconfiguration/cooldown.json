{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"cooldown"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"AppStream 2.0 fleets"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Aurora DB clusters"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"ECS services"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"EMR clusters"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Neptune clusters"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SageMaker endpoint variants"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Spot Fleets"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Custom resources"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For all other scalable targets, the default value is 0:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Amazon Comprehend document classification and entity recognizer endpoints"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"DynamoDB tables and global secondary indexes"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Amazon Keyspaces tables"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lambda provisioned concurrency"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Amazon MSK broker storage"}]}]}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/awsapplicationautoscaling\/applicationautoscalingclienttypes\/stepscalingpolicyconfiguration\/cooldown"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/AWSApplicationAutoScaling\/documentation\/AWSApplicationAutoScaling\/ApplicationAutoScalingClientTypes\/StepScalingPolicyConfiguration\/cooldown","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The amount of time, in seconds, to wait for a previous scaling activity to take effect. With scale-out policies, the intention is to continuously (but not excessively) scale out. After Application Auto Scaling successfully scales out using a step scaling policy, it starts to calculate the cooldown time. The scaling policy won’t increase the desired capacity again unless either a larger scale out is triggered or the cooldown period ends. While the cooldown period is in effect, capacity added by the initiating scale-out activity is calculated as part of the desired capacity for the next scale-out activity. For example, when an alarm triggers a step scaling policy to increase the capacity by 2, the scaling activity completes successfully, and a cooldown period starts. If the alarm triggers again during the cooldown period but at a more aggressive step adjustment of 3, the previous increase of 2 is considered part of the current capacity. Therefore, only 1 is added to the capacity. With scale-in policies, the intention is to scale in conservatively to protect your application’s availability, so scale-in activities are blocked until the cooldown period has expired. However, if another alarm triggers a scale-out activity during the cooldown period after a scale-in activity, Application Auto Scaling scales out the target immediately. In this case, the cooldown period for the scale-in activity stops and doesn’t complete. Application Auto Scaling provides a default value of 600 for Amazon ElastiCache replication groups and a default value of 300 for the following scalable targets:"}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"cooldown"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?"}],"title":"cooldown","roleHeading":"Instance Property","role":"symbol","symbolKind":"property","externalID":"s:25AWSApplicationAutoScaling011ApplicationbC11ClientTypesO04StepC19PolicyConfigurationV8cooldownSiSgvp","modules":[{"name":"AWSApplicationAutoScaling"}]},"hierarchy":{"paths":[["doc:\/\/AWSApplicationAutoScaling\/documentation\/AWSApplicationAutoScaling","doc:\/\/AWSApplicationAutoScaling\/documentation\/AWSApplicationAutoScaling\/ApplicationAutoScalingClientTypes","doc:\/\/AWSApplicationAutoScaling\/documentation\/AWSApplicationAutoScaling\/ApplicationAutoScalingClientTypes\/StepScalingPolicyConfiguration"]]},"references":{"doc://AWSApplicationAutoScaling/documentation/AWSApplicationAutoScaling/ApplicationAutoScalingClientTypes":{"role":"symbol","title":"ApplicationAutoScalingClientTypes","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApplicationAutoScalingClientTypes"}],"abstract":[],"identifier":"doc:\/\/AWSApplicationAutoScaling\/documentation\/AWSApplicationAutoScaling\/ApplicationAutoScalingClientTypes","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ApplicationAutoScalingClientTypes"}],"url":"\/documentation\/awsapplicationautoscaling\/applicationautoscalingclienttypes"},"doc://AWSApplicationAutoScaling/documentation/AWSApplicationAutoScaling/ApplicationAutoScalingClientTypes/StepScalingPolicyConfiguration":{"role":"symbol","title":"ApplicationAutoScalingClientTypes.StepScalingPolicyConfiguration","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StepScalingPolicyConfiguration"}],"abstract":[{"type":"text","text":"Represents a step scaling policy configuration to use with Application Auto Scaling."}],"identifier":"doc:\/\/AWSApplicationAutoScaling\/documentation\/AWSApplicationAutoScaling\/ApplicationAutoScalingClientTypes\/StepScalingPolicyConfiguration","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StepScalingPolicyConfiguration"}],"url":"\/documentation\/awsapplicationautoscaling\/applicationautoscalingclienttypes\/stepscalingpolicyconfiguration"},"doc://AWSApplicationAutoScaling/documentation/AWSApplicationAutoScaling/ApplicationAutoScalingClientTypes/StepScalingPolicyConfiguration/cooldown":{"role":"symbol","title":"cooldown","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"cooldown"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"The amount of time, in seconds, to wait for a previous scaling activity to take effect. With scale-out policies, the intention is to continuously (but not excessively) scale out. After Application Auto Scaling successfully scales out using a step scaling policy, it starts to calculate the cooldown time. The scaling policy won’t increase the desired capacity again unless either a larger scale out is triggered or the cooldown period ends. While the cooldown period is in effect, capacity added by the initiating scale-out activity is calculated as part of the desired capacity for the next scale-out activity. For example, when an alarm triggers a step scaling policy to increase the capacity by 2, the scaling activity completes successfully, and a cooldown period starts. If the alarm triggers again during the cooldown period but at a more aggressive step adjustment of 3, the previous increase of 2 is considered part of the current capacity. Therefore, only 1 is added to the capacity. With scale-in policies, the intention is to scale in conservatively to protect your application’s availability, so scale-in activities are blocked until the cooldown period has expired. However, if another alarm triggers a scale-out activity during the cooldown period after a scale-in activity, Application Auto Scaling scales out the target immediately. In this case, the cooldown period for the scale-in activity stops and doesn’t complete. Application Auto Scaling provides a default value of 600 for Amazon ElastiCache replication groups and a default value of 300 for the following scalable targets:"}],"identifier":"doc:\/\/AWSApplicationAutoScaling\/documentation\/AWSApplicationAutoScaling\/ApplicationAutoScalingClientTypes\/StepScalingPolicyConfiguration\/cooldown","kind":"symbol","type":"topic","url":"\/documentation\/awsapplicationautoscaling\/applicationautoscalingclienttypes\/stepscalingpolicyconfiguration\/cooldown"},"doc://AWSApplicationAutoScaling/documentation/AWSApplicationAutoScaling":{"role":"collection","title":"AWSApplicationAutoScaling","abstract":[],"identifier":"doc:\/\/AWSApplicationAutoScaling\/documentation\/AWSApplicationAutoScaling","kind":"symbol","type":"topic","url":"\/documentation\/awsapplicationautoscaling"}}}