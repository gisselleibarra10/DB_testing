// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetWidgetOutputResponseBody: Swift.Equatable {
    let stringProperty: Swift.String?
    let stringArrayProperty: [Swift.String]?
    let booleanProperty: Swift.Bool?
    let booleanArrayProperty: [Swift.Bool]?
    let children: [WaitersClientTypes.Child]?
}

extension GetWidgetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case booleanArrayProperty
        case booleanProperty
        case children
        case stringArrayProperty
        case stringProperty
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stringPropertyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stringProperty)
        stringProperty = stringPropertyDecoded
        let stringArrayPropertyContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stringArrayProperty)
        var stringArrayPropertyDecoded0:[Swift.String]? = nil
        if let stringArrayPropertyContainer = stringArrayPropertyContainer {
            stringArrayPropertyDecoded0 = [Swift.String]()
            for string0 in stringArrayPropertyContainer {
                if let string0 = string0 {
                    stringArrayPropertyDecoded0?.append(string0)
                }
            }
        }
        stringArrayProperty = stringArrayPropertyDecoded0
        let booleanPropertyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .booleanProperty)
        booleanProperty = booleanPropertyDecoded
        let booleanArrayPropertyContainer = try containerValues.decodeIfPresent([Swift.Bool?].self, forKey: .booleanArrayProperty)
        var booleanArrayPropertyDecoded0:[Swift.Bool]? = nil
        if let booleanArrayPropertyContainer = booleanArrayPropertyContainer {
            booleanArrayPropertyDecoded0 = [Swift.Bool]()
            for boolean0 in booleanArrayPropertyContainer {
                if let boolean0 = boolean0 {
                    booleanArrayPropertyDecoded0?.append(boolean0)
                }
            }
        }
        booleanArrayProperty = booleanArrayPropertyDecoded0
        let childrenContainer = try containerValues.decodeIfPresent([WaitersClientTypes.Child?].self, forKey: .children)
        var childrenDecoded0:[WaitersClientTypes.Child]? = nil
        if let childrenContainer = childrenContainer {
            childrenDecoded0 = [WaitersClientTypes.Child]()
            for structure0 in childrenContainer {
                if let structure0 = structure0 {
                    childrenDecoded0?.append(structure0)
                }
            }
        }
        children = childrenDecoded0
    }
}
