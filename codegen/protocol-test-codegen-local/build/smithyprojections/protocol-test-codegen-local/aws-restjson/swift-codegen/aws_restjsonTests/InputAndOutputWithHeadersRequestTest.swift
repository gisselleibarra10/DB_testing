// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import AWSClientRuntime
import ClientRuntime
import SmithyTestUtil
import XCTest


class InputAndOutputWithHeadersRequestTest: HttpRequestTestBase {
    /// Tests requests with string header bindings
    func testRestJsonInputAndOutputWithStringHeaders() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .post,
            path: "/InputAndOutputWithHeaders",
            headers: [
                "X-String": "Hello",
                "X-StringList": "a, b, c",
                "X-StringSet": "a, b, c"
            ],
            body: nil,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = InputAndOutputWithHeadersInput(
            headerString: "Hello",
            headerStringList: [
                "a",
                "b",
                "c"
            ],
            headerStringSet: [
                "a",
                "b",
                "c"
            ]
        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .post)
                      .build()
        var operationStack = OperationStack<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(id: "RestJsonInputAndOutputWithStringHeaders")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<InputAndOutputWithHeadersOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.HeaderMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual)
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! InputAndOutputWithHeadersOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<InputAndOutputWithHeadersOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! InputAndOutputWithHeadersOutputError(httpResponse: httpResponse)
            throw SdkError<InputAndOutputWithHeadersOutputError>.service(serviceError, httpResponse)
        })
    }
    /// Tests requests with string list header bindings that require quoting
    func testRestJsonInputAndOutputWithQuotedStringHeaders() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .post,
            path: "/InputAndOutputWithHeaders",
            headers: [
                "X-StringList": "\"b,c\", \"\\\"def\\\"\", a"
            ],
            body: nil,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = InputAndOutputWithHeadersInput(
            headerStringList: [
                "b,c",
                "\"def\"",
                "a"
            ]
        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .post)
                      .build()
        var operationStack = OperationStack<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(id: "RestJsonInputAndOutputWithQuotedStringHeaders")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<InputAndOutputWithHeadersOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.HeaderMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual)
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! InputAndOutputWithHeadersOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<InputAndOutputWithHeadersOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! InputAndOutputWithHeadersOutputError(httpResponse: httpResponse)
            throw SdkError<InputAndOutputWithHeadersOutputError>.service(serviceError, httpResponse)
        })
    }
    /// Tests requests with numeric header bindings
    func testRestJsonInputAndOutputWithNumericHeaders() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .post,
            path: "/InputAndOutputWithHeaders",
            headers: [
                "X-Byte": "1",
                "X-Double": "1.1",
                "X-Float": "1.1",
                "X-Integer": "123",
                "X-IntegerList": "1, 2, 3",
                "X-Long": "123",
                "X-Short": "123"
            ],
            body: nil,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = InputAndOutputWithHeadersInput(
            headerByte: 1,
            headerDouble: 1.1,
            headerFloat: 1.1,
            headerInteger: 123,
            headerIntegerList: [
                1,
                2,
                3
            ],
            headerLong: 123,
            headerShort: 123
        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .post)
                      .build()
        var operationStack = OperationStack<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(id: "RestJsonInputAndOutputWithNumericHeaders")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<InputAndOutputWithHeadersOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.HeaderMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual)
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! InputAndOutputWithHeadersOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<InputAndOutputWithHeadersOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! InputAndOutputWithHeadersOutputError(httpResponse: httpResponse)
            throw SdkError<InputAndOutputWithHeadersOutputError>.service(serviceError, httpResponse)
        })
    }
    /// Tests requests with boolean header bindings
    func testRestJsonInputAndOutputWithBooleanHeaders() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .post,
            path: "/InputAndOutputWithHeaders",
            headers: [
                "X-Boolean1": "true",
                "X-Boolean2": "false",
                "X-BooleanList": "true, false, true"
            ],
            body: nil,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = InputAndOutputWithHeadersInput(
            headerBooleanList: [
                true,
                false,
                true
            ],
            headerFalseBool: false,
            headerTrueBool: true
        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .post)
                      .build()
        var operationStack = OperationStack<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(id: "RestJsonInputAndOutputWithBooleanHeaders")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<InputAndOutputWithHeadersOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.HeaderMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual)
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! InputAndOutputWithHeadersOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<InputAndOutputWithHeadersOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! InputAndOutputWithHeadersOutputError(httpResponse: httpResponse)
            throw SdkError<InputAndOutputWithHeadersOutputError>.service(serviceError, httpResponse)
        })
    }
    /// Tests requests with timestamp header bindings
    func testRestJsonInputAndOutputWithTimestampHeaders() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .post,
            path: "/InputAndOutputWithHeaders",
            headers: [
                "X-TimestampList": "Mon, 16 Dec 2019 23:48:18 GMT, Mon, 16 Dec 2019 23:48:18 GMT"
            ],
            body: nil,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = InputAndOutputWithHeadersInput(
            headerTimestampList: [
                Date(timeIntervalSince1970: 1576540098),
                Date(timeIntervalSince1970: 1576540098)
            ]
        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .post)
                      .build()
        var operationStack = OperationStack<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(id: "RestJsonInputAndOutputWithTimestampHeaders")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<InputAndOutputWithHeadersOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.HeaderMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual)
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! InputAndOutputWithHeadersOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<InputAndOutputWithHeadersOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! InputAndOutputWithHeadersOutputError(httpResponse: httpResponse)
            throw SdkError<InputAndOutputWithHeadersOutputError>.service(serviceError, httpResponse)
        })
    }
    /// Tests requests with enum header bindings
    func testRestJsonInputAndOutputWithEnumHeaders() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .post,
            path: "/InputAndOutputWithHeaders",
            headers: [
                "X-Enum": "Foo",
                "X-EnumList": "Foo, Bar, Baz"
            ],
            body: nil,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = InputAndOutputWithHeadersInput(
            headerEnum: RestJsonClientTypes.FooEnum(rawValue: "Foo")!,
            headerEnumList: [
                RestJsonClientTypes.FooEnum(rawValue: "Foo")!,
                RestJsonClientTypes.FooEnum(rawValue: "Bar")!,
                RestJsonClientTypes.FooEnum(rawValue: "Baz")!
            ]
        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .post)
                      .build()
        var operationStack = OperationStack<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(id: "RestJsonInputAndOutputWithEnumHeaders")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<InputAndOutputWithHeadersOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.HeaderMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual)
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! InputAndOutputWithHeadersOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<InputAndOutputWithHeadersOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! InputAndOutputWithHeadersOutputError(httpResponse: httpResponse)
            throw SdkError<InputAndOutputWithHeadersOutputError>.service(serviceError, httpResponse)
        })
    }
    /// Tests requests with intEnum header bindings
    func testRestJsonInputAndOutputWithIntEnumHeaders() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .post,
            path: "/InputAndOutputWithHeaders",
            headers: [
                "X-IntegerEnum": "1",
                "X-IntegerEnumList": "1, 2, 3"
            ],
            body: nil,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = InputAndOutputWithHeadersInput(
            headerIntegerEnum: IntegerEnum(rawValue: 1),
            headerIntegerEnumList: [
                IntegerEnum(rawValue: 1),
                IntegerEnum(rawValue: 2),
                IntegerEnum(rawValue: 3)
            ]
        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .post)
                      .build()
        var operationStack = OperationStack<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(id: "RestJsonInputAndOutputWithIntEnumHeaders")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<InputAndOutputWithHeadersOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.HeaderMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual)
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! InputAndOutputWithHeadersOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<InputAndOutputWithHeadersOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! InputAndOutputWithHeadersOutputError(httpResponse: httpResponse)
            throw SdkError<InputAndOutputWithHeadersOutputError>.service(serviceError, httpResponse)
        })
    }
    /// Supports handling NaN float header values.
    func testRestJsonSupportsNaNFloatHeaderInputs() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .post,
            path: "/InputAndOutputWithHeaders",
            headers: [
                "X-Double": "NaN",
                "X-Float": "NaN"
            ],
            body: nil,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = InputAndOutputWithHeadersInput(
            headerDouble: Swift.Double.nan,
            headerFloat: Swift.Float.nan
        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .post)
                      .build()
        var operationStack = OperationStack<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(id: "RestJsonSupportsNaNFloatHeaderInputs")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<InputAndOutputWithHeadersOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.HeaderMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual)
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! InputAndOutputWithHeadersOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<InputAndOutputWithHeadersOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! InputAndOutputWithHeadersOutputError(httpResponse: httpResponse)
            throw SdkError<InputAndOutputWithHeadersOutputError>.service(serviceError, httpResponse)
        })
    }
    /// Supports handling Infinity float header values.
    func testRestJsonSupportsInfinityFloatHeaderInputs() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .post,
            path: "/InputAndOutputWithHeaders",
            headers: [
                "X-Double": "Infinity",
                "X-Float": "Infinity"
            ],
            body: nil,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = InputAndOutputWithHeadersInput(
            headerDouble: Swift.Double.infinity,
            headerFloat: Swift.Float.infinity
        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .post)
                      .build()
        var operationStack = OperationStack<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(id: "RestJsonSupportsInfinityFloatHeaderInputs")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<InputAndOutputWithHeadersOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.HeaderMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual)
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! InputAndOutputWithHeadersOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<InputAndOutputWithHeadersOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! InputAndOutputWithHeadersOutputError(httpResponse: httpResponse)
            throw SdkError<InputAndOutputWithHeadersOutputError>.service(serviceError, httpResponse)
        })
    }
    /// Supports handling -Infinity float header values.
    func testRestJsonSupportsNegativeInfinityFloatHeaderInputs() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .post,
            path: "/InputAndOutputWithHeaders",
            headers: [
                "X-Double": "-Infinity",
                "X-Float": "-Infinity"
            ],
            body: nil,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = InputAndOutputWithHeadersInput(
            headerDouble: -Swift.Double.infinity,
            headerFloat: -Swift.Float.infinity
        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .post)
                      .build()
        var operationStack = OperationStack<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(id: "RestJsonSupportsNegativeInfinityFloatHeaderInputs")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<InputAndOutputWithHeadersOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.HeaderMiddleware<InputAndOutputWithHeadersInput, InputAndOutputWithHeadersOutputResponse>())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<InputAndOutputWithHeadersOutputResponse, InputAndOutputWithHeadersOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual)
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! InputAndOutputWithHeadersOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<InputAndOutputWithHeadersOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! InputAndOutputWithHeadersOutputError(httpResponse: httpResponse)
            throw SdkError<InputAndOutputWithHeadersOutputError>.service(serviceError, httpResponse)
        })
    }
}
