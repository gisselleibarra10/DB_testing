// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import ClientRuntime
import SmithyTestUtil
import XCTest


class IgnoreQueryParamsInResponseResponseTest: HttpResponseTestBase {
    /// Query parameters must be ignored when serializing the output of an operation. As of January 2021, server implementations are expected to respond with a JSON object regardless of if the output parameters are empty.
    func testRestJsonIgnoreQueryParamsInResponse() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {}
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try IgnoreQueryParamsInResponseOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = IgnoreQueryParamsInResponseOutputResponse(
        )

    }
    /// This test is similar to RestJsonIgnoreQueryParamsInResponse, but it ensures that clients gracefully handle responses from the server that do not serialize an empty JSON object.
    func testRestJsonIgnoreQueryParamsInResponseNoPayload() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: nil,
            content: HttpBody.empty
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let actual = try IgnoreQueryParamsInResponseOutputResponse(httpResponse: httpResponse)

        let expected = IgnoreQueryParamsInResponseOutputResponse(
        )

    }
}
