// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import ClientRuntime
import SmithyTestUtil
import XCTest


class PostUnionWithJsonNameResponseTest: HttpResponseTestBase {
    /// Tests that jsonName works with union members.
    func testPostUnionWithJsonNameResponse1() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "value": {
                    "FOO": "hi"
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try PostUnionWithJsonNameOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = PostUnionWithJsonNameOutputResponse(
            value: RestJsonClientTypes.UnionWithJsonName.foo("hi")

        )

        XCTAssertEqual(expected.value, actual.value)

    }
    /// Tests that jsonName works with union members.
    func testPostUnionWithJsonNameResponse2() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "value": {
                    "_baz": "hi"
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try PostUnionWithJsonNameOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = PostUnionWithJsonNameOutputResponse(
            value: RestJsonClientTypes.UnionWithJsonName.baz("hi")

        )

        XCTAssertEqual(expected.value, actual.value)

    }
    /// Tests that jsonName works with union members.
    func testPostUnionWithJsonNameResponse3() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "value": {
                    "bar": "hi"
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try PostUnionWithJsonNameOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = PostUnionWithJsonNameOutputResponse(
            value: RestJsonClientTypes.UnionWithJsonName.bar("hi")

        )

        XCTAssertEqual(expected.value, actual.value)

    }
}
