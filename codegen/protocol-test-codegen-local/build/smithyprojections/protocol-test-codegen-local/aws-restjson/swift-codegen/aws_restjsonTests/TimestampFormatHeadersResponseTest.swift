// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import ClientRuntime
import SmithyTestUtil
import XCTest


class TimestampFormatHeadersResponseTest: HttpResponseTestBase {
    /// Tests how timestamp response headers are serialized
    func testRestJsonTimestampFormatHeaders() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "X-defaultFormat": "Mon, 16 Dec 2019 23:48:18 GMT",
                "X-memberDateTime": "2019-12-16T23:48:18Z",
                "X-memberEpochSeconds": "1576540098",
                "X-memberHttpDate": "Mon, 16 Dec 2019 23:48:18 GMT",
                "X-targetDateTime": "2019-12-16T23:48:18Z",
                "X-targetEpochSeconds": "1576540098",
                "X-targetHttpDate": "Mon, 16 Dec 2019 23:48:18 GMT"
            ],
            content: HttpBody.empty
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let actual = try TimestampFormatHeadersOutputResponse(httpResponse: httpResponse)

        let expected = TimestampFormatHeadersOutputResponse(
            defaultFormat: Date(timeIntervalSince1970: 1576540098),
            memberDateTime: Date(timeIntervalSince1970: 1576540098),
            memberEpochSeconds: Date(timeIntervalSince1970: 1576540098),
            memberHttpDate: Date(timeIntervalSince1970: 1576540098),
            targetDateTime: Date(timeIntervalSince1970: 1576540098),
            targetEpochSeconds: Date(timeIntervalSince1970: 1576540098),
            targetHttpDate: Date(timeIntervalSince1970: 1576540098)
        )

        XCTAssertEqual(expected.memberEpochSeconds, actual.memberEpochSeconds)
        XCTAssertEqual(expected.memberHttpDate, actual.memberHttpDate)
        XCTAssertEqual(expected.memberDateTime, actual.memberDateTime)
        XCTAssertEqual(expected.defaultFormat, actual.defaultFormat)
        XCTAssertEqual(expected.targetEpochSeconds, actual.targetEpochSeconds)
        XCTAssertEqual(expected.targetHttpDate, actual.targetHttpDate)
        XCTAssertEqual(expected.targetDateTime, actual.targetDateTime)

    }
}
