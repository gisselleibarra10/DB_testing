// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import AWSClientRuntime
import ClientRuntime
import SmithyTestUtil
import XCTest


class JsonMapsRequestTest: HttpRequestTestBase {
    /// Serializes JSON maps
    func testRestJsonJsonMaps() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .post,
            path: "/JsonMaps",
            headers: [
                "Content-Type": "application/json"
            ],
            body: """
            {
                "denseStructMap": {
                    "foo": {
                        "hi": "there"
                    },
                    "baz": {
                        "hi": "bye"
                    }
                },
                "sparseStructMap": {
                    "foo": {
                        "hi": "there"
                    },
                    "baz": {
                        "hi": "bye"
                    }
                }
            }
            """,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = JsonMapsInput(
            denseStructMap: [
                "baz": RestJsonClientTypes.GreetingStruct(
                    hi: "bye"
                ),
                "foo": RestJsonClientTypes.GreetingStruct(
                    hi: "there"
                )]
            ,
            sparseStructMap: [
                "baz": RestJsonClientTypes.GreetingStruct(
                    hi: "bye"
                ),
                "foo": RestJsonClientTypes.GreetingStruct(
                    hi: "there"
                )]

        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .post)
                      .build()
        var operationStack = OperationStack<JsonMapsInput, JsonMapsOutputResponse, JsonMapsOutputError>(id: "RestJsonJsonMaps")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<JsonMapsInput, JsonMapsOutputResponse, JsonMapsOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<JsonMapsInput, JsonMapsOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<JsonMapsOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<JsonMapsInput, JsonMapsOutputResponse>(contentType: "application/json"))
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.SerializableBodyMiddleware<JsonMapsInput, JsonMapsOutputResponse>())
        operationStack.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<JsonMapsOutputResponse, JsonMapsOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual, { (expectedHttpBody, actualHttpBody) -> Void in
                XCTAssertNotNil(actualHttpBody, "The actual HttpBody is nil")
                XCTAssertNotNil(expectedHttpBody, "The expected HttpBody is nil")
                self.genericAssertEqualHttpBodyData(expectedHttpBody!, actualHttpBody!) { expectedData, actualData in
                    do {
                        let expectedObj = try decoder.decode(JsonMapsInputBody.self, from: expectedData)
                        let actualObj = try decoder.decode(JsonMapsInputBody.self, from: actualData)
                        XCTAssertEqual(expectedObj.denseStructMap, actualObj.denseStructMap)
                        XCTAssertEqual(expectedObj.sparseStructMap, actualObj.sparseStructMap)
                        XCTAssertEqual(expectedObj.denseNumberMap, actualObj.denseNumberMap)
                        XCTAssertEqual(expectedObj.denseBooleanMap, actualObj.denseBooleanMap)
                        XCTAssertEqual(expectedObj.denseStringMap, actualObj.denseStringMap)
                        XCTAssertEqual(expectedObj.sparseNumberMap, actualObj.sparseNumberMap)
                        XCTAssertEqual(expectedObj.sparseBooleanMap, actualObj.sparseBooleanMap)
                        XCTAssertEqual(expectedObj.sparseStringMap, actualObj.sparseStringMap)
                        XCTAssertEqual(expectedObj.denseSetMap, actualObj.denseSetMap)
                        XCTAssertEqual(expectedObj.sparseSetMap, actualObj.sparseSetMap)
                    } catch let err {
                        XCTFail("Failed to verify body \(err)")
                    }
                }
            })
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! JsonMapsOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<JsonMapsOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! JsonMapsOutputError(httpResponse: httpResponse)
            throw SdkError<JsonMapsOutputError>.service(serviceError, httpResponse)
        })
    }
    /// Serializes JSON map values in sparse maps
    func testRestJsonSerializesNullMapValues() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .post,
            path: "/JsonMaps",
            headers: [
                "Content-Type": "application/json"
            ],
            body: """
            {
                "sparseBooleanMap": {
                    "x": null
                },
                "sparseNumberMap": {
                    "x": null
                },
                "sparseStringMap": {
                    "x": null
                },
                "sparseStructMap": {
                    "x": null
                }
            }
            """,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = JsonMapsInput(
            sparseBooleanMap: [
                "x": nil]
            ,
            sparseNumberMap: [
                "x": nil]
            ,
            sparseStringMap: [
                "x": nil]
            ,
            sparseStructMap: [
                "x": nil]

        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .post)
                      .build()
        var operationStack = OperationStack<JsonMapsInput, JsonMapsOutputResponse, JsonMapsOutputError>(id: "RestJsonSerializesNullMapValues")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<JsonMapsInput, JsonMapsOutputResponse, JsonMapsOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<JsonMapsInput, JsonMapsOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<JsonMapsOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<JsonMapsInput, JsonMapsOutputResponse>(contentType: "application/json"))
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.SerializableBodyMiddleware<JsonMapsInput, JsonMapsOutputResponse>())
        operationStack.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<JsonMapsOutputResponse, JsonMapsOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual, { (expectedHttpBody, actualHttpBody) -> Void in
                XCTAssertNotNil(actualHttpBody, "The actual HttpBody is nil")
                XCTAssertNotNil(expectedHttpBody, "The expected HttpBody is nil")
                self.genericAssertEqualHttpBodyData(expectedHttpBody!, actualHttpBody!) { expectedData, actualData in
                    do {
                        let expectedObj = try decoder.decode(JsonMapsInputBody.self, from: expectedData)
                        let actualObj = try decoder.decode(JsonMapsInputBody.self, from: actualData)
                        XCTAssertEqual(expectedObj.denseStructMap, actualObj.denseStructMap)
                        XCTAssertEqual(expectedObj.sparseStructMap, actualObj.sparseStructMap)
                        XCTAssertEqual(expectedObj.denseNumberMap, actualObj.denseNumberMap)
                        XCTAssertEqual(expectedObj.denseBooleanMap, actualObj.denseBooleanMap)
                        XCTAssertEqual(expectedObj.denseStringMap, actualObj.denseStringMap)
                        XCTAssertEqual(expectedObj.sparseNumberMap, actualObj.sparseNumberMap)
                        XCTAssertEqual(expectedObj.sparseBooleanMap, actualObj.sparseBooleanMap)
                        XCTAssertEqual(expectedObj.sparseStringMap, actualObj.sparseStringMap)
                        XCTAssertEqual(expectedObj.denseSetMap, actualObj.denseSetMap)
                        XCTAssertEqual(expectedObj.sparseSetMap, actualObj.sparseSetMap)
                    } catch let err {
                        XCTFail("Failed to verify body \(err)")
                    }
                }
            })
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! JsonMapsOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<JsonMapsOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! JsonMapsOutputError(httpResponse: httpResponse)
            throw SdkError<JsonMapsOutputError>.service(serviceError, httpResponse)
        })
    }
    /// Ensure that 0 and false are sent over the wire in all maps and lists
    func testRestJsonSerializesZeroValuesInMaps() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .post,
            path: "/JsonMaps",
            headers: [
                "Content-Type": "application/json"
            ],
            body: """
            {
                "denseNumberMap": {
                    "x": 0
                },
                "sparseNumberMap": {
                    "x": 0
                },
                "denseBooleanMap": {
                    "x": false
                },
                "sparseBooleanMap": {
                    "x": false
                }
            }
            """,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = JsonMapsInput(
            denseBooleanMap: [
                "x": false]
            ,
            denseNumberMap: [
                "x": 0]
            ,
            sparseBooleanMap: [
                "x": false]
            ,
            sparseNumberMap: [
                "x": 0]

        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .post)
                      .build()
        var operationStack = OperationStack<JsonMapsInput, JsonMapsOutputResponse, JsonMapsOutputError>(id: "RestJsonSerializesZeroValuesInMaps")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<JsonMapsInput, JsonMapsOutputResponse, JsonMapsOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<JsonMapsInput, JsonMapsOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<JsonMapsOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<JsonMapsInput, JsonMapsOutputResponse>(contentType: "application/json"))
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.SerializableBodyMiddleware<JsonMapsInput, JsonMapsOutputResponse>())
        operationStack.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<JsonMapsOutputResponse, JsonMapsOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual, { (expectedHttpBody, actualHttpBody) -> Void in
                XCTAssertNotNil(actualHttpBody, "The actual HttpBody is nil")
                XCTAssertNotNil(expectedHttpBody, "The expected HttpBody is nil")
                self.genericAssertEqualHttpBodyData(expectedHttpBody!, actualHttpBody!) { expectedData, actualData in
                    do {
                        let expectedObj = try decoder.decode(JsonMapsInputBody.self, from: expectedData)
                        let actualObj = try decoder.decode(JsonMapsInputBody.self, from: actualData)
                        XCTAssertEqual(expectedObj.denseStructMap, actualObj.denseStructMap)
                        XCTAssertEqual(expectedObj.sparseStructMap, actualObj.sparseStructMap)
                        XCTAssertEqual(expectedObj.denseNumberMap, actualObj.denseNumberMap)
                        XCTAssertEqual(expectedObj.denseBooleanMap, actualObj.denseBooleanMap)
                        XCTAssertEqual(expectedObj.denseStringMap, actualObj.denseStringMap)
                        XCTAssertEqual(expectedObj.sparseNumberMap, actualObj.sparseNumberMap)
                        XCTAssertEqual(expectedObj.sparseBooleanMap, actualObj.sparseBooleanMap)
                        XCTAssertEqual(expectedObj.sparseStringMap, actualObj.sparseStringMap)
                        XCTAssertEqual(expectedObj.denseSetMap, actualObj.denseSetMap)
                        XCTAssertEqual(expectedObj.sparseSetMap, actualObj.sparseSetMap)
                    } catch let err {
                        XCTFail("Failed to verify body \(err)")
                    }
                }
            })
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! JsonMapsOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<JsonMapsOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! JsonMapsOutputError(httpResponse: httpResponse)
            throw SdkError<JsonMapsOutputError>.service(serviceError, httpResponse)
        })
    }
    /// A request that contains a sparse map of sets
    func testRestJsonSerializesSparseSetMap() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .post,
            path: "/JsonMaps",
            headers: [
                "Content-Type": "application/json"
            ],
            body: """
            {
                "sparseSetMap": {
                    "x": [],
                    "y": ["a", "b"]
                }
            }
            """,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = JsonMapsInput(
            sparseSetMap: [
                "x": [
                ],
                "y": [
                    "a",
                    "b"
                ]]

        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .post)
                      .build()
        var operationStack = OperationStack<JsonMapsInput, JsonMapsOutputResponse, JsonMapsOutputError>(id: "RestJsonSerializesSparseSetMap")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<JsonMapsInput, JsonMapsOutputResponse, JsonMapsOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<JsonMapsInput, JsonMapsOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<JsonMapsOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<JsonMapsInput, JsonMapsOutputResponse>(contentType: "application/json"))
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.SerializableBodyMiddleware<JsonMapsInput, JsonMapsOutputResponse>())
        operationStack.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<JsonMapsOutputResponse, JsonMapsOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual, { (expectedHttpBody, actualHttpBody) -> Void in
                XCTAssertNotNil(actualHttpBody, "The actual HttpBody is nil")
                XCTAssertNotNil(expectedHttpBody, "The expected HttpBody is nil")
                self.genericAssertEqualHttpBodyData(expectedHttpBody!, actualHttpBody!) { expectedData, actualData in
                    do {
                        let expectedObj = try decoder.decode(JsonMapsInputBody.self, from: expectedData)
                        let actualObj = try decoder.decode(JsonMapsInputBody.self, from: actualData)
                        XCTAssertEqual(expectedObj.denseStructMap, actualObj.denseStructMap)
                        XCTAssertEqual(expectedObj.sparseStructMap, actualObj.sparseStructMap)
                        XCTAssertEqual(expectedObj.denseNumberMap, actualObj.denseNumberMap)
                        XCTAssertEqual(expectedObj.denseBooleanMap, actualObj.denseBooleanMap)
                        XCTAssertEqual(expectedObj.denseStringMap, actualObj.denseStringMap)
                        XCTAssertEqual(expectedObj.sparseNumberMap, actualObj.sparseNumberMap)
                        XCTAssertEqual(expectedObj.sparseBooleanMap, actualObj.sparseBooleanMap)
                        XCTAssertEqual(expectedObj.sparseStringMap, actualObj.sparseStringMap)
                        XCTAssertEqual(expectedObj.denseSetMap, actualObj.denseSetMap)
                        XCTAssertEqual(expectedObj.sparseSetMap, actualObj.sparseSetMap)
                    } catch let err {
                        XCTFail("Failed to verify body \(err)")
                    }
                }
            })
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! JsonMapsOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<JsonMapsOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! JsonMapsOutputError(httpResponse: httpResponse)
            throw SdkError<JsonMapsOutputError>.service(serviceError, httpResponse)
        })
    }
    /// A request that contains a dense map of sets.
    func testRestJsonSerializesDenseSetMap() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .post,
            path: "/JsonMaps",
            headers: [
                "Content-Type": "application/json"
            ],
            body: """
            {
                "denseSetMap": {
                    "x": [],
                    "y": ["a", "b"]
                }
            }
            """,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = JsonMapsInput(
            denseSetMap: [
                "x": [
                ],
                "y": [
                    "a",
                    "b"
                ]]

        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .post)
                      .build()
        var operationStack = OperationStack<JsonMapsInput, JsonMapsOutputResponse, JsonMapsOutputError>(id: "RestJsonSerializesDenseSetMap")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<JsonMapsInput, JsonMapsOutputResponse, JsonMapsOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<JsonMapsInput, JsonMapsOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<JsonMapsOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<JsonMapsInput, JsonMapsOutputResponse>(contentType: "application/json"))
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.SerializableBodyMiddleware<JsonMapsInput, JsonMapsOutputResponse>())
        operationStack.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<JsonMapsOutputResponse, JsonMapsOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual, { (expectedHttpBody, actualHttpBody) -> Void in
                XCTAssertNotNil(actualHttpBody, "The actual HttpBody is nil")
                XCTAssertNotNil(expectedHttpBody, "The expected HttpBody is nil")
                self.genericAssertEqualHttpBodyData(expectedHttpBody!, actualHttpBody!) { expectedData, actualData in
                    do {
                        let expectedObj = try decoder.decode(JsonMapsInputBody.self, from: expectedData)
                        let actualObj = try decoder.decode(JsonMapsInputBody.self, from: actualData)
                        XCTAssertEqual(expectedObj.denseStructMap, actualObj.denseStructMap)
                        XCTAssertEqual(expectedObj.sparseStructMap, actualObj.sparseStructMap)
                        XCTAssertEqual(expectedObj.denseNumberMap, actualObj.denseNumberMap)
                        XCTAssertEqual(expectedObj.denseBooleanMap, actualObj.denseBooleanMap)
                        XCTAssertEqual(expectedObj.denseStringMap, actualObj.denseStringMap)
                        XCTAssertEqual(expectedObj.sparseNumberMap, actualObj.sparseNumberMap)
                        XCTAssertEqual(expectedObj.sparseBooleanMap, actualObj.sparseBooleanMap)
                        XCTAssertEqual(expectedObj.sparseStringMap, actualObj.sparseStringMap)
                        XCTAssertEqual(expectedObj.denseSetMap, actualObj.denseSetMap)
                        XCTAssertEqual(expectedObj.sparseSetMap, actualObj.sparseSetMap)
                    } catch let err {
                        XCTFail("Failed to verify body \(err)")
                    }
                }
            })
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! JsonMapsOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<JsonMapsOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! JsonMapsOutputError(httpResponse: httpResponse)
            throw SdkError<JsonMapsOutputError>.service(serviceError, httpResponse)
        })
    }
    /// A request that contains a sparse map of sets.
    func testRestJsonSerializesSparseSetMapAndRetainsNull() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .post,
            path: "/JsonMaps",
            headers: [
                "Content-Type": "application/json"
            ],
            body: """
            {
                "sparseSetMap": {
                    "x": [],
                    "y": ["a", "b"],
                    "z": null
                }
            }
            """,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = JsonMapsInput(
            sparseSetMap: [
                "x": [
                ],
                "y": [
                    "a",
                    "b"
                ],
                "z": nil]

        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .post)
                      .build()
        var operationStack = OperationStack<JsonMapsInput, JsonMapsOutputResponse, JsonMapsOutputError>(id: "RestJsonSerializesSparseSetMapAndRetainsNull")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<JsonMapsInput, JsonMapsOutputResponse, JsonMapsOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<JsonMapsInput, JsonMapsOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<JsonMapsOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<JsonMapsInput, JsonMapsOutputResponse>(contentType: "application/json"))
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.SerializableBodyMiddleware<JsonMapsInput, JsonMapsOutputResponse>())
        operationStack.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<JsonMapsOutputResponse, JsonMapsOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual, { (expectedHttpBody, actualHttpBody) -> Void in
                XCTAssertNotNil(actualHttpBody, "The actual HttpBody is nil")
                XCTAssertNotNil(expectedHttpBody, "The expected HttpBody is nil")
                self.genericAssertEqualHttpBodyData(expectedHttpBody!, actualHttpBody!) { expectedData, actualData in
                    do {
                        let expectedObj = try decoder.decode(JsonMapsInputBody.self, from: expectedData)
                        let actualObj = try decoder.decode(JsonMapsInputBody.self, from: actualData)
                        XCTAssertEqual(expectedObj.denseStructMap, actualObj.denseStructMap)
                        XCTAssertEqual(expectedObj.sparseStructMap, actualObj.sparseStructMap)
                        XCTAssertEqual(expectedObj.denseNumberMap, actualObj.denseNumberMap)
                        XCTAssertEqual(expectedObj.denseBooleanMap, actualObj.denseBooleanMap)
                        XCTAssertEqual(expectedObj.denseStringMap, actualObj.denseStringMap)
                        XCTAssertEqual(expectedObj.sparseNumberMap, actualObj.sparseNumberMap)
                        XCTAssertEqual(expectedObj.sparseBooleanMap, actualObj.sparseBooleanMap)
                        XCTAssertEqual(expectedObj.sparseStringMap, actualObj.sparseStringMap)
                        XCTAssertEqual(expectedObj.denseSetMap, actualObj.denseSetMap)
                        XCTAssertEqual(expectedObj.sparseSetMap, actualObj.sparseSetMap)
                    } catch let err {
                        XCTFail("Failed to verify body \(err)")
                    }
                }
            })
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! JsonMapsOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<JsonMapsOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! JsonMapsOutputError(httpResponse: httpResponse)
            throw SdkError<JsonMapsOutputError>.service(serviceError, httpResponse)
        })
    }
}
