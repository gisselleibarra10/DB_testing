// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import ClientRuntime
import SmithyTestUtil
import XCTest


class JsonUnionsResponseTest: HttpResponseTestBase {
    /// Deserializes a string union value
    func testRestJsonDeserializeStringUnionValue() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "contents": {
                    "stringValue": "foo"
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonUnionsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonUnionsOutputResponse(
            contents: RestJsonClientTypes.MyUnion.stringvalue("foo")

        )

        XCTAssertEqual(expected.contents, actual.contents)

    }
    /// Deserializes a boolean union value
    func testRestJsonDeserializeBooleanUnionValue() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "contents": {
                    "booleanValue": true
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonUnionsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonUnionsOutputResponse(
            contents: RestJsonClientTypes.MyUnion.booleanvalue(true)

        )

        XCTAssertEqual(expected.contents, actual.contents)

    }
    /// Deserializes a number union value
    func testRestJsonDeserializeNumberUnionValue() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "contents": {
                    "numberValue": 1
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonUnionsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonUnionsOutputResponse(
            contents: RestJsonClientTypes.MyUnion.numbervalue(1)

        )

        XCTAssertEqual(expected.contents, actual.contents)

    }
    /// Deserializes a blob union value
    func testRestJsonDeserializeBlobUnionValue() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "contents": {
                    "blobValue": "Zm9v"
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonUnionsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonUnionsOutputResponse(
            contents: RestJsonClientTypes.MyUnion.blobvalue("foo".data(using: .utf8)!)

        )

        XCTAssertEqual(expected.contents, actual.contents)

    }
    /// Deserializes a timestamp union value
    func testRestJsonDeserializeTimestampUnionValue() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "contents": {
                    "timestampValue": 1398796238
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonUnionsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonUnionsOutputResponse(
            contents: RestJsonClientTypes.MyUnion.timestampvalue(Date(timeIntervalSince1970: 1398796238))

        )

        XCTAssertEqual(expected.contents, actual.contents)

    }
    /// Deserializes an enum union value
    func testRestJsonDeserializeEnumUnionValue() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "contents": {
                    "enumValue": "Foo"
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonUnionsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonUnionsOutputResponse(
            contents: RestJsonClientTypes.MyUnion.enumvalue(RestJsonClientTypes.FooEnum(rawValue: "Foo")!)

        )

        XCTAssertEqual(expected.contents, actual.contents)

    }
    /// Deserializes a list union value
    func testRestJsonDeserializeListUnionValue() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "contents": {
                    "listValue": ["foo", "bar"]
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonUnionsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonUnionsOutputResponse(
            contents: RestJsonClientTypes.MyUnion.listvalue([
                "foo",
                "bar"
            ])

        )

        XCTAssertEqual(expected.contents, actual.contents)

    }
    /// Deserializes a map union value
    func testRestJsonDeserializeMapUnionValue() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "contents": {
                    "mapValue": {
                        "foo": "bar",
                        "spam": "eggs"
                    }
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonUnionsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonUnionsOutputResponse(
            contents: RestJsonClientTypes.MyUnion.mapvalue([
                "foo": "bar",
                "spam": "eggs"]
            )

        )

        XCTAssertEqual(expected.contents, actual.contents)

    }
    /// Deserializes a structure union value
    func testRestJsonDeserializeStructureUnionValue() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "contents": {
                    "structureValue": {
                        "hi": "hello"
                    }
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonUnionsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonUnionsOutputResponse(
            contents: RestJsonClientTypes.MyUnion.structurevalue(RestJsonClientTypes.GreetingStruct(
                hi: "hello"
            ))

        )

        XCTAssertEqual(expected.contents, actual.contents)

    }
}
