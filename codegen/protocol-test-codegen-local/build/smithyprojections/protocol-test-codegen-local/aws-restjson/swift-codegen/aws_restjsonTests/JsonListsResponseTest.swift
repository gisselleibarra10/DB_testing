// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import ClientRuntime
import SmithyTestUtil
import XCTest


class JsonListsResponseTest: HttpResponseTestBase {
    /// Serializes JSON lists
    func testRestJsonLists() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "stringList": [
                    "foo",
                    "bar"
                ],
                "stringSet": [
                    "foo",
                    "bar"
                ],
                "integerList": [
                    1,
                    2
                ],
                "booleanList": [
                    true,
                    false
                ],
                "timestampList": [
                    1398796238,
                    1398796238
                ],
                "enumList": [
                    "Foo",
                    "0"
                ],
                "intEnumList": [
                    1,
                    2
                ],
                "nestedStringList": [
                    [
                        "foo",
                        "bar"
                    ],
                    [
                        "baz",
                        "qux"
                    ]
                ],
                "myStructureList": [
                    {
                        "value": "1",
                        "other": "2"
                    },
                    {
                        "value": "3",
                        "other": "4"
                    }
                ]
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonListsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonListsOutputResponse(
            booleanList: [
                true,
                false
            ],
            enumList: [
                RestJsonClientTypes.FooEnum(rawValue: "Foo")!,
                RestJsonClientTypes.FooEnum(rawValue: "0")!
            ],
            intEnumList: [
                IntegerEnum(rawValue: 1),
                IntegerEnum(rawValue: 2)
            ],
            integerList: [
                1,
                2
            ],
            nestedStringList: [
                [
                    "foo",
                    "bar"
                ]                ,
                [
                    "baz",
                    "qux"
                ]            
            ],
            stringList: [
                "foo",
                "bar"
            ],
            stringSet: [
                "foo",
                "bar"
            ],
            structureList: [
                RestJsonClientTypes.StructureListMember(
                    a: "1",
                    b: "2"
                ),
                RestJsonClientTypes.StructureListMember(
                    a: "3",
                    b: "4"
                )
            ],
            timestampList: [
                Date(timeIntervalSince1970: 1398796238),
                Date(timeIntervalSince1970: 1398796238)
            ]
        )

        XCTAssertEqual(expected.stringList, actual.stringList)
        XCTAssertEqual(expected.sparseStringList, actual.sparseStringList)
        XCTAssertEqual(expected.stringSet, actual.stringSet)
        XCTAssertEqual(expected.integerList, actual.integerList)
        XCTAssertEqual(expected.booleanList, actual.booleanList)
        XCTAssertEqual(expected.timestampList, actual.timestampList)
        XCTAssertEqual(expected.enumList, actual.enumList)
        XCTAssertEqual(expected.intEnumList, actual.intEnumList)
        XCTAssertEqual(expected.nestedStringList, actual.nestedStringList)
        XCTAssertEqual(expected.structureList, actual.structureList)

    }
    /// Serializes empty JSON lists
    func testRestJsonListsEmpty() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "stringList": []
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonListsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonListsOutputResponse(
            stringList: [
            ]
        )

        XCTAssertEqual(expected.stringList, actual.stringList)
        XCTAssertEqual(expected.sparseStringList, actual.sparseStringList)
        XCTAssertEqual(expected.stringSet, actual.stringSet)
        XCTAssertEqual(expected.integerList, actual.integerList)
        XCTAssertEqual(expected.booleanList, actual.booleanList)
        XCTAssertEqual(expected.timestampList, actual.timestampList)
        XCTAssertEqual(expected.enumList, actual.enumList)
        XCTAssertEqual(expected.intEnumList, actual.intEnumList)
        XCTAssertEqual(expected.nestedStringList, actual.nestedStringList)
        XCTAssertEqual(expected.structureList, actual.structureList)

    }
    /// Serializes null values in sparse lists
    func testRestJsonListsSerializeNull() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "sparseStringList": [
                    null,
                    "hi"
                ]
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonListsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonListsOutputResponse(
            sparseStringList: [
                nil,
                "hi"
            ]
        )

        XCTAssertEqual(expected.stringList, actual.stringList)
        XCTAssertEqual(expected.sparseStringList, actual.sparseStringList)
        XCTAssertEqual(expected.stringSet, actual.stringSet)
        XCTAssertEqual(expected.integerList, actual.integerList)
        XCTAssertEqual(expected.booleanList, actual.booleanList)
        XCTAssertEqual(expected.timestampList, actual.timestampList)
        XCTAssertEqual(expected.enumList, actual.enumList)
        XCTAssertEqual(expected.intEnumList, actual.intEnumList)
        XCTAssertEqual(expected.nestedStringList, actual.nestedStringList)
        XCTAssertEqual(expected.structureList, actual.structureList)

    }
}
