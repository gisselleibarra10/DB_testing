// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import ClientRuntime
import SmithyTestUtil
import XCTest


class StreamingTraitsResponseTest: HttpResponseTestBase {
    /// Serializes a blob in the HTTP payload
    func testRestJsonStreamingTraitsWithBlob() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/octet-stream",
                "X-Foo": "Foo"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            blobby blob blob
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try StreamingTraitsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = StreamingTraitsOutputResponse(
            blob: ByteStream.from(data: "blobby blob blob".data(using: .utf8)!),
            foo: "Foo"
        )

        XCTAssertEqual(expected.foo, actual.foo)
        XCTAssertEqual(expected.blob, actual.blob)

    }
    /// Serializes an empty blob in the HTTP payload
    func testRestJsonStreamingTraitsWithNoBlobBody() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "X-Foo": "Foo"
            ],
            content: HttpBody.empty
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let actual = try StreamingTraitsOutputResponse(httpResponse: httpResponse)

        let expected = StreamingTraitsOutputResponse(
            foo: "Foo"
        )

        XCTAssertEqual(expected.foo, actual.foo)
        XCTAssertEqual(expected.blob, actual.blob)

    }
}
