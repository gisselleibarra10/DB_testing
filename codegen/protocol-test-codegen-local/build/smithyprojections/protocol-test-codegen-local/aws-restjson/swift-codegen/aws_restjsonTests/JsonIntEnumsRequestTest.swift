// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import AWSClientRuntime
import ClientRuntime
import SmithyTestUtil
import XCTest


class JsonIntEnumsRequestTest: HttpRequestTestBase {
    /// Serializes intEnums as integers
    func testRestJsonJsonIntEnums() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .put,
            path: "/JsonIntEnums",
            headers: [
                "Content-Type": "application/json"
            ],
            body: """
            {
                "integerEnum1": 1,
                "integerEnum2": 2,
                "integerEnum3": 3,
                "integerEnumList": [
                    1,
                    2,
                    3
                ],
                "integerEnumSet": [
                    1,
                    2
                ],
                "integerEnumMap": {
                    "abc": 1,
                    "def": 2
                }
            }
            """,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = JsonIntEnumsInput(
            integerEnum1: IntegerEnum(rawValue: 1),
            integerEnum2: IntegerEnum(rawValue: 2),
            integerEnum3: IntegerEnum(rawValue: 3),
            integerEnumList: [
                IntegerEnum(rawValue: 1),
                IntegerEnum(rawValue: 2),
                IntegerEnum(rawValue: 3)
            ],
            integerEnumMap: [
                "abc": IntegerEnum(rawValue: 1),
                "def": IntegerEnum(rawValue: 2)]
            ,
            integerEnumSet: [
                IntegerEnum(rawValue: 1),
                IntegerEnum(rawValue: 2)
            ]
        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .put)
                      .build()
        var operationStack = OperationStack<JsonIntEnumsInput, JsonIntEnumsOutputResponse, JsonIntEnumsOutputError>(id: "RestJsonJsonIntEnums")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<JsonIntEnumsInput, JsonIntEnumsOutputResponse, JsonIntEnumsOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<JsonIntEnumsInput, JsonIntEnumsOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<JsonIntEnumsOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<JsonIntEnumsInput, JsonIntEnumsOutputResponse>(contentType: "application/json"))
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.SerializableBodyMiddleware<JsonIntEnumsInput, JsonIntEnumsOutputResponse>())
        operationStack.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<JsonIntEnumsOutputResponse, JsonIntEnumsOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual, { (expectedHttpBody, actualHttpBody) -> Void in
                XCTAssertNotNil(actualHttpBody, "The actual HttpBody is nil")
                XCTAssertNotNil(expectedHttpBody, "The expected HttpBody is nil")
                self.genericAssertEqualHttpBodyData(expectedHttpBody!, actualHttpBody!) { expectedData, actualData in
                    do {
                        let expectedObj = try decoder.decode(JsonIntEnumsInputBody.self, from: expectedData)
                        let actualObj = try decoder.decode(JsonIntEnumsInputBody.self, from: actualData)
                        XCTAssertEqual(expectedObj.integerEnum1, actualObj.integerEnum1)
                        XCTAssertEqual(expectedObj.integerEnum2, actualObj.integerEnum2)
                        XCTAssertEqual(expectedObj.integerEnum3, actualObj.integerEnum3)
                        XCTAssertEqual(expectedObj.integerEnumList, actualObj.integerEnumList)
                        XCTAssertEqual(expectedObj.integerEnumSet, actualObj.integerEnumSet)
                        XCTAssertEqual(expectedObj.integerEnumMap, actualObj.integerEnumMap)
                    } catch let err {
                        XCTFail("Failed to verify body \(err)")
                    }
                }
            })
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! JsonIntEnumsOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<JsonIntEnumsOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! JsonIntEnumsOutputError(httpResponse: httpResponse)
            throw SdkError<JsonIntEnumsOutputError>.service(serviceError, httpResponse)
        })
    }
}
