// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import ClientRuntime
import SmithyTestUtil
import XCTest


class InputAndOutputWithHeadersResponseTest: HttpResponseTestBase {
    /// Tests responses with string header bindings
    func testRestJsonInputAndOutputWithStringHeaders() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "X-String": "Hello",
                "X-StringList": "a, b, c",
                "X-StringSet": "a, b, c"
            ],
            content: HttpBody.empty
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let actual = try InputAndOutputWithHeadersOutputResponse(httpResponse: httpResponse)

        let expected = InputAndOutputWithHeadersOutputResponse(
            headerString: "Hello",
            headerStringList: [
                "a",
                "b",
                "c"
            ],
            headerStringSet: [
                "a",
                "b",
                "c"
            ]
        )

        XCTAssertEqual(expected.headerString, actual.headerString)
        XCTAssertEqual(expected.headerByte, actual.headerByte)
        XCTAssertEqual(expected.headerShort, actual.headerShort)
        XCTAssertEqual(expected.headerInteger, actual.headerInteger)
        XCTAssertEqual(expected.headerLong, actual.headerLong)
        XCTAssertEqual(expected.headerFloat, actual.headerFloat)
        XCTAssertEqual(expected.headerDouble, actual.headerDouble)
        XCTAssertEqual(expected.headerTrueBool, actual.headerTrueBool)
        XCTAssertEqual(expected.headerFalseBool, actual.headerFalseBool)
        XCTAssertEqual(expected.headerStringList, actual.headerStringList)
        XCTAssertEqual(expected.headerStringSet, actual.headerStringSet)
        XCTAssertEqual(expected.headerIntegerList, actual.headerIntegerList)
        XCTAssertEqual(expected.headerBooleanList, actual.headerBooleanList)
        XCTAssertEqual(expected.headerTimestampList, actual.headerTimestampList)
        XCTAssertEqual(expected.headerEnum, actual.headerEnum)
        XCTAssertEqual(expected.headerEnumList, actual.headerEnumList)
        XCTAssertEqual(expected.headerIntegerEnum, actual.headerIntegerEnum)
        XCTAssertEqual(expected.headerIntegerEnumList, actual.headerIntegerEnumList)

    }
    /// Tests responses with string list header bindings that require quoting
    func testRestJsonInputAndOutputWithQuotedStringHeaders() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "X-StringList": "\"b,c\", \"\\\"def\\\"\", a"
            ],
            content: HttpBody.empty
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let actual = try InputAndOutputWithHeadersOutputResponse(httpResponse: httpResponse)

        let expected = InputAndOutputWithHeadersOutputResponse(
            headerStringList: [
                "b,c",
                "\"def\"",
                "a"
            ]
        )

        XCTAssertEqual(expected.headerString, actual.headerString)
        XCTAssertEqual(expected.headerByte, actual.headerByte)
        XCTAssertEqual(expected.headerShort, actual.headerShort)
        XCTAssertEqual(expected.headerInteger, actual.headerInteger)
        XCTAssertEqual(expected.headerLong, actual.headerLong)
        XCTAssertEqual(expected.headerFloat, actual.headerFloat)
        XCTAssertEqual(expected.headerDouble, actual.headerDouble)
        XCTAssertEqual(expected.headerTrueBool, actual.headerTrueBool)
        XCTAssertEqual(expected.headerFalseBool, actual.headerFalseBool)
        XCTAssertEqual(expected.headerStringList, actual.headerStringList)
        XCTAssertEqual(expected.headerStringSet, actual.headerStringSet)
        XCTAssertEqual(expected.headerIntegerList, actual.headerIntegerList)
        XCTAssertEqual(expected.headerBooleanList, actual.headerBooleanList)
        XCTAssertEqual(expected.headerTimestampList, actual.headerTimestampList)
        XCTAssertEqual(expected.headerEnum, actual.headerEnum)
        XCTAssertEqual(expected.headerEnumList, actual.headerEnumList)
        XCTAssertEqual(expected.headerIntegerEnum, actual.headerIntegerEnum)
        XCTAssertEqual(expected.headerIntegerEnumList, actual.headerIntegerEnumList)

    }
    /// Tests responses with numeric header bindings
    func testRestJsonInputAndOutputWithNumericHeaders() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "X-Byte": "1",
                "X-Double": "1.1",
                "X-Float": "1.1",
                "X-Integer": "123",
                "X-IntegerList": "1, 2, 3",
                "X-Long": "123",
                "X-Short": "123"
            ],
            content: HttpBody.empty
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let actual = try InputAndOutputWithHeadersOutputResponse(httpResponse: httpResponse)

        let expected = InputAndOutputWithHeadersOutputResponse(
            headerByte: 1,
            headerDouble: 1.1,
            headerFloat: 1.1,
            headerInteger: 123,
            headerIntegerList: [
                1,
                2,
                3
            ],
            headerLong: 123,
            headerShort: 123
        )

        XCTAssertEqual(expected.headerString, actual.headerString)
        XCTAssertEqual(expected.headerByte, actual.headerByte)
        XCTAssertEqual(expected.headerShort, actual.headerShort)
        XCTAssertEqual(expected.headerInteger, actual.headerInteger)
        XCTAssertEqual(expected.headerLong, actual.headerLong)
        XCTAssertEqual(expected.headerFloat, actual.headerFloat)
        XCTAssertEqual(expected.headerDouble, actual.headerDouble)
        XCTAssertEqual(expected.headerTrueBool, actual.headerTrueBool)
        XCTAssertEqual(expected.headerFalseBool, actual.headerFalseBool)
        XCTAssertEqual(expected.headerStringList, actual.headerStringList)
        XCTAssertEqual(expected.headerStringSet, actual.headerStringSet)
        XCTAssertEqual(expected.headerIntegerList, actual.headerIntegerList)
        XCTAssertEqual(expected.headerBooleanList, actual.headerBooleanList)
        XCTAssertEqual(expected.headerTimestampList, actual.headerTimestampList)
        XCTAssertEqual(expected.headerEnum, actual.headerEnum)
        XCTAssertEqual(expected.headerEnumList, actual.headerEnumList)
        XCTAssertEqual(expected.headerIntegerEnum, actual.headerIntegerEnum)
        XCTAssertEqual(expected.headerIntegerEnumList, actual.headerIntegerEnumList)

    }
    /// Tests responses with boolean header bindings
    func testRestJsonInputAndOutputWithBooleanHeaders() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "X-Boolean1": "true",
                "X-Boolean2": "false",
                "X-BooleanList": "true, false, true"
            ],
            content: HttpBody.empty
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let actual = try InputAndOutputWithHeadersOutputResponse(httpResponse: httpResponse)

        let expected = InputAndOutputWithHeadersOutputResponse(
            headerBooleanList: [
                true,
                false,
                true
            ],
            headerFalseBool: false,
            headerTrueBool: true
        )

        XCTAssertEqual(expected.headerString, actual.headerString)
        XCTAssertEqual(expected.headerByte, actual.headerByte)
        XCTAssertEqual(expected.headerShort, actual.headerShort)
        XCTAssertEqual(expected.headerInteger, actual.headerInteger)
        XCTAssertEqual(expected.headerLong, actual.headerLong)
        XCTAssertEqual(expected.headerFloat, actual.headerFloat)
        XCTAssertEqual(expected.headerDouble, actual.headerDouble)
        XCTAssertEqual(expected.headerTrueBool, actual.headerTrueBool)
        XCTAssertEqual(expected.headerFalseBool, actual.headerFalseBool)
        XCTAssertEqual(expected.headerStringList, actual.headerStringList)
        XCTAssertEqual(expected.headerStringSet, actual.headerStringSet)
        XCTAssertEqual(expected.headerIntegerList, actual.headerIntegerList)
        XCTAssertEqual(expected.headerBooleanList, actual.headerBooleanList)
        XCTAssertEqual(expected.headerTimestampList, actual.headerTimestampList)
        XCTAssertEqual(expected.headerEnum, actual.headerEnum)
        XCTAssertEqual(expected.headerEnumList, actual.headerEnumList)
        XCTAssertEqual(expected.headerIntegerEnum, actual.headerIntegerEnum)
        XCTAssertEqual(expected.headerIntegerEnumList, actual.headerIntegerEnumList)

    }
    /// Tests responses with timestamp header bindings
    func testRestJsonInputAndOutputWithTimestampHeaders() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "X-TimestampList": "Mon, 16 Dec 2019 23:48:18 GMT, Mon, 16 Dec 2019 23:48:18 GMT"
            ],
            content: HttpBody.empty
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let actual = try InputAndOutputWithHeadersOutputResponse(httpResponse: httpResponse)

        let expected = InputAndOutputWithHeadersOutputResponse(
            headerTimestampList: [
                Date(timeIntervalSince1970: 1576540098),
                Date(timeIntervalSince1970: 1576540098)
            ]
        )

        XCTAssertEqual(expected.headerString, actual.headerString)
        XCTAssertEqual(expected.headerByte, actual.headerByte)
        XCTAssertEqual(expected.headerShort, actual.headerShort)
        XCTAssertEqual(expected.headerInteger, actual.headerInteger)
        XCTAssertEqual(expected.headerLong, actual.headerLong)
        XCTAssertEqual(expected.headerFloat, actual.headerFloat)
        XCTAssertEqual(expected.headerDouble, actual.headerDouble)
        XCTAssertEqual(expected.headerTrueBool, actual.headerTrueBool)
        XCTAssertEqual(expected.headerFalseBool, actual.headerFalseBool)
        XCTAssertEqual(expected.headerStringList, actual.headerStringList)
        XCTAssertEqual(expected.headerStringSet, actual.headerStringSet)
        XCTAssertEqual(expected.headerIntegerList, actual.headerIntegerList)
        XCTAssertEqual(expected.headerBooleanList, actual.headerBooleanList)
        XCTAssertEqual(expected.headerTimestampList, actual.headerTimestampList)
        XCTAssertEqual(expected.headerEnum, actual.headerEnum)
        XCTAssertEqual(expected.headerEnumList, actual.headerEnumList)
        XCTAssertEqual(expected.headerIntegerEnum, actual.headerIntegerEnum)
        XCTAssertEqual(expected.headerIntegerEnumList, actual.headerIntegerEnumList)

    }
    /// Tests responses with enum header bindings
    func testRestJsonInputAndOutputWithEnumHeaders() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "X-Enum": "Foo",
                "X-EnumList": "Foo, Bar, Baz"
            ],
            content: HttpBody.empty
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let actual = try InputAndOutputWithHeadersOutputResponse(httpResponse: httpResponse)

        let expected = InputAndOutputWithHeadersOutputResponse(
            headerEnum: RestJsonClientTypes.FooEnum(rawValue: "Foo")!,
            headerEnumList: [
                RestJsonClientTypes.FooEnum(rawValue: "Foo")!,
                RestJsonClientTypes.FooEnum(rawValue: "Bar")!,
                RestJsonClientTypes.FooEnum(rawValue: "Baz")!
            ]
        )

        XCTAssertEqual(expected.headerString, actual.headerString)
        XCTAssertEqual(expected.headerByte, actual.headerByte)
        XCTAssertEqual(expected.headerShort, actual.headerShort)
        XCTAssertEqual(expected.headerInteger, actual.headerInteger)
        XCTAssertEqual(expected.headerLong, actual.headerLong)
        XCTAssertEqual(expected.headerFloat, actual.headerFloat)
        XCTAssertEqual(expected.headerDouble, actual.headerDouble)
        XCTAssertEqual(expected.headerTrueBool, actual.headerTrueBool)
        XCTAssertEqual(expected.headerFalseBool, actual.headerFalseBool)
        XCTAssertEqual(expected.headerStringList, actual.headerStringList)
        XCTAssertEqual(expected.headerStringSet, actual.headerStringSet)
        XCTAssertEqual(expected.headerIntegerList, actual.headerIntegerList)
        XCTAssertEqual(expected.headerBooleanList, actual.headerBooleanList)
        XCTAssertEqual(expected.headerTimestampList, actual.headerTimestampList)
        XCTAssertEqual(expected.headerEnum, actual.headerEnum)
        XCTAssertEqual(expected.headerEnumList, actual.headerEnumList)
        XCTAssertEqual(expected.headerIntegerEnum, actual.headerIntegerEnum)
        XCTAssertEqual(expected.headerIntegerEnumList, actual.headerIntegerEnumList)

    }
    /// Tests responses with intEnum header bindings
    func testRestJsonInputAndOutputWithIntEnumHeaders() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "X-IntegerEnum": "1",
                "X-IntegerEnumList": "1, 2, 3"
            ],
            content: HttpBody.empty
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let actual = try InputAndOutputWithHeadersOutputResponse(httpResponse: httpResponse)

        let expected = InputAndOutputWithHeadersOutputResponse(
            headerIntegerEnum: IntegerEnum(rawValue: 1),
            headerIntegerEnumList: [
                IntegerEnum(rawValue: 1),
                IntegerEnum(rawValue: 2),
                IntegerEnum(rawValue: 3)
            ]
        )

        XCTAssertEqual(expected.headerString, actual.headerString)
        XCTAssertEqual(expected.headerByte, actual.headerByte)
        XCTAssertEqual(expected.headerShort, actual.headerShort)
        XCTAssertEqual(expected.headerInteger, actual.headerInteger)
        XCTAssertEqual(expected.headerLong, actual.headerLong)
        XCTAssertEqual(expected.headerFloat, actual.headerFloat)
        XCTAssertEqual(expected.headerDouble, actual.headerDouble)
        XCTAssertEqual(expected.headerTrueBool, actual.headerTrueBool)
        XCTAssertEqual(expected.headerFalseBool, actual.headerFalseBool)
        XCTAssertEqual(expected.headerStringList, actual.headerStringList)
        XCTAssertEqual(expected.headerStringSet, actual.headerStringSet)
        XCTAssertEqual(expected.headerIntegerList, actual.headerIntegerList)
        XCTAssertEqual(expected.headerBooleanList, actual.headerBooleanList)
        XCTAssertEqual(expected.headerTimestampList, actual.headerTimestampList)
        XCTAssertEqual(expected.headerEnum, actual.headerEnum)
        XCTAssertEqual(expected.headerEnumList, actual.headerEnumList)
        XCTAssertEqual(expected.headerIntegerEnum, actual.headerIntegerEnum)
        XCTAssertEqual(expected.headerIntegerEnumList, actual.headerIntegerEnumList)

    }
    /// Supports handling NaN float header values.
    func testRestJsonSupportsNaNFloatHeaderOutputs() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "X-Double": "NaN",
                "X-Float": "NaN"
            ],
            content: HttpBody.empty
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let actual = try InputAndOutputWithHeadersOutputResponse(httpResponse: httpResponse)

        let expected = InputAndOutputWithHeadersOutputResponse(
            headerDouble: Swift.Double.nan,
            headerFloat: Swift.Float.nan
        )

        XCTAssertEqual(expected.headerString, actual.headerString)
        XCTAssertEqual(expected.headerByte, actual.headerByte)
        XCTAssertEqual(expected.headerShort, actual.headerShort)
        XCTAssertEqual(expected.headerInteger, actual.headerInteger)
        XCTAssertEqual(expected.headerLong, actual.headerLong)
        XCTAssertEqual(expected.headerFloat?.isNaN, actual.headerFloat?.isNaN)
        XCTAssertEqual(expected.headerDouble?.isNaN, actual.headerDouble?.isNaN)
        XCTAssertEqual(expected.headerTrueBool, actual.headerTrueBool)
        XCTAssertEqual(expected.headerFalseBool, actual.headerFalseBool)
        XCTAssertEqual(expected.headerStringList, actual.headerStringList)
        XCTAssertEqual(expected.headerStringSet, actual.headerStringSet)
        XCTAssertEqual(expected.headerIntegerList, actual.headerIntegerList)
        XCTAssertEqual(expected.headerBooleanList, actual.headerBooleanList)
        XCTAssertEqual(expected.headerTimestampList, actual.headerTimestampList)
        XCTAssertEqual(expected.headerEnum, actual.headerEnum)
        XCTAssertEqual(expected.headerEnumList, actual.headerEnumList)
        XCTAssertEqual(expected.headerIntegerEnum, actual.headerIntegerEnum)
        XCTAssertEqual(expected.headerIntegerEnumList, actual.headerIntegerEnumList)

    }
    /// Supports handling Infinity float header values.
    func testRestJsonSupportsInfinityFloatHeaderOutputs() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "X-Double": "Infinity",
                "X-Float": "Infinity"
            ],
            content: HttpBody.empty
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let actual = try InputAndOutputWithHeadersOutputResponse(httpResponse: httpResponse)

        let expected = InputAndOutputWithHeadersOutputResponse(
            headerDouble: Swift.Double.infinity,
            headerFloat: Swift.Float.infinity
        )

        XCTAssertEqual(expected.headerString, actual.headerString)
        XCTAssertEqual(expected.headerByte, actual.headerByte)
        XCTAssertEqual(expected.headerShort, actual.headerShort)
        XCTAssertEqual(expected.headerInteger, actual.headerInteger)
        XCTAssertEqual(expected.headerLong, actual.headerLong)
        XCTAssertEqual(expected.headerFloat, actual.headerFloat)
        XCTAssertEqual(expected.headerDouble, actual.headerDouble)
        XCTAssertEqual(expected.headerTrueBool, actual.headerTrueBool)
        XCTAssertEqual(expected.headerFalseBool, actual.headerFalseBool)
        XCTAssertEqual(expected.headerStringList, actual.headerStringList)
        XCTAssertEqual(expected.headerStringSet, actual.headerStringSet)
        XCTAssertEqual(expected.headerIntegerList, actual.headerIntegerList)
        XCTAssertEqual(expected.headerBooleanList, actual.headerBooleanList)
        XCTAssertEqual(expected.headerTimestampList, actual.headerTimestampList)
        XCTAssertEqual(expected.headerEnum, actual.headerEnum)
        XCTAssertEqual(expected.headerEnumList, actual.headerEnumList)
        XCTAssertEqual(expected.headerIntegerEnum, actual.headerIntegerEnum)
        XCTAssertEqual(expected.headerIntegerEnumList, actual.headerIntegerEnumList)

    }
    /// Supports handling -Infinity float header values.
    func testRestJsonSupportsNegativeInfinityFloatHeaderOutputs() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "X-Double": "-Infinity",
                "X-Float": "-Infinity"
            ],
            content: HttpBody.empty
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let actual = try InputAndOutputWithHeadersOutputResponse(httpResponse: httpResponse)

        let expected = InputAndOutputWithHeadersOutputResponse(
            headerDouble: -Swift.Double.infinity,
            headerFloat: -Swift.Float.infinity
        )

        XCTAssertEqual(expected.headerString, actual.headerString)
        XCTAssertEqual(expected.headerByte, actual.headerByte)
        XCTAssertEqual(expected.headerShort, actual.headerShort)
        XCTAssertEqual(expected.headerInteger, actual.headerInteger)
        XCTAssertEqual(expected.headerLong, actual.headerLong)
        XCTAssertEqual(expected.headerFloat, actual.headerFloat)
        XCTAssertEqual(expected.headerDouble, actual.headerDouble)
        XCTAssertEqual(expected.headerTrueBool, actual.headerTrueBool)
        XCTAssertEqual(expected.headerFalseBool, actual.headerFalseBool)
        XCTAssertEqual(expected.headerStringList, actual.headerStringList)
        XCTAssertEqual(expected.headerStringSet, actual.headerStringSet)
        XCTAssertEqual(expected.headerIntegerList, actual.headerIntegerList)
        XCTAssertEqual(expected.headerBooleanList, actual.headerBooleanList)
        XCTAssertEqual(expected.headerTimestampList, actual.headerTimestampList)
        XCTAssertEqual(expected.headerEnum, actual.headerEnum)
        XCTAssertEqual(expected.headerEnumList, actual.headerEnumList)
        XCTAssertEqual(expected.headerIntegerEnum, actual.headerIntegerEnum)
        XCTAssertEqual(expected.headerIntegerEnumList, actual.headerIntegerEnumList)

    }
}
