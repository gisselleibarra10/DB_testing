// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import ClientRuntime
import SmithyTestUtil
import XCTest


class GreetingWithErrorsResponseTest: HttpResponseTestBase {
    /// Ensures that operations with errors successfully know how to deserialize a successful response. As of January 2021, server implementations are expected to respond with a JSON object regardless of if the output parameters are empty.
    func testRestJsonGreetingWithErrors() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "X-Greeting": "Hello"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {}
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try GreetingWithErrorsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = GreetingWithErrorsOutputResponse(
            greeting: "Hello"
        )

        XCTAssertEqual(expected.greeting, actual.greeting)

    }
    /// This test is similar to RestJsonGreetingWithErrors, but it ensures that clients can gracefully deal with a server omitting a response payload.
    func testRestJsonGreetingWithErrorsNoPayload() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "X-Greeting": "Hello"
            ],
            content: HttpBody.empty
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let actual = try GreetingWithErrorsOutputResponse(httpResponse: httpResponse)

        let expected = GreetingWithErrorsOutputResponse(
            greeting: "Hello"
        )

        XCTAssertEqual(expected.greeting, actual.greeting)

    }
}
