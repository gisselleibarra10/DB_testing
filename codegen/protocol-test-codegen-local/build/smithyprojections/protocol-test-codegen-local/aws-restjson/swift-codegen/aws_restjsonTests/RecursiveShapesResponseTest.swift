// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import ClientRuntime
import SmithyTestUtil
import XCTest


class RecursiveShapesResponseTest: HttpResponseTestBase {
    /// Serializes recursive structures
    func testRestJsonRecursiveShapes() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "nested": {
                    "foo": "Foo1",
                    "nested": {
                        "bar": "Bar1",
                        "recursiveMember": {
                            "foo": "Foo2",
                            "nested": {
                                "bar": "Bar2"
                            }
                        }
                    }
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try RecursiveShapesOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = RecursiveShapesOutputResponse(
            nested: RestJsonClientTypes.RecursiveShapesInputOutputNested1(
                foo: "Foo1",
                nested: Box<RestJsonClientTypes.RecursiveShapesInputOutputNested2>(
                    value: RestJsonClientTypes.RecursiveShapesInputOutputNested2(
                        bar: "Bar1",
                        recursiveMember: RestJsonClientTypes.RecursiveShapesInputOutputNested1(
                            foo: "Foo2",
                            nested: Box<RestJsonClientTypes.RecursiveShapesInputOutputNested2>(
                                value: RestJsonClientTypes.RecursiveShapesInputOutputNested2(
                                    bar: "Bar2"
                                )
                            )
                        )
                    )
                )
            )
        )

        XCTAssertEqual(expected.nested, actual.nested)

    }
}
