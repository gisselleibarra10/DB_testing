// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import ClientRuntime
import SmithyTestUtil
import XCTest


class JsonMapsResponseTest: HttpResponseTestBase {
    /// Deserializes JSON maps
    func testRestJsonJsonMaps() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "denseStructMap": {
                    "foo": {
                        "hi": "there"
                    },
                    "baz": {
                        "hi": "bye"
                    }
                },
                "sparseStructMap": {
                    "foo": {
                        "hi": "there"
                    },
                    "baz": {
                        "hi": "bye"
                    }
               }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonMapsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonMapsOutputResponse(
            denseStructMap: [
                "baz": RestJsonClientTypes.GreetingStruct(
                    hi: "bye"
                ),
                "foo": RestJsonClientTypes.GreetingStruct(
                    hi: "there"
                )]
            ,
            sparseStructMap: [
                "baz": RestJsonClientTypes.GreetingStruct(
                    hi: "bye"
                ),
                "foo": RestJsonClientTypes.GreetingStruct(
                    hi: "there"
                )]

        )

        XCTAssertEqual(expected.denseStructMap, actual.denseStructMap)
        XCTAssertEqual(expected.sparseStructMap, actual.sparseStructMap)
        XCTAssertEqual(expected.denseNumberMap, actual.denseNumberMap)
        XCTAssertEqual(expected.denseBooleanMap, actual.denseBooleanMap)
        XCTAssertEqual(expected.denseStringMap, actual.denseStringMap)
        XCTAssertEqual(expected.sparseNumberMap, actual.sparseNumberMap)
        XCTAssertEqual(expected.sparseBooleanMap, actual.sparseBooleanMap)
        XCTAssertEqual(expected.sparseStringMap, actual.sparseStringMap)
        XCTAssertEqual(expected.denseSetMap, actual.denseSetMap)
        XCTAssertEqual(expected.sparseSetMap, actual.sparseSetMap)

    }
    /// Deserializes null JSON map values
    func testRestJsonDeserializesNullMapValues() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "sparseBooleanMap": {
                    "x": null
                },
                "sparseNumberMap": {
                    "x": null
                },
                "sparseStringMap": {
                    "x": null
                },
                "sparseStructMap": {
                    "x": null
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonMapsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonMapsOutputResponse(
            sparseBooleanMap: [
                "x": nil]
            ,
            sparseNumberMap: [
                "x": nil]
            ,
            sparseStringMap: [
                "x": nil]
            ,
            sparseStructMap: [
                "x": nil]

        )

        XCTAssertEqual(expected.denseStructMap, actual.denseStructMap)
        XCTAssertEqual(expected.sparseStructMap, actual.sparseStructMap)
        XCTAssertEqual(expected.denseNumberMap, actual.denseNumberMap)
        XCTAssertEqual(expected.denseBooleanMap, actual.denseBooleanMap)
        XCTAssertEqual(expected.denseStringMap, actual.denseStringMap)
        XCTAssertEqual(expected.sparseNumberMap, actual.sparseNumberMap)
        XCTAssertEqual(expected.sparseBooleanMap, actual.sparseBooleanMap)
        XCTAssertEqual(expected.sparseStringMap, actual.sparseStringMap)
        XCTAssertEqual(expected.denseSetMap, actual.denseSetMap)
        XCTAssertEqual(expected.sparseSetMap, actual.sparseSetMap)

    }
    /// Ensure that 0 and false are sent over the wire in all maps and lists
    func testRestJsonDeserializesZeroValuesInMaps() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "denseNumberMap": {
                    "x": 0
                },
                "sparseNumberMap": {
                    "x": 0
                },
                "denseBooleanMap": {
                    "x": false
                },
                "sparseBooleanMap": {
                    "x": false
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonMapsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonMapsOutputResponse(
            denseBooleanMap: [
                "x": false]
            ,
            denseNumberMap: [
                "x": 0]
            ,
            sparseBooleanMap: [
                "x": false]
            ,
            sparseNumberMap: [
                "x": 0]

        )

        XCTAssertEqual(expected.denseStructMap, actual.denseStructMap)
        XCTAssertEqual(expected.sparseStructMap, actual.sparseStructMap)
        XCTAssertEqual(expected.denseNumberMap, actual.denseNumberMap)
        XCTAssertEqual(expected.denseBooleanMap, actual.denseBooleanMap)
        XCTAssertEqual(expected.denseStringMap, actual.denseStringMap)
        XCTAssertEqual(expected.sparseNumberMap, actual.sparseNumberMap)
        XCTAssertEqual(expected.sparseBooleanMap, actual.sparseBooleanMap)
        XCTAssertEqual(expected.sparseStringMap, actual.sparseStringMap)
        XCTAssertEqual(expected.denseSetMap, actual.denseSetMap)
        XCTAssertEqual(expected.sparseSetMap, actual.sparseSetMap)

    }
    /// A response that contains a sparse map of sets
    func testRestJsonDeserializesSparseSetMap() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "sparseSetMap": {
                    "x": [],
                    "y": ["a", "b"]
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonMapsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonMapsOutputResponse(
            sparseSetMap: [
                "x": [
                ],
                "y": [
                    "a",
                    "b"
                ]]

        )

        XCTAssertEqual(expected.denseStructMap, actual.denseStructMap)
        XCTAssertEqual(expected.sparseStructMap, actual.sparseStructMap)
        XCTAssertEqual(expected.denseNumberMap, actual.denseNumberMap)
        XCTAssertEqual(expected.denseBooleanMap, actual.denseBooleanMap)
        XCTAssertEqual(expected.denseStringMap, actual.denseStringMap)
        XCTAssertEqual(expected.sparseNumberMap, actual.sparseNumberMap)
        XCTAssertEqual(expected.sparseBooleanMap, actual.sparseBooleanMap)
        XCTAssertEqual(expected.sparseStringMap, actual.sparseStringMap)
        XCTAssertEqual(expected.denseSetMap, actual.denseSetMap)
        XCTAssertEqual(expected.sparseSetMap, actual.sparseSetMap)

    }
    /// A response that contains a dense map of sets.
    func testRestJsonDeserializesDenseSetMap() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "denseSetMap": {
                    "x": [],
                    "y": ["a", "b"]
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonMapsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonMapsOutputResponse(
            denseSetMap: [
                "x": [
                ],
                "y": [
                    "a",
                    "b"
                ]]

        )

        XCTAssertEqual(expected.denseStructMap, actual.denseStructMap)
        XCTAssertEqual(expected.sparseStructMap, actual.sparseStructMap)
        XCTAssertEqual(expected.denseNumberMap, actual.denseNumberMap)
        XCTAssertEqual(expected.denseBooleanMap, actual.denseBooleanMap)
        XCTAssertEqual(expected.denseStringMap, actual.denseStringMap)
        XCTAssertEqual(expected.sparseNumberMap, actual.sparseNumberMap)
        XCTAssertEqual(expected.sparseBooleanMap, actual.sparseBooleanMap)
        XCTAssertEqual(expected.sparseStringMap, actual.sparseStringMap)
        XCTAssertEqual(expected.denseSetMap, actual.denseSetMap)
        XCTAssertEqual(expected.sparseSetMap, actual.sparseSetMap)

    }
    /// A response that contains a sparse map of sets.
    func testRestJsonDeserializesSparseSetMapAndRetainsNull() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "sparseSetMap": {
                    "x": [],
                    "y": ["a", "b"],
                    "z": null
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonMapsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonMapsOutputResponse(
            sparseSetMap: [
                "x": [
                ],
                "y": [
                    "a",
                    "b"
                ],
                "z": nil]

        )

        XCTAssertEqual(expected.denseStructMap, actual.denseStructMap)
        XCTAssertEqual(expected.sparseStructMap, actual.sparseStructMap)
        XCTAssertEqual(expected.denseNumberMap, actual.denseNumberMap)
        XCTAssertEqual(expected.denseBooleanMap, actual.denseBooleanMap)
        XCTAssertEqual(expected.denseStringMap, actual.denseStringMap)
        XCTAssertEqual(expected.sparseNumberMap, actual.sparseNumberMap)
        XCTAssertEqual(expected.sparseBooleanMap, actual.sparseBooleanMap)
        XCTAssertEqual(expected.sparseStringMap, actual.sparseStringMap)
        XCTAssertEqual(expected.denseSetMap, actual.denseSetMap)
        XCTAssertEqual(expected.sparseSetMap, actual.sparseSetMap)

    }
    /// Clients SHOULD tolerate seeing a null value in a dense map, and they SHOULD drop the null key-value pair.
    func testRestJsonDeserializesDenseSetMapAndSkipsNull() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "denseSetMap": {
                    "x": [],
                    "y": ["a", "b"],
                    "z": null
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonMapsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonMapsOutputResponse(
            denseSetMap: [
                "x": [
                ],
                "y": [
                    "a",
                    "b"
                ]]

        )

        XCTAssertEqual(expected.denseStructMap, actual.denseStructMap)
        XCTAssertEqual(expected.sparseStructMap, actual.sparseStructMap)
        XCTAssertEqual(expected.denseNumberMap, actual.denseNumberMap)
        XCTAssertEqual(expected.denseBooleanMap, actual.denseBooleanMap)
        XCTAssertEqual(expected.denseStringMap, actual.denseStringMap)
        XCTAssertEqual(expected.sparseNumberMap, actual.sparseNumberMap)
        XCTAssertEqual(expected.sparseBooleanMap, actual.sparseBooleanMap)
        XCTAssertEqual(expected.sparseStringMap, actual.sparseStringMap)
        XCTAssertEqual(expected.denseSetMap, actual.denseSetMap)
        XCTAssertEqual(expected.sparseSetMap, actual.sparseSetMap)

    }
}
