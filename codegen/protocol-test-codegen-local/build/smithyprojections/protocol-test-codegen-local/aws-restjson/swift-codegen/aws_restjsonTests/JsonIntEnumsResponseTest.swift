// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import ClientRuntime
import SmithyTestUtil
import XCTest


class JsonIntEnumsResponseTest: HttpResponseTestBase {
    /// Serializes intEnums as integers
    func testRestJsonJsonIntEnums() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "integerEnum1": 1,
                "integerEnum2": 2,
                "integerEnum3": 3,
                "integerEnumList": [
                    1,
                    2,
                    3
                ],
                "integerEnumSet": [
                    1,
                    2
                ],
                "integerEnumMap": {
                    "abc": 1,
                    "def": 2
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonIntEnumsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonIntEnumsOutputResponse(
            integerEnum1: IntegerEnum(rawValue: 1),
            integerEnum2: IntegerEnum(rawValue: 2),
            integerEnum3: IntegerEnum(rawValue: 3),
            integerEnumList: [
                IntegerEnum(rawValue: 1),
                IntegerEnum(rawValue: 2),
                IntegerEnum(rawValue: 3)
            ],
            integerEnumMap: [
                "abc": IntegerEnum(rawValue: 1),
                "def": IntegerEnum(rawValue: 2)]
            ,
            integerEnumSet: [
                IntegerEnum(rawValue: 1),
                IntegerEnum(rawValue: 2)
            ]
        )

        XCTAssertEqual(expected.integerEnum1, actual.integerEnum1)
        XCTAssertEqual(expected.integerEnum2, actual.integerEnum2)
        XCTAssertEqual(expected.integerEnum3, actual.integerEnum3)
        XCTAssertEqual(expected.integerEnumList, actual.integerEnumList)
        XCTAssertEqual(expected.integerEnumSet, actual.integerEnumSet)
        XCTAssertEqual(expected.integerEnumMap, actual.integerEnumMap)

    }
}
