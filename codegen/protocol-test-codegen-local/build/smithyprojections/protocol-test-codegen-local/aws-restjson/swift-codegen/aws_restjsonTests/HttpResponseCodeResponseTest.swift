// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import ClientRuntime
import SmithyTestUtil
import XCTest


class HttpResponseCodeResponseTest: HttpResponseTestBase {
    /// Binds the http response code to an output structure. Note that even though all members are bound outside of the payload, an empty JSON object is serialized in the response. However, clients should be able to handle an empty JSON object or an empty payload without failing to deserialize a response.
    func testRestJsonHttpResponseCode() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 201,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {}
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try HttpResponseCodeOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = HttpResponseCodeOutputResponse(
            status: 201
        )

        XCTAssertEqual(expected.status, actual.status)

    }
    /// This test ensures that clients gracefully handle cases where the service responds with no payload rather than an empty JSON object.
    func testRestJsonHttpResponseCodeWithNoPayload() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 201,
            headers: nil,
            content: HttpBody.empty
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let actual = try HttpResponseCodeOutputResponse(httpResponse: httpResponse)

        let expected = HttpResponseCodeOutputResponse(
            status: 201
        )

        XCTAssertEqual(expected.status, actual.status)

    }
}
