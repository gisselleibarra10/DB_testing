// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import ClientRuntime
import SmithyTestUtil
import XCTest


class JsonEnumsResponseTest: HttpResponseTestBase {
    /// Serializes simple scalar properties
    func testRestJsonJsonEnums() async throws {
        guard let httpResponse = buildHttpResponse(
            code: 200,
            headers: [
                "Content-Type": "application/json"
            ],
            content: HttpBody.stream(ByteStream.from(data: """
            {
                "fooEnum1": "Foo",
                "fooEnum2": "0",
                "fooEnum3": "1",
                "fooEnumList": [
                    "Foo",
                    "0"
                ],
                "fooEnumSet": [
                    "Foo",
                    "0"
                ],
                "fooEnumMap": {
                    "hi": "Foo",
                    "zero": "0"
                }
            }
            """.data(using: .utf8)!))
        ) else {
            XCTFail("Something is wrong with the created http response")
            return
        }

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let actual = try JsonEnumsOutputResponse(httpResponse: httpResponse, decoder: decoder)

        let expected = JsonEnumsOutputResponse(
            fooEnum1: RestJsonClientTypes.FooEnum(rawValue: "Foo")!,
            fooEnum2: RestJsonClientTypes.FooEnum(rawValue: "0")!,
            fooEnum3: RestJsonClientTypes.FooEnum(rawValue: "1")!,
            fooEnumList: [
                RestJsonClientTypes.FooEnum(rawValue: "Foo")!,
                RestJsonClientTypes.FooEnum(rawValue: "0")!
            ],
            fooEnumMap: [
                "hi": RestJsonClientTypes.FooEnum(rawValue: "Foo")!,
                "zero": RestJsonClientTypes.FooEnum(rawValue: "0")!]
            ,
            fooEnumSet: [
                RestJsonClientTypes.FooEnum(rawValue: "Foo")!,
                RestJsonClientTypes.FooEnum(rawValue: "0")!
            ]
        )

        XCTAssertEqual(expected.fooEnum1, actual.fooEnum1)
        XCTAssertEqual(expected.fooEnum2, actual.fooEnum2)
        XCTAssertEqual(expected.fooEnum3, actual.fooEnum3)
        XCTAssertEqual(expected.fooEnumList, actual.fooEnumList)
        XCTAssertEqual(expected.fooEnumSet, actual.fooEnumSet)
        XCTAssertEqual(expected.fooEnumMap, actual.fooEnumMap)

    }
}
