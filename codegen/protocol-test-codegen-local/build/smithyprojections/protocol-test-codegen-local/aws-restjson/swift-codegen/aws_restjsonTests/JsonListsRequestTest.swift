// Code generated by smithy-swift-codegen. DO NOT EDIT!

@testable import aws_restjson
import AWSClientRuntime
import ClientRuntime
import SmithyTestUtil
import XCTest


class JsonListsRequestTest: HttpRequestTestBase {
    /// Serializes JSON lists
    func testRestJsonLists() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .put,
            path: "/JsonLists",
            headers: [
                "Content-Type": "application/json"
            ],
            body: """
            {
                "stringList": [
                    "foo",
                    "bar"
                ],
                "stringSet": [
                    "foo",
                    "bar"
                ],
                "integerList": [
                    1,
                    2
                ],
                "booleanList": [
                    true,
                    false
                ],
                "timestampList": [
                    1398796238,
                    1398796238
                ],
                "enumList": [
                    "Foo",
                    "0"
                ],
                "intEnumList": [
                    1,
                    2
                ],
                "nestedStringList": [
                    [
                        "foo",
                        "bar"
                    ],
                    [
                        "baz",
                        "qux"
                    ]
                ],
                "myStructureList": [
                    {
                        "value": "1",
                        "other": "2"
                    },
                    {
                        "value": "3",
                        "other": "4"
                    }
                ]
            }
            """,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = JsonListsInput(
            booleanList: [
                true,
                false
            ],
            enumList: [
                RestJsonClientTypes.FooEnum(rawValue: "Foo")!,
                RestJsonClientTypes.FooEnum(rawValue: "0")!
            ],
            intEnumList: [
                IntegerEnum(rawValue: 1),
                IntegerEnum(rawValue: 2)
            ],
            integerList: [
                1,
                2
            ],
            nestedStringList: [
                [
                    "foo",
                    "bar"
                ]                ,
                [
                    "baz",
                    "qux"
                ]            
            ],
            stringList: [
                "foo",
                "bar"
            ],
            stringSet: [
                "foo",
                "bar"
            ],
            structureList: [
                RestJsonClientTypes.StructureListMember(
                    a: "1",
                    b: "2"
                ),
                RestJsonClientTypes.StructureListMember(
                    a: "3",
                    b: "4"
                )
            ],
            timestampList: [
                Date(timeIntervalSince1970: 1398796238),
                Date(timeIntervalSince1970: 1398796238)
            ]
        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .put)
                      .build()
        var operationStack = OperationStack<JsonListsInput, JsonListsOutputResponse, JsonListsOutputError>(id: "RestJsonLists")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<JsonListsInput, JsonListsOutputResponse, JsonListsOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<JsonListsInput, JsonListsOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<JsonListsOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<JsonListsInput, JsonListsOutputResponse>(contentType: "application/json"))
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.SerializableBodyMiddleware<JsonListsInput, JsonListsOutputResponse>())
        operationStack.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<JsonListsOutputResponse, JsonListsOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual, { (expectedHttpBody, actualHttpBody) -> Void in
                XCTAssertNotNil(actualHttpBody, "The actual HttpBody is nil")
                XCTAssertNotNil(expectedHttpBody, "The expected HttpBody is nil")
                self.genericAssertEqualHttpBodyData(expectedHttpBody!, actualHttpBody!) { expectedData, actualData in
                    do {
                        let expectedObj = try decoder.decode(JsonListsInputBody.self, from: expectedData)
                        let actualObj = try decoder.decode(JsonListsInputBody.self, from: actualData)
                        XCTAssertEqual(expectedObj.stringList, actualObj.stringList)
                        XCTAssertEqual(expectedObj.sparseStringList, actualObj.sparseStringList)
                        XCTAssertEqual(expectedObj.stringSet, actualObj.stringSet)
                        XCTAssertEqual(expectedObj.integerList, actualObj.integerList)
                        XCTAssertEqual(expectedObj.booleanList, actualObj.booleanList)
                        XCTAssertEqual(expectedObj.timestampList, actualObj.timestampList)
                        XCTAssertEqual(expectedObj.enumList, actualObj.enumList)
                        XCTAssertEqual(expectedObj.intEnumList, actualObj.intEnumList)
                        XCTAssertEqual(expectedObj.nestedStringList, actualObj.nestedStringList)
                        XCTAssertEqual(expectedObj.structureList, actualObj.structureList)
                    } catch let err {
                        XCTFail("Failed to verify body \(err)")
                    }
                }
            })
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! JsonListsOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<JsonListsOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! JsonListsOutputError(httpResponse: httpResponse)
            throw SdkError<JsonListsOutputError>.service(serviceError, httpResponse)
        })
    }
    /// Serializes empty JSON lists
    func testRestJsonListsEmpty() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .put,
            path: "/JsonLists",
            headers: [
                "Content-Type": "application/json"
            ],
            body: """
            {
                "stringList": []
            }
            """,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = JsonListsInput(
            stringList: [
            ]
        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .put)
                      .build()
        var operationStack = OperationStack<JsonListsInput, JsonListsOutputResponse, JsonListsOutputError>(id: "RestJsonListsEmpty")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<JsonListsInput, JsonListsOutputResponse, JsonListsOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<JsonListsInput, JsonListsOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<JsonListsOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<JsonListsInput, JsonListsOutputResponse>(contentType: "application/json"))
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.SerializableBodyMiddleware<JsonListsInput, JsonListsOutputResponse>())
        operationStack.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<JsonListsOutputResponse, JsonListsOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual, { (expectedHttpBody, actualHttpBody) -> Void in
                XCTAssertNotNil(actualHttpBody, "The actual HttpBody is nil")
                XCTAssertNotNil(expectedHttpBody, "The expected HttpBody is nil")
                self.genericAssertEqualHttpBodyData(expectedHttpBody!, actualHttpBody!) { expectedData, actualData in
                    do {
                        let expectedObj = try decoder.decode(JsonListsInputBody.self, from: expectedData)
                        let actualObj = try decoder.decode(JsonListsInputBody.self, from: actualData)
                        XCTAssertEqual(expectedObj.stringList, actualObj.stringList)
                        XCTAssertEqual(expectedObj.sparseStringList, actualObj.sparseStringList)
                        XCTAssertEqual(expectedObj.stringSet, actualObj.stringSet)
                        XCTAssertEqual(expectedObj.integerList, actualObj.integerList)
                        XCTAssertEqual(expectedObj.booleanList, actualObj.booleanList)
                        XCTAssertEqual(expectedObj.timestampList, actualObj.timestampList)
                        XCTAssertEqual(expectedObj.enumList, actualObj.enumList)
                        XCTAssertEqual(expectedObj.intEnumList, actualObj.intEnumList)
                        XCTAssertEqual(expectedObj.nestedStringList, actualObj.nestedStringList)
                        XCTAssertEqual(expectedObj.structureList, actualObj.structureList)
                    } catch let err {
                        XCTFail("Failed to verify body \(err)")
                    }
                }
            })
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! JsonListsOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<JsonListsOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! JsonListsOutputError(httpResponse: httpResponse)
            throw SdkError<JsonListsOutputError>.service(serviceError, httpResponse)
        })
    }
    /// Serializes null values in lists
    func testRestJsonListsSerializeNull() async throws {
        let urlPrefix = urlPrefixFromHost(host: "")
        let hostOnly = hostOnlyFromHost(host: "")
        let expected = buildExpectedHttpRequest(
            method: .put,
            path: "/JsonLists",
            headers: [
                "Content-Type": "application/json"
            ],
            body: """
            {
                "sparseStringList": [
                    null,
                    "hi"
                ]
            }
            """,
            host: "",
            resolvedHost: ""
        )

        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")

        let input = JsonListsInput(
            sparseStringList: [
                nil,
                "hi"
            ]
        )
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withMethod(value: .put)
                      .build()
        var operationStack = OperationStack<JsonListsInput, JsonListsOutputResponse, JsonListsOutputError>(id: "RestJsonListsSerializeNull")
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLPathMiddleware<JsonListsInput, JsonListsOutputResponse, JsonListsOutputError>(urlPrefix: urlPrefix))
        operationStack.initializeStep.intercept(position: .after, middleware: ClientRuntime.URLHostMiddleware<JsonListsInput, JsonListsOutputResponse>(host: hostOnly))
        operationStack.buildStep.intercept(position: .after, id: "RequestTestEndpointResolver") { (context, input, next) -> ClientRuntime.OperationOutput<JsonListsOutputResponse> in
            input.withMethod(context.getMethod())
            input.withPath(context.getPath())
            let host = "\(context.getHostPrefix() ?? "")\(context.getHost() ?? "")"
            input.withHost(host)
            return try await next.handle(context: context, input: input)
        }
        operationStack.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<JsonListsInput, JsonListsOutputResponse>(contentType: "application/json"))
        operationStack.serializeStep.intercept(position: .after, middleware: ClientRuntime.SerializableBodyMiddleware<JsonListsInput, JsonListsOutputResponse>())
        operationStack.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operationStack.deserializeStep.intercept(position: .after,
                     middleware: MockDeserializeMiddleware<JsonListsOutputResponse, JsonListsOutputError>(
                             id: "TestDeserializeMiddleware"){ context, actual in
            self.assertEqual(expected, actual, { (expectedHttpBody, actualHttpBody) -> Void in
                XCTAssertNotNil(actualHttpBody, "The actual HttpBody is nil")
                XCTAssertNotNil(expectedHttpBody, "The expected HttpBody is nil")
                self.genericAssertEqualHttpBodyData(expectedHttpBody!, actualHttpBody!) { expectedData, actualData in
                    do {
                        let expectedObj = try decoder.decode(JsonListsInputBody.self, from: expectedData)
                        let actualObj = try decoder.decode(JsonListsInputBody.self, from: actualData)
                        XCTAssertEqual(expectedObj.stringList, actualObj.stringList)
                        XCTAssertEqual(expectedObj.sparseStringList, actualObj.sparseStringList)
                        XCTAssertEqual(expectedObj.stringSet, actualObj.stringSet)
                        XCTAssertEqual(expectedObj.integerList, actualObj.integerList)
                        XCTAssertEqual(expectedObj.booleanList, actualObj.booleanList)
                        XCTAssertEqual(expectedObj.timestampList, actualObj.timestampList)
                        XCTAssertEqual(expectedObj.enumList, actualObj.enumList)
                        XCTAssertEqual(expectedObj.intEnumList, actualObj.intEnumList)
                        XCTAssertEqual(expectedObj.nestedStringList, actualObj.nestedStringList)
                        XCTAssertEqual(expectedObj.structureList, actualObj.structureList)
                    } catch let err {
                        XCTFail("Failed to verify body \(err)")
                    }
                }
            })
            let response = HttpResponse(body: HttpBody.none, statusCode: .ok)
            let mockOutput = try! JsonListsOutputResponse(httpResponse: response, decoder: nil)
            let output = OperationOutput<JsonListsOutputResponse>(httpResponse: response, output: mockOutput)
            return output
        })
        _ = try await operationStack.handleMiddleware(context: context, input: input, next: MockHandler(){ (context, request) in
            XCTFail("Deserialize was mocked out, this should fail")
            let httpResponse = HttpResponse(body: .none, statusCode: .badRequest)
            let serviceError = try! JsonListsOutputError(httpResponse: httpResponse)
            throw SdkError<JsonListsOutputError>.service(serviceError, httpResponse)
        })
    }
}
