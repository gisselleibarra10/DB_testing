// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct JsonTimestampsInputBody: Swift.Equatable {
    let normal: ClientRuntime.Date?
    let dateTime: ClientRuntime.Date?
    let dateTimeOnTarget: ClientRuntime.Date?
    let epochSeconds: ClientRuntime.Date?
    let epochSecondsOnTarget: ClientRuntime.Date?
    let httpDate: ClientRuntime.Date?
    let httpDateOnTarget: ClientRuntime.Date?
}

extension JsonTimestampsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dateTime
        case dateTimeOnTarget
        case epochSeconds
        case epochSecondsOnTarget
        case httpDate
        case httpDateOnTarget
        case normal
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let normalDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .normal)
        normal = normalDecoded
        let dateTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateTime)
        dateTime = dateTimeDecoded
        let dateTimeOnTargetDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .dateTimeOnTarget)
        dateTimeOnTarget = dateTimeOnTargetDecoded
        let epochSecondsDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .epochSeconds)
        epochSeconds = epochSecondsDecoded
        let epochSecondsOnTargetDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .epochSecondsOnTarget)
        epochSecondsOnTarget = epochSecondsOnTargetDecoded
        let httpDateDecoded = try containerValues.decodeTimestampIfPresent(.httpDate, forKey: .httpDate)
        httpDate = httpDateDecoded
        let httpDateOnTargetDecoded = try containerValues.decodeTimestampIfPresent(.httpDate, forKey: .httpDateOnTarget)
        httpDateOnTarget = httpDateOnTargetDecoded
    }
}
