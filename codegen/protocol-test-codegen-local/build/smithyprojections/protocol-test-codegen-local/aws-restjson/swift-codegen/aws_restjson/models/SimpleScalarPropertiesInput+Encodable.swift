// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SimpleScalarPropertiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case byteValue
        case doubleValue = "DoubleDribble"
        case falseBooleanValue
        case floatValue
        case integerValue
        case longValue
        case shortValue
        case stringValue
        case trueBooleanValue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let byteValue = self.byteValue {
            try encodeContainer.encode(byteValue, forKey: .byteValue)
        }
        if let doubleValue = self.doubleValue {
            try encodeContainer.encode(doubleValue, forKey: .doubleValue)
        }
        if let falseBooleanValue = self.falseBooleanValue {
            try encodeContainer.encode(falseBooleanValue, forKey: .falseBooleanValue)
        }
        if let floatValue = self.floatValue {
            try encodeContainer.encode(floatValue, forKey: .floatValue)
        }
        if let integerValue = self.integerValue {
            try encodeContainer.encode(integerValue, forKey: .integerValue)
        }
        if let longValue = self.longValue {
            try encodeContainer.encode(longValue, forKey: .longValue)
        }
        if let shortValue = self.shortValue {
            try encodeContainer.encode(shortValue, forKey: .shortValue)
        }
        if let stringValue = self.stringValue {
            try encodeContainer.encode(stringValue, forKey: .stringValue)
        }
        if let trueBooleanValue = self.trueBooleanValue {
            try encodeContainer.encode(trueBooleanValue, forKey: .trueBooleanValue)
        }
    }
}
