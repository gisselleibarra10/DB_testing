// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TimestampFormatHeadersInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let defaultFormat = defaultFormat {
            items.add(Header(name: "X-defaultFormat", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: defaultFormat))))
        }
        if let memberDateTime = memberDateTime {
            items.add(Header(name: "X-memberDateTime", value: Swift.String(TimestampFormatter(format: .dateTime).string(from: memberDateTime))))
        }
        if let memberEpochSeconds = memberEpochSeconds {
            items.add(Header(name: "X-memberEpochSeconds", value: Swift.String(TimestampFormatter(format: .epochSeconds).string(from: memberEpochSeconds))))
        }
        if let memberHttpDate = memberHttpDate {
            items.add(Header(name: "X-memberHttpDate", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: memberHttpDate))))
        }
        if let targetDateTime = targetDateTime {
            items.add(Header(name: "X-targetDateTime", value: Swift.String(TimestampFormatter(format: .dateTime).string(from: targetDateTime))))
        }
        if let targetEpochSeconds = targetEpochSeconds {
            items.add(Header(name: "X-targetEpochSeconds", value: Swift.String(TimestampFormatter(format: .epochSeconds).string(from: targetEpochSeconds))))
        }
        if let targetHttpDate = targetHttpDate {
            items.add(Header(name: "X-targetHttpDate", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: targetHttpDate))))
        }
        return items
    }
}
