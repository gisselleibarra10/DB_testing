// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct JsonListsOutputResponseBody: Swift.Equatable {
    let stringList: [Swift.String]?
    let sparseStringList: [Swift.String?]?
    let stringSet: [Swift.String]?
    let integerList: [Swift.Int]?
    let booleanList: [Swift.Bool]?
    let timestampList: [ClientRuntime.Date]?
    let enumList: [RestJsonClientTypes.FooEnum]?
    let intEnumList: [IntegerEnum]?
    let nestedStringList: [[Swift.String]]?
    let structureList: [RestJsonClientTypes.StructureListMember]?
}

extension JsonListsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case booleanList
        case enumList
        case intEnumList
        case integerList
        case nestedStringList
        case sparseStringList
        case stringList
        case stringSet
        case structureList = "myStructureList"
        case timestampList
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stringListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stringList)
        var stringListDecoded0:[Swift.String]? = nil
        if let stringListContainer = stringListContainer {
            stringListDecoded0 = [Swift.String]()
            for string0 in stringListContainer {
                if let string0 = string0 {
                    stringListDecoded0?.append(string0)
                }
            }
        }
        stringList = stringListDecoded0
        let sparseStringListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sparseStringList)
        var sparseStringListDecoded0:[Swift.String?]? = nil
        if let sparseStringListContainer = sparseStringListContainer {
            sparseStringListDecoded0 = [Swift.String?]()
            for string0 in sparseStringListContainer {
                sparseStringListDecoded0?.append(string0)
            }
        }
        sparseStringList = sparseStringListDecoded0
        let stringSetContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stringSet)
        var stringSetDecoded0:[Swift.String]? = nil
        if let stringSetContainer = stringSetContainer {
            stringSetDecoded0 = [Swift.String]()
            for string0 in stringSetContainer {
                if let string0 = string0 {
                    stringSetDecoded0?.append(string0)
                }
            }
        }
        stringSet = stringSetDecoded0
        let integerListContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .integerList)
        var integerListDecoded0:[Swift.Int]? = nil
        if let integerListContainer = integerListContainer {
            integerListDecoded0 = [Swift.Int]()
            for integer0 in integerListContainer {
                if let integer0 = integer0 {
                    integerListDecoded0?.append(integer0)
                }
            }
        }
        integerList = integerListDecoded0
        let booleanListContainer = try containerValues.decodeIfPresent([Swift.Bool?].self, forKey: .booleanList)
        var booleanListDecoded0:[Swift.Bool]? = nil
        if let booleanListContainer = booleanListContainer {
            booleanListDecoded0 = [Swift.Bool]()
            for boolean0 in booleanListContainer {
                if let boolean0 = boolean0 {
                    booleanListDecoded0?.append(boolean0)
                }
            }
        }
        booleanList = booleanListDecoded0
        let timestampListContainer = try containerValues.decodeIfPresent([ClientRuntime.Date?].self, forKey: .timestampList)
        var timestampListDecoded0:[ClientRuntime.Date]? = nil
        if let timestampListContainer = timestampListContainer {
            timestampListDecoded0 = [ClientRuntime.Date]()
            for timestamp0 in timestampListContainer {
                if let timestamp0 = timestamp0 {
                    timestampListDecoded0?.append(timestamp0)
                }
            }
        }
        timestampList = timestampListDecoded0
        let enumListContainer = try containerValues.decodeIfPresent([RestJsonClientTypes.FooEnum?].self, forKey: .enumList)
        var enumListDecoded0:[RestJsonClientTypes.FooEnum]? = nil
        if let enumListContainer = enumListContainer {
            enumListDecoded0 = [RestJsonClientTypes.FooEnum]()
            for enum0 in enumListContainer {
                if let enum0 = enum0 {
                    enumListDecoded0?.append(enum0)
                }
            }
        }
        enumList = enumListDecoded0
        let intEnumListContainer = try containerValues.decodeIfPresent([IntegerEnum?].self, forKey: .intEnumList)
        var intEnumListDecoded0:[IntegerEnum]? = nil
        if let intEnumListContainer = intEnumListContainer {
            intEnumListDecoded0 = [IntegerEnum]()
            for int_enum0 in intEnumListContainer {
                if let int_enum0 = int_enum0 {
                    intEnumListDecoded0?.append(int_enum0)
                }
            }
        }
        intEnumList = intEnumListDecoded0
        let nestedStringListContainer = try containerValues.decodeIfPresent([[Swift.String?]?].self, forKey: .nestedStringList)
        var nestedStringListDecoded0:[[Swift.String]]? = nil
        if let nestedStringListContainer = nestedStringListContainer {
            nestedStringListDecoded0 = [[Swift.String]]()
            for list0 in nestedStringListContainer {
                var list0Decoded0: [Swift.String]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [Swift.String]()
                    for string1 in list0 {
                        if let string1 = string1 {
                            list0Decoded0?.append(string1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    nestedStringListDecoded0?.append(list0Decoded0)
                }
            }
        }
        nestedStringList = nestedStringListDecoded0
        let structureListContainer = try containerValues.decodeIfPresent([RestJsonClientTypes.StructureListMember?].self, forKey: .structureList)
        var structureListDecoded0:[RestJsonClientTypes.StructureListMember]? = nil
        if let structureListContainer = structureListContainer {
            structureListDecoded0 = [RestJsonClientTypes.StructureListMember]()
            for structure0 in structureListContainer {
                if let structure0 = structure0 {
                    structureListDecoded0?.append(structure0)
                }
            }
        }
        structureList = structureListDecoded0
    }
}
