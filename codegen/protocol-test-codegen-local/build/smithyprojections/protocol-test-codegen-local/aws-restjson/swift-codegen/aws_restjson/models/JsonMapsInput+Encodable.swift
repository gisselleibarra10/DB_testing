// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JsonMapsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case denseBooleanMap
        case denseNumberMap
        case denseSetMap
        case denseStringMap
        case denseStructMap
        case sparseBooleanMap
        case sparseNumberMap
        case sparseSetMap
        case sparseStringMap
        case sparseStructMap
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let denseBooleanMap = denseBooleanMap {
            var denseBooleanMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .denseBooleanMap)
            for (dictKey0, densebooleanmap0) in denseBooleanMap {
                try denseBooleanMapContainer.encode(densebooleanmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let denseNumberMap = denseNumberMap {
            var denseNumberMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .denseNumberMap)
            for (dictKey0, densenumbermap0) in denseNumberMap {
                try denseNumberMapContainer.encode(densenumbermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let denseSetMap = denseSetMap {
            var denseSetMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .denseSetMap)
            for (dictKey0, densesetmap0) in denseSetMap {
                try denseSetMapContainer.encode(densesetmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let denseStringMap = denseStringMap {
            var denseStringMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .denseStringMap)
            for (dictKey0, densestringmap0) in denseStringMap {
                try denseStringMapContainer.encode(densestringmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let denseStructMap = denseStructMap {
            var denseStructMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .denseStructMap)
            for (dictKey0, densestructmap0) in denseStructMap {
                try denseStructMapContainer.encode(densestructmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let sparseBooleanMap = sparseBooleanMap {
            var sparseBooleanMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .sparseBooleanMap)
            for (dictKey0, sparsebooleanmap0) in sparseBooleanMap {
                try sparseBooleanMapContainer.encode(sparsebooleanmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let sparseNumberMap = sparseNumberMap {
            var sparseNumberMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .sparseNumberMap)
            for (dictKey0, sparsenumbermap0) in sparseNumberMap {
                try sparseNumberMapContainer.encode(sparsenumbermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let sparseSetMap = sparseSetMap {
            var sparseSetMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .sparseSetMap)
            for (dictKey0, sparsesetmap0) in sparseSetMap {
                try sparseSetMapContainer.encode(sparsesetmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let sparseStringMap = sparseStringMap {
            var sparseStringMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .sparseStringMap)
            for (dictKey0, sparsestringmap0) in sparseStringMap {
                try sparseStringMapContainer.encode(sparsestringmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let sparseStructMap = sparseStructMap {
            var sparseStructMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .sparseStructMap)
            for (dictKey0, sparsestructmap0) in sparseStructMap {
                try sparseStructMapContainer.encode(sparsestructmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
