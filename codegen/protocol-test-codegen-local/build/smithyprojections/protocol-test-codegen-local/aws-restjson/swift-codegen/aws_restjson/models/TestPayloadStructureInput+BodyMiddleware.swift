// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct TestPayloadStructureInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestPayloadStructureInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestPayloadStructureInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<TestPayloadStructureOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        do {
            let encoder = context.getEncoder()
            if let payloadConfig = input.operationInput.payloadConfig {
                let payloadConfigdata = try encoder.encode(payloadConfig)
                let payloadConfigbody = ClientRuntime.HttpBody.data(payloadConfigdata)
                input.builder.withBody(payloadConfigbody)
            } else {
                if encoder is JSONEncoder {
                    // Encode an empty body as an empty structure in JSON
                    let payloadConfigdata = "{}".data(using: .utf8)!
                    let payloadConfigbody = ClientRuntime.HttpBody.data(payloadConfigdata)
                    input.builder.withBody(payloadConfigbody)
                }
            }
        } catch let err {
            throw SdkError<TestPayloadStructureOutputError>.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription))
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestPayloadStructureInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestPayloadStructureOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}
