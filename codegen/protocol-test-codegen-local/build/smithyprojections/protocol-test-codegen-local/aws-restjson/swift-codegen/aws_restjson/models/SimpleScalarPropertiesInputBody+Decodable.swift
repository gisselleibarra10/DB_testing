// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SimpleScalarPropertiesInputBody: Swift.Equatable {
    let stringValue: Swift.String?
    let trueBooleanValue: Swift.Bool?
    let falseBooleanValue: Swift.Bool?
    let byteValue: Swift.Int8?
    let shortValue: Swift.Int16?
    let integerValue: Swift.Int?
    let longValue: Swift.Int?
    let floatValue: Swift.Float?
    let doubleValue: Swift.Double?
}

extension SimpleScalarPropertiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case byteValue
        case doubleValue = "DoubleDribble"
        case falseBooleanValue
        case floatValue
        case integerValue
        case longValue
        case shortValue
        case stringValue
        case trueBooleanValue
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stringValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stringValue)
        stringValue = stringValueDecoded
        let trueBooleanValueDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .trueBooleanValue)
        trueBooleanValue = trueBooleanValueDecoded
        let falseBooleanValueDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .falseBooleanValue)
        falseBooleanValue = falseBooleanValueDecoded
        let byteValueDecoded = try containerValues.decodeIfPresent(Swift.Int8.self, forKey: .byteValue)
        byteValue = byteValueDecoded
        let shortValueDecoded = try containerValues.decodeIfPresent(Swift.Int16.self, forKey: .shortValue)
        shortValue = shortValueDecoded
        let integerValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .integerValue)
        integerValue = integerValueDecoded
        let longValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .longValue)
        longValue = longValueDecoded
        let floatValueDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .floatValue)
        floatValue = floatValueDecoded
        let doubleValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .doubleValue)
        doubleValue = doubleValueDecoded
    }
}
