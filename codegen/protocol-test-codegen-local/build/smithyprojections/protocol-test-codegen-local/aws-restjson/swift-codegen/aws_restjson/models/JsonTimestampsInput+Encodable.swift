// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JsonTimestampsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dateTime
        case dateTimeOnTarget
        case epochSeconds
        case epochSecondsOnTarget
        case httpDate
        case httpDateOnTarget
        case normal
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dateTime = self.dateTime {
            try encodeContainer.encodeTimestamp(dateTime, format: .dateTime, forKey: .dateTime)
        }
        if let dateTimeOnTarget = self.dateTimeOnTarget {
            try encodeContainer.encodeTimestamp(dateTimeOnTarget, format: .dateTime, forKey: .dateTimeOnTarget)
        }
        if let epochSeconds = self.epochSeconds {
            try encodeContainer.encodeTimestamp(epochSeconds, format: .epochSeconds, forKey: .epochSeconds)
        }
        if let epochSecondsOnTarget = self.epochSecondsOnTarget {
            try encodeContainer.encodeTimestamp(epochSecondsOnTarget, format: .epochSeconds, forKey: .epochSecondsOnTarget)
        }
        if let httpDate = self.httpDate {
            try encodeContainer.encodeTimestamp(httpDate, format: .httpDate, forKey: .httpDate)
        }
        if let httpDateOnTarget = self.httpDateOnTarget {
            try encodeContainer.encodeTimestamp(httpDateOnTarget, format: .httpDate, forKey: .httpDateOnTarget)
        }
        if let normal = self.normal {
            try encodeContainer.encodeTimestamp(normal, format: .epochSeconds, forKey: .normal)
        }
    }
}
