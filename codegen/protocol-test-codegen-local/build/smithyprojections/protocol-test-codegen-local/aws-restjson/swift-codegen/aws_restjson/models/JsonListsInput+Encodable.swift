// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JsonListsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case booleanList
        case enumList
        case intEnumList
        case integerList
        case nestedStringList
        case sparseStringList
        case stringList
        case stringSet
        case structureList = "myStructureList"
        case timestampList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let booleanList = booleanList {
            var booleanListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .booleanList)
            for booleanlist0 in booleanList {
                try booleanListContainer.encode(booleanlist0)
            }
        }
        if let enumList = enumList {
            var enumListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .enumList)
            for fooenumlist0 in enumList {
                try enumListContainer.encode(fooenumlist0.rawValue)
            }
        }
        if let intEnumList = intEnumList {
            var intEnumListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .intEnumList)
            for integerenumlist0 in intEnumList {
                try intEnumListContainer.encode(integerenumlist0)
            }
        }
        if let integerList = integerList {
            var integerListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .integerList)
            for integerlist0 in integerList {
                try integerListContainer.encode(integerlist0)
            }
        }
        if let nestedStringList = nestedStringList {
            var nestedStringListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nestedStringList)
            for nestedstringlist0 in nestedStringList {
                var nestedstringlist0Container = nestedStringListContainer.nestedUnkeyedContainer()
                for stringlist1 in nestedstringlist0 {
                    try nestedstringlist0Container.encode(stringlist1)
                }
            }
        }
        if let sparseStringList = sparseStringList {
            var sparseStringListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sparseStringList)
            for sparsestringlist0 in sparseStringList {
                try sparseStringListContainer.encode(sparsestringlist0)
            }
        }
        if let stringList = stringList {
            var stringListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stringList)
            for stringlist0 in stringList {
                try stringListContainer.encode(stringlist0)
            }
        }
        if let stringSet = stringSet {
            var stringSetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stringSet)
            for stringset0 in stringSet {
                try stringSetContainer.encode(stringset0)
            }
        }
        if let structureList = structureList {
            var structureListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .structureList)
            for structurelist0 in structureList {
                try structureListContainer.encode(structurelist0)
            }
        }
        if let timestampList = timestampList {
            var timestampListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .timestampList)
            for timestamplist0 in timestampList {
                try timestampListContainer.encodeTimestamp(timestamplist0, format: .epochSeconds)
            }
        }
    }
}
