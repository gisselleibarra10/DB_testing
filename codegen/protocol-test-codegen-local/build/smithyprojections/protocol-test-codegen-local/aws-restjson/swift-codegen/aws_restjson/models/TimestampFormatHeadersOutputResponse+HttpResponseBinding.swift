// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TimestampFormatHeadersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let defaultFormatHeaderValue = httpResponse.headers.value(for: "X-defaultFormat") {
            self.defaultFormat = TimestampFormatter(format: .httpDate).date(from: defaultFormatHeaderValue)
        } else {
            self.defaultFormat = nil
        }
        if let memberDateTimeHeaderValue = httpResponse.headers.value(for: "X-memberDateTime") {
            self.memberDateTime = TimestampFormatter(format: .dateTime).date(from: memberDateTimeHeaderValue)
        } else {
            self.memberDateTime = nil
        }
        if let memberEpochSecondsHeaderValue = httpResponse.headers.value(for: "X-memberEpochSeconds") {
            self.memberEpochSeconds = TimestampFormatter(format: .epochSeconds).date(from: memberEpochSecondsHeaderValue)
        } else {
            self.memberEpochSeconds = nil
        }
        if let memberHttpDateHeaderValue = httpResponse.headers.value(for: "X-memberHttpDate") {
            self.memberHttpDate = TimestampFormatter(format: .httpDate).date(from: memberHttpDateHeaderValue)
        } else {
            self.memberHttpDate = nil
        }
        if let targetDateTimeHeaderValue = httpResponse.headers.value(for: "X-targetDateTime") {
            self.targetDateTime = TimestampFormatter(format: .dateTime).date(from: targetDateTimeHeaderValue)
        } else {
            self.targetDateTime = nil
        }
        if let targetEpochSecondsHeaderValue = httpResponse.headers.value(for: "X-targetEpochSeconds") {
            self.targetEpochSeconds = TimestampFormatter(format: .epochSeconds).date(from: targetEpochSecondsHeaderValue)
        } else {
            self.targetEpochSeconds = nil
        }
        if let targetHttpDateHeaderValue = httpResponse.headers.value(for: "X-targetHttpDate") {
            self.targetHttpDate = TimestampFormatter(format: .httpDate).date(from: targetHttpDateHeaderValue)
        } else {
            self.targetHttpDate = nil
        }
    }
}
