// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

/// A REST JSON service that sends JSON requests and responses.
public protocol RestJsonClientProtocol {
    /// This example uses all query string types.
    func allQueryStringTypes(input: AllQueryStringTypesInput) async throws -> AllQueryStringTypesOutputResponse
    /// This example uses fixed query string params and variable query string params. The fixed query string parameters and variable parameters must both be serialized (implementations may need to merge them together).
    func constantAndVariableQueryString(input: ConstantAndVariableQueryStringInput) async throws -> ConstantAndVariableQueryStringOutputResponse
    /// This example uses a constant query string parameters and a label. This simply tests that labels and query string parameters are compatible. The fixed query string parameter named "hello" should in no way conflict with the label, {hello}.
    func constantQueryString(input: ConstantQueryStringInput) async throws -> ConstantQueryStringOutputResponse
    /// This example serializes a document as part of the payload.
    func documentType(input: DocumentTypeInput) async throws -> DocumentTypeOutputResponse
    /// This example serializes a document as the entire HTTP payload.
    func documentTypeAsPayload(input: DocumentTypeAsPayloadInput) async throws -> DocumentTypeAsPayloadOutputResponse
    /// The example tests how requests and responses are serialized when there's no request or response payload because the operation has an empty input and empty output structure that reuses the same shape. While this should be rare, code generators must support this.
    func emptyInputAndEmptyOutput(input: EmptyInputAndEmptyOutputInput) async throws -> EmptyInputAndEmptyOutputOutputResponse
    func endpointOperation(input: EndpointOperationInput) async throws -> EndpointOperationOutputResponse
    func endpointWithHostLabelOperation(input: EndpointWithHostLabelOperationInput) async throws -> EndpointWithHostLabelOperationOutputResponse
    /// This operation has four possible return values:
    ///
    /// * A successful response in the form of GreetingWithErrorsOutput
    ///
    /// * An InvalidGreeting error.
    ///
    /// * A BadRequest error.
    ///
    /// * A FooError.
    ///
    ///
    /// Implementations must be able to successfully take a response and properly (de)serialize successful and error responses based on the the presence of the
    func greetingWithErrors(input: GreetingWithErrorsInput) async throws -> GreetingWithErrorsOutputResponse
    func hostWithPathOperation(input: HostWithPathOperationInput) async throws -> HostWithPathOperationOutputResponse
    /// This example tests httpChecksumRequired trait
    func httpChecksumRequired(input: HttpChecksumRequiredInput) async throws -> HttpChecksumRequiredOutputResponse
    func httpEnumPayload(input: HttpEnumPayloadInput) async throws -> HttpEnumPayloadOutputResponse
    /// This examples serializes a blob shape in the payload. In this example, no JSON document is synthesized because the payload is not a structure or a union type.
    func httpPayloadTraits(input: HttpPayloadTraitsInput) async throws -> HttpPayloadTraitsOutputResponse
    /// This examples uses a @mediaType trait on the payload to force a custom content-type to be serialized.
    func httpPayloadTraitsWithMediaType(input: HttpPayloadTraitsWithMediaTypeInput) async throws -> HttpPayloadTraitsWithMediaTypeOutputResponse
    /// This examples serializes a structure in the payload. Note that serializing a structure changes the wrapper element name to match the targeted structure.
    func httpPayloadWithStructure(input: HttpPayloadWithStructureInput) async throws -> HttpPayloadWithStructureOutputResponse
    /// This examples adds headers to the input of a request and response by prefix.
    func httpPrefixHeaders(input: HttpPrefixHeadersInput) async throws -> HttpPrefixHeadersOutputResponse
    /// Clients that perform this test extract all headers from the response.
    func httpPrefixHeadersInResponse(input: HttpPrefixHeadersInResponseInput) async throws -> HttpPrefixHeadersInResponseOutputResponse
    func httpRequestWithFloatLabels(input: HttpRequestWithFloatLabelsInput) async throws -> HttpRequestWithFloatLabelsOutputResponse
    func httpRequestWithGreedyLabelInPath(input: HttpRequestWithGreedyLabelInPathInput) async throws -> HttpRequestWithGreedyLabelInPathOutputResponse
    /// The example tests how requests are serialized when there's no input payload but there are HTTP labels.
    func httpRequestWithLabels(input: HttpRequestWithLabelsInput) async throws -> HttpRequestWithLabelsOutputResponse
    /// The example tests how requests serialize different timestamp formats in the URI path.
    func httpRequestWithLabelsAndTimestampFormat(input: HttpRequestWithLabelsAndTimestampFormatInput) async throws -> HttpRequestWithLabelsAndTimestampFormatOutputResponse
    func httpRequestWithRegexLiteral(input: HttpRequestWithRegexLiteralInput) async throws -> HttpRequestWithRegexLiteralOutputResponse
    func httpResponseCode(input: HttpResponseCodeInput) async throws -> HttpResponseCodeOutputResponse
    func httpStringPayload(input: HttpStringPayloadInput) async throws -> HttpStringPayloadOutputResponse
    /// This example ensures that query string bound request parameters are serialized in the body of responses if the structure is used in both the request and response.
    func ignoreQueryParamsInResponse(input: IgnoreQueryParamsInResponseInput) async throws -> IgnoreQueryParamsInResponseOutputResponse
    /// The example tests how requests and responses are serialized when there is no input or output payload but there are HTTP header bindings.
    func inputAndOutputWithHeaders(input: InputAndOutputWithHeadersInput) async throws -> InputAndOutputWithHeadersOutputResponse
    /// Blobs are base64 encoded
    func jsonBlobs(input: JsonBlobsInput) async throws -> JsonBlobsOutputResponse
    /// This example serializes enums as top level properties, in lists, sets, and maps.
    func jsonEnums(input: JsonEnumsInput) async throws -> JsonEnumsOutputResponse
    /// This example serializes intEnums as top level properties, in lists, sets, and maps.
    func jsonIntEnums(input: JsonIntEnumsInput) async throws -> JsonIntEnumsOutputResponse
    /// This test case serializes JSON lists for the following cases for both input and output:
    ///
    /// * Normal JSON lists.
    ///
    /// * Normal JSON sets.
    ///
    /// * JSON lists of lists.
    ///
    /// * Lists of structures.
    func jsonLists(input: JsonListsInput) async throws -> JsonListsOutputResponse
    /// The example tests basic map serialization.
    func jsonMaps(input: JsonMapsInput) async throws -> JsonMapsOutputResponse
    /// This tests how timestamps are serialized, including using the default format of date-time and various @timestampFormat trait values.
    func jsonTimestamps(input: JsonTimestampsInput) async throws -> JsonTimestampsOutputResponse
    /// This operation uses unions for inputs and outputs.
    func jsonUnions(input: JsonUnionsInput) async throws -> JsonUnionsOutputResponse
    func malformedAcceptWithBody(input: MalformedAcceptWithBodyInput) async throws -> MalformedAcceptWithBodyOutputResponse
    func malformedAcceptWithGenericString(input: MalformedAcceptWithGenericStringInput) async throws -> MalformedAcceptWithGenericStringOutputResponse
    func malformedAcceptWithPayload(input: MalformedAcceptWithPayloadInput) async throws -> MalformedAcceptWithPayloadOutputResponse
    func malformedBlob(input: MalformedBlobInput) async throws -> MalformedBlobOutputResponse
    func malformedBoolean(input: MalformedBooleanInput) async throws -> MalformedBooleanOutputResponse
    func malformedByte(input: MalformedByteInput) async throws -> MalformedByteOutputResponse
    func malformedContentTypeWithBody(input: MalformedContentTypeWithBodyInput) async throws -> MalformedContentTypeWithBodyOutputResponse
    func malformedContentTypeWithGenericString(input: MalformedContentTypeWithGenericStringInput) async throws -> MalformedContentTypeWithGenericStringOutputResponse
    func malformedContentTypeWithoutBody(input: MalformedContentTypeWithoutBodyInput) async throws -> MalformedContentTypeWithoutBodyOutputResponse
    func malformedContentTypeWithPayload(input: MalformedContentTypeWithPayloadInput) async throws -> MalformedContentTypeWithPayloadOutputResponse
    func malformedDouble(input: MalformedDoubleInput) async throws -> MalformedDoubleOutputResponse
    func malformedFloat(input: MalformedFloatInput) async throws -> MalformedFloatOutputResponse
    func malformedInteger(input: MalformedIntegerInput) async throws -> MalformedIntegerOutputResponse
    func malformedList(input: MalformedListInput) async throws -> MalformedListOutputResponse
    func malformedLong(input: MalformedLongInput) async throws -> MalformedLongOutputResponse
    func malformedMap(input: MalformedMapInput) async throws -> MalformedMapOutputResponse
    func malformedRequestBody(input: MalformedRequestBodyInput) async throws -> MalformedRequestBodyOutputResponse
    func malformedShort(input: MalformedShortInput) async throws -> MalformedShortOutputResponse
    func malformedString(input: MalformedStringInput) async throws -> MalformedStringOutputResponse
    func malformedTimestampBodyDateTime(input: MalformedTimestampBodyDateTimeInput) async throws -> MalformedTimestampBodyDateTimeOutputResponse
    func malformedTimestampBodyDefault(input: MalformedTimestampBodyDefaultInput) async throws -> MalformedTimestampBodyDefaultOutputResponse
    func malformedTimestampBodyHttpDate(input: MalformedTimestampBodyHttpDateInput) async throws -> MalformedTimestampBodyHttpDateOutputResponse
    func malformedTimestampHeaderDateTime(input: MalformedTimestampHeaderDateTimeInput) async throws -> MalformedTimestampHeaderDateTimeOutputResponse
    func malformedTimestampHeaderDefault(input: MalformedTimestampHeaderDefaultInput) async throws -> MalformedTimestampHeaderDefaultOutputResponse
    func malformedTimestampHeaderEpoch(input: MalformedTimestampHeaderEpochInput) async throws -> MalformedTimestampHeaderEpochOutputResponse
    func malformedTimestampPathDefault(input: MalformedTimestampPathDefaultInput) async throws -> MalformedTimestampPathDefaultOutputResponse
    func malformedTimestampPathEpoch(input: MalformedTimestampPathEpochInput) async throws -> MalformedTimestampPathEpochOutputResponse
    func malformedTimestampPathHttpDate(input: MalformedTimestampPathHttpDateInput) async throws -> MalformedTimestampPathHttpDateOutputResponse
    func malformedTimestampQueryDefault(input: MalformedTimestampQueryDefaultInput) async throws -> MalformedTimestampQueryDefaultOutputResponse
    func malformedTimestampQueryEpoch(input: MalformedTimestampQueryEpochInput) async throws -> MalformedTimestampQueryEpochOutputResponse
    func malformedTimestampQueryHttpDate(input: MalformedTimestampQueryHttpDateInput) async throws -> MalformedTimestampQueryHttpDateOutputResponse
    func malformedUnion(input: MalformedUnionInput) async throws -> MalformedUnionOutputResponse
    /// This example ensures that mediaType strings are base64 encoded in headers.
    func mediaTypeHeader(input: MediaTypeHeaderInput) async throws -> MediaTypeHeaderOutputResponse
    /// The example tests how requests and responses are serialized when there's no request or response payload because the operation has no input or output. While this should be rare, code generators must support this.
    func noInputAndNoOutput(input: NoInputAndNoOutputInput) async throws -> NoInputAndNoOutputOutputResponse
    /// The example tests how requests and responses are serialized when there's no request or response payload because the operation has no input and the output is empty. While this should be rare, code generators must support this.
    func noInputAndOutput(input: NoInputAndOutputInput) async throws -> NoInputAndOutputOutputResponse
    /// Null and empty headers are not sent over the wire.
    func nullAndEmptyHeadersClient(input: NullAndEmptyHeadersClientInput) async throws -> NullAndEmptyHeadersClientOutputResponse
    /// Null and empty headers are not sent over the wire.
    func nullAndEmptyHeadersServer(input: NullAndEmptyHeadersServerInput) async throws -> NullAndEmptyHeadersServerOutputResponse
    /// Omits null, but serializes empty string value.
    func omitsNullSerializesEmptyString(input: OmitsNullSerializesEmptyStringInput) async throws -> OmitsNullSerializesEmptyStringOutputResponse
    /// This operation defines a union with a Unit member.
    func postPlayerAction(input: PostPlayerActionInput) async throws -> PostPlayerActionOutputResponse
    /// This operation defines a union that uses jsonName on some members.
    func postUnionWithJsonName(input: PostUnionWithJsonNameInput) async throws -> PostUnionWithJsonNameOutputResponse
    /// Automatically adds idempotency tokens.
    func queryIdempotencyTokenAutoFill(input: QueryIdempotencyTokenAutoFillInput) async throws -> QueryIdempotencyTokenAutoFillOutputResponse
    func queryParamsAsStringListMap(input: QueryParamsAsStringListMapInput) async throws -> QueryParamsAsStringListMapOutputResponse
    func queryPrecedence(input: QueryPrecedenceInput) async throws -> QueryPrecedenceOutputResponse
    /// Recursive shapes
    func recursiveShapes(input: RecursiveShapesInput) async throws -> RecursiveShapesOutputResponse
    func simpleScalarProperties(input: SimpleScalarPropertiesInput) async throws -> SimpleScalarPropertiesOutputResponse
    /// This examples serializes a streaming blob shape in the request body. In this example, no JSON document is synthesized because the payload is not a structure or a union type.
    func streamingTraits(input: StreamingTraitsInput) async throws -> StreamingTraitsOutputResponse
    /// This examples serializes a streaming blob shape with a required content length in the request body. In this example, no JSON document is synthesized because the payload is not a structure or a union type.
    func streamingTraitsRequireLength(input: StreamingTraitsRequireLengthInput) async throws -> StreamingTraitsRequireLengthOutputResponse
    /// This examples serializes a streaming media-typed blob shape in the request body. This examples uses a @mediaType trait on the payload to force a custom content-type to be serialized.
    func streamingTraitsWithMediaType(input: StreamingTraitsWithMediaTypeInput) async throws -> StreamingTraitsWithMediaTypeOutputResponse
    /// This example operation serializes a structure in the HTTP body. It should ensure Content-Type: application/json is used in all requests and that an "empty" body is an empty JSON document ({}).
    func testBodyStructure(input: TestBodyStructureInput) async throws -> TestBodyStructureOutputResponse
    /// This example operation serializes a request without an HTTP body. These tests are to ensure we do not attach a body or related headers (Content-Length, Content-Type) to operations that semantically cannot produce an HTTP body.
    func testNoPayload(input: TestNoPayloadInput) async throws -> TestNoPayloadOutputResponse
    /// This example operation serializes a payload targeting a blob. The Blob shape is not structured content and we cannot make assumptions about what data will be sent. This test ensures only a generic "Content-Type: application/octet-stream" header is used, and that we are not treating an empty body as an empty JSON document.
    func testPayloadBlob(input: TestPayloadBlobInput) async throws -> TestPayloadBlobOutputResponse
    /// This example operation serializes a payload targeting a structure. This enforces the same requirements as TestBodyStructure but with the body specified by the @httpPayload trait.
    func testPayloadStructure(input: TestPayloadStructureInput) async throws -> TestPayloadStructureOutputResponse
    /// This example tests how timestamp request and response headers are serialized.
    func timestampFormatHeaders(input: TimestampFormatHeadersInput) async throws -> TimestampFormatHeadersOutputResponse
    /// This test is similar to NoInputAndNoOutput, but uses explicit Unit types.
    func unitInputAndOutput(input: UnitInputAndOutputInput) async throws -> UnitInputAndOutputOutputResponse
}

public protocol RestJsonClientConfigurationProtocol : AWSClientRuntime.AWSClientConfiguration {
    var endpointResolver: EndpointResolver { get }
}

public enum RestJsonClientTypes {}
