// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InputAndOutputWithHeadersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let headerBooleanListHeaderValue = httpResponse.headers.value(for: "X-BooleanList") {
            if let headerBooleanListHeaderValues = try splitHeaderListValues(headerBooleanListHeaderValue) {
                self.headerBooleanList = try headerBooleanListHeaderValues.map {
                    guard let headerBooleanListTransformed = Swift.Bool($0) else {
                        throw ClientRuntime.ClientError.deserializationFailed(HeaderDeserializationError.invalidBooleanHeaderList(value: headerBooleanListHeaderValue))
                    }
                    return headerBooleanListTransformed
                }
            } else {
                self.headerBooleanList = nil
            }
        } else {
            self.headerBooleanList = nil
        }
        if let headerByteHeaderValue = httpResponse.headers.value(for: "X-Byte") {
            self.headerByte = Swift.Int8(headerByteHeaderValue) ?? 0
        } else {
            self.headerByte = nil
        }
        if let headerDoubleHeaderValue = httpResponse.headers.value(for: "X-Double") {
            self.headerDouble = Swift.Double(headerDoubleHeaderValue) ?? 0
        } else {
            self.headerDouble = nil
        }
        if let headerEnumHeaderValue = httpResponse.headers.value(for: "X-Enum") {
            self.headerEnum = RestJsonClientTypes.FooEnum(rawValue: headerEnumHeaderValue)
        } else {
            self.headerEnum = nil
        }
        if let headerEnumListHeaderValue = httpResponse.headers.value(for: "X-EnumList") {
            if let headerEnumListHeaderValues = try splitHeaderListValues(headerEnumListHeaderValue) {
                self.headerEnumList = headerEnumListHeaderValues.map { (RestJsonClientTypes.FooEnum(rawValue: $0) ?? RestJsonClientTypes.FooEnum(rawValue: "Bar")!) }
            } else {
                self.headerEnumList = nil
            }
        } else {
            self.headerEnumList = nil
        }
        if let headerFalseBoolHeaderValue = httpResponse.headers.value(for: "X-Boolean2") {
            self.headerFalseBool = Swift.Bool(headerFalseBoolHeaderValue) ?? false
        } else {
            self.headerFalseBool = nil
        }
        if let headerFloatHeaderValue = httpResponse.headers.value(for: "X-Float") {
            self.headerFloat = Swift.Float(headerFloatHeaderValue) ?? 0
        } else {
            self.headerFloat = nil
        }
        if let headerIntegerHeaderValue = httpResponse.headers.value(for: "X-Integer") {
            self.headerInteger = Swift.Int(headerIntegerHeaderValue) ?? 0
        } else {
            self.headerInteger = nil
        }
        if let headerIntegerEnumHeaderValue = httpResponse.headers.value(for: "X-IntegerEnum") {
            self.headerIntegerEnum = IntegerEnum(rawValue: Swift.Int(headerIntegerEnumHeaderValue) ?? 0)
        } else {
            self.headerIntegerEnum = nil
        }
        if let headerIntegerEnumListHeaderValue = httpResponse.headers.value(for: "X-IntegerEnumList") {
            if let headerIntegerEnumListHeaderValues = try splitHeaderListValues(headerIntegerEnumListHeaderValue) {
                self.headerIntegerEnumList = try headerIntegerEnumListHeaderValues.map {
                    guard let headerIntegerEnumListTransformed = Swift.Int($0).map({ intValue in IntegerEnum(rawValue: intValue) }) else {
                        throw ClientRuntime.ClientError.deserializationFailed(HeaderDeserializationError.invalidNumbersHeaderList(value: headerIntegerEnumListHeaderValue))
                    }
                    return headerIntegerEnumListTransformed
                }
            } else {
                self.headerIntegerEnumList = nil
            }
        } else {
            self.headerIntegerEnumList = nil
        }
        if let headerIntegerListHeaderValue = httpResponse.headers.value(for: "X-IntegerList") {
            if let headerIntegerListHeaderValues = try splitHeaderListValues(headerIntegerListHeaderValue) {
                self.headerIntegerList = try headerIntegerListHeaderValues.map {
                    guard let headerIntegerListTransformed = Swift.Int($0) else {
                        throw ClientRuntime.ClientError.deserializationFailed(HeaderDeserializationError.invalidNumbersHeaderList(value: headerIntegerListHeaderValue))
                    }
                    return headerIntegerListTransformed
                }
            } else {
                self.headerIntegerList = nil
            }
        } else {
            self.headerIntegerList = nil
        }
        if let headerLongHeaderValue = httpResponse.headers.value(for: "X-Long") {
            self.headerLong = Swift.Int(headerLongHeaderValue) ?? 0
        } else {
            self.headerLong = nil
        }
        if let headerShortHeaderValue = httpResponse.headers.value(for: "X-Short") {
            self.headerShort = Swift.Int16(headerShortHeaderValue) ?? 0
        } else {
            self.headerShort = nil
        }
        if let headerStringHeaderValue = httpResponse.headers.value(for: "X-String") {
            self.headerString = headerStringHeaderValue
        } else {
            self.headerString = nil
        }
        if let headerStringListHeaderValue = httpResponse.headers.value(for: "X-StringList") {
            if let headerStringListHeaderValues = try splitHeaderListValues(headerStringListHeaderValue) {
                self.headerStringList = headerStringListHeaderValues
            } else {
                self.headerStringList = nil
            }
        } else {
            self.headerStringList = nil
        }
        if let headerStringSetHeaderValue = httpResponse.headers.value(for: "X-StringSet") {
            if let headerStringSetHeaderValues = try splitHeaderListValues(headerStringSetHeaderValue) {
                self.headerStringSet = headerStringSetHeaderValues
            } else {
                self.headerStringSet = nil
            }
        } else {
            self.headerStringSet = nil
        }
        if let headerTimestampListHeaderValue = httpResponse.headers.value(for: "X-TimestampList") {
            if let headerTimestampListHeaderValues = try splitHttpDateHeaderListValues(headerTimestampListHeaderValue) {
                self.headerTimestampList = headerTimestampListHeaderValues.map { (TimestampFormatter(format: .httpDate).date(from: $0) ?? ClientRuntime.Date()) }
            } else {
                self.headerTimestampList = nil
            }
        } else {
            self.headerTimestampList = nil
        }
        if let headerTrueBoolHeaderValue = httpResponse.headers.value(for: "X-Boolean1") {
            self.headerTrueBool = Swift.Bool(headerTrueBoolHeaderValue) ?? false
        } else {
            self.headerTrueBool = nil
        }
    }
}
