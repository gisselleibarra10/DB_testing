// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct JsonIntEnumsInputBody: Swift.Equatable {
    let integerEnum1: IntegerEnum?
    let integerEnum2: IntegerEnum?
    let integerEnum3: IntegerEnum?
    let integerEnumList: [IntegerEnum]?
    let integerEnumSet: [IntegerEnum]?
    let integerEnumMap: [Swift.String:IntegerEnum]?
}

extension JsonIntEnumsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integerEnum1
        case integerEnum2
        case integerEnum3
        case integerEnumList
        case integerEnumMap
        case integerEnumSet
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let integerEnum1Decoded = try containerValues.decodeIfPresent(IntegerEnum.self, forKey: .integerEnum1)
        integerEnum1 = integerEnum1Decoded
        let integerEnum2Decoded = try containerValues.decodeIfPresent(IntegerEnum.self, forKey: .integerEnum2)
        integerEnum2 = integerEnum2Decoded
        let integerEnum3Decoded = try containerValues.decodeIfPresent(IntegerEnum.self, forKey: .integerEnum3)
        integerEnum3 = integerEnum3Decoded
        let integerEnumListContainer = try containerValues.decodeIfPresent([IntegerEnum?].self, forKey: .integerEnumList)
        var integerEnumListDecoded0:[IntegerEnum]? = nil
        if let integerEnumListContainer = integerEnumListContainer {
            integerEnumListDecoded0 = [IntegerEnum]()
            for int_enum0 in integerEnumListContainer {
                if let int_enum0 = int_enum0 {
                    integerEnumListDecoded0?.append(int_enum0)
                }
            }
        }
        integerEnumList = integerEnumListDecoded0
        let integerEnumSetContainer = try containerValues.decodeIfPresent([IntegerEnum?].self, forKey: .integerEnumSet)
        var integerEnumSetDecoded0:[IntegerEnum]? = nil
        if let integerEnumSetContainer = integerEnumSetContainer {
            integerEnumSetDecoded0 = [IntegerEnum]()
            for int_enum0 in integerEnumSetContainer {
                if let int_enum0 = int_enum0 {
                    integerEnumSetDecoded0?.append(int_enum0)
                }
            }
        }
        integerEnumSet = integerEnumSetDecoded0
        let integerEnumMapContainer = try containerValues.decodeIfPresent([Swift.String: IntegerEnum?].self, forKey: .integerEnumMap)
        var integerEnumMapDecoded0: [Swift.String:IntegerEnum]? = nil
        if let integerEnumMapContainer = integerEnumMapContainer {
            integerEnumMapDecoded0 = [Swift.String:IntegerEnum]()
            for (key0, integerenum0) in integerEnumMapContainer {
                if let integerenum0 = integerenum0 {
                    integerEnumMapDecoded0?[key0] = integerenum0
                }
            }
        }
        integerEnumMap = integerEnumMapDecoded0
    }
}
