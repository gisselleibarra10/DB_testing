// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JsonIntEnumsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integerEnum1
        case integerEnum2
        case integerEnum3
        case integerEnumList
        case integerEnumMap
        case integerEnumSet
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let integerEnum1 = self.integerEnum1 {
            try encodeContainer.encode(integerEnum1, forKey: .integerEnum1)
        }
        if let integerEnum2 = self.integerEnum2 {
            try encodeContainer.encode(integerEnum2, forKey: .integerEnum2)
        }
        if let integerEnum3 = self.integerEnum3 {
            try encodeContainer.encode(integerEnum3, forKey: .integerEnum3)
        }
        if let integerEnumList = integerEnumList {
            var integerEnumListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .integerEnumList)
            for integerenumlist0 in integerEnumList {
                try integerEnumListContainer.encode(integerenumlist0)
            }
        }
        if let integerEnumMap = integerEnumMap {
            var integerEnumMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .integerEnumMap)
            for (dictKey0, integerenummap0) in integerEnumMap {
                try integerEnumMapContainer.encode(integerenummap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let integerEnumSet = integerEnumSet {
            var integerEnumSetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .integerEnumSet)
            for integerenumset0 in integerEnumSet {
                try integerEnumSetContainer.encode(integerenumset0)
            }
        }
    }
}
