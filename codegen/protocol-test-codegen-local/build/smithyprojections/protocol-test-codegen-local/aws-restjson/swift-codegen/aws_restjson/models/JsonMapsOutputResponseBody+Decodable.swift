// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct JsonMapsOutputResponseBody: Swift.Equatable {
    let denseStructMap: [Swift.String:RestJsonClientTypes.GreetingStruct]?
    let sparseStructMap: [Swift.String:RestJsonClientTypes.GreetingStruct?]?
    let denseNumberMap: [Swift.String:Swift.Int]?
    let denseBooleanMap: [Swift.String:Swift.Bool]?
    let denseStringMap: [Swift.String:Swift.String]?
    let sparseNumberMap: [Swift.String:Swift.Int?]?
    let sparseBooleanMap: [Swift.String:Swift.Bool?]?
    let sparseStringMap: [Swift.String:Swift.String?]?
    let denseSetMap: [Swift.String:[Swift.String]]?
    let sparseSetMap: [Swift.String:[Swift.String]?]?
}

extension JsonMapsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case denseBooleanMap
        case denseNumberMap
        case denseSetMap
        case denseStringMap
        case denseStructMap
        case sparseBooleanMap
        case sparseNumberMap
        case sparseSetMap
        case sparseStringMap
        case sparseStructMap
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let denseStructMapContainer = try containerValues.decodeIfPresent([Swift.String: RestJsonClientTypes.GreetingStruct?].self, forKey: .denseStructMap)
        var denseStructMapDecoded0: [Swift.String:RestJsonClientTypes.GreetingStruct]? = nil
        if let denseStructMapContainer = denseStructMapContainer {
            denseStructMapDecoded0 = [Swift.String:RestJsonClientTypes.GreetingStruct]()
            for (key0, greetingstruct0) in denseStructMapContainer {
                if let greetingstruct0 = greetingstruct0 {
                    denseStructMapDecoded0?[key0] = greetingstruct0
                }
            }
        }
        denseStructMap = denseStructMapDecoded0
        let sparseStructMapContainer = try containerValues.decodeIfPresent([Swift.String: RestJsonClientTypes.GreetingStruct?].self, forKey: .sparseStructMap)
        var sparseStructMapDecoded0: [Swift.String:RestJsonClientTypes.GreetingStruct?]? = nil
        if let sparseStructMapContainer = sparseStructMapContainer {
            sparseStructMapDecoded0 = [Swift.String:RestJsonClientTypes.GreetingStruct?]()
            for (key0, greetingstruct0) in sparseStructMapContainer {
                sparseStructMapDecoded0?[key0] = greetingstruct0
            }
        }
        sparseStructMap = sparseStructMapDecoded0
        let denseNumberMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .denseNumberMap)
        var denseNumberMapDecoded0: [Swift.String:Swift.Int]? = nil
        if let denseNumberMapContainer = denseNumberMapContainer {
            denseNumberMapDecoded0 = [Swift.String:Swift.Int]()
            for (key0, integer0) in denseNumberMapContainer {
                if let integer0 = integer0 {
                    denseNumberMapDecoded0?[key0] = integer0
                }
            }
        }
        denseNumberMap = denseNumberMapDecoded0
        let denseBooleanMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Bool?].self, forKey: .denseBooleanMap)
        var denseBooleanMapDecoded0: [Swift.String:Swift.Bool]? = nil
        if let denseBooleanMapContainer = denseBooleanMapContainer {
            denseBooleanMapDecoded0 = [Swift.String:Swift.Bool]()
            for (key0, boolean0) in denseBooleanMapContainer {
                if let boolean0 = boolean0 {
                    denseBooleanMapDecoded0?[key0] = boolean0
                }
            }
        }
        denseBooleanMap = denseBooleanMapDecoded0
        let denseStringMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .denseStringMap)
        var denseStringMapDecoded0: [Swift.String:Swift.String]? = nil
        if let denseStringMapContainer = denseStringMapContainer {
            denseStringMapDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in denseStringMapContainer {
                if let string0 = string0 {
                    denseStringMapDecoded0?[key0] = string0
                }
            }
        }
        denseStringMap = denseStringMapDecoded0
        let sparseNumberMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .sparseNumberMap)
        var sparseNumberMapDecoded0: [Swift.String:Swift.Int?]? = nil
        if let sparseNumberMapContainer = sparseNumberMapContainer {
            sparseNumberMapDecoded0 = [Swift.String:Swift.Int?]()
            for (key0, integer0) in sparseNumberMapContainer {
                sparseNumberMapDecoded0?[key0] = integer0
            }
        }
        sparseNumberMap = sparseNumberMapDecoded0
        let sparseBooleanMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Bool?].self, forKey: .sparseBooleanMap)
        var sparseBooleanMapDecoded0: [Swift.String:Swift.Bool?]? = nil
        if let sparseBooleanMapContainer = sparseBooleanMapContainer {
            sparseBooleanMapDecoded0 = [Swift.String:Swift.Bool?]()
            for (key0, boolean0) in sparseBooleanMapContainer {
                sparseBooleanMapDecoded0?[key0] = boolean0
            }
        }
        sparseBooleanMap = sparseBooleanMapDecoded0
        let sparseStringMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .sparseStringMap)
        var sparseStringMapDecoded0: [Swift.String:Swift.String?]? = nil
        if let sparseStringMapContainer = sparseStringMapContainer {
            sparseStringMapDecoded0 = [Swift.String:Swift.String?]()
            for (key0, string0) in sparseStringMapContainer {
                sparseStringMapDecoded0?[key0] = string0
            }
        }
        sparseStringMap = sparseStringMapDecoded0
        let denseSetMapContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .denseSetMap)
        var denseSetMapDecoded0: [Swift.String:[Swift.String]]? = nil
        if let denseSetMapContainer = denseSetMapContainer {
            denseSetMapDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, stringset0) in denseSetMapContainer {
                var stringset0Decoded0: [Swift.String]? = nil
                if let stringset0 = stringset0 {
                    stringset0Decoded0 = [Swift.String]()
                    for string1 in stringset0 {
                        if let string1 = string1 {
                            stringset0Decoded0?.append(string1)
                        }
                    }
                }
                denseSetMapDecoded0?[key0] = stringset0Decoded0
            }
        }
        denseSetMap = denseSetMapDecoded0
        let sparseSetMapContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .sparseSetMap)
        var sparseSetMapDecoded0: [Swift.String:[Swift.String]?]? = nil
        if let sparseSetMapContainer = sparseSetMapContainer {
            sparseSetMapDecoded0 = [Swift.String:[Swift.String]?]()
            for (key0, stringset0) in sparseSetMapContainer {
                var stringset0Decoded0: [Swift.String]? = nil
                if let stringset0 = stringset0 {
                    stringset0Decoded0 = [Swift.String]()
                    for string1 in stringset0 {
                        if let string1 = string1 {
                            stringset0Decoded0?.append(string1)
                        }
                    }
                }
                sparseSetMapDecoded0?[key0] = stringset0Decoded0
            }
        }
        sparseSetMap = sparseSetMapDecoded0
    }
}
